This program is designed to test the Fpulib functions as follows:
- Select the function from the Function drop down list.
- Select where the source(s) parameter(s) is/are located from the source(s) drop down list(s).
- Select the destination where the result should be stored.

- For trigonometric functions, also select the radio button for the angle type.
- When using one of the constants as a parameter, also select the radio button for pi or e.
- When using an immediate value as a parameter, also select the radio button for the source of the immediate.
- With the FpuFLtoA function, also select the radio button for the regular or scientific notation.

- Insure your sources have adequate values in them and then click OK.

All OUTPUT to floating point destinations will be alphanumeric with 17 significant digits; scientific notation will be used only if the value exceeds 10^16. All OUTPUT to integer destinations will also be alphanumeric in the decimal system, except when a result is returned in EAX in binary format.

All input and output to the FPU and memory locations are also displayed as the hex bytes you would obtain by dumping those memory locations as big-endian. The edit controls where they are displayed are read-only. This may be useful primarily for visualizing how the floats may look like.

The INPUT for all floating point sources must be alphanumeric in either regular or scientific notation. The input for integer sources can be in the decimal or hexadecimal system. Hexadecimal numbers needs to be terminated with an H (or h); preceeding it with a 0 is not necessary but is allowed.

Floating point sources and integer sources in the decimal system must be preceded by a "-" sign for negative numbers. Integer sources in the hexadecimal system must NEVER be preceded by a "-" sign for signed negative numbers; they must instead contain all 8 (or 16) hex digits, the high bit of the most significant digit being set.

NOTES:

ALL input is first converted to its designated type and stored in memory (invalid input is indicated with a MessageBox). Data is then taken from those memory locations to perform the computation. The result is stored in a memory location according to the prescribed type and converted from there to display in the appropriate edit control. An error reported by the selected function is posted in the "txtbuf" edit control.

Using a REAL10 as input and a REAL4 as the destination of the result will definitely not give you exactly the same output string as if the destination is a REAL10. Only the first 7 or 8 digits would normally be the same unless the result is a relatively small integer (7 digits or less). A REAL8 result may have a difference in the 17th digit when compared to the same result stored as a REAL10.

Conversely, using more than 7 or 8 numerical digits as an input string for a REAL4 source will not provide any more precision to the computed result as compared to using extra digits as an input string for a REAL8 or REAL10.

Last revised May 2011 to fix broken option to use scientific notation for the result. Now also defaults to scientific notation when result is less than 1e-15. Also fixed the output for the FpuSinh function.