00000000004005bd <main>:
  ;elk hogere taal programma begint met een stackframe
  ;lokale variabelen worden hier gedeclareerd en bewaard. 
  4005bd:	55                   	push   rbp                                  ;waarde rbp bewaren en verder afblijven
  4005be:	48 89 e5             	mov    rbp,rsp                              ;bewaar stack pointer in rbp, en blijf er verder
                                                                                ;vanaf of we geraken nooit meer uit deze routine.
                                                                                ;gevolg is crash programma.
  4005c1:	53                   	push   rbx                                  ;bewaar rbx want die gaan we ook gebruiken
                                                                                ;registers genoeg maar is typisch C
  4005c2:	48 83 ec 28          	sub    rsp,0x28                             ;3 lokale variabelen
                                                                                ;elke is 8 bytes groot (64 bits dus)
  
  4005c6:	89 7d dc             	mov    DWORD PTR [rbp-0x24],edi             ;aantal commandline items (programmanaam plus key is 2)
  4005c9:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi             ;argv[0], pointer naar adres van onze key
  4005cd:	83 7d dc 02          	cmp    DWORD PTR [rbp-0x24],0x2             ;zijn er 2 opdrachten gegeven? (zijnde ./license_2 en een KEY)
  4005d1:	0f 85 8c 00 00 00    	jne    400663 <main+0xa6>                   ;indien geen KEY meegegeven, toon Usage string
  
  
  4005d7:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]             ;rax = adres van naar adres van de naam van dit programma
  4005db:	48 83 c0 08          	add    rax,0x8                              ;tel 8 bytes bij adres op, rax wijst nu naar het adres van KEY
  
  4005df:	48 8b 00             	mov    rax,QWORD PTR [rax]                  ;zet het eigenlijke start adres van KEY in rax
  4005e2:	48 89 c6             	mov    rsi,rax                              ;en in rsi
  4005e5:	bf 04 07 40 00       	mov    edi,0x400704                         ;tekst "Checking License: %s\n"                        
  4005ea:	b8 00 00 00 00       	mov    eax,0x0                              ;geen xmm registers (floating point)
  4005ef:	e8 ac fe ff ff       	call   4004a0 <printf@plt>                  ;print de tekst met de KEY
    ;C code 'int printf(const char *format, ...);'
    ;rax = 0 omdat er geen floating point registers meegegeven worden.
    ;rdi = adres naar de af te drukken string string
    ;rsi = adres van de KEY string die we gegeven hebben
    
  ;twee lokale variabelen worden hier geinitialiseerd op nu
  ;[rbp-0x18]   4 bytes groot (DWORD) : som variabele
  ;[rbp-0x14]   4 bytes groot (DWORD) : teller variabele voor de bij te houden hoeveel tekens we al hebben 'behandeld'
  
  4005f4:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [rbp-0x18],0x0             ;[rbp-0x18] = 0
  4005fb:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0             ;[rbp-0x14] = 0
  
  400602:	eb 20                	jmp    400624 <main+0x67>                   ;spring naar start van de lus
  ;aan de structuur te zien is dit een for next lus (als je dit veel ziet, weet je dat vanzelf)
  
  400604:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]             ;rax = adres van naar adres van de naam van dit programma             
  400608:	48 83 c0 08          	add    rax,0x8                              ;tel 8 bytes bij adres op, rax wijst nu naar het adres van KEY
  40060c:	48 8b 10             	mov    rdx,QWORD PTR [rax]                  ;zet het eigenlijke adres van key in rax
  40060f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]             ;haal loopcounter in eax
  400612:	48 98                	cdqe                                        ;converteer van dword naar qword
  400614:	48 01 d0             	add    rax,rdx                              ;tel start van KEY bij rax -> wijst naar volgende teken 
  400617:	0f b6 00             	movzx  eax,BYTE PTR [rax]                   ;zet waarde van teken in eax, met teken uitbreiding
  40061a:	0f be c0             	movsx  eax,al                               ;zet byte om in dword
  40061d:	01 45 e8             	add    DWORD PTR [rbp-0x18],eax             ;tel bij tussentijdse oplossing bij op
  400620:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1             ;incrementeer loopcounter met 1
  
  ;start van de lus.
  ;FOR tellervariabel = 0 tot ?
  400624:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]             ;teller variabele in rax
  400627:	48 63 d8             	movsxd rbx,eax                              ;zet in rbx
  40062a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]             ;adres naar commandline
  40062e:	48 83 c0 08          	add    rax,0x8                              ;adres naar KEY (op commandline)
  400632:	48 8b 00             	mov    rax,QWORD PTR [rax]                  ;lees adres van KEY in rax
  
  
  ;performance gezien is dit SLECHT.
  ;Elke keer als deze lus doorlopen wordt, wordt telkens de waarde van de lengte van onze key berekent.
  ;Beter is die 1 keer te berekenen (die verandert toch niet) en ergens te bewaren.  Dit is geen fout van
  ;de compiler maar van de programmeur (ni het machien maar het manneke)
  
  400635:	48 89 c7             	mov    rdi,rax                              ;start van key string in rdi
  400638:	e8 53 fe ff ff       	call   400490 <strlen@plt>                  ;rax is strlen(rdi)
    ;C code 'size_t strlen(const char *s);' bepaal string lengte van string op adres s, de lengte komt terug in rax'
  
  
  40063d:	48 39 c3             	cmp    rbx,rax                              ;alle karakters gelezen?
  400640:	72 c2                	jb     400604 <main+0x47>                   ;nope, naar adres 400604 voor volgende
  400642:	81 7d e8 94 03 00 00 	cmp    DWORD PTR [rbp-0x18],0x394           ;result = 0x394? (916)
  400649:	75 0c                	jne    400657 <main+0x9a>                   ;key is niet juist, jump naar adres 400657
  

; goede key, meedelen en sluiten  
  40064b:	bf 1a 07 40 00       	mov    edi,0x40071a                         ;tekst Access Granted
  400650:	e8 2b fe ff ff       	call   400480 <puts@plt>                    ;afdrukken
    ;C code 'int puts(const char *s) // print een string op locatie s die eindigt met 0x00'
    ; dus puts(0x40071A) => puts("Access Granted!\n");
  
  400655:	eb 16                	jmp    40066d <main+0xb0>                   ; programma beëindigen.
  
  
; slechte key, afdrukken en sluiten  
  400657:	bf 2a 07 40 00       	mov    edi,0x40072a                         ;tekst WRONG!
  40065c:	e8 1f fe ff ff       	call   400480 <puts@plt>                    ;afdrukken
    ;C code 'int puts(const char *s) // print een string op locatie s die eindigt met 0x00'
    ; dus puts(0x40072A) => puts("WRONG!\n\n");

  400661:	eb 0a                	jmp    40066d <main+0xb0>                   ;programma beëindigen.

; geen key, afdrukken en sluiten  
  Usage:
  400663:	bf 31 07 40 00       	mov    edi,0x400731                         ;tekst Usage: <key>
  400668:	e8 13 fe ff ff       	call   400480 <puts@plt>                    ;afdrukken
    ;C code 'int puts(const char *s) // print een string op locatie s die eindigt met 0x00'
    ; dus puts(0x40072A) => puts("Usage: <key>\n");
    
; programma beëindigen.
  40066d:	b8 00 00 00 00       	mov    eax,0x0                              ;return 0
  400672:	48 83 c4 28          	add    rsp,0x28
  400676:	5b                   	pop    rbx
  400677:	5d                   	pop    rbp
  400678:	c3                   	ret                                         ;return to _start function
