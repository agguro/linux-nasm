<HTML>
<HEAD>
<META NAME="Generator" CONTENT="Corel WordPerfect 8">
<TITLE>Simply FPU Appendix 1</TITLE>
</HEAD>
<BODY TEXT="#402000" LINK="#0000ff" VLINK="#0000ff" ALINK="#0000ff" BACKGROUND="fpufigs/bluewave.gif">

<CENTER><FONT SIZE="+3">SIMPLY  FPU</FONT>
<BR>by <B>Raymond Filiatreault</B><BR>
Copyright 2003</CENTER>
<P>
<CENTER><B>Appendix 1<BR>
Alphabetical list of FPU instructions</B></CENTER>

<pre>
<A HREF="fpuchap11.htm#f2xm1"><B>F2XM1</B></A>     2 to the X power minus 1

<A HREF="fpuchap8.htm#fabs"><B>FABS</B></A>      Absolute value of ST(0)

<A HREF="fpuchap8.htm#fadd"><B>FADD</B></A>      Add two floating point values

<A HREF="fpuchap8.htm#faddp"><B>FADDP</B></A>     Add two floating point values and pop ST(0)

<A HREF="fpuchap6.htm#fbld"><B>FBLD</B></A>      Load BCD data from memory

<A HREF="fpuchap6.htm#fbstp"><B>FBSTP</B></A>     Store BCD data to memory

<A HREF="fpuchap8.htm#fchs"><B>FCHS</B></A>      Change the sign of ST(0)

<A HREF="fpuchap3.htm#fclex"><B>FCLEX</B></A>     Clear exceptions

<A HREF="fpuchap4.htm#fcmov"><B>FCMOVcc</B></A>   Conditional move based on CPU flags

<A HREF="fpuchap7.htm#fcom"><B>FCOM</B></A>      Compare ST(0) to a floating point value

<A HREF="fpuchap7.htm#fcomi"><B>FCOMI</B></A>     Compare ST(0) to ST(i) and set CPU flags

<A HREF="fpuchap7.htm#fcomip"><B>FCOMIP</B></A>    Compare ST(0) to ST(i) and set CPU flags and pop ST(0)

<A HREF="fpuchap7.htm#fcomp"><B>FCOMP</B></A>     Compare ST(0) to a floating point value and pop ST(0)

<A HREF="fpuchap7.htm#fcompp"><B>FCOMPP</B></A>    Compare ST(0) to ST(1) and pop both registers

<A HREF="fpuchap10.htm#fcos"><B>FCOS</B></A>      Cosine of the angle value in ST(0)

<A HREF="fpuchap3.htm#fdecstp"><B>FDECSTP</B></A>   Decrease stack pointer

<A HREF="fpuchap8.htm#fdiv"><B>FDIV</B></A>      Divide two floating point values

<A HREF="fpuchap8.htm#fdivp"><B>FDIVP</B></A>     Divide two floating point values and pop ST(0)

<A HREF="fpuchap8.htm#fdivr"><B>FDIVR</B></A>     Divide in reverse two floating point values

<A HREF="fpuchap8.htm#fdivrp"><B>FDIVRP</B></A>    Divide in reverse two floating point values and pop ST(0)

<A HREF="fpuchap3.htm#ffree"><B>FFREE</B></A>     Free a data register

<A HREF="fpuchap9.htm#fiadd"><B>FIADD</B></A>     Add an Integer located in memory to ST(0)

<A HREF="fpuchap7.htm#ficom"><B>FICOM</B></A>     Compare ST(0) to an integer value

<A HREF="fpuchap7.htm#ficomp"><B>FICOMP</B></A>    Compare ST(0) to an integer value and pop ST(0)

<A HREF="fpuchap9.htm#fidiv"><B>FIDIV</B></A>     Divide ST(0) by an Integer located in memory

<A HREF="fpuchap9.htm#fidivr"><B>FIDIVR</B></A>    Divide an Integer located in memory by ST(0)

<A HREF="fpuchap5.htm#fild"><B>FILD</B></A>      Load integer from memory

<A HREF="fpuchap9.htm#fimul"><B>FIMUL</B></A>     Multiply ST(0) by an Integer located in memory

<A HREF="fpuchap3.htm#fincstp"><B>FINCSTP</B></A>   Increase stack pointer

<A HREF="fpuchap3.htm#finit"><B>FINIT</B></A>     Initialize the FPU

<A HREF="fpuchap5.htm#fist"><B>FIST</B></A>      Store integer to memory

<A HREF="fpuchap5.htm#fistp"><B>FISTP</B></A>     Store integer to memory and pop ST(0)

<A HREF="fpuchap5.htm#fisttp"><B>FISTTP</B></A>    Store truncated integer to memory and pop ST(0)

<A HREF="fpuchap9.htm#fisub"><B>FISUB</B></A>     Subtract an Integer located in memory from ST(0)

<A HREF="fpuchap9.htm#fisubr"><B>FISUBR</B></A>    Subtract ST(0) from an Integer located in memory

<A HREF="fpuchap4.htm#fld"><B>FLD</B></A>       Load real number

<A HREF="fpuchap4.htm#fld1"><B>FLD1</B></A>      Load the value of 1

<A HREF="fpuchap3.htm#fldcw"><B>FLDCW</B></A>     Load control word

<A HREF="fpuchap3.htm#fldenv"><B>FLDENV</B></A>    LoaD environment

<A HREF="fpuchap4.htm#fldl2e"><B>FLDL2E</B></A>    Load the log base 2 of <EM>e</EM> (Napierian constant)

<A HREF="fpuchap4.htm#fldl2t"><B>FLDL2T</B></A>    Load the log base 2 of Ten

<A HREF="fpuchap4.htm#fldlg2"><B>FLDLG2</B></A>    Load the log base 10 of 2 (common log of 2)

<A HREF="fpuchap4.htm#fldln2"><B>FLDLN2</B></A>    Load the log base <EM>e</EM> of 2 (natural log of 2)

<A HREF="fpuchap4.htm#fldpi"><B>FLDPI</B></A>     Load the value of PI

<A HREF="fpuchap4.htm#fldz"><B>FLDZ</B></A>      Load the value of Zero

<A HREF="fpuchap8.htm#fmul"><B>FMUL</B></A>      Multiply two floating point values

<A HREF="fpuchap8.htm#fmulp"><B>FMULP</B></A>     Multiply two floating point values and pop ST(0)

<A HREF="fpuchap3.htm#fclex"><B>FNCLEX</B></A>    Clear exceptions (no wait)

<A HREF="fpuchap3.htm#finit"><B>FNINIT</B></A>    Initialize the FPU (no wait)

<A HREF="fpuchap12.htm#fnop"><B>FNOP</B></A>      No operation

<A HREF="fpuchap3.htm#fsave"><B>FNSAVE</B></A>    Save state of FPU (no wait)

<A HREF="fpuchap3.htm#fstcw"><B>FNSTCW</B></A>    Store control word (no wait)

<A HREF="fpuchap3.htm#fstenv"><B>FNSTENV</B></A>   Store environment (no wait)

<A HREF="fpuchap3.htm#fstsw"><B>FNSTSW</B></A>    Store status word (no wait)

<A HREF="fpuchap10.htm#fpatan"><B>FPATAN</B></A>    Partial arctangent of the ratio ST(1)/ST(0)

<A HREF="fpuchap12.htm#fprem"><B>FPREM</B></A>     Partial remainder

<A HREF="fpuchap12.htm#fprem1"><B>FPREM1</B></A>    Partial remainder 1

<A HREF="fpuchap10.htm#fptan"><B>FPTAN</B></A>     Partial tangent of the angle value in ST(0)

<A HREF="fpuchap8.htm#frndint"><B>FRNDINT</B></A>   Round ST(0) to an integer

<A HREF="fpuchap3.htm#frstor"><B>FRSTOR</B></A>    Restore all registers

<A HREF="fpuchap3.htm#fsave"><B>FSAVE</B></A>     Save state of FPU

<A HREF="fpuchap11.htm#fscale"><B>FSCALE</B></A>    Scale ST(0) by ST(1)

<A HREF="fpuchap10.htm#fsin"><B>FSIN</B></A>      Sine of the angle value in ST(0)

<A HREF="fpuchap10.htm#fsincos"><B>FSINCOS</B></A>   Sine and cosine of the angle value in ST(0)

<A HREF="fpuchap8.htm#fsqrt"><B>FSQRT</B></A>     Square root of ST(0)

<A HREF="fpuchap4.htm#fst"><B>FST</B></A>       Store real number

<A HREF="fpuchap3.htm#fstcw"><B>FSTCW</B></A>     Store control word

<A HREF="fpuchap3.htm#fstenv"><B>FSTENV</B></A>    Store environment

<A HREF="fpuchap4.htm#fstp"><B>FSTP</B></A>      Store real number and pop ST(0)

<A HREF="fpuchap3.htm#fstsw"><B>FSTSW</B></A>     Store status word

<A HREF="fpuchap8.htm#fsub"><B>FSUB</B></A>      Subtract two floating point values

<A HREF="fpuchap8.htm#fsubp"><B>FSUBP</B></A>     Subtract two floating point values and pop ST(0)

<A HREF="fpuchap8.htm#fsubr"><B>FSUBR</B></A>     Subtract in reverse two floating point values

<A HREF="fpuchap8.htm#fsubrp"><B>FSUBRP</B></A>    Subtract in reverse two floating point values and Pop ST(0)

<A HREF="fpuchap7.htm#ftst"><B>FTST</B></A>      Test ST(0) by comparing it to +0.0

<A HREF="fpuchap7.htm#fucom"><B>FUCOM</B></A>     Unordered Compare ST(0) to a floating point value

<A HREF="fpuchap7.htm#fucomi"><B>FUCOMI</B></A>    Unordered Compare ST(0) to ST(i) and set CPU flags

<A HREF="fpuchap7.htm#fucomip"><B>FUCOMIP</B></A>   Unordered Compare ST(0) to ST(i) and set CPU flags and pop ST(0)

<A HREF="fpuchap7.htm#fucomp"><B>FUCOMP</B></A>    Unordered Compare ST(0) to a floating point value and pop ST(0)

<A HREF="fpuchap7.htm#fucompp"><B>FUCOMPP</B></A>   Unordered Compare ST(0) to ST(1) and pop both registers

<A HREF="fpuchap3.htm#fwait"><B>FWAIT</B></A>     Wait while FPU is busy

<A HREF="fpuchap7.htm#fxam"><B>FXAM</B></A>      Examine the content of ST(0)

<A HREF="fpuchap4.htm#fxch"><B>FXCH</B></A>      Exchange the top data register with another data register

<A HREF="fpuchap12.htm#fxtract"><B>FXTRACT</B></A>   Extract exponent and significand

<A HREF="fpuchap11.htm#fyl2x"><B>FYL2X</B></A>     Y*Log<SUB>2</SUB>X

<A HREF="fpuchap11.htm#fyl2xp1"><B>FYL2XP1</B></A>   Y*Log<SUB>2</SUB>(X+1)</pre>

<P><BR><CENTER><A HREF="index.html"><B>RETURN TO<B><BR><FONT SIZE="+2">SIMPLY  FPU</FONT>
<BR><B>CONTENTS<B></A></CENTER>
</BODY>
</HTML>
