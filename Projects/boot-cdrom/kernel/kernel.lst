     1                                  %include "../includes/startup.inc"
     2                              <1> %ifndef _ASM_BOOTCD_INC_
     3                              <1>      %define   _ASM_BOOTCD_INC_ 1
     4                              <1> 
     5                              <1>      %define   KERNELSTARTCS   0x0070   ; we load the kernel at 0070:0000 the I/O drivers from IO.SYS and IBMBIO.COM
     6                              <1>      %define   KERNELSTARTIP   0x0000   ; this gives us 0070:0000 - 07C0:0000 memory to use for kernel.bin
     7                              <1>      %define   PEMCS           0x3000
     8                              <1>      %define   PEMIP           0x0000
     9                              <1>      %define   PEMSS           0x7000
    10                              <1>      %define   PEMSP           0xFFFE
    11                              <1>      
    12                              <1> STRUC SPECIFICATION_PACKET_STRUC
    13 00000000 ??                  <1>      .packed_size:                 resb      1
    14 00000001 ??                  <1>      .boot_media_type:             resb      1
    15 00000002 ??                  <1>      .drive_number:                resb      1
    16 00000003 ??                  <1>      .controller_index:            resb      1
    17 00000004 ????????            <1>      .logical_block_address:       resd      1
    18 00000008 ????                <1>      .device_specification:        resw      1
    19 0000000A ????                <1>      .buffer_segment:              resw      1
    20 0000000C ????                <1>      .load_segment:                resw      1
    21 0000000E ????                <1>      .virtual_sectors:             resw      1
    22 00000010 ??                  <1>      .cylinder_count:              resb      1
    23 00000011 ??                  <1>      .sector_count:                resb      1
    24 00000012 ??                  <1>      .head_count:                  resb      1
    25                              <1> ENDSTRUC
    26                              <1> 
    27                              <1> %macro SPECIFICATION_PACKET 1
    28                              <1>      %1:  ISTRUC SPECIFICATION_PACKET_STRUC
    29                              <1>           at   SPECIFICATION_PACKET_STRUC.packed_size,                 db        0x13
    30                              <1>           at   SPECIFICATION_PACKET_STRUC.boot_media_type,             db        0
    31                              <1>           at   SPECIFICATION_PACKET_STRUC.drive_number,                db        0
    32                              <1>           at   SPECIFICATION_PACKET_STRUC.controller_index,            db        0
    33                              <1>           at   SPECIFICATION_PACKET_STRUC.logical_block_address,       dd        0
    34                              <1>           at   SPECIFICATION_PACKET_STRUC.device_specification,        dw        0
    35                              <1>           at   SPECIFICATION_PACKET_STRUC.buffer_segment,              dw        0
    36                              <1>           at   SPECIFICATION_PACKET_STRUC.load_segment,                dw        0
    37                              <1>           at   SPECIFICATION_PACKET_STRUC.virtual_sectors,             dw        0
    38                              <1>           at   SPECIFICATION_PACKET_STRUC.cylinder_count,              db        0
    39                              <1>           at   SPECIFICATION_PACKET_STRUC.sector_count,                db        0
    40                              <1>           at   SPECIFICATION_PACKET_STRUC.head_count,                  db        0
    41                              <1>      IEND
    42                              <1>      %define %1.packed_size                 %1+SPECIFICATION_PACKET_STRUC.packed_size
    43                              <1>      %define %1.boot_media_type             %1+SPECIFICATION_PACKET_STRUC.boot_media_type
    44                              <1>      %define %1.drive_number                %1+SPECIFICATION_PACKET_STRUC.drive_number
    45                              <1>      %define %1.controller_index            %1+SPECIFICATION_PACKET_STRUC.controller_index
    46                              <1>      %define %1.logical_block_address       %1+SPECIFICATION_PACKET_STRUC.logical_block_address
    47                              <1>      %define %1.device_specification        %1+SPECIFICATION_PACKET_STRUC.device_specification
    48                              <1>      %define %1.buffer_segment              %1+SPECIFICATION_PACKET_STRUC.buffer_segment
    49                              <1>      %define %1.load_segment                %1+SPECIFICATION_PACKET_STRUC.load_segment
    50                              <1>      %define %1.virtual_sectors             %1+SPECIFICATION_PACKET_STRUC.virtual_sectors
    51                              <1>      %define %1.cylinder_count              %1+SPECIFICATION_PACKET_STRUC.cylinder_count
    52                              <1>      %define %1.sector_count                %1+SPECIFICATION_PACKET_STRUC.sector_count
    53                              <1>      %define %1.head_count                  %1+SPECIFICATION_PACKET_STRUC.head_count
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> STRUC DISK_ADDRESS_PACKET_STRUC
    57 00000000 ??                  <1>      .size:                        resb      1
    58 00000001 ??                  <1>      .reserved:                    resb      1
    59 00000002 ????                <1>      .sectors_to_read:             resw      1
    60 00000004 ????                <1>      .offset:                      resw      1
    61 00000006 ????                <1>      .segment:                     resw      1
    62 00000008 ????????            <1>      .start_absolute_sector:       resd      1
    63 0000000C ????????            <1>      .transfer_buffer_address:     resd      1
    64                              <1> ENDSTRUC
    65                              <1> 
    66                              <1> %macro DISK_ADDRESS_PACKET 3
    67                              <1>      %1:  ISTRUC DISK_ADDRESS_PACKET_STRUC
    68                              <1>           at   DISK_ADDRESS_PACKET_STRUC.size,                        db        16
    69                              <1>           at   DISK_ADDRESS_PACKET_STRUC.reserved,                    db        0
    70                              <1>           at   DISK_ADDRESS_PACKET_STRUC.sectors_to_read,             dw        1
    71                              <1>           at   DISK_ADDRESS_PACKET_STRUC.offset,                      dw        %3
    72                              <1>           at   DISK_ADDRESS_PACKET_STRUC.segment,                     dw        %2
    73                              <1>           at   DISK_ADDRESS_PACKET_STRUC.start_absolute_sector,       dd        16
    74                              <1>           at   DISK_ADDRESS_PACKET_STRUC.transfer_buffer_address,     dd        0
    75                              <1>      IEND
    76                              <1>      %define %1.size                         %1+DISK_ADDRESS_PACKET_STRUC.size
    77                              <1>      %define %1.sectors_to_read              %1+DISK_ADDRESS_PACKET_STRUC.sectors_to_read
    78                              <1>      %define %1.offset                       %1+DISK_ADDRESS_PACKET_STRUC.offset
    79                              <1>      %define %1.segment                      %1+DISK_ADDRESS_PACKET_STRUC.segment
    80                              <1>      %define %1.start_absolute_sector        %1+DISK_ADDRESS_PACKET_STRUC.start_absolute_sector
    81                              <1>      %define %1.transfer_buffer_address      %1+DISK_ADDRESS_PACKET_STRUC.transfer_buffer_address
    82                              <1> %endmacro
    83                              <1> 
    84                              <1> %endif
     2                                  
     3                                       BITS 16
     4                                       
     5                                  os_main:
     6                                       ; initialisation of kernel
     7                                       ; cs, ds, es, fs, gs and ss points to same segment (where kernel is loaded)
     8                                       ; sp points to last word of stacksegment
     9 00000000 FC                           cld
    10 00000001 8CC8                         mov       ax, cs                   ; Set all segments to match where kernel is loaded
    11 00000003 8ED8                         mov       ds, ax                   
    12 00000005 8EC0                         mov       es, ax                   
    13 00000007 8EE0                         mov       fs, ax                   
    14 00000009 8EE8                         mov       gs, ax
    15 0000000B FA                           cli                                ; Clear interrupts
    16 0000000C 8ED0                         mov       ss, ax                   ; Set stack segment and pointer
    17 0000000E BCFEFF                       mov       sp, 0FFFEh
    18 00000011 FB                           sti                                ; Restore interrupts
    19 00000012 8816[7D00]                   mov       byte[bootdrive], dl      ; save boot drive letter
    20                                       
    21 00000016 B8024F                       mov       ax, 0x4F02
    22 00000019 BB0701                       mov       bx, 0x107              ; <-1280x1024 256 = 107h colors
    23 0000001C B8024F                       mov       ax,0x4F02
    24 0000001F CD10                         int       0x10
    25                                  
    26                                       ; print welcome screen
    27                                       ;mov       si, welcome
    28                                       ;call      Print
    29                                       
    30                                       ; load file from cd
    31 00000021 BE[8900]                     mov       si, pem2
    32 00000024 E8E701                       call      LoadFile     
    33 00000027 7205                         jc        NotFound                 ; file wasn't found, so not loaded and will not be executed
    34 00000029 E8D502                       call      Execute
    35 0000002C EB17                         jmp       Continue
    36                                       
    37                                  NotFound:
    38 0000002E 8B36[7E00]                   mov       si, [fileName]
    39 00000032 E8C801                       call      Print
    40 00000035 BE[A501]                     mov       si, notfound
    41 00000038 E8C201                       call      Print
    42 0000003B BE[B301]                     mov       si, pressAnyKey
    43 0000003E E8BC01                       call      Print
    44 00000041 30E4                         xor       ah, ah
    45 00000043 CD16                         int       0x16                                                   ; wait for key press
    46                                  
    47                                  Continue: 
    48                                  
    49                                  
    50                                       
    51                                  osloop:
    52                                  
    53 00000045 F4                           hlt
    54 00000046 EBFD                         jmp       osloop
    55                                          
    56 00000048 4D696E69204B65726E-     welcome:       db   'Mini Kernel example by Agguro - Version 1.0.0 Beta', 10, 13, 0
    56 00000051 656C206578616D706C-
    56 0000005A 652062792041676775-
    56 00000063 726F202D2056657273-
    56 0000006C 696F6E20312E302E30-
    56 00000075 20426574610A0D00   
    57 0000007D 00                      bootdrive:     db   0
    58 0000007E 0000                    fileName:      dw   0
    59 00000080 50454D312E42494E00      pem1:          db   'PEM1.BIN', 0
    60 00000089 50454D322E42494E00      pem2:          db   'PEM2.BIN', 0
    61 00000092 50454D332E42494E00      pem3:          db   'PEM3.BIN', 0
    62                                  
    63 0000009B 00                      directoryEntrySize:      db   0
    64 0000009C 00000000                fileSector:              dd   0
    65 000000A0 00000000                fileSize:                dd   0
    66 000000A4 00                      fileNameLength:          db   0
    67 000000A5 20<rep FFh>             fileNameEntry:           TIMES 255 db ' '     
    68 000001A4 00                      fileEntryNumber:         db   0
    69 000001A5 206E6F7420666F756E-     notfound:                db   " not found.",10,13,0
    69 000001AE 642E0A0D00         
    70 000001B3 707265737320616E79-     pressAnyKey:             db   "press any key to continue...",10,13,0
    70 000001BC 206B657920746F2063-
    70 000001C5 6F6E74696E75652E2E-
    70 000001CE 2E0A0D00           
    71 000001D2 0000                    stackpointer:            dw   0
    72                                  
    73 000001D4 3030680A0D00            databyte:  db "00h",10,13,0
    74                                  
    75                                  SPECIFICATION_PACKET     specificationPacket
    28                              <1>  %1: ISTRUC SPECIFICATION_PACKET_STRUC
    29 000001DA 13                  <1>  at SPECIFICATION_PACKET_STRUC.packed_size, db 0x13
    30 000001DB 00                  <1>  at SPECIFICATION_PACKET_STRUC.boot_media_type, db 0
    31 000001DC 00                  <1>  at SPECIFICATION_PACKET_STRUC.drive_number, db 0
    32 000001DD 00                  <1>  at SPECIFICATION_PACKET_STRUC.controller_index, db 0
    33 000001DE 00000000            <1>  at SPECIFICATION_PACKET_STRUC.logical_block_address, dd 0
    34 000001E2 0000                <1>  at SPECIFICATION_PACKET_STRUC.device_specification, dw 0
    35 000001E4 0000                <1>  at SPECIFICATION_PACKET_STRUC.buffer_segment, dw 0
    36 000001E6 0000                <1>  at SPECIFICATION_PACKET_STRUC.load_segment, dw 0
    37 000001E8 0000                <1>  at SPECIFICATION_PACKET_STRUC.virtual_sectors, dw 0
    38 000001EA 00                  <1>  at SPECIFICATION_PACKET_STRUC.cylinder_count, db 0
    39 000001EB 00                  <1>  at SPECIFICATION_PACKET_STRUC.sector_count, db 0
    40 000001EC 00                  <1>  at SPECIFICATION_PACKET_STRUC.head_count, db 0
    41                              <1>  IEND
    42                              <1>  %define %1.packed_size %1+SPECIFICATION_PACKET_STRUC.packed_size
    43                              <1>  %define %1.boot_media_type %1+SPECIFICATION_PACKET_STRUC.boot_media_type
    44                              <1>  %define %1.drive_number %1+SPECIFICATION_PACKET_STRUC.drive_number
    45                              <1>  %define %1.controller_index %1+SPECIFICATION_PACKET_STRUC.controller_index
    46                              <1>  %define %1.logical_block_address %1+SPECIFICATION_PACKET_STRUC.logical_block_address
    47                              <1>  %define %1.device_specification %1+SPECIFICATION_PACKET_STRUC.device_specification
    48                              <1>  %define %1.buffer_segment %1+SPECIFICATION_PACKET_STRUC.buffer_segment
    49                              <1>  %define %1.load_segment %1+SPECIFICATION_PACKET_STRUC.load_segment
    50                              <1>  %define %1.virtual_sectors %1+SPECIFICATION_PACKET_STRUC.virtual_sectors
    51                              <1>  %define %1.cylinder_count %1+SPECIFICATION_PACKET_STRUC.cylinder_count
    52                              <1>  %define %1.sector_count %1+SPECIFICATION_PACKET_STRUC.sector_count
    53                              <1>  %define %1.head_count %1+SPECIFICATION_PACKET_STRUC.head_count
    76                                  DISK_ADDRESS_PACKET      diskAddressPacket,PEMCS,PEMIP
    67                              <1>  %1: ISTRUC DISK_ADDRESS_PACKET_STRUC
    68 000001ED 10                  <1>  at DISK_ADDRESS_PACKET_STRUC.size, db 16
    69 000001EE 00                  <1>  at DISK_ADDRESS_PACKET_STRUC.reserved, db 0
    70 000001EF 0100                <1>  at DISK_ADDRESS_PACKET_STRUC.sectors_to_read, dw 1
    71 000001F1 0000                <1>  at DISK_ADDRESS_PACKET_STRUC.offset, dw %3
    72 000001F3 0030                <1>  at DISK_ADDRESS_PACKET_STRUC.segment, dw %2
    73 000001F5 10000000            <1>  at DISK_ADDRESS_PACKET_STRUC.start_absolute_sector, dd 16
    74 000001F9 00000000            <1>  at DISK_ADDRESS_PACKET_STRUC.transfer_buffer_address, dd 0
    75                              <1>  IEND
    76                              <1>  %define %1.size %1+DISK_ADDRESS_PACKET_STRUC.size
    77                              <1>  %define %1.sectors_to_read %1+DISK_ADDRESS_PACKET_STRUC.sectors_to_read
    78                              <1>  %define %1.offset %1+DISK_ADDRESS_PACKET_STRUC.offset
    79                              <1>  %define %1.segment %1+DISK_ADDRESS_PACKET_STRUC.segment
    80                              <1>  %define %1.start_absolute_sector %1+DISK_ADDRESS_PACKET_STRUC.start_absolute_sector
    81                              <1>  %define %1.transfer_buffer_address %1+DISK_ADDRESS_PACKET_STRUC.transfer_buffer_address
    77                                       
    78                                  Print:
    79 000001FD 60                           pusha
    80 000001FE B40E                         mov       ah, 0Eh             ; int 10h teletype function
    81 00000200 BB0F00                       mov       bx, 0x000F
    82                                  .repeat:
    83 00000203 AC                           lodsb                         ; Get char from string
    84 00000204 3C00                         cmp       al, 0
    85 00000206 7404                         je        .done               ; If char is zero, end of string
    86 00000208 CD10                         int       10h                 ; Otherwise, print it
    87 0000020A EBF7                         jmp       .repeat             ; And move on to next char
    88                                  .done:
    89 0000020C 61                           popa
    90 0000020D C3                           ret
    91                                  
    92                                  LoadFile:
    93                                  ; Call Check Extensions Present?
    94 0000020E 8936[7E00]                   mov       [fileName], si
    95 00000212 6660                         pushad
    96 00000214 8E06[F301]                   mov       es, word[diskAddressPacket.segment]
    97 00000218 8B3E[F101]                   mov       di, word[diskAddressPacket.offset]
    98 0000021C 8A16[7D00]                   mov       dl, byte[bootdrive]                                    ; Prepare to read CD-ROM, load boot drive
    99                                       
   100 00000220 B442                         mov       ah, 0x42                                               ; Read from drive function, DL holds the boot drive
   101 00000222 BE[ED01]                     mov       si, diskAddressPacket                                  ; Load SI with address of the Disk Address Packet
   102 00000225 CD13                         int       0x13                                                   ; Call read sector from drive
   103 00000227 7213                         jc        NonBootable
   104 00000229 26668B859E00                 mov       eax, dword[es:di+158]                                  ; LBA of root directory, where all things start.
   105 0000022F 66A3[F501]                   mov       dword[diskAddressPacket.start_absolute_sector], eax    ; Load packet with new address on CD of the root directory
   106 00000233 B442                         mov       ah, 0x42                                               ; Read from drive function, DL holds the boot drive
   107 00000235 BE[ED01]                     mov       si, diskAddressPacket                                  ; Load SI with address of DAP
   108 00000238 CD13                         int       0x13
   109 0000023A 7304                         jnc       SearchFile
   110                                  
   111                                  NonBootable:
   112 0000023C 6661                         popad
   113 0000023E F9                           stc
   114 0000023F C3                           ret                                                              ; reboot system
   115                                  
   116                                  SearchFile:     
   117                                  .nextDirEntry:
   118                                      
   119 00000240 268A05                       mov       al, byte[es:di]                                        ; Length of the current directory entry
   120 00000243 A2[9B00]                     mov       byte[directoryEntrySize],al
   121 00000246 26668B4502                   mov       eax, dword[es:di+2]                                    ; Starting sector of directory entry
   122 0000024B 66A3[9C00]                   mov       dword[fileSector], eax
   123 0000024F 26668B450A                   mov       eax, dword[es:di+10]                                   ; Size of file on CD/DVD/BD
   124 00000254 66A3[A000]                   mov       dword[fileSize], eax
   125                                  
   126 00000258 268A4520                     mov       al, byte[es:di+32]                                     ; File's name length (see El Torito of ISO:9660 or CDROM.ASM)
   127 0000025C FEC8                         dec       al                                                     ; for trailing ;
   128 0000025E FEC8                         dec       al                                                     ; for trailing 1
   129 00000260 A2[A400]                     mov       byte[fileNameLength], al
   130                                  
   131 00000263 31DB                         xor       bx, bx
   132 00000265 31C9                         xor       cx, cx
   133 00000267 89FE                         mov       si, di
   134 00000269 83C621                       add       si, 33
   135 0000026C BB[A500]                     mov       bx, fileNameEntry
   136 0000026F A0[A400]                     mov       al, byte[fileNameLength]
   137                                  
   138                                  .LoopFileNameEntry:
   139                                  
   140 00000272 268A04                       mov       al, byte[es:si]
   141 00000275 3E8807                       mov       byte[ds:bx], al
   142 00000278 43                           inc       bx
   143 00000279 41                           inc       cx
   144 0000027A 46                           inc       si
   145 0000027B 31C0                         xor       ax, ax
   146 0000027D A0[A400]                     mov       al, byte[fileNameLength]
   147 00000280 39C1                         cmp       cx, ax
   148 00000282 75EE                         jne        .LoopFileNameEntry
   149                                  
   150 00000284 3EC60700                     mov       byte[ds:bx],0
   151                                  
   152 00000288 BE[A500]                     mov       si, fileNameEntry
   153 0000028B 57                           push      di
   154 0000028C 8B3E[7E00]                   mov       di, [fileName]
   155                                      
   156                                  .CompareLoop:
   157                                  
   158 00000290 8A04                         mov       al, byte[si]        ; Grab byte from ESI
   159 00000292 8A1D                         mov       bl, byte[di]        ; Grab byte from EDI
   160 00000294 38D8                         cmp       al, bl              ; Compare if they are equal
   161 00000296 7508                         jne       .NotEqual           ; They aren't equal
   162                                  
   163 00000298 20C0                         and       al, al              ; Both bytes are null
   164 0000029A 7407                         jz        .compareDone
   165                                  
   166 0000029C 47                           inc       di             ; Increment EDI
   167 0000029D 46                           inc       si             ; Increment ESI
   168 0000029E EBF0                         jmp       .CompareLoop           ; Start looping
   169                                  
   170                                  .NotEqual:
   171 000002A0 F9                           stc                        ; Set the carry flag to indicate failure
   172 000002A1 EB01                         jmp       .compareEnd
   173                                  
   174                                  .compareDone:
   175                                  
   176 000002A3 F8                           clc                 ; Clear the carry flag to indicate success
   177                                  
   178                                  .compareEnd:
   179                                      
   180 000002A4 5F                           pop       di
   181 000002A5 7326                         jnc       .nextsector
   182                                       
   183 000002A7 31C9                         xor       cx, cx                                   ; Prepare CX to do math for DI
   184 000002A9 8A0E[9B00]                   mov       cl, byte[directoryEntrySize]                 ; Get the size of the directory entry
   185 000002AD 01CF                         add       di, cx                                   ; Add that size to the DI to get to the next record
   186 000002AF 26803D00                     cmp       byte[es:di],0                          ; Is the next entry = 0?
   187 000002B3 7487                         je        NonBootable                                     ; If so, we're at the end of the directory, move on
   188                                  
   189 000002B5 31C9                         xor       cx, cx
   190 000002B7 BB[A500]                     mov       bx, fileNameEntry
   191                                  
   192                                  .ClearFileNameEntry:
   193                                  
   194 000002BA 3EC60700                     mov       byte[ds:bx],0                           ; Erase the begin
   195 000002BE 43                           inc       bx
   196 000002BF 41                           inc       cx
   197 000002C0 81F9FE00                     cmp       cx, 254
   198 000002C4 72F4                         jb        .ClearFileNameEntry
   199 000002C6 3EC60700                     mov       byte[ds:bx],0
   200 000002CA E973FF                       jmp       SearchFile.nextDirEntry
   201                                  
   202                                  .nextsector:     
   203 000002CD 66A1[9C00]                   mov       eax, dword[fileSector]
   204 000002D1 66A3[F501]                   mov       dword[diskAddressPacket.start_absolute_sector], eax             ; Save the starting sector into DAP
   205 000002D5 66A1[A000]                   mov       eax, dword[fileSize]
   206 000002D9 6631D2                       xor       edx, edx
   207 000002DC 66BB00080000                 mov       ebx, 2048
   208 000002E2 66F7F3                       div       ebx
   209 000002E5 6640                         inc       eax
   210 000002E7 A3[EF01]                     mov       [diskAddressPacket.sectors_to_read], ax    ; Save number of sectors to read
   211                                  
   212 000002EA 8A16[7D00]                   mov       dl, byte[bootdrive]                      ; boot drive in DL
   213 000002EE B442                         mov       ah,0x42                                  ; Read from drive function
   214 000002F0 BE[ED01]                     mov       si,diskAddressPacket                    ; Load SI with address of the Disk Address Packet
   215 000002F3 CD13                         int       0x13                                     ; Call read sector from drive
   216 000002F5 0F8243FF                     jc        NonBootable                                  ; Nope, hosed, get out
   217                                       
   218 000002F9 66A1[ED01]                   mov       eax,dword[diskAddressPacket]
   219 000002FD 6661                         popad
   220 000002FF F8                           clc
   221 00000300 C3                           ret
   222                                  
   223                                  Execute:
   224                                       ; pushing stackpointer onto stack won't work
   225 00000301 8926[D201]                   mov       word[stackpointer], sp        ; save stackpointer in memory
   226 00000305 B80030                       mov       ax, PEMCS                     ; Set all segments to match where kernel is loaded
   227 00000308 8ED8                         mov       ds, ax                   
   228 0000030A 8EC0                         mov       es, ax                   
   229 0000030C 8EE0                         mov       fs, ax                   
   230 0000030E 8EE8                         mov       gs, ax
   231 00000310 B80070                       mov       ax, PEMSS               ; stacksegment at last useable segment in low RAM
   232 00000313 FA                           cli
   233 00000314 54                           push      sp
   234 00000315 8ED0                         mov       ss, ax
   235 00000317 BCFEFF                       mov       sp, PEMSP               ; stackpointer at last word of stack
   236 0000031A FB                           sti
   237 0000031B F8                           clc
   238 0000031C FC                           cld
   239 0000031D 31C0                         xor       ax, ax
   240 0000031F 31DB                         xor       bx, bx
   241 00000321 31C9                         xor       cx, cx
   242 00000323 31D2                         xor       dx, dx
   243 00000325 31F6                         xor       si, si
   244 00000327 31FF                         xor       di, di
   245 00000329 31ED                         xor       bp, bp
   246 0000032B 9A00000030                   call      PEMCS:PEMIP
   247 00000330 8CC8                         mov       ax, cs
   248 00000332 FA                           cli
   249 00000333 8ED0                         mov       ss, ax
   250 00000335 5C                           pop       sp
   251 00000336 FB                           sti
   252 00000337 8ED8                         mov       ds, ax                   
   253 00000339 8EC0                         mov       es, ax                   
   254 0000033B 8EE0                         mov       fs, ax                   
   255 0000033D 8EE8                         mov       gs, ax
   256 0000033F 8B26[D201]                   mov       sp, word[stackpointer]
   257 00000343 C3                           ret       
