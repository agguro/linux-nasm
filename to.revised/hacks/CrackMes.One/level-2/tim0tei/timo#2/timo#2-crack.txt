objdump -D -Mintel ./timo#2 

./timo#2:     file format elf64-x86-64

Disassembly of section .text:

0000000000401000 <.text>:
  401000:	80 3c 24 02          	cmp    BYTE PTR [rsp],0x2                   ;pasword must be on commandline
  401004:	75 63                	jne    0x401069                             ;if not bail out, just exit
  401006:	48 8b 7c 24 10       	mov    rdi,QWORD PTR [rsp+0x10]             ;address to password
  ;here the string length is calculated and stored in ecx
  40100b:	29 c9                	sub    ecx,ecx                              ;ecx = 0
  40100d:	28 c0                	sub    al,al                                ;al = 0
  40100f:	f7 d1                	not    ecx                                  ;max 32 bit string length in ecx
  401011:	fc                   	cld                                         ;auto increment rdi and rcx
  401012:	f2 ae                	repnz scas al,BYTE PTR es:[rdi]             ;read byte until zero byte read
  401014:	f7 d1                	not    ecx                                  ;invert rcx
  401016:	ff c9                	dec    ecx                                  ;adjust length
  ;ecx has the stringlength without the trailing zero
  ;from here we read each byte, put it in BL and rotate this byte 8 bits to the left
  ;warning: it is a rotate which means the the first byte read will be finally in BL again
  401018:	83 f9 03             	cmp    ecx,0x3                              ;length must be at least 4
  40101b:	7e 4c                	jle    0x401069                             ;if length < 4 then bail out
  40101d:	48 29 db             	sub    rbx,rbx                              ;rbx = 0
  401020:	48 29 ff             	sub    rdi,rdi                              ;rdi = 0
  401023:	48 8b 44 24 10       	mov    rax,QWORD PTR [rsp+0x10]             ;address of password on commandline in rax
  401028:	8a 18                	mov    bl,BYTE PTR [rax]                    ;read byte
  40102a:	48 c1 c3 08          	rol    rbx,0x8                              ;rotate byte 8 bits left
  40102e:	48 ff c0             	inc    rax                                  ;point to address of next byte
  401031:	ff c9                	dec    ecx                                  ;decrement bytes still to read
  401033:	75 f3                	jne    0x401028                             ;if not at the end of the string repeat
  40103c:	66 89 df             	mov    di,bx                                ;di = 0x000F -> bx = 0x000F
  40103f:	48 b8 3f 10 40 00 00 	movabs rax,0x40103f
  401046:	00 00 00 
  401049:	48 01 f8             	add    rax,rdi                              ;rax = 40104e = 40103f + rdi -> rdi = F
  40104c:	ff e0                	jmp    rax                                  ;rax must be 40104e
  40104e:	b8 01 00 00 00       	mov    eax,0x1
  401053:	bf 01 00 00 00       	mov    edi,0x1
  401058:	48 be 49 20 40 00 00 	movabs rsi,0x402049
  40105f:	00 00 00 
  401062:	ba 2f 00 00 00       	mov    edx,0x2f
  401067:	0f 05                	syscall 
  401069:	b8 3c 00 00 00       	mov    eax,0x3c
  40106e:	48 31 ff             	xor    rdi,rdi
  401071:	0f 05                	syscall 
    
  ;to decypher the password we must start reading from line 40104c
  40104c:	ff e0                	jmp    rax
    ;rax jumps to somewhere in the program, the only address that gives us a message that we passed the test is 40104e
    ;the only address that doesn't gives a message but just exits is 401069
    ;all other values can fail execution of the program.
    ;suppose rax = 40104e the we got the message '_.:pass accepted:._' which we want for confirmation.
    ;rax = 40104e
  
  40103f:	48 b8 3f 10 40 00 00 	movabs rax,0x40103f                     ;rax = 0x40103f
  401046:	00 00 00 
  401049:	48 01 f8             	add    rax,rdi
    ;rax is initialized with 0x40103f (line 40103f)
    ;line 401049 is an addition of rdi to rax which results in 0x40104e
    ;rax = 40104e = 40103f + rdi -> rdi = F
    ;the value in rdi must be F

  40103c:	66 89 df             	mov    di,bx                            ;di = 0x000F -> bx = 0x000F
    :the value from di (F) comes from bx
    ;only lower 16 bits of rbx are taken into account, rbx can be any value as long as bx = 0x000F

  401035:	48 81 c3 dc af 00 00 	add    rbx,0xafdc
    ;we know that bx must be 0x000F after this addition: 0x000F = rbx + 0xAFDC
    ;doing the math on 64 bits
    ;   0x000000000000000F
    : - 0x000000000000AFDC
    : --------------------
    ;   0xFFFFFFFFFFFF5033

  40102a:	48 c1 c3 08          	rol    rbx,0x8                              ;rotate byte 8 bits left
    ;performing the opposite operation of rol, rbx,0x8 (ror rbx,0x8) gives:
    ;rbx 0x33FFFFFFFFFFFF50
    ;this is an idication that the first character of the password is '3' and the last 'P'.  The 6 characters
    ;in between doesn't matter and can be anything


Disassembly of section .data:

0000000000402000 <.data>:
  402000:	2e 5f                	cs pop rdi
  402002:	3a 74 69 6d          	cmp    dh,BYTE PTR [rcx+rbp*2+0x6d]
  402006:	6f                   	outs   dx,DWORD PTR ds:[rsi]
  402007:	74 65                	je     0x40206e
  402009:	69 20 63 72 61 63    	imul   esp,DWORD PTR [rax],0x63617263
  40200f:	6b 6d 65 23          	imul   ebp,DWORD PTR [rbp+0x65],0x23
  402013:	32 3a                	xor    bh,BYTE PTR [rdx]
  402015:	5f                   	pop    rdi
  402016:	3a 2e                	cmp    ch,BYTE PTR [rsi]
  402018:	00 3a                	add    BYTE PTR [rdx],bh
  40201a:	2e 67 72 65          	cs addr32 jb 0x402083
  40201e:	65 74 7a             	gs je  0x40209b
  402021:	20 66 6c             	and    BYTE PTR [rsi+0x6c],ah
  402024:	79 20                	jns    0x402046
  402026:	6f                   	outs   dx,DWORD PTR ds:[rsi]
  402027:	75 74                	jne    0x40209d
  402029:	20 74 6f 20          	and    BYTE PTR [rdi+rbp*2+0x20],dh
  40202d:	6a 65                	push   0x65
  40202f:	66 66 6c             	data16 data16 ins BYTE PTR es:[rdi],dx
  402032:	69 36 37 38 39 20    	imul   esi,DWORD PTR [rsi],0x20393837
  402038:	26 20 42 69          	and    BYTE PTR es:[rdx+0x69],al
  40203c:	6e                   	outs   dx,BYTE PTR ds:[rsi]
  40203d:	61                   	(bad)  
  40203e:	72 79                	jb     0x4020b9
  402040:	4e                   	rex.WRX
  402041:	65 77 62             	gs ja  0x4020a6
  402044:	69 65 2e 2e 00 5f 2e 	imul   esp,DWORD PTR [rbp+0x2e],0x2e5f002e
  40204b:	3a 70 61             	cmp    dh,BYTE PTR [rax+0x61]
  40204e:	73 73                	jae    0x4020c3
  402050:	20 61 63             	and    BYTE PTR [rcx+0x63],ah
  402053:	63 65 70             	movsxd esp,DWORD PTR [rbp+0x70]
  402056:	74 65                	je     0x4020bd
  402058:	64 3a 2e             	cmp    ch,BYTE PTR fs:[rsi]
  40205b:	5f                   	pop    rdi
  40205c:	0a 00                	or     al,BYTE PTR [rax]
