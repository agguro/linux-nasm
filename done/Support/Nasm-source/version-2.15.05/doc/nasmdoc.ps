%!PS-Adobe-3.0
%%Pages: 285
%%BoundingBox: 0 0 595 792
%%Creator: (NASM psflow.pl)
%%DocumentData: Clean7Bit
%%DocumentFonts: SourceCodePro-Bold SourceCodePro-Regular SourceCodePro-Semibold SourceSansPro-Bold SourceSansPro-BoldIt SourceSansPro-It SourceSansPro-Regular SourceSansPro-Semibold SourceSansPro-SemiboldIt
%%DocumentNeededFonts: SourceCodePro-Bold SourceCodePro-Regular SourceCodePro-Semibold SourceSansPro-Bold SourceSansPro-BoldIt SourceSansPro-It SourceSansPro-Regular SourceSansPro-Semibold SourceSansPro-SemiboldIt
%%Orientation: Portrait
%%PageOrder: Ascend
%%EndComments
%%BeginProlog
/botmarg 72 def
/pymarg 24 def
/idxindent 24 def
/tocdots 8 def
/rmarg 72 def
/paraskip 6 def
/bulladj 12 def
/idxspace 24 def
/tocpnz 24 def
/idxcolumns 2 def
/prmarg 0 def
/plmarg 18 def
/pageheight 792 def
/lmarg 90 def
/tocskip 6 def
/idxgutter 24 def
/pagewidth 595 def
/tocind 12 def
/chapstart 30 def
/startcopyright 75 def
/topmarg 72 def
/chapskip 24 def
/colorlinks false def
/NASMEncoding [ /.notdef  /.notdef  /.notdef  /.notdef  /.notdef  
 /.notdef  /.notdef  /.notdef  /.notdef  /.notdef  /.notdef  /.notdef  
 /.notdef  /.notdef  /.notdef  /.notdef  /dotlessi /grave /acute 
 /circumflex /tilde /macron /breve /dotaccent /dieresis /.notdef  /ring 
 /cedilla /.notdef  /hungarumlaut /ogonek /caron /space /exclam 
 /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
 /parenleft /parenright /asterisk /plus /comma /hyphen /period /slash 
 /zero /one /two /three /four /five /six /seven /eight /nine /colon 
 /semicolon /less /equal /greater /question /at /A /B /C /D /E /F /G /H 
 /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft 
 /backslash /bracketright /asciicircum /underscore /quoteleft /a /b /c 
 /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z 
 /braceleft /bar /braceright /asciitilde /.notdef  /.notdef  /.notdef  
 /quotesinglbase /florin /quotedblbase /ellipsis /dagger /dbldagger 
 /circumflex /perthousand /Scaron /guilsinglleft /OE /.notdef  /Zcaron 
 /.notdef  /.notdef  /grave /quotesingle /quotedblleft /quotedblright 
 /bullet /endash /emdash /tilde /trademark /scaron /guilsignlright /oe 
 /.notdef  /zcaron /Ydieresis /space /exclamdown /cent /sterling 
 /currency /yen /brokenbar /section /dieresis /copyright /ordfeminine 
 /guillemotleft /logicalnot /minus /registered /macron /degree 
 /plusminus /twosuperior /threesuperior /acute /mu /paragraph 
 /periodcentered /cedilla /onesuperior /ordmasculine /guillemotright 
 /onequarter /onehalf /threequarters /questiondown /Agrave /Aacute 
 /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla /Egrave /Eacute 
 /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis /Eth 
 /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
 /Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn 
 /germandbls /agrave /aacute /acircumflex /atilde /adieresis /aring /ae 
 /ccedilla /egrave /eacute /ecircumflex /edieresis /igrave /iacute 
 /icircumflex /idieresis /eth /ntilde /ograve /oacute /ocircumflex 
 /otilde /odieresis /divide /oslash /ugrave /uacute /ucircumflex 
 /udieresis /yacute /thorn /ydieresis ] def
/nasmenc {
  findfont dup length dict begin
    { 1 index /FID ne {def}{pop pop} ifelse } forall
    /Encoding NASMEncoding def
    currentdict
  end
  definefont pop
} def
/SourceCodePro-Bold-NASM /SourceCodePro-Bold nasmenc
/SourceCodePro-Regular-NASM /SourceCodePro-Regular nasmenc
/SourceCodePro-Semibold-NASM /SourceCodePro-Semibold nasmenc
/SourceSansPro-Bold-NASM /SourceSansPro-Bold nasmenc
/SourceSansPro-BoldIt-NASM /SourceSansPro-BoldIt nasmenc
/SourceSansPro-It-NASM /SourceSansPro-It nasmenc
/SourceSansPro-Regular-NASM /SourceSansPro-Regular nasmenc
/SourceSansPro-Semibold-NASM /SourceSansPro-Semibold nasmenc
/SourceSansPro-SemiboldIt-NASM /SourceSansPro-SemiboldIt nasmenc
/tfont0 /SourceSansPro-Bold-NASM findfont 20 scalefont def
/tfont1 /SourceSansPro-BoldIt-NASM findfont 20 scalefont def
/tfont2 /SourceCodePro-Bold-NASM findfont 16 scalefont def
/tfont [tfont0 tfont1 tfont2] def
/cfont0 /SourceSansPro-Semibold-NASM findfont 18 scalefont def
/cfont1 /SourceSansPro-SemiboldIt-NASM findfont 18 scalefont def
/cfont2 /SourceCodePro-Semibold-NASM findfont 14.4 scalefont def
/cfont [cfont0 cfont1 cfont2] def
/hfont0 /SourceSansPro-Semibold-NASM findfont 14 scalefont def
/hfont1 /SourceSansPro-SemiboldIt-NASM findfont 14 scalefont def
/hfont2 /SourceCodePro-Semibold-NASM findfont 11.2 scalefont def
/hfont [hfont0 hfont1 hfont2] def
/sfont0 /SourceSansPro-Semibold-NASM findfont 12 scalefont def
/sfont1 /SourceSansPro-SemiboldIt-NASM findfont 12 scalefont def
/sfont2 /SourceCodePro-Semibold-NASM findfont 9.6 scalefont def
/sfont [sfont0 sfont1 sfont2] def
/bfont0 /SourceSansPro-Regular-NASM findfont 10 scalefont def
/bfont1 /SourceSansPro-It-NASM findfont 10 scalefont def
/bfont2 /SourceCodePro-Regular-NASM findfont 8 scalefont def
/bfont [bfont0 bfont1 bfont2] def
/qfont0 /SourceSansPro-It-NASM findfont 9 scalefont def
/qfont1 /SourceSansPro-BoldIt-NASM findfont 9 scalefont def
/qfont2 /SourceCodePro-Regular-NASM findfont 7.2 scalefont def
/qfont [qfont0 qfont1 qfont2] def
/xfont0 /SourceCodePro-Regular-NASM findfont 8 scalefont def
/xfont1 /SourceCodePro-Regular-NASM findfont 8 scalefont def
/xfont2 /SourceCodePro-Regular-NASM findfont 8 scalefont def
/xfont [xfont0 xfont1 xfont2] def
/bullet [(\225)] def
%
% PostScript header for NASM documentation
%

% Avoid barfing on old PS implementations
/pdfmark where
{pop} {userdict /pdfmark /cleartomark load put} ifelse
/setpagedevice where
{pop} {userdict /setpagedevice /pop load put} ifelse

% Useful definition
/space 32 def

%
% This asks the PostScript interpreter for the proper size paper
%
/setpagesize {
  1 dict dup /PageSize [pagewidth pageheight] put setpagedevice
} def

%
% Code to handle links
%
/min { 2 copy gt { exch } if pop } def
/max { 2 copy lt { exch } if pop } def

/lkbegun 0 def
/lktype null def
/lkury 0 def
/lkurx 0 def
/lklly 0 def
/lkllx 0 def
/lkxmarg 1 def	% Extra space for link in x dir
/lkymarg 1 def	% Extra space for link in y dir
/lktarget () def

% target type --
/linkbegin {
  userdict begin
    /lkbegun 1 def
    /lktype exch def
    /lktarget exch def
    colorlinks { 0 0 0.4 setrgbcolor } if
  end
} def

% target --
/linkbegindest {
  /Dest linkbegin
} def

% uristring --
/linkbeginuri {
  /URI linkbegin
} def

% pageno --
/linkbeginpage {
  /Page linkbegin
} def

% string spacepadding --
/linkshow {
  userdict begin
    /lspad exch def /lss exch def
    lkbegun 0 ne {
      gsave lss true charpath flattenpath pathbbox grestore
      lkbegun 1 eq {
        /lkury exch def
        lss spacecount lspad mul add /lkurx exch def
        /lklly exch def
        /lkllx exch def
        /lkbegun 2 def
      } {
        lkury max /lkury exch def
        lss spacecount lspad mul add lkurx max /lkurx exch def
        lklly min /lklly exch def
        lkllx min /lkllx exch def
      } ifelse
    } if
    lspad 0 space lss widthshow
  end
} def

% --
/linkend {
  userdict begin
    [ lktype /URI eq {
        /Action 2 dict dup /Subtype /URI put dup /URI lktarget put
      } {
	/Dest lktarget
      } ifelse
      /Border [0 0 0]
      /Rect [ lkllx lkxmarg sub
              lklly lkymarg sub
              lkurx lkxmarg add
              lkury lkymarg add ]
      /Subtype /Link
      /ANN pdfmark
    /lkbegun 0 def
    colorlinks { 0 setgray } if
  end
} def

% targetname --
/linkdest {
  [ /Dest 3 -1 roll
    /View [ /XYZ currentpoint null ]
    /DEST pdfmark
} def

% A "fontset" is an array of fonts; a "stream" is an array of strings
% and numbers or procedures:
% [ 0 (Foo) ( ) (mani) ( ) 1 (padme) 0 ( ) (hum.) ]
% A number choses a font from the current fontset.
% A procedure is invoked as-is when printing the stream.
%
% When printing justified, an equal amount of space is added in
% between each string.

% string -- spacecount
% Count space characters in a string
/spacecount {
  0 exch {
    space eq { 1 add } if
  } forall
} def

% stream fontset -- spacecount width
% Get the width of a stream in the given fontset, and the
% number of space characters in the stream
/streamwidth {
  gsave
    6 dict begin
      /f exch def
      /w 0 def
      /s 0 def
      f 0 get setfont
      /integertype {
        f exch get setfont
      } def
      /stringtype {
        dup stringwidth pop w add /w exch def
        spacecount s add /s exch def
      } def
      /arraytype { pop } def
      % The input stream is on the top of the stack now
      {
        dup type exec
      } forall
      s w
    end
  grestore
} def

% stream fontset spacer --
% Show the stream in the given fontset, but add a certain amount
% of space to each space character
/showstreamspc {
  5 dict begin
    /spc exch def
    /f exch def
    f 0 get setfont
    /integertype {
      f exch get setfont
    } def
    /stringtype {
      spc linkshow
    } def
    /arraytype {
      exec
    } def
    % Now stream is on the top of the stack
    {
      dup type exec
    } forall
  end
} def

% stream fontset --
% Show the stream in the given fontset, with no extra spacing
/showstream {
  0 showstreamspc
} def

% stream fontset totalspace --
% Show the stream justified to fit into a certain number of pixels
/showstreamjust {
  userdict begin
    /ts exch def /fs exch def /st exch def
      st fs
        st fs streamwidth ts exch sub exch
	dup 0 gt { div } { pop } ifelse
      showstreamspc
    end
} def

/bullmarg lmarg bulladj add def
/lwidth pagewidth lmarg sub rmarg sub def
/bwidth lwidth bulladj sub def

%
% The various paragraph types
% The number at the end indicates start (1) of para, end (2) of para
%
/chapline {
	currentpoint exch pop 10 sub lmarg exch moveto
	0 setlinecap 3 setlinewidth
	lwidth 0 rlineto stroke
} def

/chap0 { lmarg exch moveto cfont lwidth showstreamjust } def
/chap1 { lmarg exch moveto cfont lwidth showstreamjust } def
/chap2 { lmarg exch moveto cfont showstream chapline } def
/chap3 { lmarg exch moveto cfont showstream chapline } def

/appn0 {chap0} def
/appn1 {chap1} def
/appn2 {chap2} def
/appn3 {chap3} def

% lbl ypos fontset -- ypos
/headlbl {
  3 -1 roll [exch (  )] exch % ypos strm fontset
  2 copy % ypos strm fontset strm fontset
  streamwidth % ypos strm fontset spccount width
  lmarg exch sub % ypos strm fontset spccount xpos
  4 index % ypos strm fontset spccount xpos ypos
  moveto % ypos strm fontset spccount
  pop % ypos strm fontset spccount
  showstream % ypos
} def

/head0 { lmarg exch moveto hfont lwidth showstreamjust } def
/head1 { hfont headlbl lmarg exch moveto hfont lwidth showstreamjust } def
/head2 { lmarg exch moveto hfont showstream } def
/head3 { hfont headlbl lmarg exch moveto hfont showstream } def

/subh0 { lmarg exch moveto sfont lwidth showstreamjust } def
/subh1 { sfont headlbl lmarg exch moveto sfont lwidth showstreamjust } def
/subh2 { lmarg exch moveto sfont showstream } def
/subh3 { sfont headlbl lmarg exch moveto sfont showstream } def

/norm0 { lmarg exch moveto bfont lwidth showstreamjust } def
/norm1 { lmarg exch moveto bfont lwidth showstreamjust } def
/norm2 { lmarg exch moveto bfont showstream } def
/norm3 { lmarg exch moveto bfont showstream } def

/code0 { lmarg exch moveto xfont showstream } def
/code1 { lmarg exch moveto xfont showstream } def
/code2 { lmarg exch moveto xfont showstream } def
/code3 { lmarg exch moveto xfont showstream } def

/bull0 { bullmarg exch moveto bfont bwidth showstreamjust } def
/bull1 { dup lmarg exch moveto bullet bfont showstream
	 bullmarg exch moveto bfont bwidth showstreamjust } def
/bull2 { bullmarg exch moveto bfont showstream } def
/bull3 { dup lmarg exch moveto bullet bfont showstream
	 bullmarg exch moveto bfont showstream } def

/indt0 { bullmarg exch moveto bfont bwidth showstreamjust } def
/indt1 { bullmarg exch moveto bfont bwidth showstreamjust } def
/indt2 { bullmarg exch moveto bfont showstream } def
/indt3 { bullmarg exch moveto bfont showstream } def

/bquo0 { bullmarg exch moveto qfont bwidth showstreamjust } def
/bquo1 { bullmarg exch moveto qfont bwidth showstreamjust } def
/bquo2 { bullmarg exch moveto qfont showstream } def
/bquo3 { bullmarg exch moveto qfont showstream } def

/tocw0 lwidth tocpnz sub def
/tocw1 tocw0 tocind sub def
/tocw2 tocw1 tocind sub def

/tocx0 lmarg def
/tocx1 tocx0 tocind add def
/tocx2 tocx1 tocind add def

/tocpn {
  bfont0 setfont
  3 dict begin
    /s exch def
    /x s stringwidth pop pagewidth rmarg sub exch sub def
    currentpoint /y exch def
    lmarg sub tocdots div ceiling tocdots mul lmarg add
    tocdots x {
      y moveto (.) 0 linkshow
    } for
    x y moveto s 0 linkshow
  end
  linkend
} def

/toc00 { tocx0 exch moveto 0 rmoveto bfont showstream } def
/toc01 { tocx0 exch moveto
	 linkbegindest bfont0 setfont 0 linkshow bfont showstream } def
/toc02 { tocx0 exch moveto 3 1 roll
	 0 rmoveto bfont showstream tocpn } def
/toc03 { tocx0 exch moveto 4 1 roll
	 linkbegindest bfont0 setfont 0 linkshow bfont showstream tocpn } def

/toc10 { tocx1 exch moveto 0 rmoveto bfont showstream } def
/toc11 { tocx1 exch moveto
	 linkbegindest bfont0 setfont 0 linkshow bfont showstream } def
/toc12 { tocx1 exch moveto 3 1 roll
	 0 rmoveto bfont showstream tocpn } def
/toc13 { tocx1 exch moveto 4 1 roll
	 linkbegindest bfont0 setfont 0 linkshow bfont showstream tocpn } def

/toc20 { tocx2 exch moveto 0 rmoveto bfont showstream } def
/toc21 { tocx2 exch moveto
	 linkbegindest bfont0 setfont 0 linkshow bfont showstream } def
/toc22 { tocx2 exch moveto 3 1 roll
	 0 rmoveto bfont showstream tocpn } def
/toc23 { tocx2 exch moveto 4 1 roll
	 linkbegindest bfont0 setfont 0 linkshow bfont showstream tocpn } def

% Spacing between index columns
/indexcolumn pagewidth lmarg sub rmarg sub idxgutter add idxcolumns div def
% Width of an individual index column
/indexcolwid indexcolumn idxgutter sub def

/idx03 {
  2 dict begin
    indexcolumn mul lmarg add
    /x exch def /y exch def x y moveto
    exch bfont showstream
    dup bfont streamwidth
    x indexcolwid add exch sub exch pop y moveto
    bfont showstream
  end
} def
/idx00 {idx03} def
/idx01 {idx03} def
/idx02 {idx03} def

/idx13 {
  2 dict begin
    indexcolumn mul lmarg add idxindent add
    /x exch def /y exch def x y moveto
    exch bfont showstream
    dup bfont streamwidth
    x indexcolwid idxindent sub add exch sub exch pop y moveto
    bfont showstream
  end
} def
/idx10 {idx13} def
/idx11 {idx13} def
/idx12 {idx13} def

%
% Page numbers
%
/pagey botmarg pymarg sub def
/pagel lmarg plmarg sub def
/pager pagewidth rmarg sub prmarg add def

/pageeven { pagel pagey moveto bfont1 setfont show } def
/pageodd  { bfont1 setfont dup stringwidth pop pager exch sub
	    pagey moveto show } def

%
% Functions invoked during parsing
%
/xa { linkdest } def
/pa { 0 pageheight moveto linkdest } def
/xl { linkbegindest } def
/wl { linkbeginuri } def
/pl { linkbeginpage } def
/el { linkend } def

%
% PDF viewer options
%
[/PageMode /UseOutlines /DOCVIEW pdfmark	% Display bookmarks

%
% Functions to include EPS
%
/BeginEPSF {
  /Before_EPSF_State save def
  /dict_count countdictstack def
  /op_count count 1 sub def
  userdict begin
  /showpage {} def
  0 setgray 0 setlinecap
  1 setlinewidth 0 setlinejoin
  10 setmiterlimit [ ] 0 setdash newpath
  /languagelevel where
  {
    pop languagelevel
    1 ne {
      false setstrokeadjust false setoverprint
    } if
  } if
} bind def
/EndEPSF {
  count op_count sub {pop} repeat
  countdictstack dict_count sub {end} repeat
  Before_EPSF_State restore
} bind def
%%EndProlog
%%BeginSetup
[/Title (Title)
/Dest /title /OUT pdfmark
[/Title (Contents)
/Dest /contents /OUT pdfmark
[/Title (Introduction)
/Count -1 /Dest /chapter-1 /OUT pdfmark
[/Title (What Is NASM?)
/Count -1 /Dest /section-1.1 /OUT pdfmark
[/Title (License)
/Dest /section-1.1.1 /OUT pdfmark
[/Title (Running NASM)
/Count -2 /Dest /chapter-2 /OUT pdfmark
[/Title (NASM Command-Line Syntax)
/Count -35 /Dest /section-2.1 /OUT pdfmark
[/Title (The -o Option: Specifying the Output File Name)
/Dest /section-2.1.1 /OUT pdfmark
[/Title (The -f Option: Specifying the Output File Format)
/Dest /section-2.1.2 /OUT pdfmark
[/Title (The -l Option: Generating a Listing File)
/Dest /section-2.1.3 /OUT pdfmark
[/Title (The -L Option: Additional or Modified Listing Info)
/Dest /section-2.1.4 /OUT pdfmark
[/Title (The -M Option: Generate Makefile Dependencies)
/Dest /section-2.1.5 /OUT pdfmark
[/Title (The -MG Option: Generate Makefile Dependencies)
/Dest /section-2.1.6 /OUT pdfmark
[/Title (The -MF Option: Set Makefile Dependency File)
/Dest /section-2.1.7 /OUT pdfmark
[/Title (The -MD Option: Assemble and Generate Dependencies)
/Dest /section-2.1.8 /OUT pdfmark
[/Title (The -MT Option: Dependency Target Name)
/Dest /section-2.1.9 /OUT pdfmark
[/Title (The -MQ Option: Dependency Target Name \(Quoted\))
/Dest /section-2.1.10 /OUT pdfmark
[/Title (The -MP Option: Emit phony targets)
/Dest /section-2.1.11 /OUT pdfmark
[/Title (The -MW Option: Watcom Make quoting style)
/Dest /section-2.1.12 /OUT pdfmark
[/Title (The -F Option: Selecting a Debug Information Format)
/Dest /section-2.1.13 /OUT pdfmark
[/Title (The -g Option: Enabling Debug Information.)
/Dest /section-2.1.14 /OUT pdfmark
[/Title (The -X Option: Selecting an Error Reporting Format)
/Dest /section-2.1.15 /OUT pdfmark
[/Title (The -Z Option: Send Errors to a File)
/Dest /section-2.1.16 /OUT pdfmark
[/Title (The -s Option: Send Errors to stdout)
/Dest /section-2.1.17 /OUT pdfmark
[/Title (The -i Option: Include File Search Directories)
/Dest /section-2.1.18 /OUT pdfmark
[/Title (The -p Option: Pre-Include a File)
/Dest /section-2.1.19 /OUT pdfmark
[/Title (The -d Option: Pre-Define a Macro)
/Dest /section-2.1.20 /OUT pdfmark
[/Title (The -u Option: Undefine a Macro)
/Dest /section-2.1.21 /OUT pdfmark
[/Title (The -E Option: Preprocess Only)
/Dest /section-2.1.22 /OUT pdfmark
[/Title (The -a Option: Don't Preprocess At All)
/Dest /section-2.1.23 /OUT pdfmark
[/Title (The -O Option: Specifying Multipass Optimization)
/Dest /section-2.1.24 /OUT pdfmark
[/Title (The -t Option: Enable TASM Compatibility Mode)
/Dest /section-2.1.25 /OUT pdfmark
[/Title (The -w and -W Options: Enable or Disable Assembly Warnings)
/Dest /section-2.1.26 /OUT pdfmark
[/Title (The -v Option: Display Version Info)
/Dest /section-2.1.27 /OUT pdfmark
[/Title (The --\(g|l\)prefix, --\(g|l\)postfix Options.)
/Dest /section-2.1.28 /OUT pdfmark
[/Title (The --pragma Option)
/Dest /section-2.1.29 /OUT pdfmark
[/Title (The --before Option)
/Dest /section-2.1.30 /OUT pdfmark
[/Title (The --limit-X Option)
/Dest /section-2.1.31 /OUT pdfmark
[/Title (The --keep-all Option)
/Dest /section-2.1.32 /OUT pdfmark
[/Title (The --no-line Option)
/Dest /section-2.1.33 /OUT pdfmark
[/Title (The --reproducible Option)
/Dest /section-2.1.34 /OUT pdfmark
[/Title (The NASMENV Environment Variable)
/Dest /section-2.1.35 /OUT pdfmark
[/Title (Quick Start for MASM Users)
/Count -8 /Dest /section-2.2 /OUT pdfmark
[/Title (NASM Is Case-Sensitive)
/Dest /section-2.2.1 /OUT pdfmark
[/Title (NASM Requires Square Brackets For Memory References)
/Dest /section-2.2.2 /OUT pdfmark
[/Title (NASM Doesn't Store Variable Types)
/Dest /section-2.2.3 /OUT pdfmark
[/Title (NASM Doesn't ASSUME)
/Dest /section-2.2.4 /OUT pdfmark
[/Title (NASM Doesn't Support Memory Models)
/Dest /section-2.2.5 /OUT pdfmark
[/Title (Floating-Point Differences)
/Dest /section-2.2.6 /OUT pdfmark
[/Title (Other Differences)
/Dest /section-2.2.7 /OUT pdfmark
[/Title (MASM compatibility package)
/Dest /section-2.2.8 /OUT pdfmark
[/Title (The NASM Language)
/Count -9 /Dest /chapter-3 /OUT pdfmark
[/Title (Layout of a NASM Source Line)
/Dest /section-3.1 /OUT pdfmark
[/Title (Pseudo-Instructions)
/Count -5 /Dest /section-3.2 /OUT pdfmark
[/Title (Dx: Declaring Initialized Data)
/Dest /section-3.2.1 /OUT pdfmark
[/Title (RESB and Friends: Declaring Uninitialized Data)
/Dest /section-3.2.2 /OUT pdfmark
[/Title (INCBIN: Including External Binary Files)
/Dest /section-3.2.3 /OUT pdfmark
[/Title (EQU: Defining Constants)
/Dest /section-3.2.4 /OUT pdfmark
[/Title (TIMES: Repeating Instructions or Data)
/Dest /section-3.2.5 /OUT pdfmark
[/Title (Effective Addresses)
/Dest /section-3.3 /OUT pdfmark
[/Title (Constants)
/Count -7 /Dest /section-3.4 /OUT pdfmark
[/Title (Numeric Constants)
/Dest /section-3.4.1 /OUT pdfmark
[/Title (Character Strings)
/Dest /section-3.4.2 /OUT pdfmark
[/Title (Character Constants)
/Dest /section-3.4.3 /OUT pdfmark
[/Title (String Constants)
/Dest /section-3.4.4 /OUT pdfmark
[/Title (Unicode Strings)
/Dest /section-3.4.5 /OUT pdfmark
[/Title (Floating-Point Constants)
/Dest /section-3.4.6 /OUT pdfmark
[/Title (Packed BCD Constants)
/Dest /section-3.4.7 /OUT pdfmark
[/Title (Expressions)
/Count -12 /Dest /section-3.5 /OUT pdfmark
[/Title (? ... :: Conditional Operator)
/Dest /section-3.5.1 /OUT pdfmark
[/Title (: ||: Boolean OR Operator)
/Dest /section-3.5.2 /OUT pdfmark
[/Title (: ^^: Boolean XOR Operator)
/Dest /section-3.5.3 /OUT pdfmark
[/Title (: &&: Boolean AND Operator)
/Dest /section-3.5.4 /OUT pdfmark
[/Title (: Comparison Operators)
/Dest /section-3.5.5 /OUT pdfmark
[/Title (|: Bitwise OR Operator)
/Dest /section-3.5.6 /OUT pdfmark
[/Title (^: Bitwise XOR Operator)
/Dest /section-3.5.7 /OUT pdfmark
[/Title (&: Bitwise AND Operator)
/Dest /section-3.5.8 /OUT pdfmark
[/Title (Bit Shift Operators)
/Dest /section-3.5.9 /OUT pdfmark
[/Title (+ and -: Addition and Subtraction Operators)
/Dest /section-3.5.10 /OUT pdfmark
[/Title (Multiplication, Division and Modulo)
/Dest /section-3.5.11 /OUT pdfmark
[/Title (Unary Operators)
/Dest /section-3.5.12 /OUT pdfmark
[/Title (SEG and WRT)
/Dest /section-3.6 /OUT pdfmark
[/Title (STRICT: Inhibiting Optimization)
/Dest /section-3.7 /OUT pdfmark
[/Title (Critical Expressions)
/Dest /section-3.8 /OUT pdfmark
[/Title (Local Labels)
/Dest /section-3.9 /OUT pdfmark
[/Title (The NASM Preprocessor)
/Count -11 /Dest /chapter-4 /OUT pdfmark
[/Title (Single-Line Macros)
/Count -12 /Dest /section-4.1 /OUT pdfmark
[/Title (The Normal Way: %define)
/Dest /section-4.1.1 /OUT pdfmark
[/Title (Resolving %define: %xdefine)
/Dest /section-4.1.2 /OUT pdfmark
[/Title (Macro Indirection: %[...])
/Dest /section-4.1.3 /OUT pdfmark
[/Title (Concatenating Single Line Macro Tokens: %+)
/Dest /section-4.1.4 /OUT pdfmark
[/Title (The Macro Name Itself: %? and %??)
/Dest /section-4.1.5 /OUT pdfmark
[/Title (The Single-Line Macro Name: %*? and %*??)
/Dest /section-4.1.6 /OUT pdfmark
[/Title (Undefining Single-Line Macros: %undef)
/Dest /section-4.1.7 /OUT pdfmark
[/Title (Preprocessor Variables: %assign)
/Dest /section-4.1.8 /OUT pdfmark
[/Title (Defining Strings: %defstr)
/Dest /section-4.1.9 /OUT pdfmark
[/Title (Defining Tokens: %deftok)
/Dest /section-4.1.10 /OUT pdfmark
[/Title (Defining Aliases: %defalias)
/Dest /section-4.1.11 /OUT pdfmark
[/Title (Conditional Comma Operator: %,)
/Dest /section-4.1.12 /OUT pdfmark
[/Title (String Manipulation in Macros)
/Count -3 /Dest /section-4.2 /OUT pdfmark
[/Title (Concatenating Strings: %strcat)
/Dest /section-4.2.1 /OUT pdfmark
[/Title (String Length: %strlen)
/Dest /section-4.2.2 /OUT pdfmark
[/Title (Extracting Substrings: %substr)
/Dest /section-4.2.3 /OUT pdfmark
[/Title (Multi-Line Macros: %macro)
/Count -12 /Dest /section-4.3 /OUT pdfmark
[/Title (Overloading Multi-Line Macros)
/Dest /section-4.3.1 /OUT pdfmark
[/Title (Macro-Local Labels)
/Dest /section-4.3.2 /OUT pdfmark
[/Title (Greedy Macro Parameters)
/Dest /section-4.3.3 /OUT pdfmark
[/Title (Macro Parameters Range)
/Dest /section-4.3.4 /OUT pdfmark
[/Title (Default Macro Parameters)
/Dest /section-4.3.5 /OUT pdfmark
[/Title (%0: Macro Parameter Counter)
/Dest /section-4.3.6 /OUT pdfmark
[/Title (%00: Label Preceeding Macro)
/Dest /section-4.3.7 /OUT pdfmark
[/Title (%rotate: Rotating Macro Parameters)
/Dest /section-4.3.8 /OUT pdfmark
[/Title (Concatenating Macro Parameters)
/Dest /section-4.3.9 /OUT pdfmark
[/Title (Condition Codes as Macro Parameters)
/Dest /section-4.3.10 /OUT pdfmark
[/Title (Disabling Listing Expansion)
/Dest /section-4.3.11 /OUT pdfmark
[/Title (Undefining Multi-Line Macros: %unmacro)
/Dest /section-4.3.12 /OUT pdfmark
[/Title (Conditional Assembly)
/Count -9 /Dest /section-4.4 /OUT pdfmark
[/Title (%ifdef: Testing Single-Line Macro Existence)
/Dest /section-4.4.1 /OUT pdfmark
[/Title (%ifmacro: Testing Multi-Line Macro Existence)
/Dest /section-4.4.2 /OUT pdfmark
[/Title (%ifctx: Testing the Context Stack)
/Dest /section-4.4.3 /OUT pdfmark
[/Title (%if: Testing Arbitrary Numeric Expressions)
/Dest /section-4.4.4 /OUT pdfmark
[/Title (%ifidn and %ifidni: Testing Exact Text Identity)
/Dest /section-4.4.5 /OUT pdfmark
[/Title (%ifid, %ifnum, %ifstr: Testing Token Types)
/Dest /section-4.4.6 /OUT pdfmark
[/Title (%iftoken: Test for a Single Token)
/Dest /section-4.4.7 /OUT pdfmark
[/Title (%ifempty: Test for Empty Expansion)
/Dest /section-4.4.8 /OUT pdfmark
[/Title (%ifenv: Test If Environment Variable Exists)
/Dest /section-4.4.9 /OUT pdfmark
[/Title (Preprocessor Loops: %rep)
/Dest /section-4.5 /OUT pdfmark
[/Title (Source Files and Dependencies)
/Count -4 /Dest /section-4.6 /OUT pdfmark
[/Title (%include: Including Other Files)
/Dest /section-4.6.1 /OUT pdfmark
[/Title (%pathsearch: Search the Include Path)
/Dest /section-4.6.2 /OUT pdfmark
[/Title (%depend: Add Dependent Files)
/Dest /section-4.6.3 /OUT pdfmark
[/Title (%use: Include Standard Macro Package)
/Dest /section-4.6.4 /OUT pdfmark
[/Title (The Context Stack)
/Count -6 /Dest /section-4.7 /OUT pdfmark
[/Title (%push and %pop: Creating and Removing Contexts)
/Dest /section-4.7.1 /OUT pdfmark
[/Title (Context-Local Labels)
/Dest /section-4.7.2 /OUT pdfmark
[/Title (Context-Local Single-Line Macros)
/Dest /section-4.7.3 /OUT pdfmark
[/Title (Context Fall-Through Lookup \(deprecated\))
/Dest /section-4.7.4 /OUT pdfmark
[/Title (%repl: Renaming a Context)
/Dest /section-4.7.5 /OUT pdfmark
[/Title (Example Use of the Context Stack: Block IFs)
/Dest /section-4.7.6 /OUT pdfmark
[/Title (Stack Relative Preprocessor Directives)
/Count -3 /Dest /section-4.8 /OUT pdfmark
[/Title (%arg Directive)
/Dest /section-4.8.1 /OUT pdfmark
[/Title (%stacksize Directive)
/Dest /section-4.8.2 /OUT pdfmark
[/Title (%local Directive)
/Dest /section-4.8.3 /OUT pdfmark
[/Title (Reporting User-Defined Errors: %error, %warning, %fatal)
/Dest /section-4.9 /OUT pdfmark
[/Title (%pragma: Setting Options)
/Count -1 /Dest /section-4.10 /OUT pdfmark
[/Title (Preprocessor Pragmas)
/Dest /section-4.10.1 /OUT pdfmark
[/Title (Other Preprocessor Directives)
/Count -3 /Dest /section-4.11 /OUT pdfmark
[/Title (%line Directive)
/Dest /section-4.11.1 /OUT pdfmark
[/Title (%!variable: Read an Environment Variable.)
/Dest /section-4.11.2 /OUT pdfmark
[/Title (%clear: Clear All Macro Definitions)
/Dest /section-4.11.3 /OUT pdfmark
[/Title (Standard Macros)
/Count -10 /Dest /chapter-5 /OUT pdfmark
[/Title (NASM Version Macros)
/Count -2 /Dest /section-5.1 /OUT pdfmark
[/Title (__?NASM_VERSION_ID?__: NASM Version ID)
/Dest /section-5.1.1 /OUT pdfmark
[/Title (__?NASM_VER?__: NASM Version String)
/Dest /section-5.1.2 /OUT pdfmark
[/Title (__?FILE?__ and __?LINE?__: File Name and Line Number)
/Dest /section-5.2 /OUT pdfmark
[/Title (__?BITS?__: Current Code Generation Mode)
/Dest /section-5.3 /OUT pdfmark
[/Title (__?OUTPUT_FORMAT?__: Current Output Format)
/Dest /section-5.4 /OUT pdfmark
[/Title (__?DEBUG_FORMAT?__: Current Debug Format)
/Dest /section-5.5 /OUT pdfmark
[/Title (Assembly Date and Time Macros)
/Dest /section-5.6 /OUT pdfmark
[/Title (__?USE_package?__: Package Include Test)
/Dest /section-5.7 /OUT pdfmark
[/Title (__?PASS?__: Assembly Pass)
/Dest /section-5.8 /OUT pdfmark
[/Title (Structure Data Types)
/Count -2 /Dest /section-5.9 /OUT pdfmark
[/Title (STRUC and ENDSTRUC: Declaring Structure Data Types)
/Dest /section-5.9.1 /OUT pdfmark
[/Title (ISTRUC, AT and IEND: Declaring Instances of Structures)
/Dest /section-5.9.2 /OUT pdfmark
[/Title (Alignment Control)
/Count -2 /Dest /section-5.10 /OUT pdfmark
[/Title (ALIGN and ALIGNB: Code and Data Alignment)
/Dest /section-5.10.1 /OUT pdfmark
[/Title (SECTALIGN: Section Alignment)
/Dest /section-5.10.2 /OUT pdfmark
[/Title (Standard Macro Packages)
/Count -5 /Dest /chapter-6 /OUT pdfmark
[/Title (altreg: Alternate Register Names)
/Dest /section-6.1 /OUT pdfmark
[/Title (smartalign: Smart ALIGN Macro)
/Dest /section-6.2 /OUT pdfmark
[/Title (fp: Floating-point macros)
/Dest /section-6.3 /OUT pdfmark
[/Title (ifunc: Integer functions)
/Count -1 /Dest /section-6.4 /OUT pdfmark
[/Title (Integer logarithms)
/Dest /section-6.4.1 /OUT pdfmark
[/Title (masm: MASM compatibility)
/Dest /section-6.5 /OUT pdfmark
[/Title (Assembler Directives)
/Count -13 /Dest /chapter-7 /OUT pdfmark
[/Title (BITS: Specifying Target Processor Mode)
/Count -1 /Dest /section-7.1 /OUT pdfmark
[/Title (USE16 & USE32: Aliases for BITS)
/Dest /section-7.1.1 /OUT pdfmark
[/Title (DEFAULT: Change the assembler defaults)
/Count -2 /Dest /section-7.2 /OUT pdfmark
[/Title (REL & ABS: RIP-relative addressing)
/Dest /section-7.2.1 /OUT pdfmark
[/Title (BND & NOBND: BND prefix)
/Dest /section-7.2.2 /OUT pdfmark
[/Title (SECTION or SEGMENT: Changing and Defining Sections)
/Count -1 /Dest /section-7.3 /OUT pdfmark
[/Title (The __?SECT?__ Macro)
/Dest /section-7.3.1 /OUT pdfmark
[/Title (ABSOLUTE: Defining Absolute Labels)
/Dest /section-7.4 /OUT pdfmark
[/Title (EXTERN: Importing Symbols from Other Modules)
/Dest /section-7.5 /OUT pdfmark
[/Title (REQUIRED: Unconditionally Importing Symbols from Other Modules)
/Dest /section-7.6 /OUT pdfmark
[/Title (GLOBAL: Exporting Symbols to Other Modules)
/Dest /section-7.7 /OUT pdfmark
[/Title (COMMON: Defining Common Data Areas)
/Dest /section-7.8 /OUT pdfmark
[/Title (STATIC: Local Symbols within Modules)
/Dest /section-7.9 /OUT pdfmark
[/Title (\(G|L\)PREFIX, \(G|L\)POSTFIX: Mangling Symbols)
/Dest /section-7.10 /OUT pdfmark
[/Title (CPU: Defining CPU Dependencies)
/Dest /section-7.11 /OUT pdfmark
[/Title (FLOAT: Handling of floating-point constants)
/Dest /section-7.12 /OUT pdfmark
[/Title ([WARNING]: Enable or disable warnings)
/Dest /section-7.13 /OUT pdfmark
[/Title (Output Formats)
/Count -14 /Dest /chapter-8 /OUT pdfmark
[/Title (bin: Flat-Form Binary Output)
/Count -4 /Dest /section-8.1 /OUT pdfmark
[/Title (ORG: Binary File Program Origin)
/Dest /section-8.1.1 /OUT pdfmark
[/Title (bin Extensions to the SECTION Directive, bin extensions to})
/Dest /section-8.1.2 /OUT pdfmark
[/Title (Multisection Support for the bin Format)
/Dest /section-8.1.3 /OUT pdfmark
[/Title (Map Files)
/Dest /section-8.1.4 /OUT pdfmark
[/Title (ith: Intel Hex Output)
/Dest /section-8.2 /OUT pdfmark
[/Title (srec: Motorola S-Records Output)
/Dest /section-8.3 /OUT pdfmark
[/Title (obj: Microsoft OMF Object Files)
/Count -9 /Dest /section-8.4 /OUT pdfmark
[/Title (obj Extensions to the SEGMENT Directive)
/Dest /section-8.4.1 /OUT pdfmark
[/Title (GROUP: Defining Groups of Segments)
/Dest /section-8.4.2 /OUT pdfmark
[/Title (UPPERCASE: Disabling Case Sensitivity in Output)
/Dest /section-8.4.3 /OUT pdfmark
[/Title (IMPORT: Importing DLL Symbols)
/Dest /section-8.4.4 /OUT pdfmark
[/Title (EXPORT: Exporting DLL Symbols)
/Dest /section-8.4.5 /OUT pdfmark
[/Title (..start: Defining the Program Entry Point)
/Dest /section-8.4.6 /OUT pdfmark
[/Title (obj Extensions to the EXTERN Directive)
/Dest /section-8.4.7 /OUT pdfmark
[/Title (obj Extensions to the COMMON Directive)
/Dest /section-8.4.8 /OUT pdfmark
[/Title (Embedded File Dependency Information)
/Dest /section-8.4.9 /OUT pdfmark
[/Title (win32: Microsoft Win32 Object Files)
/Count -3 /Dest /section-8.5 /OUT pdfmark
[/Title (win32 Extensions to the SECTION Directive)
/Dest /section-8.5.1 /OUT pdfmark
[/Title (win32: Safe Structured Exception Handling)
/Dest /section-8.5.2 /OUT pdfmark
[/Title (Debugging formats for Windows )
/Dest /section-8.5.3 /OUT pdfmark
[/Title (win64: Microsoft Win64 Object Files)
/Count -2 /Dest /section-8.6 /OUT pdfmark
[/Title (win64: Writing Position-Independent Code)
/Dest /section-8.6.1 /OUT pdfmark
[/Title (win64: Structured Exception Handling)
/Dest /section-8.6.2 /OUT pdfmark
[/Title (coff: Common Object File Format)
/Dest /section-8.7 /OUT pdfmark
[/Title (macho32 and macho64: Mach Object File Format)
/Count -5 /Dest /section-8.8 /OUT pdfmark
[/Title (macho extensions to the SECTION Directive )
/Dest /section-8.8.1 /OUT pdfmark
[/Title (Thread Local Storage in Mach-O: macho special symbols and WRT)
/Dest /section-8.8.2 /OUT pdfmark
[/Title (macho specfic directive subsections_via_symbols)
/Dest /section-8.8.3 /OUT pdfmark
[/Title (macho specfic directive no_dead_strip)
/Dest /section-8.8.4 /OUT pdfmark
[/Title (macho specific extensions to the GLOBAL Directive: private_extern)
/Dest /section-8.8.5 /OUT pdfmark
[/Title (elf32, elf64, elfx32: Executable and Linkable Format Object Files)
/Count -9 /Dest /section-8.9 /OUT pdfmark
[/Title (ELF specific directive osabi)
/Dest /section-8.9.1 /OUT pdfmark
[/Title (ELF extensions to the SECTION Directive )
/Dest /section-8.9.2 /OUT pdfmark
[/Title (Position-Independent Code: ELF Special Symbols and WRT)
/Dest /section-8.9.3 /OUT pdfmark
[/Title (Thread Local Storage in ELF: elf Special Symbols and WRT)
/Dest /section-8.9.4 /OUT pdfmark
[/Title (elf Extensions to the GLOBAL Directive)
/Dest /section-8.9.5 /OUT pdfmark
[/Title (elf Extensions to the EXTERN Directive)
/Dest /section-8.9.6 /OUT pdfmark
[/Title (elf Extensions to the COMMON Directive )
/Dest /section-8.9.7 /OUT pdfmark
[/Title (16-bit code and ELF )
/Dest /section-8.9.8 /OUT pdfmark
[/Title (Debug formats and ELF )
/Dest /section-8.9.9 /OUT pdfmark
[/Title (aout: Linux a.out Object Files)
/Dest /section-8.10 /OUT pdfmark
[/Title (aoutb: NetBSD/FreeBSD/OpenBSD a.out Object Files)
/Dest /section-8.11 /OUT pdfmark
[/Title (as86: Minix/Linux as86 Object Files)
/Dest /section-8.12 /OUT pdfmark
[/Title (rdf: Relocatable Dynamic Object File Format \(deprecated\))
/Count -4 /Dest /section-8.13 /OUT pdfmark
[/Title (Requiring a Library: The LIBRARY Directive)
/Dest /section-8.13.1 /OUT pdfmark
[/Title (Specifying a Module Name: The MODULE Directive)
/Dest /section-8.13.2 /OUT pdfmark
[/Title (rdf Extensions to the GLOBAL Directive)
/Dest /section-8.13.3 /OUT pdfmark
[/Title (rdf Extensions to the EXTERN Directive)
/Dest /section-8.13.4 /OUT pdfmark
[/Title (dbg: Debugging Format)
/Dest /section-8.14 /OUT pdfmark
[/Title (Writing 16-bit Code \(DOS, Windows 3/3.1\))
/Count -5 /Dest /chapter-9 /OUT pdfmark
[/Title (Producing .EXE Files)
/Count -2 /Dest /section-9.1 /OUT pdfmark
[/Title (Using the obj Format To Generate .EXE Files)
/Dest /section-9.1.1 /OUT pdfmark
[/Title (Using the bin Format To Generate .EXE Files)
/Dest /section-9.1.2 /OUT pdfmark
[/Title (Producing .COM Files)
/Count -2 /Dest /section-9.2 /OUT pdfmark
[/Title (Using the bin Format To Generate .COM Files)
/Dest /section-9.2.1 /OUT pdfmark
[/Title (Using the obj Format To Generate .COM Files)
/Dest /section-9.2.2 /OUT pdfmark
[/Title (Producing .SYS Files)
/Dest /section-9.3 /OUT pdfmark
[/Title (Interfacing to 16-bit C Programs)
/Count -5 /Dest /section-9.4 /OUT pdfmark
[/Title (External Symbol Names)
/Dest /section-9.4.1 /OUT pdfmark
[/Title (Memory Models)
/Dest /section-9.4.2 /OUT pdfmark
[/Title (Function Definitions and Function Calls)
/Dest /section-9.4.3 /OUT pdfmark
[/Title (Accessing Data Items)
/Dest /section-9.4.4 /OUT pdfmark
[/Title (c16.mac: Helper Macros for the 16-bit C Interface)
/Dest /section-9.4.5 /OUT pdfmark
[/Title (Interfacing to Borland Pascal Programs)
/Count -3 /Dest /section-9.5 /OUT pdfmark
[/Title (The Pascal Calling Convention)
/Dest /section-9.5.1 /OUT pdfmark
[/Title (Borland Pascal Segment Name Restrictions)
/Dest /section-9.5.2 /OUT pdfmark
[/Title (Using c16.mac With Pascal Programs)
/Dest /section-9.5.3 /OUT pdfmark
[/Title (Writing 32-bit Code \(Unix, Win32, DJGPP\))
/Count -2 /Dest /chapter-10 /OUT pdfmark
[/Title (Interfacing to 32-bit C Programs)
/Count -4 /Dest /section-10.1 /OUT pdfmark
[/Title (External Symbol Names)
/Dest /section-10.1.1 /OUT pdfmark
[/Title (Function Definitions and Function Calls)
/Dest /section-10.1.2 /OUT pdfmark
[/Title (Accessing Data Items)
/Dest /section-10.1.3 /OUT pdfmark
[/Title (c32.mac: Helper Macros for the 32-bit C Interface)
/Dest /section-10.1.4 /OUT pdfmark
[/Title (Writing NetBSD/FreeBSD/OpenBSD and Linux/ELF Shared Libraries)
/Count -6 /Dest /section-10.2 /OUT pdfmark
[/Title (Obtaining the Address of the GOT)
/Dest /section-10.2.1 /OUT pdfmark
[/Title (Finding Your Local Data Items)
/Dest /section-10.2.2 /OUT pdfmark
[/Title (Finding External and Common Data Items)
/Dest /section-10.2.3 /OUT pdfmark
[/Title (Exporting Symbols to the Library User)
/Dest /section-10.2.4 /OUT pdfmark
[/Title (Calling Procedures Outside the Library)
/Dest /section-10.2.5 /OUT pdfmark
[/Title (Generating the Library File)
/Dest /section-10.2.6 /OUT pdfmark
[/Title (Mixing 16- and 32-bit Code)
/Count -3 /Dest /chapter-11 /OUT pdfmark
[/Title (Mixed-Size Jumps)
/Dest /section-11.1 /OUT pdfmark
[/Title (Addressing Between Different-Size Segments)
/Dest /section-11.2 /OUT pdfmark
[/Title (Other Mixed-Size Instructions)
/Dest /section-11.3 /OUT pdfmark
[/Title (Writing 64-bit Code \(Unix, Win64\))
/Count -4 /Dest /chapter-12 /OUT pdfmark
[/Title (Register Names in 64-bit Mode)
/Dest /section-12.1 /OUT pdfmark
[/Title (Immediates and Displacements in 64-bit Mode)
/Dest /section-12.2 /OUT pdfmark
[/Title (Interfacing to 64-bit C Programs \(Unix\))
/Dest /section-12.3 /OUT pdfmark
[/Title (Interfacing to 64-bit C Programs \(Win64\))
/Dest /section-12.4 /OUT pdfmark
[/Title (Troubleshooting)
/Count -1 /Dest /chapter-13 /OUT pdfmark
[/Title (Common Problems)
/Count -4 /Dest /section-13.1 /OUT pdfmark
[/Title (NASM Generates Inefficient Code)
/Dest /section-13.1.1 /OUT pdfmark
[/Title (My Jumps are Out of Range)
/Dest /section-13.1.2 /OUT pdfmark
[/Title (ORG Doesn't Work)
/Dest /section-13.1.3 /OUT pdfmark
[/Title (TIMES Doesn't Work)
/Dest /section-13.1.4 /OUT pdfmark
[/Title (Ndisasm)
/Count -2 /Dest /appendix-A /OUT pdfmark
[/Title (Introduction)
/Dest /section-A.1 /OUT pdfmark
[/Title (Running NDISASM)
/Count -4 /Dest /section-A.2 /OUT pdfmark
[/Title (COM Files: Specifying an Origin)
/Dest /section-A.2.1 /OUT pdfmark
[/Title (Code Following Data: Synchronization)
/Dest /section-A.2.2 /OUT pdfmark
[/Title (Mixed Code and Data: Automatic \(Intelligent\) Synchronization )
/Dest /section-A.2.3 /OUT pdfmark
[/Title (Other Options)
/Dest /section-A.2.4 /OUT pdfmark
[/Title (Instruction List)
/Count -1 /Dest /appendix-B /OUT pdfmark
[/Title (Introduction)
/Count -60 /Dest /section-B.1 /OUT pdfmark
[/Title (Special instructions \(pseudo-ops\))
/Dest /section-B.1.1 /OUT pdfmark
[/Title (Conventional instructions)
/Dest /section-B.1.2 /OUT pdfmark
[/Title (Katmai Streaming SIMD instructions \(SSE \226\226 a.k.a. KNI, XMM, MMX2\))
/Dest /section-B.1.3 /OUT pdfmark
[/Title (Introduced in Deschutes but necessary for SSE support)
/Dest /section-B.1.4 /OUT pdfmark
[/Title (XSAVE group \(AVX and extended state\))
/Dest /section-B.1.5 /OUT pdfmark
[/Title (Generic memory operations)
/Dest /section-B.1.6 /OUT pdfmark
[/Title (New MMX instructions introduced in Katmai)
/Dest /section-B.1.7 /OUT pdfmark
[/Title (AMD Enhanced 3DNow! \(Athlon\) instructions)
/Dest /section-B.1.8 /OUT pdfmark
[/Title (Willamette SSE2 Cacheability Instructions)
/Dest /section-B.1.9 /OUT pdfmark
[/Title (Willamette MMX instructions \(SSE2 SIMD Integer Instructions\))
/Dest /section-B.1.10 /OUT pdfmark
[/Title (Willamette Streaming SIMD instructions \(SSE2\))
/Dest /section-B.1.11 /OUT pdfmark
[/Title (Prescott New Instructions \(SSE3\))
/Dest /section-B.1.12 /OUT pdfmark
[/Title (VMX/SVM Instructions)
/Dest /section-B.1.13 /OUT pdfmark
[/Title (Extended Page Tables VMX instructions)
/Dest /section-B.1.14 /OUT pdfmark
[/Title (Tejas New Instructions \(SSSE3\))
/Dest /section-B.1.15 /OUT pdfmark
[/Title (AMD SSE4A)
/Dest /section-B.1.16 /OUT pdfmark
[/Title (New instructions in Barcelona)
/Dest /section-B.1.17 /OUT pdfmark
[/Title (Penryn New Instructions \(SSE4.1\))
/Dest /section-B.1.18 /OUT pdfmark
[/Title (Nehalem New Instructions \(SSE4.2\))
/Dest /section-B.1.19 /OUT pdfmark
[/Title (Intel SMX)
/Dest /section-B.1.20 /OUT pdfmark
[/Title (Geode \(Cyrix\) 3DNow! additions)
/Dest /section-B.1.21 /OUT pdfmark
[/Title (Intel new instructions in ???)
/Dest /section-B.1.22 /OUT pdfmark
[/Title (Intel AES instructions)
/Dest /section-B.1.23 /OUT pdfmark
[/Title (Intel AVX AES instructions)
/Dest /section-B.1.24 /OUT pdfmark
[/Title (Intel instruction extension based on pub number 319433-030 dated October 2017)
/Dest /section-B.1.25 /OUT pdfmark
[/Title (Intel AVX instructions)
/Dest /section-B.1.26 /OUT pdfmark
[/Title (Intel Carry-Less Multiplication instructions \(CLMUL\))
/Dest /section-B.1.27 /OUT pdfmark
[/Title (Intel AVX Carry-Less Multiplication instructions \(CLMUL\))
/Dest /section-B.1.28 /OUT pdfmark
[/Title (Intel Fused Multiply-Add instructions \(FMA\))
/Dest /section-B.1.29 /OUT pdfmark
[/Title (Intel post-32 nm processor instructions)
/Dest /section-B.1.30 /OUT pdfmark
[/Title (VIA \(Centaur\) security instructions)
/Dest /section-B.1.31 /OUT pdfmark
[/Title (AMD Lightweight Profiling \(LWP\) instructions)
/Dest /section-B.1.32 /OUT pdfmark
[/Title (AMD XOP and FMA4 instructions \(SSE5\))
/Dest /section-B.1.33 /OUT pdfmark
[/Title (Intel AVX2 instructions)
/Dest /section-B.1.34 /OUT pdfmark
[/Title (Intel Transactional Synchronization Extensions \(TSX\))
/Dest /section-B.1.35 /OUT pdfmark
[/Title (Intel BMI1 and BMI2 instructions, AMD TBM instructions)
/Dest /section-B.1.36 /OUT pdfmark
[/Title (Intel Memory Protection Extensions \(MPX\))
/Dest /section-B.1.37 /OUT pdfmark
[/Title (Intel SHA acceleration instructions)
/Dest /section-B.1.38 /OUT pdfmark
[/Title (AVX-512 mask register instructions)
/Dest /section-B.1.39 /OUT pdfmark
[/Title (AVX-512 mask register instructions \(aliases requiring explicit size support\))
/Dest /section-B.1.40 /OUT pdfmark
[/Title (AVX-512 instructions)
/Dest /section-B.1.41 /OUT pdfmark
[/Title (Intel memory protection keys for userspace \(PKU aka PKEYs\))
/Dest /section-B.1.42 /OUT pdfmark
[/Title (Read Processor ID)
/Dest /section-B.1.43 /OUT pdfmark
[/Title (New memory instructions)
/Dest /section-B.1.44 /OUT pdfmark
[/Title (Processor trace write)
/Dest /section-B.1.45 /OUT pdfmark
[/Title (Instructions from the Intel Instruction Set Extensions,)
/Dest /section-B.1.46 /OUT pdfmark
[/Title (doc 319433-034 May 2018)
/Dest /section-B.1.47 /OUT pdfmark
[/Title (Galois field operations \(GFNI\))
/Dest /section-B.1.48 /OUT pdfmark
[/Title (AVX512 Vector Bit Manipulation Instructions 2)
/Dest /section-B.1.49 /OUT pdfmark
[/Title (AVX512 VNNI)
/Dest /section-B.1.50 /OUT pdfmark
[/Title (AVX512 Bit Algorithms)
/Dest /section-B.1.51 /OUT pdfmark
[/Title (AVX512 4-iteration Multiply-Add)
/Dest /section-B.1.52 /OUT pdfmark
[/Title (AVX512 4-iteration Dot Product)
/Dest /section-B.1.53 /OUT pdfmark
[/Title (Intel Software Guard Extensions \(SGX\))
/Dest /section-B.1.54 /OUT pdfmark
[/Title (Intel Control-Flow Enforcement Technology \(CET\))
/Dest /section-B.1.55 /OUT pdfmark
[/Title (Instructions from ISE doc 319433-040, June 2020)
/Dest /section-B.1.56 /OUT pdfmark
[/Title (AVX512 Bfloat16 instructions)
/Dest /section-B.1.57 /OUT pdfmark
[/Title (AVX512 mask intersect instructions)
/Dest /section-B.1.58 /OUT pdfmark
[/Title (Intel Advanced Matrix Extensions \(AMX\))
/Dest /section-B.1.59 /OUT pdfmark
[/Title (Systematic names for the hinting nop instructions)
/Dest /section-B.1.60 /OUT pdfmark
[/Title (NASM Version History)
/Count -3 /Dest /appendix-C /OUT pdfmark
[/Title (NASM 2 Series)
/Count -61 /Dest /section-C.1 /OUT pdfmark
[/Title (Version 2.15.05)
/Dest /section-C.1.1 /OUT pdfmark
[/Title (Version 2.15.04)
/Dest /section-C.1.2 /OUT pdfmark
[/Title (Version 2.15.03)
/Dest /section-C.1.3 /OUT pdfmark
[/Title (Version 2.15.02)
/Dest /section-C.1.4 /OUT pdfmark
[/Title (Version 2.15.01)
/Dest /section-C.1.5 /OUT pdfmark
[/Title (Version 2.15)
/Dest /section-C.1.6 /OUT pdfmark
[/Title (Version 2.14.03)
/Dest /section-C.1.7 /OUT pdfmark
[/Title (Version 2.14.02)
/Dest /section-C.1.8 /OUT pdfmark
[/Title (Version 2.14.01)
/Dest /section-C.1.9 /OUT pdfmark
[/Title (Version 2.14)
/Dest /section-C.1.10 /OUT pdfmark
[/Title (Version 2.13.03)
/Dest /section-C.1.11 /OUT pdfmark
[/Title (Version 2.13.02)
/Dest /section-C.1.12 /OUT pdfmark
[/Title (Version 2.13.01)
/Dest /section-C.1.13 /OUT pdfmark
[/Title (Version 2.13)
/Dest /section-C.1.14 /OUT pdfmark
[/Title (Version 2.12.02)
/Dest /section-C.1.15 /OUT pdfmark
[/Title (Version 2.12.01)
/Dest /section-C.1.16 /OUT pdfmark
[/Title (Version 2.12)
/Dest /section-C.1.17 /OUT pdfmark
[/Title (Version 2.11.09)
/Dest /section-C.1.18 /OUT pdfmark
[/Title (Version 2.11.08)
/Dest /section-C.1.19 /OUT pdfmark
[/Title (Version 2.11.07)
/Dest /section-C.1.20 /OUT pdfmark
[/Title (Version 2.11.06)
/Dest /section-C.1.21 /OUT pdfmark
[/Title (Version 2.11.05)
/Dest /section-C.1.22 /OUT pdfmark
[/Title (Version 2.11.04)
/Dest /section-C.1.23 /OUT pdfmark
[/Title (Version 2.11.03)
/Dest /section-C.1.24 /OUT pdfmark
[/Title (Version 2.11.02)
/Dest /section-C.1.25 /OUT pdfmark
[/Title (Version 2.11.01)
/Dest /section-C.1.26 /OUT pdfmark
[/Title (Version 2.11)
/Dest /section-C.1.27 /OUT pdfmark
[/Title (Version 2.10.09)
/Dest /section-C.1.28 /OUT pdfmark
[/Title (Version 2.10.08)
/Dest /section-C.1.29 /OUT pdfmark
[/Title (Version 2.10.07)
/Dest /section-C.1.30 /OUT pdfmark
[/Title (Version 2.10.06)
/Dest /section-C.1.31 /OUT pdfmark
[/Title (Version 2.10.05)
/Dest /section-C.1.32 /OUT pdfmark
[/Title (Version 2.10.04)
/Dest /section-C.1.33 /OUT pdfmark
[/Title (Version 2.10.03)
/Dest /section-C.1.34 /OUT pdfmark
[/Title (Version 2.10.02)
/Dest /section-C.1.35 /OUT pdfmark
[/Title (Version 2.10.01)
/Dest /section-C.1.36 /OUT pdfmark
[/Title (Version 2.10)
/Dest /section-C.1.37 /OUT pdfmark
[/Title (Version 2.09.10)
/Dest /section-C.1.38 /OUT pdfmark
[/Title (Version 2.09.09)
/Dest /section-C.1.39 /OUT pdfmark
[/Title (Version 2.09.08)
/Dest /section-C.1.40 /OUT pdfmark
[/Title (Version 2.09.07)
/Dest /section-C.1.41 /OUT pdfmark
[/Title (Version 2.09.06)
/Dest /section-C.1.42 /OUT pdfmark
[/Title (Version 2.09.05)
/Dest /section-C.1.43 /OUT pdfmark
[/Title (Version 2.09.04)
/Dest /section-C.1.44 /OUT pdfmark
[/Title (Version 2.09.03)
/Dest /section-C.1.45 /OUT pdfmark
[/Title (Version 2.09.02)
/Dest /section-C.1.46 /OUT pdfmark
[/Title (Version 2.09.01)
/Dest /section-C.1.47 /OUT pdfmark
[/Title (Version 2.09)
/Dest /section-C.1.48 /OUT pdfmark
[/Title (Version 2.08.02)
/Dest /section-C.1.49 /OUT pdfmark
[/Title (Version 2.08.01)
/Dest /section-C.1.50 /OUT pdfmark
[/Title (Version 2.08)
/Dest /section-C.1.51 /OUT pdfmark
[/Title (Version 2.07)
/Dest /section-C.1.52 /OUT pdfmark
[/Title (Version 2.06)
/Dest /section-C.1.53 /OUT pdfmark
[/Title (Version 2.05.01)
/Dest /section-C.1.54 /OUT pdfmark
[/Title (Version 2.05)
/Dest /section-C.1.55 /OUT pdfmark
[/Title (Version 2.04)
/Dest /section-C.1.56 /OUT pdfmark
[/Title (Version 2.03.01)
/Dest /section-C.1.57 /OUT pdfmark
[/Title (Version 2.03)
/Dest /section-C.1.58 /OUT pdfmark
[/Title (Version 2.02)
/Dest /section-C.1.59 /OUT pdfmark
[/Title (Version 2.01)
/Dest /section-C.1.60 /OUT pdfmark
[/Title (Version 2.00)
/Dest /section-C.1.61 /OUT pdfmark
[/Title (NASM 0.98 Series)
/Count -55 /Dest /section-C.2 /OUT pdfmark
[/Title (Version 0.98.39)
/Dest /section-C.2.1 /OUT pdfmark
[/Title (Version 0.98.38)
/Dest /section-C.2.2 /OUT pdfmark
[/Title (Version 0.98.37)
/Dest /section-C.2.3 /OUT pdfmark
[/Title (Version 0.98.36)
/Dest /section-C.2.4 /OUT pdfmark
[/Title (Version 0.98.35)
/Dest /section-C.2.5 /OUT pdfmark
[/Title (Version 0.98.34)
/Dest /section-C.2.6 /OUT pdfmark
[/Title (Version 0.98.33)
/Dest /section-C.2.7 /OUT pdfmark
[/Title (Version 0.98.32)
/Dest /section-C.2.8 /OUT pdfmark
[/Title (Version 0.98.31)
/Dest /section-C.2.9 /OUT pdfmark
[/Title (Version 0.98.30)
/Dest /section-C.2.10 /OUT pdfmark
[/Title (Version 0.98.28)
/Dest /section-C.2.11 /OUT pdfmark
[/Title (Version 0.98.26)
/Dest /section-C.2.12 /OUT pdfmark
[/Title (Version 0.98.25alt)
/Dest /section-C.2.13 /OUT pdfmark
[/Title (Version 0.98.25)
/Dest /section-C.2.14 /OUT pdfmark
[/Title (Version 0.98.24p1)
/Dest /section-C.2.15 /OUT pdfmark
[/Title (Version 0.98.24)
/Dest /section-C.2.16 /OUT pdfmark
[/Title (Version 0.98.23)
/Dest /section-C.2.17 /OUT pdfmark
[/Title (Version 0.98.22)
/Dest /section-C.2.18 /OUT pdfmark
[/Title (Version 0.98.21)
/Dest /section-C.2.19 /OUT pdfmark
[/Title (Version 0.98.20)
/Dest /section-C.2.20 /OUT pdfmark
[/Title (Version 0.98.19)
/Dest /section-C.2.21 /OUT pdfmark
[/Title (Version 0.98.18)
/Dest /section-C.2.22 /OUT pdfmark
[/Title (Version 0.98.17)
/Dest /section-C.2.23 /OUT pdfmark
[/Title (Version 0.98.16)
/Dest /section-C.2.24 /OUT pdfmark
[/Title (Version 0.98.15)
/Dest /section-C.2.25 /OUT pdfmark
[/Title (Version 0.98.14)
/Dest /section-C.2.26 /OUT pdfmark
[/Title (Version 0.98.13)
/Dest /section-C.2.27 /OUT pdfmark
[/Title (Version 0.98.12)
/Dest /section-C.2.28 /OUT pdfmark
[/Title (Version 0.98.11)
/Dest /section-C.2.29 /OUT pdfmark
[/Title (Version 0.98.10)
/Dest /section-C.2.30 /OUT pdfmark
[/Title (Version 0.98.09)
/Dest /section-C.2.31 /OUT pdfmark
[/Title (Version 0.98.08)
/Dest /section-C.2.32 /OUT pdfmark
[/Title (Version 0.98.09b with John Coffman patches released 28-Oct-2001)
/Dest /section-C.2.33 /OUT pdfmark
[/Title (Version 0.98.07 released 01/28/01)
/Dest /section-C.2.34 /OUT pdfmark
[/Title (Version 0.98.06f released 01/18/01)
/Dest /section-C.2.35 /OUT pdfmark
[/Title (Version 0.98.06e released 01/09/01)
/Dest /section-C.2.36 /OUT pdfmark
[/Title (Version 0.98p1)
/Dest /section-C.2.37 /OUT pdfmark
[/Title (Version 0.98bf \(bug-fixed\))
/Dest /section-C.2.38 /OUT pdfmark
[/Title (Version 0.98.03 with John Coffman's changes released 27-Jul-2000)
/Dest /section-C.2.39 /OUT pdfmark
[/Title (Version 0.98.03)
/Dest /section-C.2.40 /OUT pdfmark
[/Title (Version 0.98)
/Dest /section-C.2.41 /OUT pdfmark
[/Title (Version 0.98p9)
/Dest /section-C.2.42 /OUT pdfmark
[/Title (Version 0.98p8)
/Dest /section-C.2.43 /OUT pdfmark
[/Title (Version 0.98p7)
/Dest /section-C.2.44 /OUT pdfmark
[/Title (Version 0.98p6)
/Dest /section-C.2.45 /OUT pdfmark
[/Title (Version 0.98p3.7)
/Dest /section-C.2.46 /OUT pdfmark
[/Title (Version 0.98p3.6)
/Dest /section-C.2.47 /OUT pdfmark
[/Title (Version 0.98p3.5)
/Dest /section-C.2.48 /OUT pdfmark
[/Title (Version 0.98p3.4)
/Dest /section-C.2.49 /OUT pdfmark
[/Title (Version 0.98p3.3)
/Dest /section-C.2.50 /OUT pdfmark
[/Title (Version 0.98p3.2)
/Dest /section-C.2.51 /OUT pdfmark
[/Title (Version 0.98p3-hpa)
/Dest /section-C.2.52 /OUT pdfmark
[/Title (Version 0.98 pre-release 3)
/Dest /section-C.2.53 /OUT pdfmark
[/Title (Version 0.98 pre-release 2)
/Dest /section-C.2.54 /OUT pdfmark
[/Title (Version 0.98 pre-release 1)
/Dest /section-C.2.55 /OUT pdfmark
[/Title (NASM 0.9 Series)
/Count -8 /Dest /section-C.3 /OUT pdfmark
[/Title (Version 0.97 released December 1997)
/Dest /section-C.3.1 /OUT pdfmark
[/Title (Version 0.96 released November 1997)
/Dest /section-C.3.2 /OUT pdfmark
[/Title (Version 0.95 released July 1997)
/Dest /section-C.3.3 /OUT pdfmark
[/Title (Version 0.94 released April 1997)
/Dest /section-C.3.4 /OUT pdfmark
[/Title (Version 0.93 released January 1997)
/Dest /section-C.3.5 /OUT pdfmark
[/Title (Version 0.92 released January 1997)
/Dest /section-C.3.6 /OUT pdfmark
[/Title (Version 0.91 released November 1996)
/Dest /section-C.3.7 /OUT pdfmark
[/Title (Version 0.90 released October 1996)
/Dest /section-C.3.8 /OUT pdfmark
[/Title (Building NASM from Source)
/Count -3 /Dest /appendix-D /OUT pdfmark
[/Title (Building from a Source Archive)
/Dest /section-D.1 /OUT pdfmark
[/Title (Building from the git Repository)
/Dest /section-D.2 /OUT pdfmark
[/Title (Building the documentation)
/Dest /section-D.3 /OUT pdfmark
[/Title (Contact Information)
/Count -2 /Dest /appendix-E /OUT pdfmark
[/Title (Website)
/Count -2 /Dest /section-E.1 /OUT pdfmark
[/Title (User Forums)
/Dest /section-E.1.1 /OUT pdfmark
[/Title (Development Community)
/Dest /section-E.1.2 /OUT pdfmark
[/Title (Reporting Bugs)
/Dest /section-E.2 /OUT pdfmark
[/Title (Index)
/Dest /index /OUT pdfmark
setpagesize
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
save
%%EndPageSetup
/1 pa
/ti (NASM \226 The Netwide Assembler) def
/sti (version 2.15.05) def
lmarg pageheight 2 mul 3 div moveto
tfont0 setfont
/title linkdest ti show
lmarg pageheight 2 mul 3 div 10 sub moveto
0 setlinecap 3 setlinewidth
pagewidth lmarg sub rmarg sub 0 rlineto currentpoint stroke moveto
hfont1 setfont sti stringwidth pop neg -16.8 rmoveto
sti show
BeginEPSF
186.348484848485 212 translate
0.848484848484849 dup scale
-44 -42 translate
44 42 moveto
306 42 lineto
306 306 lineto
44 306 lineto
44 42 lineto clip newpath
%%BeginDocument: (nasmlogo.eps)
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: cairo 1.10.2 (http://cairographics.org)
%%CreationDate: Sun Feb 26 02:08:42 2012
%%Pages: 1
%%BoundingBox: 44 42 306 306
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%EndComments
%%BeginProlog
/cairo_eps_state save def
/dict_count countdictstack def
/op_count count 1 sub def
userdict begin
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/pdfmark where { pop globaldict /?pdfmark /exec load put }
    { globaldict begin /?pdfmark /pop load def /pdfmark
    /cleartomark load def end } ifelse
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
%%EndProlog
%%Page: 1 1
%%BeginPageSetup
%%PageBoundingBox: 44 42 306 306
%%EndPageSetup
q 44 42 262 264 rectclip q
0.501961 g
279.656 304.422 m 265.238 304.422 253.559 292.734 253.559 278.32 c 
253.559 273.254 255.023 268.539 257.523 264.535 c 240.906 247.918 l 
220.031 266.812 192.352 278.32 161.977 278.32 c 96.988 278.32 44.297 
225.633 44.297 160.64 c 44.297 95.648 96.988 42.965 161.977 42.965 c 
226.969 42.965 279.656 95.648 279.656 160.64 c 279.656 191.012 268.145 
218.695 249.254 239.574 c 265.871 256.191 l 269.875 253.691 274.59 
252.223 279.66 252.223 c 294.07 252.223 305.754 263.906 305.754 278.32 
c 305.754 292.73 294.07 304.422 279.656 304.422 c h
279.656 304.422 m f
1 g
107.184 140.832 m 107 140.492 106.547 140.324 105.816 140.324 c 97.219 
140.324 l 96.07 140.324 95.5 140.871 95.5 141.965 c 95.5 145.406 95.508 
148.82 95.535 152.207 c 95.562 155.594 95.574 159.008 95.574 162.445 c 
95.574 164.637 95.195 166.187 94.441 167.098 c 93.684 168.008 92.469 
168.465 90.805 168.465 c 89.555 168.465 88.199 168.164 86.742 167.566 c 
85.281 166.965 84.086 166.508 83.145 166.195 c 83.145 141.965 l 83.145 
141.547 83.051 141.172 82.871 140.828 c 82.688 140.492 82.234 140.324 
81.504 140.324 c 72.984 140.324 l 72.309 140.324 71.852 140.465 71.617 
140.754 c 71.379 141.039 71.266 141.445 71.266 141.965 c 71.266 177.14 
l 71.266 177.664 71.379 178.078 71.617 178.39 c 71.852 178.703 72.309 
178.863 72.984 178.863 c 81.504 178.863 l 82.23 178.863 82.688 178.676 
82.871 178.312 c 83.055 177.949 83.145 177.558 83.145 177.14 c 83.145 
175.265 l 83.195 175.265 83.238 175.25 83.262 175.226 c 83.289 175.199 
83.324 175.187 83.379 175.187 c 85.098 176.492 87.105 177.547 89.398 
178.351 c 91.688 179.16 93.773 179.566 95.648 179.566 c 98.414 179.566 
100.59 179.109 102.176 178.199 c 103.77 177.285 104.953 176.086 105.734 
174.601 c 106.52 173.117 106.996 171.461 107.18 169.637 c 107.363 
167.812 107.453 165.988 107.453 164.168 c 107.453 141.965 l 107.461 
141.547 107.367 141.172 107.184 140.832 c h
107.184 140.832 m f
137.324 145.015 m 136.281 144.078 135.16 143.269 133.965 142.594 c 
132.766 141.914 131.543 141.355 130.289 140.914 c 129.039 140.469 
127.812 140.16 126.613 139.976 c 125.414 139.793 124.32 139.703 123.332 
139.703 c 121.039 139.703 119.176 140.027 117.742 140.68 c 116.309 
141.328 115.199 142.18 114.422 143.223 c 113.637 144.262 113.102 
145.473 112.82 146.855 c 112.531 148.234 112.391 149.68 112.391 151.195 
c 112.336 153.594 112.66 155.621 113.367 157.293 c 114.07 158.961 
115.074 160.301 116.375 161.316 c 117.68 162.332 119.27 163.066 121.145 
163.508 c 123.02 163.949 125.105 164.172 127.398 164.172 c 136.391 
164.172 l 136.391 165.422 l 136.391 166.254 136.293 166.961 136.117 
167.531 c 135.93 168.105 135.594 168.574 135.102 168.937 c 134.605 
169.305 133.914 169.578 133.027 169.762 c 132.141 169.941 130.969 
170.035 129.512 170.035 c 128.938 170.035 128.219 170.008 127.359 
169.957 c 126.5 169.902 125.605 169.851 124.664 169.797 c 123.727 
169.746 122.785 169.668 121.848 169.562 c 120.91 169.461 120.051 
169.379 119.27 169.328 c 118.176 169.226 117.457 169.226 117.121 
169.328 c 116.781 169.433 116.508 169.879 116.301 170.66 c 115.441 
174.723 l 115.336 175.398 115.43 175.957 115.715 176.402 c 116 176.844 
116.742 177.301 117.941 177.769 c 118.828 178.086 119.855 178.355 
121.031 178.594 c 122.203 178.828 123.402 179.023 124.625 179.18 c 
125.852 179.336 127.062 179.453 128.262 179.531 c 129.461 179.609 
130.504 179.644 131.391 179.644 c 135.035 179.644 137.969 179.308 
140.184 178.629 c 142.398 177.953 144.09 176.988 145.266 175.738 c 
146.438 174.488 147.203 172.949 147.57 171.125 c 147.934 169.301 
148.117 167.219 148.117 164.871 c 148.117 152.523 l 148.117 151.687 
148.156 151.035 148.238 150.566 c 148.312 150.098 148.457 149.746 
148.664 149.512 c 148.871 149.277 149.16 149.105 149.523 149.004 c 
149.887 148.898 150.383 148.82 151.008 148.769 c 151.688 148.715 
152.129 148.598 152.336 148.418 c 152.547 148.234 152.652 147.91 
152.652 147.441 c 152.652 142.433 l 152.652 141.394 151.895 140.715 
150.383 140.402 c 148.926 140.039 147.309 139.855 145.535 139.855 c 
143.609 139.855 141.914 140.183 140.453 140.832 c 138.996 141.484 
138.004 142.851 137.484 144.937 c h
136.152 156.586 m 129.121 156.586 l 127.66 156.586 126.512 156.246 
125.68 155.57 c 124.844 154.89 124.426 153.637 124.426 151.816 c 
124.426 150.617 124.676 149.781 125.172 149.316 c 125.664 148.848 
126.59 148.609 127.945 148.609 c 129.145 148.609 130.539 148.894 
132.129 149.469 c 133.719 150.039 135.062 150.668 136.156 151.344 c 
136.156 156.586 l h
136.152 156.586 m f
187.52 152.488 m 187.52 150.043 187.035 148 186.074 146.367 c 185.105 
144.726 183.82 143.414 182.203 142.426 c 180.586 141.437 178.746 
140.726 176.691 140.281 c 174.633 139.844 172.484 139.621 170.242 
139.621 c 169.305 139.621 168.289 139.66 167.195 139.734 c 166.102 
139.812 164.992 139.93 163.875 140.082 c 162.754 140.238 161.684 
140.418 160.668 140.629 c 159.652 140.832 158.754 141.066 157.969 
141.328 c 156.668 141.793 155.832 142.269 155.469 142.762 c 155.105 
143.25 155.051 144.015 155.312 145.047 c 156.172 148.769 l 156.328 
149.496 156.562 149.941 156.879 150.094 c 157.191 150.254 157.789 
150.254 158.676 150.094 c 160.5 149.781 162.477 149.535 164.613 149.351 
c 166.754 149.168 168.5 149.078 169.855 149.078 c 171.832 149.078 
173.238 149.301 174.074 149.746 c 174.91 150.191 175.324 150.933 
175.324 151.98 c 175.324 153.129 175.012 153.898 174.391 154.293 c 
173.762 154.683 172.617 154.984 170.949 155.191 c 168.812 155.508 
166.816 155.875 164.965 156.289 c 163.117 156.707 161.488 157.336 
160.082 158.172 c 158.676 159.008 157.57 160.133 156.758 161.543 c 
155.949 162.953 155.551 164.808 155.551 167.105 c 155.551 169.195 
155.949 171.023 156.754 172.59 c 157.551 174.156 158.652 175.465 
160.051 176.508 c 161.449 177.555 163.121 178.336 165.066 178.859 c 
167.004 179.383 169.125 179.64 171.418 179.64 c 172.305 179.64 173.281 
179.601 174.352 179.523 c 175.418 179.445 176.5 179.34 177.594 179.211 
c 178.688 179.078 179.746 178.906 180.762 178.699 c 181.777 178.484 
182.703 178.226 183.535 177.91 c 184.578 177.543 185.348 177.16 185.84 
176.765 c 186.336 176.371 186.453 175.676 186.191 174.676 c 185.332 
170.656 l 185.125 169.926 184.906 169.48 184.668 169.324 c 184.434 
169.168 183.875 169.14 182.988 169.246 c 182.102 169.351 181.141 
169.465 180.098 169.598 c 179.055 169.726 178.027 169.832 177.012 
169.91 c 175.996 169.988 175.039 170.055 174.156 170.105 c 173.27 
170.156 172.516 170.183 171.891 170.183 c 169.91 170.234 168.668 
170.012 168.176 169.519 c 167.68 169.027 167.434 168.363 167.434 
167.531 c 167.434 166.543 167.891 165.91 168.809 165.625 c 169.723 
165.336 170.887 165.066 172.301 164.805 c 174.34 164.547 176.273 
164.219 178.105 163.832 c 179.938 163.441 181.547 162.805 182.934 
161.922 c 184.316 161.035 185.43 159.855 186.266 158.371 c 187.102 
156.89 187.52 154.93 187.52 152.488 c h
187.52 152.488 m f
250.336 140.832 m 250.152 140.492 249.723 140.324 249.047 140.324 c 
240.449 140.324 l 239.77 140.324 239.312 140.469 239.078 140.754 c 
238.844 141.039 238.727 141.445 238.727 141.965 c 238.727 162.527 l 
238.727 164.922 238.363 166.512 237.633 167.293 c 236.902 168.078 
235.809 168.465 234.352 168.465 c 233.414 168.465 232.266 168.219 
230.91 167.723 c 229.555 167.23 228.383 166.719 227.391 166.199 c 
227.391 141.965 l 227.391 141.551 227.301 141.172 227.117 140.832 c 
226.938 140.492 226.48 140.324 225.75 140.324 c 217.152 140.324 l 
216.523 140.324 216.098 140.469 215.863 140.754 c 215.629 141.039 
215.512 141.445 215.512 141.965 c 215.512 162.762 l 215.512 164.949 
215.16 166.445 214.449 167.254 c 213.738 168.062 212.676 168.469 
211.262 168.469 c 210.312 168.469 209.172 168.234 207.836 167.765 c 
206.496 167.293 205.277 166.773 204.176 166.199 c 204.176 141.969 l 
204.176 141.551 204.07 141.176 203.863 140.832 c 203.656 140.496 
203.191 140.328 202.465 140.328 c 193.926 140.328 l 193.301 140.328 
192.875 140.469 192.641 140.758 c 192.406 141.039 192.297 141.449 
192.297 141.969 c 192.297 177.144 l 192.297 177.664 192.406 178.082 
192.641 178.394 c 192.875 178.707 193.301 178.867 193.926 178.867 c 
202.465 178.867 l 203.191 178.867 203.656 178.68 203.863 178.316 c 
204.07 177.953 204.176 177.562 204.176 177.144 c 204.176 175.348 l 
204.332 175.269 l 206 176.621 207.824 177.68 209.801 178.433 c 211.781 
179.187 213.789 179.566 215.824 179.566 c 218.168 179.566 220.223 
179.14 221.996 178.277 c 223.766 177.418 225.074 176.074 225.906 174.25 
c 227.73 175.762 229.801 177.027 232.117 178.043 c 234.438 179.058 
236.77 179.566 239.113 179.566 c 241.879 179.566 244.027 179.109 
245.562 178.199 c 247.102 177.285 248.25 176.101 249.004 174.644 c 
249.758 173.183 250.215 171.543 250.371 169.719 c 250.527 167.894 
250.605 166.07 250.605 164.246 c 250.605 141.965 l 250.609 141.547 
250.52 141.172 250.336 140.832 c h
250.336 140.832 m f
Q Q
showpage
%%Trailer
count op_count sub {pop} repeat
countdictstack dict_count sub {end} repeat
cairo_eps_state restore
%%EndDocument
EndEPSF
restore showpage
%%Page: 2 2
%%BeginPageSetup
save
%%EndPageSetup
/2 pa
[(\251 1996-2020 The NASM Development Team \227 All Rights Reserved)]135 norm3
[(This document is redistributable under the license given in the section "License".)]117 norm3
restore showpage
%%Page: 3 3
%%BeginPageSetup
save
%%EndPageSetup
/3 pa
[{/contents xa}(Contents)]698.4 chap3
[(Introduction)](Chapter 1: )/chapter-1 (17)662.4 toc03
[(What Is NASM?)](1.1 )/section-1.1 (17)644.4 toc13
[(License)](1.1.1 )/section-1.1.1 (17)626.4 toc23
[(Running NASM)](Chapter 2: )/chapter-2 (19)608.4 toc03
[(NASM Command-Line Syntax)](2.1 )/section-2.1 (19)590.4 toc13
[(The )2(-o)0( Option: Specifying the Output File Name)](2.1.1 )/section-2.1.1 (19)572.4 toc23
[(The )2(-f)0( Option: Specifying the Output File Format)](2.1.2 )/section-2.1.2 (20)554.4 toc23
[(The )2(-l)0( Option: Generating a Listing File)](2.1.3 )/section-2.1.3 (20)536.4 toc23
[(The )2(-L)0( Option: Additional or Modified Listing Info)](2.1.4 )/section-2.1.4 (20)518.4 toc23
[(The )2(-M)0( Option: Generate Makefile Dependencies)](2.1.5 )/section-2.1.5 (21)500.4 toc23
[(The )2(-MG)0( Option: Generate Makefile Dependencies)](2.1.6 )/section-2.1.6 (21)482.4 toc23
[(The )2(-MF)0( Option: Set Makefile Dependency File)](2.1.7 )/section-2.1.7 (21)464.4 toc23
[(The )2(-MD)0( Option: Assemble and Generate Dependencies)](2.1.8 )/section-2.1.8 (21)446.4 toc23
[(The )2(-MT)0( Option: Dependency Target Name)](2.1.9 )/section-2.1.9 (21)428.4 toc23
[(The )2(-MQ)0( Option: Dependency Target Name \(Quoted\))](2.1.10 )/section-2.1.10 (21)410.4 toc23
[(The )2(-MP)0( Option: Emit phony targets)](2.1.11 )/section-2.1.11 (21)392.4 toc23
[(The )2(-MW)0( Option: Watcom Make quoting style)](2.1.12 )/section-2.1.12 (21)374.4 toc23
[(The )2(-F)0( Option: Selecting a Debug Information Format)](2.1.13 )/section-2.1.13 (22)356.4 toc23
[(The )2(-g)0( Option: Enabling Debug Information.)](2.1.14 )/section-2.1.14 (22)338.4 toc23
[(The )2(-X)0( Option: Selecting an Error Reporting Format)](2.1.15 )/section-2.1.15 (22)320.4 toc23
[(The )2(-Z)0( Option: Send Errors to a File)](2.1.16 )/section-2.1.16 (22)302.4 toc23
[(The )2(-s)0( Option: Send Errors to )2(stdout)](2.1.17 )/section-2.1.17 (22)284.4 toc23
[(The )2(-i)0( Option: Include File Search Directories)](2.1.18 )/section-2.1.18 (23)266.4 toc23
[(The )2(-p)0( Option: Pre-Include a File)](2.1.19 )/section-2.1.19 (23)248.4 toc23
[(The )2(-d)0( Option: Pre-Define a Macro)](2.1.20 )/section-2.1.20 (23)230.4 toc23
[(The )2(-u)0( Option: Undefine a Macro)](2.1.21 )/section-2.1.21 (23)212.4 toc23
[(The )2(-E)0( Option: Preprocess Only)](2.1.22 )/section-2.1.22 (24)194.4 toc23
[(The )2(-a)0( Option: Don't Preprocess At All)](2.1.23 )/section-2.1.23 (24)176.4 toc23
[(The )2(-O)0( Option: Specifying Multipass Optimization)](2.1.24 )/section-2.1.24 (24)158.4 toc23
[(The )2(-t)0( Option: Enable TASM Compatibility Mode)](2.1.25 )/section-2.1.25 (24)140.4 toc23
[(The )2(-w)0( and )2(-W)0( Options: Enable or Disable Assembly Warnings)](2.1.26 )/section-2.1.26 (25)122.4 toc23
[(The )2(-v)0( Option: Display Version Info)](2.1.27 )/section-2.1.27 (29)104.4 toc23
[(The )2(--\(g|l\)prefix)0(, )2(--\(g|l\)postfix)0( Options.)](2.1.28 )/section-2.1.28 (29)86.4 toc23
(3)pageodd
restore showpage
%%Page: 4 4
%%BeginPageSetup
save
%%EndPageSetup
/4 pa
[(The )2(--pragma)0( Option)](2.1.29 )/section-2.1.29 (29)708 toc23
[(The )2(--before)0( Option)](2.1.30 )/section-2.1.30 (29)690 toc23
[(The )2(--limit-X)0( Option)](2.1.31 )/section-2.1.31 (29)672 toc23
[(The )2(--keep-all)0( Option)](2.1.32 )/section-2.1.32 (30)654 toc23
[(The )2(--no-line)0( Option)](2.1.33 )/section-2.1.33 (30)636 toc23
[(The )2(--reproducible)0( Option)](2.1.34 )/section-2.1.34 (30)618 toc23
[(The )2(NASMENV)0( Environment Variable)](2.1.35 )/section-2.1.35 (30)600 toc23
[(Quick Start for MASM Users)](2.2 )/section-2.2 (30)582 toc13
[(NASM Is Case-Sensitive)](2.2.1 )/section-2.2.1 (30)564 toc23
[(NASM Requires Square Brackets For Memory References)](2.2.2 )/section-2.2.2 (30)546 toc23
[(NASM Doesn't Store Variable Types)](2.2.3 )/section-2.2.3 (31)528 toc23
[(NASM Doesn't )2(ASSUME)](2.2.4 )/section-2.2.4 (31)510 toc23
[(NASM Doesn't Support Memory Models)](2.2.5 )/section-2.2.5 (31)492 toc23
[(Floating-Point Differences)](2.2.6 )/section-2.2.6 (31)474 toc23
[(Other Differences)](2.2.7 )/section-2.2.7 (32)456 toc23
[(MASM compatibility package)](2.2.8 )/section-2.2.8 (32)438 toc23
[(The NASM Language)](Chapter 3: )/chapter-3 (33)420 toc03
[(Layout of a NASM Source Line)](3.1 )/section-3.1 (33)402 toc13
[(Pseudo-Instructions)](3.2 )/section-3.2 (34)384 toc13
[2(Dx)0(: Declaring Initialized Data)](3.2.1 )/section-3.2.1 (34)366 toc23
[2(RESB)0( and Friends: Declaring Uninitialized Data)](3.2.2 )/section-3.2.2 (35)348 toc23
[2(INCBIN)0(: Including External Binary Files)](3.2.3 )/section-3.2.3 (35)330 toc23
[2(EQU)0(: Defining Constants)](3.2.4 )/section-3.2.4 (35)312 toc23
[2(TIMES)0(: Repeating Instructions or Data)](3.2.5 )/section-3.2.5 (36)294 toc23
[(Effective Addresses)](3.3 )/section-3.3 (36)276 toc13
[(Constants)](3.4 )/section-3.4 (37)258 toc13
[(Numeric Constants)](3.4.1 )/section-3.4.1 (37)240 toc23
[(Character Strings)](3.4.2 )/section-3.4.2 (38)222 toc23
[(Character Constants)](3.4.3 )/section-3.4.3 (39)204 toc23
[(String Constants)](3.4.4 )/section-3.4.4 (39)186 toc23
[(Unicode Strings)](3.4.5 )/section-3.4.5 (39)168 toc23
[(Floating-Point Constants)](3.4.6 )/section-3.4.6 (39)150 toc23
[(Packed BCD Constants)](3.4.7 )/section-3.4.7 (41)132 toc23
[(Expressions)](3.5 )/section-3.5 (41)114 toc13
[2(?)0( ... )2(:)0(: Conditional Operator)](3.5.1 )/section-3.5.1 (41)96 toc23
[(: )2(||)0(: Boolean OR Operator)](3.5.2 )/section-3.5.2 (41)78 toc23
(4)pageeven
restore showpage
%%Page: 5 5
%%BeginPageSetup
save
%%EndPageSetup
/5 pa
[(: )2(^^)0(: Boolean XOR Operator)](3.5.3 )/section-3.5.3 (41)708 toc23
[(: )2(&&)0(: Boolean AND Operator)](3.5.4 )/section-3.5.4 (41)690 toc23
[(: Comparison Operators)](3.5.5 )/section-3.5.5 (41)672 toc23
[2(|)0(: Bitwise OR Operator)](3.5.6 )/section-3.5.6 (42)654 toc23
[2(^)0(: Bitwise XOR Operator)](3.5.7 )/section-3.5.7 (42)636 toc23
[2(&)0(: Bitwise AND Operator)](3.5.8 )/section-3.5.8 (42)618 toc23
[(Bit Shift Operators)](3.5.9 )/section-3.5.9 (42)600 toc23
[2(+)0( and )2(-)0(: Addition and Subtraction Operators)](3.5.10 )/section-3.5.10 (42)582 toc23
[(Multiplication, Division and Modulo)](3.5.11 )/section-3.5.11 (42)564 toc23
[(Unary Operators)](3.5.12 )/section-3.5.12 (42)546 toc23
[2(SEG)0( and )2(WRT)](3.6 )/section-3.6 (43)528 toc13
[2(STRICT)0(: Inhibiting Optimization)](3.7 )/section-3.7 (43)510 toc13
[(Critical Expressions)](3.8 )/section-3.8 (44)492 toc13
[(Local Labels)](3.9 )/section-3.9 (44)474 toc13
[(The NASM Preprocessor)](Chapter 4: )/chapter-4 (47)456 toc03
[(Single-Line Macros)](4.1 )/section-4.1 (47)438 toc13
[(The Normal Way: )2(%define)](4.1.1 )/section-4.1.1 (47)420 toc23
[(Resolving )2(%define)0(: )2(%xdefine)](4.1.2 )/section-4.1.2 (48)402 toc23
[(Macro Indirection: )2(%[...])](4.1.3 )/section-4.1.3 (49)384 toc23
[(Concatenating Single Line Macro Tokens: )2(%+)](4.1.4 )/section-4.1.4 (49)366 toc23
[(The Macro Name Itself: )2(%?)0( and )2(%??)](4.1.5 )/section-4.1.5 (50)348 toc23
[(The Single-Line Macro Name: )2(%*?)0( and )2(%*??)](4.1.6 )/section-4.1.6 (50)330 toc23
[(Undefining Single-Line Macros: )2(%undef)](4.1.7 )/section-4.1.7 (51)312 toc23
[(Preprocessor Variables: )2(%assign)](4.1.8 )/section-4.1.8 (51)294 toc23
[(Defining Strings: )2(%defstr)](4.1.9 )/section-4.1.9 (51)276 toc23
[(Defining Tokens: )2(%deftok)](4.1.10 )/section-4.1.10 (52)258 toc23
[(Defining Aliases: )2(%defalias)](4.1.11 )/section-4.1.11 (52)240 toc23
[(Conditional Comma Operator: )2(%,)](4.1.12 )/section-4.1.12 (52)222 toc23
[(String Manipulation in Macros)](4.2 )/section-4.2 (52)204 toc13
[(Concatenating Strings: )2(%strcat)](4.2.1 )/section-4.2.1 (53)186 toc23
[(String Length: )2(%strlen)](4.2.2 )/section-4.2.2 (53)168 toc23
[(Extracting Substrings: )2(%substr)](4.2.3 )/section-4.2.3 (53)150 toc23
[(Multi-Line Macros: )2(%macro)](4.3 )/section-4.3 (53)132 toc13
[(Overloading Multi-Line Macros)](4.3.1 )/section-4.3.1 (54)114 toc23
[(Macro-Local Labels)](4.3.2 )/section-4.3.2 (55)96 toc23
[(Greedy Macro Parameters)](4.3.3 )/section-4.3.3 (55)78 toc23
(5)pageodd
restore showpage
%%Page: 6 6
%%BeginPageSetup
save
%%EndPageSetup
/6 pa
[(Macro Parameters Range)](4.3.4 )/section-4.3.4 (56)708 toc23
[(Default Macro Parameters)](4.3.5 )/section-4.3.5 (56)690 toc23
[2(%0)0(: Macro Parameter Counter)](4.3.6 )/section-4.3.6 (57)672 toc23
[2(%00)0(: Label Preceeding Macro)](4.3.7 )/section-4.3.7 (57)654 toc23
[2(%rotate)0(: Rotating Macro Parameters)](4.3.8 )/section-4.3.8 (57)636 toc23
[(Concatenating Macro Parameters)](4.3.9 )/section-4.3.9 (58)618 toc23
[(Condition Codes as Macro Parameters)](4.3.10 )/section-4.3.10 (59)600 toc23
[(Disabling Listing Expansion)](4.3.11 )/section-4.3.11 (59)582 toc23
[(Undefining Multi-Line Macros: )2(%unmacro)](4.3.12 )/section-4.3.12 (60)564 toc23
[(Conditional Assembly)](4.4 )/section-4.4 (60)546 toc13
[2(%ifdef)0(: Testing Single-Line Macro Existence)](4.4.1 )/section-4.4.1 (60)528 toc23
[2(%ifmacro)0(: Testing Multi-Line Macro Existence)](4.4.2 )/section-4.4.2 (61)510 toc23
[2(%ifctx)0(: Testing the Context Stack)](4.4.3 )/section-4.4.3 (61)492 toc23
[2(%if)0(: Testing Arbitrary Numeric Expressions)](4.4.4 )/section-4.4.4 (61)474 toc23
[2(%ifidn)0( and )2(%ifidni)0(: Testing Exact Text Identity)](4.4.5 )/section-4.4.5 (61)456 toc23
[2(%ifid)0(, )2(%ifnum)0(, )2(%ifstr)0(: Testing Token Types)](4.4.6 )/section-4.4.6 (62)438 toc23
[2(%iftoken)0(: Test for a Single Token)](4.4.7 )/section-4.4.7 (62)420 toc23
[2(%ifempty)0(: Test for Empty Expansion)](4.4.8 )/section-4.4.8 (63)402 toc23
[2(%ifenv)0(: Test If Environment Variable Exists)](4.4.9 )/section-4.4.9 (63)384 toc23
[(Preprocessor Loops: )2(%rep)](4.5 )/section-4.5 (63)366 toc13
[(Source Files and Dependencies)](4.6 )/section-4.6 (64)348 toc13
[2(%include)0(: Including Other Files)](4.6.1 )/section-4.6.1 (64)330 toc23
[2(%pathsearch)0(: Search the Include Path)](4.6.2 )/section-4.6.2 (64)312 toc23
[2(%depend)0(: Add Dependent Files)](4.6.3 )/section-4.6.3 (64)294 toc23
[2(%use)0(: Include Standard Macro Package)](4.6.4 )/section-4.6.4 (65)276 toc23
[(The Context Stack)](4.7 )/section-4.7 (65)258 toc13
[2(%push)0( and )2(%pop)0(: Creating and Removing Contexts)](4.7.1 )/section-4.7.1 (65)240 toc23
[(Context-Local Labels)](4.7.2 )/section-4.7.2 (65)222 toc23
[(Context-Local Single-Line Macros)](4.7.3 )/section-4.7.3 (66)204 toc23
[(Context Fall-Through Lookup )1(\(deprecated\))](4.7.4 )/section-4.7.4 (66)186 toc23
[2(%repl)0(: Renaming a Context)](4.7.5 )/section-4.7.5 (67)168 toc23
[(Example Use of the Context Stack: Block IFs)](4.7.6 )/section-4.7.6 (67)150 toc23
[(Stack Relative Preprocessor Directives)](4.8 )/section-4.8 (68)132 toc13
[2(%arg)0( Directive)](4.8.1 )/section-4.8.1 (68)114 toc23
[2(%stacksize)0( Directive)](4.8.2 )/section-4.8.2 (69)96 toc23
[2(%local)0( Directive)](4.8.3 )/section-4.8.3 (69)78 toc23
(6)pageeven
restore showpage
%%Page: 7 7
%%BeginPageSetup
save
%%EndPageSetup
/7 pa
[(Reporting User-Defined Errors: )2(%error)0(, )2(%warning)0(, )2(%fatal)](4.9 )/section-4.9 (70)708 toc13
[2(%pragma)0(: Setting Options)](4.10 )/section-4.10 (70)690 toc13
[(Preprocessor Pragmas)](4.10.1 )/section-4.10.1 (71)672 toc23
[(Other Preprocessor Directives)](4.11 )/section-4.11 (71)654 toc13
[2(%line)0( Directive)](4.11.1 )/section-4.11.1 (71)636 toc23
[2(%!)1(variable)0(: Read an Environment Variable.)](4.11.2 )/section-4.11.2 (72)618 toc23
[2(%clear)0(: Clear All Macro Definitions)](4.11.3 )/section-4.11.3 (72)600 toc23
[(Standard Macros)](Chapter 5: )/chapter-5 (73)582 toc03
[(NASM Version Macros)](5.1 )/section-5.1 (73)564 toc13
[2(__?NASM_VERSION_ID?__)0(: NASM Version ID)](5.1.1 )/section-5.1.1 (73)546 toc23
[2(__?NASM_VER?__)0(: NASM Version String)](5.1.2 )/section-5.1.2 (73)528 toc23
[2(__?FILE?__)0( and )2(__?LINE?__)0(: File Name and Line Number)](5.2 )/section-5.2 (73)510 toc13
[2(__?BITS?__)0(: Current Code Generation Mode)](5.3 )/section-5.3 (74)492 toc13
[2(__?OUTPUT_FORMAT?__)0(: Current Output Format)](5.4 )/section-5.4 (74)474 toc13
[2(__?DEBUG_FORMAT?__)0(: Current Debug Format)](5.5 )/section-5.5 (74)456 toc13
[(Assembly Date and Time Macros)](5.6 )/section-5.6 (74)438 toc13
[2(__?USE_)1(package)2(?__)0(: Package Include Test)](5.7 )/section-5.7 (75)420 toc13
[2(__?PASS?__)0(: Assembly Pass)](5.8 )/section-5.8 (75)402 toc13
[(Structure Data Types)](5.9 )/section-5.9 (75)384 toc13
[2(STRUC)0( and )2(ENDSTRUC)0(: Declaring Structure Data Types)](5.9.1 )/section-5.9.1 (75)366 toc23
[2(ISTRUC)0(, )2(AT)0( and )2(IEND)0(: Declaring Instances of Structures)](5.9.2 )/section-5.9.2 (76)348 toc23
[(Alignment Control)](5.10 )/section-5.10 (77)330 toc13
[2(ALIGN)0( and )2(ALIGNB)0(: Code and Data Alignment)](5.10.1 )/section-5.10.1 (77)312 toc23
[2(SECTALIGN)0(: Section Alignment)](5.10.2 )/section-5.10.2 (78)294 toc23
[(Standard Macro Packages)](Chapter 6: )/chapter-6 (79)276 toc03
[2(altreg)0(: Alternate Register Names)](6.1 )/section-6.1 (79)258 toc13
[2(smartalign)0(: Smart )2(ALIGN)0( Macro)](6.2 )/section-6.2 (79)240 toc13
[2(fp)0(: Floating-point macros)](6.3 )/section-6.3 (80)222 toc13
[2(ifunc)0(: Integer functions)](6.4 )/section-6.4 (80)204 toc13
[(Integer logarithms)](6.4.1 )/section-6.4.1 (80)186 toc23
[2(masm)0(: MASM compatibility)](6.5 )/section-6.5 (80)168 toc13
[(Assembler Directives)](Chapter 7: )/chapter-7 (83)150 toc03
[2(BITS)0(: Specifying Target Processor Mode)](7.1 )/section-7.1 (83)132 toc13
[2(USE16)0( & )2(USE32)0(: Aliases for BITS)](7.1.1 )/section-7.1.1 (84)114 toc23
[2(DEFAULT)0(: Change the assembler defaults)](7.2 )/section-7.2 (84)96 toc13
[2(REL)0( & )2(ABS)0(: RIP-relative addressing)](7.2.1 )/section-7.2.1 (84)78 toc23
(7)pageodd
restore showpage
%%Page: 8 8
%%BeginPageSetup
save
%%EndPageSetup
/8 pa
[2(BND)0( & )2(NOBND)0(: )2(BND)0( prefix)](7.2.2 )/section-7.2.2 (84)708 toc23
[2(SECTION)0( or )2(SEGMENT)0(: Changing and Defining Sections)](7.3 )/section-7.3 (84)690 toc13
[(The )2(__?SECT?__)0( Macro)](7.3.1 )/section-7.3.1 (84)672 toc23
[2(ABSOLUTE)0(: Defining Absolute Labels)](7.4 )/section-7.4 (85)654 toc13
[2(EXTERN)0(: Importing Symbols from Other Modules)](7.5 )/section-7.5 (86)636 toc13
[2(REQUIRED)0(: Unconditionally Importing Symbols from Other Modules)](7.6 )/section-7.6 (86)618 toc13
[2(GLOBAL)0(: Exporting Symbols to Other Modules)](7.7 )/section-7.7 (86)600 toc13
[2(COMMON)0(: Defining Common Data Areas)](7.8 )/section-7.8 (87)582 toc13
[2(STATIC)0(: Local Symbols within Modules)](7.9 )/section-7.9 (87)564 toc13
[2(\(G|L\)PREFIX)0(, )2(\(G|L\)POSTFIX)0(: Mangling Symbols)](7.10 )/section-7.10 (87)546 toc13
[2(CPU)0(: Defining CPU Dependencies)](7.11 )/section-7.11 (88)528 toc13
[2(FLOAT)0(: Handling of floating-point constants)](7.12 )/section-7.12 (88)510 toc13
[2([WARNING])0(: Enable or disable warnings)](7.13 )/section-7.13 (89)492 toc13
[(Output Formats)](Chapter 8: )/chapter-8 (91)474 toc03
[2(bin)0(: Flat-Form Binary Output)](8.1 )/section-8.1 (91)456 toc13
[2(ORG)0(: Binary File Program Origin)](8.1.1 )/section-8.1.1 (91)438 toc23
[2(bin)0( Extensions to the )2(SECTION)0( Directive, )2(bin)0( extensions to})](8.1.2 )/section-8.1.2 (91)420 toc23
[(Multisection Support for the )2(bin)0( Format)](8.1.3 )/section-8.1.3 (92)402 toc23
[(Map Files)](8.1.4 )/section-8.1.4 (92)384 toc23
[2(ith)0(: Intel Hex Output)](8.2 )/section-8.2 (92)366 toc13
[2(srec)0(: Motorola S-Records Output)](8.3 )/section-8.3 (92)348 toc13
[2(obj)0(: Microsoft OMF Object Files)](8.4 )/section-8.4 (93)330 toc13
[2(obj)0( Extensions to the )2(SEGMENT)0( Directive)](8.4.1 )/section-8.4.1 (93)312 toc23
[2(GROUP)0(: Defining Groups of Segments)](8.4.2 )/section-8.4.2 (94)294 toc23
[2(UPPERCASE)0(: Disabling Case Sensitivity in Output)](8.4.3 )/section-8.4.3 (94)276 toc23
[2(IMPORT)0(: Importing DLL Symbols)](8.4.4 )/section-8.4.4 (95)258 toc23
[2(EXPORT)0(: Exporting DLL Symbols)](8.4.5 )/section-8.4.5 (95)240 toc23
[2(..start)0(: Defining the Program Entry Point)](8.4.6 )/section-8.4.6 (95)222 toc23
[2(obj)0( Extensions to the )2(EXTERN)0( Directive)](8.4.7 )/section-8.4.7 (96)204 toc23
[2(obj)0( Extensions to the )2(COMMON)0( Directive)](8.4.8 )/section-8.4.8 (96)186 toc23
[(Embedded File Dependency Information)](8.4.9 )/section-8.4.9 (97)168 toc23
[2(win32)0(: Microsoft Win32 Object Files)](8.5 )/section-8.5 (97)150 toc13
[2(win32)0( Extensions to the )2(SECTION)0( Directive)](8.5.1 )/section-8.5.1 (97)132 toc23
[2(win32)0(: Safe Structured Exception Handling)](8.5.2 )/section-8.5.2 (98)114 toc23
[(Debugging formats for Windows )](8.5.3 )/section-8.5.3 (99)96 toc23
[2(win64)0(: Microsoft Win64 Object Files)](8.6 )/section-8.6 (99)78 toc13
(8)pageeven
restore showpage
%%Page: 9 9
%%BeginPageSetup
save
%%EndPageSetup
/9 pa
[2(win64)0(: Writing Position-Independent Code)](8.6.1 )/section-8.6.1 (99)708 toc23
[2(win64)0(: Structured Exception Handling)](8.6.2 )/section-8.6.2 (100)690 toc23
[2(coff)0(: Common Object File Format)](8.7 )/section-8.7 (102)672 toc13
[2(macho32)0( and )2(macho64)0(: Mach Object File Format)](8.8 )/section-8.8 (102)654 toc13
[2(macho)0( extensions to the )2(SECTION)0( Directive )](8.8.1 )/section-8.8.1 (103)636 toc23
[(Thread Local Storage in Mach-O: )2(macho)0( special symbols and )2(WRT)](8.8.2 )/section-8.8.2 (103)618 toc23
[2(macho)0( specfic directive )2(subsections_via_symbols)](8.8.3 )/section-8.8.3 (103)600 toc23
[2(macho)0( specfic directive )2(no_dead_strip)](8.8.4 )/section-8.8.4 (103)582 toc23
[2(macho)0( specific extensions to the )2(GLOBAL)0( Directive: )2(private_extern)](8.8.5 )/section-8.8.5 (104)564 toc23
[2(elf32)0(, )2(elf64)0(, )2(elfx32)0(: Executable and Linkable Format Object Files)](8.9 )/section-8.9 (104)546 toc13
[(ELF specific directive )2(osabi)](8.9.1 )/section-8.9.1 (104)528 toc23
[(ELF extensions to the )2(SECTION)0( Directive )](8.9.2 )/section-8.9.2 (104)510 toc23
[(Position-Independent Code: ELF Special Symbols and )2(WRT)](8.9.3 )/section-8.9.3 (105)492 toc23
[(Thread Local Storage in ELF: )2(elf)0( Special Symbols and )2(WRT)](8.9.4 )/section-8.9.4 (106)474 toc23
[2(elf)0( Extensions to the )2(GLOBAL)0( Directive)](8.9.5 )/section-8.9.5 (106)456 toc23
[2(elf)0( Extensions to the )2(EXTERN)0( Directive)](8.9.6 )/section-8.9.6 (107)438 toc23
[2(elf)0( Extensions to the )2(COMMON)0( Directive )](8.9.7 )/section-8.9.7 (107)420 toc23
[(16-bit code and ELF )](8.9.8 )/section-8.9.8 (107)402 toc23
[(Debug formats and ELF )](8.9.9 )/section-8.9.9 (107)384 toc23
[2(aout)0(: Linux )2(a.out)0( Object Files)](8.10 )/section-8.10 (107)366 toc13
[2(aoutb)0(: NetBSD/FreeBSD/OpenBSD )2(a.out)0( Object Files)](8.11 )/section-8.11 (107)348 toc13
[2(as86)0(: Minix/Linux )2(as86)0( Object Files)](8.12 )/section-8.12 (108)330 toc13
[2(rdf)0(: Relocatable Dynamic Object File Format \(deprecated\))](8.13 )/section-8.13 (108)312 toc13
[(Requiring a Library: The )2(LIBRARY)0( Directive)](8.13.1 )/section-8.13.1 (108)294 toc23
[(Specifying a Module Name: The )2(MODULE)0( Directive)](8.13.2 )/section-8.13.2 (108)276 toc23
[2(rdf)0( Extensions to the )2(GLOBAL)0( Directive)](8.13.3 )/section-8.13.3 (108)258 toc23
[2(rdf)0( Extensions to the )2(EXTERN)0( Directive)](8.13.4 )/section-8.13.4 (109)240 toc23
[2(dbg)0(: Debugging Format)](8.14 )/section-8.14 (109)222 toc13
[(Writing 16-bit Code \(DOS, Windows 3/3.1\))](Chapter 9: )/chapter-9 (111)204 toc03
[(Producing )2(.EXE)0( Files)](9.1 )/section-9.1 (111)186 toc13
[(Using the )2(obj)0( Format To Generate )2(.EXE)0( Files)](9.1.1 )/section-9.1.1 (111)168 toc23
[(Using the )2(bin)0( Format To Generate )2(.EXE)0( Files)](9.1.2 )/section-9.1.2 (112)150 toc23
[(Producing )2(.COM)0( Files)](9.2 )/section-9.2 (113)132 toc13
[(Using the )2(bin)0( Format To Generate )2(.COM)0( Files)](9.2.1 )/section-9.2.1 (113)114 toc23
[(Using the )2(obj)0( Format To Generate )2(.COM)0( Files)](9.2.2 )/section-9.2.2 (113)96 toc23
[(Producing )2(.SYS)0( Files)](9.3 )/section-9.3 (114)78 toc13
(9)pageodd
restore showpage
%%Page: 10 10
%%BeginPageSetup
save
%%EndPageSetup
/10 pa
[(Interfacing to 16-bit C Programs)](9.4 )/section-9.4 (114)708 toc13
[(External Symbol Names)](9.4.1 )/section-9.4.1 (114)690 toc23
[(Memory Models)](9.4.2 )/section-9.4.2 (115)672 toc23
[(Function Definitions and Function Calls)](9.4.3 )/section-9.4.3 (115)654 toc23
[(Accessing Data Items)](9.4.4 )/section-9.4.4 (117)636 toc23
[2(c16.mac)0(: Helper Macros for the 16-bit C Interface)](9.4.5 )/section-9.4.5 (118)618 toc23
[(Interfacing to Borland Pascal Programs)](9.5 )/section-9.5 (119)600 toc13
[(The Pascal Calling Convention)](9.5.1 )/section-9.5.1 (119)582 toc23
[(Borland Pascal Segment Name Restrictions)](9.5.2 )/section-9.5.2 (120)564 toc23
[(Using )2(c16.mac)0( With Pascal Programs)](9.5.3 )/section-9.5.3 (120)546 toc23
[(Writing 32-bit Code \(Unix, Win32, DJGPP\))](Chapter 10: )/chapter-10 (123)528 toc03
[(Interfacing to 32-bit C Programs)](10.1 )/section-10.1 (123)510 toc13
[(External Symbol Names)](10.1.1 )/section-10.1.1 (123)492 toc23
[(Function Definitions and Function Calls)](10.1.2 )/section-10.1.2 (123)474 toc23
[(Accessing Data Items)](10.1.3 )/section-10.1.3 (124)456 toc23
[2(c32.mac)0(: Helper Macros for the 32-bit C Interface)](10.1.4 )/section-10.1.4 (125)438 toc23
[(Writing NetBSD/FreeBSD/OpenBSD and Linux/ELF Shared Libraries)](10.2 )/section-10.2 (126)420 toc13
[(Obtaining the Address of the GOT)](10.2.1 )/section-10.2.1 (126)402 toc23
[(Finding Your Local Data Items)](10.2.2 )/section-10.2.2 (127)384 toc23
[(Finding External and Common Data Items)](10.2.3 )/section-10.2.3 (127)366 toc23
[(Exporting Symbols to the Library User)](10.2.4 )/section-10.2.4 (127)348 toc23
[(Calling Procedures Outside the Library)](10.2.5 )/section-10.2.5 (128)330 toc23
[(Generating the Library File)](10.2.6 )/section-10.2.6 (128)312 toc23
[(Mixing 16- and 32-bit Code)](Chapter 11: )/chapter-11 (131)294 toc03
[(Mixed-Size Jumps)](11.1 )/section-11.1 (131)276 toc13
[(Addressing Between Different-Size Segments)](11.2 )/section-11.2 (131)258 toc13
[(Other Mixed-Size Instructions)](11.3 )/section-11.3 (132)240 toc13
[(Writing 64-bit Code \(Unix, Win64\))](Chapter 12: )/chapter-12 (133)222 toc03
[(Register Names in 64-bit Mode)](12.1 )/section-12.1 (133)204 toc13
[(Immediates and Displacements in 64-bit Mode)](12.2 )/section-12.2 (133)186 toc13
[(Interfacing to 64-bit C Programs \(Unix\))](12.3 )/section-12.3 (134)168 toc13
[(Interfacing to 64-bit C Programs \(Win64\))](12.4 )/section-12.4 (135)150 toc13
[(Troubleshooting)](Chapter 13: )/chapter-13 (137)132 toc03
[(Common Problems)](13.1 )/section-13.1 (137)114 toc13
[(NASM Generates Inefficient Code)](13.1.1 )/section-13.1.1 (137)96 toc23
[(My Jumps are Out of Range)](13.1.2 )/section-13.1.2 (137)78 toc23
(10)pageeven
restore showpage
%%Page: 11 11
%%BeginPageSetup
save
%%EndPageSetup
/11 pa
[2(ORG)0( Doesn't Work)](13.1.3 )/section-13.1.3 (137)708 toc23
[2(TIMES)0( Doesn't Work)](13.1.4 )/section-13.1.4 (138)690 toc23
[(Ndisasm)](Appendix A: )/appendix-A (139)672 toc03
[(Introduction)](A.1 )/section-A.1 (139)654 toc13
[(Running NDISASM)](A.2 )/section-A.2 (139)636 toc13
[(COM Files: Specifying an Origin)](A.2.1 )/section-A.2.1 (139)618 toc23
[(Code Following Data: Synchronization)](A.2.2 )/section-A.2.2 (139)600 toc23
[(Mixed Code and Data: Automatic \(Intelligent\) Synchronization )](A.2.3 )/section-A.2.3 (140)582 toc23
[(Other Options)](A.2.4 )/section-A.2.4 (140)564 toc23
[(Instruction List)](Appendix B: )/appendix-B (143)546 toc03
[(Introduction)](B.1 )/section-B.1 (143)528 toc13
[(Special instructions \(pseudo-ops\))](B.1.1 )/section-B.1.1 (143)510 toc23
[(Conventional instructions)](B.1.2 )/section-B.1.2 (143)492 toc23
[(Katmai Streaming SIMD instructions \(SSE \226\226 a.k.a. KNI, XMM, MMX2\))](B.1.3 )/section-B.1.3 (165)474 toc23
[(Introduced in Deschutes but necessary for SSE support)](B.1.4 )/section-B.1.4 (166)456 toc23
[(XSAVE group \(AVX and extended state\))](B.1.5 )/section-B.1.5 (166)438 toc23
[(Generic memory operations)](B.1.6 )/section-B.1.6 (166)420 toc23
[(New MMX instructions introduced in Katmai)](B.1.7 )/section-B.1.7 (166)402 toc23
[(AMD Enhanced 3DNow! \(Athlon\) instructions)](B.1.8 )/section-B.1.8 (167)384 toc23
[(Willamette SSE2 Cacheability Instructions)](B.1.9 )/section-B.1.9 (167)366 toc23
[(Willamette MMX instructions \(SSE2 SIMD Integer Instructions\))](B.1.10 )/section-B.1.10 (167)348 toc23
[(Willamette Streaming SIMD instructions \(SSE2\))](B.1.11 )/section-B.1.11 (168)330 toc23
[(Prescott New Instructions \(SSE3\))](B.1.12 )/section-B.1.12 (170)312 toc23
[(VMX/SVM Instructions)](B.1.13 )/section-B.1.13 (170)294 toc23
[(Extended Page Tables VMX instructions)](B.1.14 )/section-B.1.14 (170)276 toc23
[(Tejas New Instructions \(SSSE3\))](B.1.15 )/section-B.1.15 (170)258 toc23
[(AMD SSE4A)](B.1.16 )/section-B.1.16 (171)240 toc23
[(New instructions in Barcelona)](B.1.17 )/section-B.1.17 (171)222 toc23
[(Penryn New Instructions \(SSE4.1\))](B.1.18 )/section-B.1.18 (171)204 toc23
[(Nehalem New Instructions \(SSE4.2\))](B.1.19 )/section-B.1.19 (172)186 toc23
[(Intel SMX)](B.1.20 )/section-B.1.20 (172)168 toc23
[(Geode \(Cyrix\) 3DNow! additions)](B.1.21 )/section-B.1.21 (172)150 toc23
[(Intel new instructions in ???)](B.1.22 )/section-B.1.22 (172)132 toc23
[(Intel AES instructions)](B.1.23 )/section-B.1.23 (172)114 toc23
[(Intel AVX AES instructions)](B.1.24 )/section-B.1.24 (173)96 toc23
[(Intel instruction extension based on pub number 319433-030 dated October 2017)](B.1.25 )/section-B.1.25 (173)78 toc23
(11)pageodd
restore showpage
%%Page: 12 12
%%BeginPageSetup
save
%%EndPageSetup
/12 pa
[(Intel AVX instructions)](B.1.26 )/section-B.1.26 (173)708 toc23
[(Intel Carry-Less Multiplication instructions \(CLMUL\))](B.1.27 )/section-B.1.27 (183)690 toc23
[(Intel AVX Carry-Less Multiplication instructions \(CLMUL\))](B.1.28 )/section-B.1.28 (183)672 toc23
[(Intel Fused Multiply-Add instructions \(FMA\))](B.1.29 )/section-B.1.29 (184)654 toc23
[(Intel post-32 nm processor instructions)](B.1.30 )/section-B.1.30 (187)636 toc23
[(VIA \(Centaur\) security instructions)](B.1.31 )/section-B.1.31 (187)618 toc23
[(AMD Lightweight Profiling \(LWP\) instructions)](B.1.32 )/section-B.1.32 (187)600 toc23
[(AMD XOP and FMA4 instructions \(SSE5\))](B.1.33 )/section-B.1.33 (187)582 toc23
[(Intel AVX2 instructions)](B.1.34 )/section-B.1.34 (190)564 toc23
[(Intel Transactional Synchronization Extensions \(TSX\))](B.1.35 )/section-B.1.35 (192)546 toc23
[(Intel BMI1 and BMI2 instructions, AMD TBM instructions)](B.1.36 )/section-B.1.36 (193)528 toc23
[(Intel Memory Protection Extensions \(MPX\))](B.1.37 )/section-B.1.37 (193)510 toc23
[(Intel SHA acceleration instructions)](B.1.38 )/section-B.1.38 (194)492 toc23
[(AVX-512 mask register instructions)](B.1.39 )/section-B.1.39 (194)474 toc23
[(AVX-512 mask register instructions \(aliases requiring explicit size support\))](B.1.40 )/section-B.1.40 (195)456 toc23
[(AVX-512 instructions)](B.1.41 )/section-B.1.41 (196)438 toc23
[(Intel memory protection keys for userspace \(PKU aka PKEYs\))](B.1.42 )/section-B.1.42 (227)420 toc23
[(Read Processor ID)](B.1.43 )/section-B.1.43 (227)402 toc23
[(New memory instructions)](B.1.44 )/section-B.1.44 (227)384 toc23
[(Processor trace write)](B.1.45 )/section-B.1.45 (228)366 toc23
[(Instructions from the Intel Instruction Set Extensions,)](B.1.46 )/section-B.1.46 (228)348 toc23
[(doc 319433-034 May 2018)](B.1.47 )/section-B.1.47 (228)330 toc23
[(Galois field operations \(GFNI\))](B.1.48 )/section-B.1.48 (228)312 toc23
[(AVX512 Vector Bit Manipulation Instructions 2)](B.1.49 )/section-B.1.49 (228)294 toc23
[(AVX512 VNNI)](B.1.50 )/section-B.1.50 (229)276 toc23
[(AVX512 Bit Algorithms)](B.1.51 )/section-B.1.51 (229)258 toc23
[(AVX512 4-iteration Multiply-Add)](B.1.52 )/section-B.1.52 (230)240 toc23
[(AVX512 4-iteration Dot Product)](B.1.53 )/section-B.1.53 (230)222 toc23
[(Intel Software Guard Extensions \(SGX\))](B.1.54 )/section-B.1.54 (230)204 toc23
[(Intel Control-Flow Enforcement Technology \(CET\))](B.1.55 )/section-B.1.55 (230)186 toc23
[(Instructions from ISE doc 319433-040, June 2020)](B.1.56 )/section-B.1.56 (230)168 toc23
[(AVX512 Bfloat16 instructions)](B.1.57 )/section-B.1.57 (230)150 toc23
[(AVX512 mask intersect instructions)](B.1.58 )/section-B.1.58 (231)132 toc23
[(Intel Advanced Matrix Extensions \(AMX\))](B.1.59 )/section-B.1.59 (231)114 toc23
[(Systematic names for the hinting nop instructions)](B.1.60 )/section-B.1.60 (231)96 toc23
[(NASM Version History)](Appendix C: )/appendix-C (235)78 toc03
(12)pageeven
restore showpage
%%Page: 13 13
%%BeginPageSetup
save
%%EndPageSetup
/13 pa
[(NASM 2 Series)](C.1 )/section-C.1 (235)708 toc13
[(Version 2.15.05)](C.1.1 )/section-C.1.1 (235)690 toc23
[(Version 2.15.04)](C.1.2 )/section-C.1.2 (235)672 toc23
[(Version 2.15.03)](C.1.3 )/section-C.1.3 (235)654 toc23
[(Version 2.15.02)](C.1.4 )/section-C.1.4 (236)636 toc23
[(Version 2.15.01)](C.1.5 )/section-C.1.5 (236)618 toc23
[(Version 2.15)](C.1.6 )/section-C.1.6 (236)600 toc23
[(Version 2.14.03)](C.1.7 )/section-C.1.7 (237)582 toc23
[(Version 2.14.02)](C.1.8 )/section-C.1.8 (237)564 toc23
[(Version 2.14.01)](C.1.9 )/section-C.1.9 (237)546 toc23
[(Version 2.14)](C.1.10 )/section-C.1.10 (238)528 toc23
[(Version 2.13.03)](C.1.11 )/section-C.1.11 (239)510 toc23
[(Version 2.13.02)](C.1.12 )/section-C.1.12 (239)492 toc23
[(Version 2.13.01)](C.1.13 )/section-C.1.13 (239)474 toc23
[(Version 2.13)](C.1.14 )/section-C.1.14 (240)456 toc23
[(Version 2.12.02)](C.1.15 )/section-C.1.15 (241)438 toc23
[(Version 2.12.01)](C.1.16 )/section-C.1.16 (241)420 toc23
[(Version 2.12)](C.1.17 )/section-C.1.17 (241)402 toc23
[(Version 2.11.09)](C.1.18 )/section-C.1.18 (241)384 toc23
[(Version 2.11.08)](C.1.19 )/section-C.1.19 (242)366 toc23
[(Version 2.11.07)](C.1.20 )/section-C.1.20 (242)348 toc23
[(Version 2.11.06)](C.1.21 )/section-C.1.21 (242)330 toc23
[(Version 2.11.05)](C.1.22 )/section-C.1.22 (242)312 toc23
[(Version 2.11.04)](C.1.23 )/section-C.1.23 (242)294 toc23
[(Version 2.11.03)](C.1.24 )/section-C.1.24 (242)276 toc23
[(Version 2.11.02)](C.1.25 )/section-C.1.25 (242)258 toc23
[(Version 2.11.01)](C.1.26 )/section-C.1.26 (243)240 toc23
[(Version 2.11)](C.1.27 )/section-C.1.27 (243)222 toc23
[(Version 2.10.09)](C.1.28 )/section-C.1.28 (244)204 toc23
[(Version 2.10.08)](C.1.29 )/section-C.1.29 (244)186 toc23
[(Version 2.10.07)](C.1.30 )/section-C.1.30 (244)168 toc23
[(Version 2.10.06)](C.1.31 )/section-C.1.31 (244)150 toc23
[(Version 2.10.05)](C.1.32 )/section-C.1.32 (244)132 toc23
[(Version 2.10.04)](C.1.33 )/section-C.1.33 (244)114 toc23
[(Version 2.10.03)](C.1.34 )/section-C.1.34 (244)96 toc23
[(Version 2.10.02)](C.1.35 )/section-C.1.35 (245)78 toc23
(13)pageodd
restore showpage
%%Page: 14 14
%%BeginPageSetup
save
%%EndPageSetup
/14 pa
[(Version 2.10.01)](C.1.36 )/section-C.1.36 (245)708 toc23
[(Version 2.10)](C.1.37 )/section-C.1.37 (245)690 toc23
[(Version 2.09.10)](C.1.38 )/section-C.1.38 (245)672 toc23
[(Version 2.09.09)](C.1.39 )/section-C.1.39 (245)654 toc23
[(Version 2.09.08)](C.1.40 )/section-C.1.40 (245)636 toc23
[(Version 2.09.07)](C.1.41 )/section-C.1.41 (245)618 toc23
[(Version 2.09.06)](C.1.42 )/section-C.1.42 (245)600 toc23
[(Version 2.09.05)](C.1.43 )/section-C.1.43 (245)582 toc23
[(Version 2.09.04)](C.1.44 )/section-C.1.44 (246)564 toc23
[(Version 2.09.03)](C.1.45 )/section-C.1.45 (246)546 toc23
[(Version 2.09.02)](C.1.46 )/section-C.1.46 (246)528 toc23
[(Version 2.09.01)](C.1.47 )/section-C.1.47 (246)510 toc23
[(Version 2.09)](C.1.48 )/section-C.1.48 (246)492 toc23
[(Version 2.08.02)](C.1.49 )/section-C.1.49 (247)474 toc23
[(Version 2.08.01)](C.1.50 )/section-C.1.50 (247)456 toc23
[(Version 2.08)](C.1.51 )/section-C.1.51 (247)438 toc23
[(Version 2.07)](C.1.52 )/section-C.1.52 (248)420 toc23
[(Version 2.06)](C.1.53 )/section-C.1.53 (248)402 toc23
[(Version 2.05.01)](C.1.54 )/section-C.1.54 (249)384 toc23
[(Version 2.05)](C.1.55 )/section-C.1.55 (249)366 toc23
[(Version 2.04)](C.1.56 )/section-C.1.56 (249)348 toc23
[(Version 2.03.01)](C.1.57 )/section-C.1.57 (250)330 toc23
[(Version 2.03)](C.1.58 )/section-C.1.58 (250)312 toc23
[(Version 2.02)](C.1.59 )/section-C.1.59 (251)294 toc23
[(Version 2.01)](C.1.60 )/section-C.1.60 (251)276 toc23
[(Version 2.00)](C.1.61 )/section-C.1.61 (251)258 toc23
[(NASM 0.98 Series)](C.2 )/section-C.2 (252)240 toc13
[(Version 0.98.39)](C.2.1 )/section-C.2.1 (252)222 toc23
[(Version 0.98.38)](C.2.2 )/section-C.2.2 (253)204 toc23
[(Version 0.98.37)](C.2.3 )/section-C.2.3 (253)186 toc23
[(Version 0.98.36)](C.2.4 )/section-C.2.4 (253)168 toc23
[(Version 0.98.35)](C.2.5 )/section-C.2.5 (253)150 toc23
[(Version 0.98.34)](C.2.6 )/section-C.2.6 (254)132 toc23
[(Version 0.98.33)](C.2.7 )/section-C.2.7 (254)114 toc23
[(Version 0.98.32)](C.2.8 )/section-C.2.8 (254)96 toc23
[(Version 0.98.31)](C.2.9 )/section-C.2.9 (255)78 toc23
(14)pageeven
restore showpage
%%Page: 15 15
%%BeginPageSetup
save
%%EndPageSetup
/15 pa
[(Version 0.98.30)](C.2.10 )/section-C.2.10 (255)708 toc23
[(Version 0.98.28)](C.2.11 )/section-C.2.11 (255)690 toc23
[(Version 0.98.26)](C.2.12 )/section-C.2.12 (255)672 toc23
[(Version 0.98.25alt)](C.2.13 )/section-C.2.13 (255)654 toc23
[(Version 0.98.25)](C.2.14 )/section-C.2.14 (255)636 toc23
[(Version 0.98.24p1)](C.2.15 )/section-C.2.15 (255)618 toc23
[(Version 0.98.24)](C.2.16 )/section-C.2.16 (255)600 toc23
[(Version 0.98.23)](C.2.17 )/section-C.2.17 (256)582 toc23
[(Version 0.98.22)](C.2.18 )/section-C.2.18 (256)564 toc23
[(Version 0.98.21)](C.2.19 )/section-C.2.19 (256)546 toc23
[(Version 0.98.20)](C.2.20 )/section-C.2.20 (256)528 toc23
[(Version 0.98.19)](C.2.21 )/section-C.2.21 (256)510 toc23
[(Version 0.98.18)](C.2.22 )/section-C.2.22 (256)492 toc23
[(Version 0.98.17)](C.2.23 )/section-C.2.23 (256)474 toc23
[(Version 0.98.16)](C.2.24 )/section-C.2.24 (256)456 toc23
[(Version 0.98.15)](C.2.25 )/section-C.2.25 (256)438 toc23
[(Version 0.98.14)](C.2.26 )/section-C.2.26 (256)420 toc23
[(Version 0.98.13)](C.2.27 )/section-C.2.27 (256)402 toc23
[(Version 0.98.12)](C.2.28 )/section-C.2.28 (256)384 toc23
[(Version 0.98.11)](C.2.29 )/section-C.2.29 (256)366 toc23
[(Version 0.98.10)](C.2.30 )/section-C.2.30 (256)348 toc23
[(Version 0.98.09)](C.2.31 )/section-C.2.31 (256)330 toc23
[(Version 0.98.08)](C.2.32 )/section-C.2.32 (257)312 toc23
[(Version 0.98.09b with John Coffman patches released 28-Oct-2001)](C.2.33 )/section-C.2.33 (257)294 toc23
[(Version 0.98.07 released 01/28/01)](C.2.34 )/section-C.2.34 (257)276 toc23
[(Version 0.98.06f released 01/18/01)](C.2.35 )/section-C.2.35 (258)258 toc23
[(Version 0.98.06e released 01/09/01)](C.2.36 )/section-C.2.36 (258)240 toc23
[(Version 0.98p1)](C.2.37 )/section-C.2.37 (258)222 toc23
[(Version 0.98bf \(bug-fixed\))](C.2.38 )/section-C.2.38 (258)204 toc23
[(Version 0.98.03 with John Coffman's changes released 27-Jul-2000)](C.2.39 )/section-C.2.39 (258)186 toc23
[(Version 0.98.03)](C.2.40 )/section-C.2.40 (259)168 toc23
[(Version 0.98)](C.2.41 )/section-C.2.41 (261)150 toc23
[(Version 0.98p9)](C.2.42 )/section-C.2.42 (262)132 toc23
[(Version 0.98p8)](C.2.43 )/section-C.2.43 (262)114 toc23
[(Version 0.98p7)](C.2.44 )/section-C.2.44 (262)96 toc23
[(Version 0.98p6)](C.2.45 )/section-C.2.45 (262)78 toc23
(15)pageodd
restore showpage
%%Page: 16 16
%%BeginPageSetup
save
%%EndPageSetup
/16 pa
[(Version 0.98p3.7)](C.2.46 )/section-C.2.46 (263)708 toc23
[(Version 0.98p3.6)](C.2.47 )/section-C.2.47 (263)690 toc23
[(Version 0.98p3.5)](C.2.48 )/section-C.2.48 (263)672 toc23
[(Version 0.98p3.4)](C.2.49 )/section-C.2.49 (263)654 toc23
[(Version 0.98p3.3)](C.2.50 )/section-C.2.50 (264)636 toc23
[(Version 0.98p3.2)](C.2.51 )/section-C.2.51 (264)618 toc23
[(Version 0.98p3-hpa)](C.2.52 )/section-C.2.52 (264)600 toc23
[(Version 0.98 pre-release 3)](C.2.53 )/section-C.2.53 (264)582 toc23
[(Version 0.98 pre-release 2)](C.2.54 )/section-C.2.54 (265)564 toc23
[(Version 0.98 pre-release 1)](C.2.55 )/section-C.2.55 (265)546 toc23
[(NASM 0.9 Series)](C.3 )/section-C.3 (266)528 toc13
[(Version 0.97 released December 1997)](C.3.1 )/section-C.3.1 (266)510 toc23
[(Version 0.96 released November 1997)](C.3.2 )/section-C.3.2 (266)492 toc23
[(Version 0.95 released July 1997)](C.3.3 )/section-C.3.3 (268)474 toc23
[(Version 0.94 released April 1997)](C.3.4 )/section-C.3.4 (270)456 toc23
[(Version 0.93 released January 1997)](C.3.5 )/section-C.3.5 (270)438 toc23
[(Version 0.92 released January 1997)](C.3.6 )/section-C.3.6 (271)420 toc23
[(Version 0.91 released November 1996)](C.3.7 )/section-C.3.7 (271)402 toc23
[(Version 0.90 released October 1996)](C.3.8 )/section-C.3.8 (271)384 toc23
[(Building NASM from Source)](Appendix D: )/appendix-D (273)366 toc03
[(Building from a Source Archive)](D.1 )/section-D.1 (273)348 toc13
[(Building from the )2(git)0( Repository)](D.2 )/section-D.2 (273)330 toc13
[(Building the documentation)](D.3 )/section-D.3 (273)312 toc13
[(Contact Information)](Appendix E: )/appendix-E (275)294 toc03
[(Website)](E.1 )/section-E.1 (275)276 toc13
[(User Forums)](E.1.1 )/section-E.1.1 (275)258 toc23
[(Development Community)](E.1.2 )/section-E.1.2 (275)240 toc23
[(Reporting Bugs)](E.2 )/section-E.2 (275)222 toc13
(16)pageeven
restore showpage
%%Page: 17 17
%%BeginPageSetup
save
%%EndPageSetup
/17 pa
[{/chapter-1 xa}(Chapter 1: Introduction)]698.4 chap3
[{/section-1.1 xa}(What Is NASM?)](1.1)657.6 head3
[(The Netwide Assembler, NASM, is an 80x86 and x86-64 assembler designed for portability and)]639.6 norm1
[(modularity. It supports a range of object file formats, including Linux and *BSD )2(a.out)0(, ELF, Mach-O,)]627.6 norm0
[(16-bit and 32-bit )2(.obj)0( \(OMF\) format, COFF \(including its Win32 and Win64 variants.\) It can also output)]615.6 norm0
[(plain binary files, Intel hex and Motorola S-Record formats. Its syntax is designed to be simple and easy)]603.6 norm0
[(to understand, similar to the syntax in the Intel Software Developer Manual with minimal complexity. It)]591.6 norm0
[(supports all currently known x86 architectural extensions, and has strong support for macros.)]579.6 norm2
[{/section-1.1.1 xa}(License)](1.1.1)559.2 subh3
[(NASM is under the so-called 2-clause BSD license, also known as the simplified BSD license:)]541.2 norm3
[(Copyright 1996-2020 the NASM Authors \226 All rights reserved.)]523.2 norm3
[(Redistribution and use in source and binary forms, with or without modification, are permitted)]505.2 norm1
[(provided that the following conditions are met:)]493.2 norm2
[(Redistributions of source code must retain the above copyright notice, this list of conditions and the)]475.2 bull1
[(following disclaimer.)]463.2 bull2
[(Redistributions in binary form must reproduce the above copyright notice, this list of conditions and)]445.2 bull1
[(the following disclaimer in the documentation and/or other materials provided with the distribution.)]433.2 bull2
[(THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY)]415.2 norm1
[(EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF)]403.2 norm0
[(MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL)]391.2 norm0
[(THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,)]379.2 norm0
[(SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES \(INCLUDING, BUT NOT LIMITED TO,)]367.2 norm0
[(PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS)]355.2 norm0
[(INTERRUPTION\) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,)]343.2 norm0
[(STRICT LIABILITY, OR TORT \(INCLUDING NEGLIGENCE OR OTHERWISE\) ARISING IN ANY WAY OUT OF THE)]331.2 norm0
[(USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.)]319.2 norm2
(17)pageodd
restore showpage
%%Page: 18 18
%%BeginPageSetup
save
%%EndPageSetup
/18 pa
(18)pageeven
restore showpage
%%Page: 19 19
%%BeginPageSetup
save
%%EndPageSetup
/19 pa
[{/chapter-2 xa}(Chapter 2: Running NASM)]698.4 chap3
[{/section-2.1 xa}(NASM )(Command-Line Syntax)](2.1)657.6 head3
[(To assemble a file, you issue a command of the form)]639.6 norm3
[2(nasm -f <format> <filename> [-o <output>])]624 code3
[(For example,)]606 norm3
[2(nasm -f elf myfile.asm)]590.4 code3
[(will assemble )2(myfile.asm)0( into an ELF object file )2(myfile.o)0(. And)]572.4 norm3
[2(nasm -f bin myfile.asm -o myfile.com)]556.8 code3
[(will assemble )2(myfile.asm)0( into a raw binary file )2(myfile.com)0(.)]538.8 norm3
[(To produce a listing file, with the hex codes output from NASM displayed on the left of the original)]520.8 norm1
[(sources, use the )2(-l)0( option to give a listing file name, for example:)]508.8 norm2
[2(nasm -f coff myfile.asm -l myfile.lst)]493.2 code3
[(To get further usage instructions from NASM, try typing)]475.2 norm3
[2(nasm -h)]459.6 code3
[(The option )2(--help)0( is an alias for the )2(-h)0( option.)]441.6 norm3
[(If you use Linux but aren't sure whether your system is )2(a.out)0( or ELF, type)]423.6 norm3
[2(file nasm)]408 code3
[(\(in the directory in which you put the NASM binary when you installed it\). If it says something like)]390 norm3
[2(nasm: ELF 32-bit LSB executable i386 \(386 and up\) Version 1)]374.4 code3
[(then your system is )2(ELF)0(, and you should use the option )2(-f elf)0( when you want NASM to produce Linux)]356.4 norm1
[(object files. If it says)]344.4 norm2
[2(nasm: Linux/i386 demand-paged executable \(QMAGIC\))]328.8 code3
[(or something similar, your system is )2(a.out)0(, and you should use )2(-f aout)0( instead \(Linux )2(a.out)0( systems)]310.8 norm1
[(have long been obsolete, and are rare these days.\))]298.8 norm2
[(Like Unix compilers and assemblers, NASM is silent unless it goes wrong: you won't see any output at)]280.8 norm1
[(all, unless it gives error messages.)]268.8 norm2
[{/section-2.1.1 xa}(The )2(-o)0( Option: Specifying the Output File Name)](2.1.1)248.4 subh3
[(NASM will normally choose the name of your output file for you; precisely how it does this is dependent)]230.4 norm1
[(on the object file format. For Microsoft object file formats \()2(obj)0(, )2(win32)0( and )2(win64)0(\), it will remove the)]218.4 norm0
[2(.asm)0( )(extension \(or whatever extension you like to use \226 NASM doesn't care\) from your source file name)]206.4 norm0
[(and substitute )2(.obj)0(. For Unix object file formats \()2(aout)0(, )2(as86)0(, )2(coff)0(, )2(elf32)0(, )2(elf64)0(, )2(elfx32)0(, )2(ieee)0(, )2(macho32)]194.4 norm0
[(and )2(macho64)0(\) it will substitute )2(.o)0(. For )2(dbg)0(, )2(rdf)0(, )2(ith)0( and )2(srec)0(, it will use )2(.dbg)0(, )2(.rdf)0(, )2(.ith)0( and )2(.srec)0(,)]182.4 norm0
[(respectively, and for the )2(bin)0( format it will simply remove the extension, so that )2(myfile.asm)0( produces)]170.4 norm0
[(the output file )2(myfile)0(.)]158.4 norm2
[(If the output file already exists, NASM will overwrite it, unless it has the same name as the input file, in)]140.4 norm1
[(which case it will give a warning and use )2(nasm.out)0( as the output file name instead.)]128.4 norm2
[(For situations in which this behaviour is unacceptable, NASM provides the )2(-o)0( command-line option,)]110.4 norm1
[(which allows you to specify your desired output file name. You invoke )2(-o)0( by following it with the name)]98.4 norm0
[(you wish for the output file, either with or without an intervening space. For example:)]86.4 norm2
(19)pageodd
restore showpage
%%Page: 20 20
%%BeginPageSetup
save
%%EndPageSetup
/20 pa
[2(nasm -f bin program.asm -o program.com )]710.4 code1
[2(nasm -f bin driver.asm -odriver.sys)]700.8 code2
[(Note that this is a small o, and is different from a capital O , which is used to specify the number of)]682.8 norm1
[(optimization passes required. See ){/section-2.1.24 xl}(section 2.1.24){el}(.)]670.8 norm2
[{/section-2.1.2 xa}(The )2(-f)0( Option: Specifying the )(Output File Format)](2.1.2)650.4 subh3
[(If you do not supply the )2(-f)0( option to NASM, it will choose an output file format for you itself. In the)]632.4 norm1
[(distribution versions of NASM, the default is always )2(bin)0(; if you've compiled your own copy of NASM, you)]620.4 norm0
[(can redefine )2(OF_DEFAULT)0( at compile time and choose what you want the default to be.)]608.4 norm2
[(Like )2(-o)0(, the intervening space between )2(-f)0( and the output file format is optional; so )2(-f elf)0( and )2(-felf)]590.4 norm1
[(are both valid.)]578.4 norm2
[(A complete list of the available output file formats can be given by issuing the command )2(nasm -h)0(.)]560.4 norm3
[{/section-2.1.3 xa}(The )2(-l)0( Option: Generating a )(Listing File)](2.1.3)540 subh3
[(If you supply the )2(-l)0( option to NASM, followed \(with the usual optional space\) by a file name, NASM will)]522 norm1
[(generate a )(source-listing file for you, in which addresses and generated code are listed on the left, and)]510 norm0
[(the actual source code, with expansions of multi-line macros \(except those which specifically request)]498 norm0
[(no expansion in source listings: see ){/section-4.3.11 xl}(section 4.3.11){el}(\) on the right. For example:)]486 norm2
[2(nasm -f elf myfile.asm -l myfile.lst)]470.4 code3
[(If a list file is selected, you may turn off listing for a section of your source with )2([list -])0(, and turn it)]452.4 norm1
[(back on with )2([list +])0(, \(the default, obviously\). There is no "user form" \(without the brackets\). This can)]440.4 norm0
[(be used to list only sections of interest, avoiding excessively long listings.)]428.4 norm2
[{/section-2.1.4 xa}(The )2(-L)0( Option: Additional or Modified Listing Info)](2.1.4)408 subh3
[(Use this option to specify listing output details.)]390 norm3
[(Supported options are:)]372 norm3
[2(-Lb)0( show builtin macro packages \(standard and )2(%use)0(\))]354 bull3
[2(-Ld)0( show byte and repeat counts in decimal, not hex)]336 bull3
[2(-Le)0( show the preprocessed input)]318 bull3
[2(-Lf)0( ignore )2(.nolist)0( and force listing output)]300 bull3
[2(-Lm)0( show multi-line macro calls with expanded parameters)]282 bull3
[2(-Lp)0( output a list file in every pass, in case of errors)]264 bull3
[2(-Ls)0( show all single-line macro definitions)]246 bull3
[2(-Lw)0( flush the output after every line \(very slow, mainly useful to debug NASM crashes\))]228 bull3
[2(-L+)0( enable )1(all)0( listing options except )2(-Lw)0( \(very verbose\))]210 bull3
[(These options can be enabled or disabled at runtime using the )2(%pragma list options)0( directive:)]192 norm3
[2(%pragma list options [+|-]flags...)]176.4 code3
[(For example, to turn on the )2(d)0( and )2(m)0( flags but disable the )2(s)0( flag:)]158.4 norm3
[2(%pragma list options +dm -s)]142.8 code3
[(For forward compatility reasons, an undefined flag will be ignored. Thus, a new flag introduced in a)]124.8 norm1
[(newer version of NASM can be specified without breaking older versions. Listing flags will always be a)]112.8 norm0
[(single alphanumeric character and are case sensitive.)]100.8 norm2
(20)pageeven
restore showpage
%%Page: 21 21
%%BeginPageSetup
save
%%EndPageSetup
/21 pa
[{/section-2.1.5 xa}(The )2(-M)0( Option: Generate )(Makefile Dependencies)](2.1.5)705.6 subh3
[(This option can be used to generate makefile dependencies on stdout. This can be redirected to a file)]687.6 norm1
[(for further processing. For example:)]675.6 norm2
[2(nasm -M myfile.asm > myfile.dep)]660 code3
[{/section-2.1.6 xa}(The )2(-MG)0( Option: Generate )(Makefile Dependencies)](2.1.6)639.6 subh3
[(This option can be used to generate makefile dependencies on stdout. This differs from the )2(-M)0( option in)]621.6 norm1
[(that if a nonexisting file is encountered, it is assumed to be a generated file and is added to the)]609.6 norm0
[(dependency list without a prefix.)]597.6 norm2
[{/section-2.1.7 xa}(The )2(-MF)0( Option: Set Makefile Dependency File)](2.1.7)577.2 subh3
[(This option can be used with the )2(-M)0( or )2(-MG)0( options to send the output to a file, rather than to stdout. For)]559.2 norm1
[(example:)]547.2 norm2
[2(nasm -M -MF myfile.dep myfile.asm)]531.6 code3
[{/section-2.1.8 xa}(The )2(-MD)0( Option: Assemble and Generate Dependencies)](2.1.8)511.2 subh3
[(The )2(-MD)0( option acts as the combination of the )2(-M)0( and )2(-MF)0( options \(i.e. a filename has to be specified.\))]493.2 norm1
[(However, unlike the )2(-M)0( or )2(-MG)0( options, )2(-MD)0( does )1(not)0( inhibit the normal operation of the assembler. Use)]481.2 norm0
[(this to automatically generate updated dependencies with every assembly session. For example:)]469.2 norm2
[2(nasm -f elf -o myfile.o -MD myfile.dep myfile.asm)]453.6 code3
[(If the argument after )2(-MD)0( is an option rather than a filename, then the output filename is the first)]435.6 norm1
[(applicable one of:)]423.6 norm2
[(the filename set in the )2(-MF)0( option;)]405.6 bull3
[(the output filename from the )2(-o)0( option with )2(.d)0( appended;)]387.6 bull3
[(the input filename with the extension set to )2(.d)0(.)]369.6 bull3
[{/section-2.1.9 xa}(The )2(-MT)0( Option: Dependency Target Name)](2.1.9)349.2 subh3
[(The )2(-MT)0( option can be used to override the default name of the dependency target. This is normally the)]331.2 norm1
[(same as the output filename, specified by the )2(-o)0( option.)]319.2 norm2
[{/section-2.1.10 xa}(The )2(-MQ)0( Option: Dependency Target Name \(Quoted\))](2.1.10)298.8 subh3
[(The )2(-MQ)0( option acts as the )2(-MT)0( option, except it tries to quote characters that have special meaning in)]280.8 norm1
[(Makefile syntax. This is not foolproof, as not all characters with special meaning are quotable in Make.)]268.8 norm0
[(The default output \(if no )2(-MT)0( or )2(-MQ)0( option is specified\) is automatically quoted.)]256.8 norm2
[{/section-2.1.11 xa}(The )2(-MP)0( Option: Emit phony targets)](2.1.11)236.4 subh3
[(When used with any of the dependency generation options, the )2(-MP)0( option causes NASM to emit a)]218.4 norm1
[(phony target without dependencies for each header file. This prevents Make from complaining if a)]206.4 norm0
[(header file has been removed.)]194.4 norm2
[{/section-2.1.12 xa}(The )2(-MW)0( Option: Watcom Make quoting style)](2.1.12)174 subh3
[(This option causes NASM to attempt to quote dependencies according to Watcom Make conventions)]156 norm1
[(rather than POSIX Make conventions \(also used by most other Make variants.\) This quotes )2(#)0( as )2($#)0( rather)]144 norm0
[(than )2(\\#)0(, uses )2(&)0( rather than )2(\\)0( for continuation lines, and encloses filenames containing whitespace in)]132 norm0
[(double quotes.)]120 norm2
(21)pageodd
restore showpage
%%Page: 22 22
%%BeginPageSetup
save
%%EndPageSetup
/22 pa
[{/section-2.1.13 xa}(The )2(-F)0( Option: Selecting a )(Debug Information Format)](2.1.13)705.6 subh3
[(This option is used to select the format of the debug information emitted into the output file, to be)]687.6 norm1
[(used by a debugger \(or )1(will)0( be\). Prior to version 2.03.01, the use of this switch did )1(not)0( enable output of)]675.6 norm0
[(the selected debug info format. Use )2(-g)0(, see ){/section-2.1.14 xl}(section 2.1.14){el}(, to enable output. Versions 2.03.01 and later)]663.6 norm0
[(automatically enable )2(-g)0( if )2(-F)0( is specified.)]651.6 norm2
[(A complete list of the available debug file formats for an output format can be seen by issuing the)]633.6 norm1
[(command )2(nasm -h)0(. Not all output formats currently support debugging output.)]621.6 norm2
[(This should not be confused with the )2(-f dbg)0( output format option, see ){/section-8.14 xl}(section 8.14){el}(.)]603.6 norm3
[{/section-2.1.14 xa}(The )2(-g)0( Option: Enabling )(Debug Information.)](2.1.14)583.2 subh3
[(This option can be used to generate debugging information in the specified format. See ){/section-2.1.13 xl}(section 2.1.13){el}(.)]565.2 norm1
[(Using )2(-g)0( without )2(-F)0( results in emitting debug info in the default format, if any, for the selected output)]553.2 norm0
[(format. If no debug information is currently implemented in the selected output format, )2(-g)0( is )1(silently)]541.2 norm0
[1(ignored)0(.)]529.2 norm2
[{/section-2.1.15 xa}(The )2(-X)0( Option: Selecting an )(Error Reporting Format)](2.1.15)508.8 subh3
[(This option can be used to select an error reporting format for any error messages that might be)]490.8 norm1
[(produced by NASM.)]478.8 norm2
[(Currently, two error reporting formats may be selected. They are the )2(-Xvc)0( option and the )2(-Xgnu)0( option.)]460.8 norm1
[(The GNU format is the default and looks like this:)]448.8 norm2
[2(filename.asm:65: error: specific error message)]433.2 code3
[(where )2(filename.asm)0( is the name of the source file in which the error was detected, )2(65)0( is the source file)]415.2 norm1
[(line number on which the error was detected, )2(error)0( is the severity of the error \(this could be )2(warning)0(\),)]403.2 norm0
[(and )2(specific error message)0( is a more detailed text message which should help pinpoint the exact)]391.2 norm0
[(problem.)]379.2 norm2
[(The other format, specified by )2(-Xvc)0( is the style used by Microsoft Visual C++ and some other programs.)]361.2 norm1
[(It looks like this:)]349.2 norm2
[2(filename.asm\(65\) : error: specific error message)]333.6 code3
[(where the only difference is that the line number is in parentheses instead of being delimited by colons.)]315.6 norm3
[(See also the )2(Visual C++)0( output format, ){/section-8.5 xl}(section 8.5){el}(.)]297.6 norm3
[{/section-2.1.16 xa}(The )2(-Z)0( Option: Send Errors to a File)](2.1.16)277.2 subh3
[(Under )2(MS-DOS)0( it can be difficult \(though there are ways\) to redirect the standard-error output of a)]259.2 norm1
[(program to a file. Since NASM usually produces its warning and )(error messages on )2(stderr)0(, this can)]247.2 norm0
[(make it hard to capture the errors if \(for example\) you want to load them into an editor.)]235.2 norm2
[(NASM therefore provides the )2(-Z)0( option, taking a filename argument which causes errors to be sent to)]217.2 norm1
[(the specified files rather than standard error. Therefore you can )(redirect the errors into a file by typing)]205.2 norm2
[2(nasm -Z myfile.err -f obj myfile.asm)]189.6 code3
[(In earlier versions of NASM, this option was called )2(-E)0(, but it was changed since )2(-E)0( is an option)]171.6 norm1
[(conventionally used for preprocessing only, with disastrous results. See ){/section-2.1.22 xl}(section 2.1.22){el}(.)]159.6 norm2
[{/section-2.1.17 xa}(The )2(-s)0( Option: Send Errors to )2(stdout)](2.1.17)139.2 subh3
[(The )2(-s)0( option redirects )(error messages to )2(stdout)0( rather than )2(stderr)0(, so it can be redirected under)]121.2 norm1
[2(MS-DOS)0(. To assemble the file )2(myfile.asm)0( and pipe its output to the )2(more)0( program, you can type:)]109.2 norm2
[2(nasm -s -f obj myfile.asm | more)]93.5999999999999 code3
[(See also the )2(-Z)0( option, ){/section-2.1.16 xl}(section 2.1.16){el}(.)]75.5999999999999 norm3
(22)pageeven
restore showpage
%%Page: 23 23
%%BeginPageSetup
save
%%EndPageSetup
/23 pa
[{/section-2.1.18 xa}(The )2(-i)0( Option: Include File Search Directories)](2.1.18)705.6 subh3
[(When NASM sees the )2(%include)0( or )2(%pathsearch)0( directive in a source file \(see ){/section-4.6.1 xl}(section 4.6.1){el}(, ){/section-4.6.2 xl}(section 4.6.2){el}]687.6 norm1
[(or ){/section-3.2.3 xl}(section 3.2.3){el}(\), it will search for the given file not only in the current directory, but also in any)]675.6 norm0
[(directories specified on the command line by the use of the )2(-i)0( option. Therefore you can include files)]663.6 norm0
[(from a )(macro library, for example, by typing)]651.6 norm2
[2(nasm -ic:\\macrolib\\ -f obj myfile.asm)]636 code3
[(\(As usual, a space between )2(-i)0( and the path name is allowed, and optional\).)]618 norm3
[(Prior NASM 2.14 a path provided in the option has been considered as a verbatim copy and providing a)]600 norm1
[(path separator been up to a caller. One could implicitly concatenate a search path together with a)]588 norm0
[(filename. Still this was rather a trick than something useful. Now the trailing path separator is made to)]576 norm0
[(always present, thus )2(-ifoo)0( will be considered as the )2(-ifoo/)0( directory.)]564 norm2
[(If you want to define a )1(standard)0( )(include search path, similar to )2(/usr/include)0( on Unix systems, you)]546 norm1
[(should place one or more )2(-i)0( directives in the )2(NASMENV)0( environment variable \(see ){/section-2.1.35 xl}(section 2.1.35){el}(\).)]534 norm2
[(For Makefile compatibility with many C compilers, this option can also be specified as )2(-I)0(.)]516 norm3
[{/section-2.1.19 xa}(The )2(-p)0( Option: )(Pre-Include a File)](2.1.19)495.6 subh3
[(NASM allows you to specify files to be )1(pre-included)0( into your source file, by the use of the )2(-p)0( option. So)]477.6 norm1
[(running)]465.6 norm2
[2(nasm myfile.asm -p myinc.inc)]450 code3
[(is equivalent to running )2(nasm myfile.asm)0( and placing the directive )2(%include "myinc.inc")0( at the start)]432 norm1
[(of the file.)]420 norm2
[2(--include)0( option is also accepted.)]402 norm3
[(For consistency with the )2(-I)0(, )2(-D)0( and )2(-U)0( options, this option can also be specified as )2(-P)0(.)]384 norm3
[{/section-2.1.20 xa}(The )2(-d)0( Option: )(Pre-Define a Macro)](2.1.20)363.6 subh3
[(Just as the )2(-p)0( option gives an alternative to placing )2(%include)0( directives at the start of a source file, the)]345.6 norm1
[2(-d)0( option gives an alternative to placing a )2(%define)0( directive. You could code)]333.6 norm2
[2(nasm myfile.asm -dFOO=100)]318 code3
[(as an alternative to placing the directive)]300 norm3
[2(%define FOO 100)]284.4 code3
[(at the start of the file. You can miss off the macro value, as well: the option )2(-dFOO)0( is equivalent to)]266.4 norm1
[(coding )2(%define FOO)0(. This form of the directive may be useful for selecting )(assembly-time options which)]254.4 norm0
[(are then tested using )2(%ifdef)0(, for example )2(-dDEBUG)0(.)]242.4 norm2
[(For Makefile compatibility with many C compilers, this option can also be specified as )2(-D)0(.)]224.4 norm3
[{/section-2.1.21 xa}(The )2(-u)0( Option: )(Undefine a Macro)](2.1.21)204 subh3
[(The )2(-u)0( option undefines a macro that would otherwise have been pre-defined, either automatically or)]186 norm1
[(by a )2(-p)0( or )2(-d)0( option specified earlier on the command lines.)]174 norm2
[(For example, the following command line:)]156 norm3
[2(nasm myfile.asm -dFOO=100 -uFOO)]140.4 code3
[(would result in )2(FOO)0( )1(not)0( being a predefined macro in the program. This is useful to override options)]122.4 norm1
[(specified at a different point in a Makefile.)]110.4 norm2
[(For Makefile compatibility with many C compilers, this option can also be specified as )2(-U)0(.)]92.4 norm3
(23)pageodd
restore showpage
%%Page: 24 24
%%BeginPageSetup
save
%%EndPageSetup
/24 pa
[{/section-2.1.22 xa}(The )2(-E)0( Option: Preprocess Only)](2.1.22)705.6 subh3
[(NASM allows the )(preprocessor to be run on its own, up to a point. Using the )2(-E)0( option \(which requires)]687.6 norm1
[(no arguments\) will cause NASM to preprocess its input file, expand all the macro references, remove all)]675.6 norm0
[(the comments and preprocessor directives, and print the resulting file on standard output \(or save it to)]663.6 norm0
[(a file, if the )2(-o)0( option is also used\).)]651.6 norm2
[(This option cannot be applied to programs which require the preprocessor to evaluate )(expressions)]633.6 norm1
[(which depend on the values of symbols: so code such as)]621.6 norm2
[2(%assign tablesize \($-tablestart\))]606 code3
[(will cause an error in )(preprocess-only mode.)]588 norm3
[(For compatiblity with older version of NASM, this option can also be written )2(-e)0(. )2(-E)0( in older versions of)]570 norm1
[(NASM was the equivalent of the current )2(-Z)0( option, ){/section-2.1.16 xl}(section 2.1.16){el}(.)]558 norm2
[{/section-2.1.23 xa}(The )2(-a)0( Option: Don't Preprocess At All)](2.1.23)537.6 subh3
[(If NASM is being used as the back end to a compiler, it might be desirable to )(suppress preprocessing)]519.6 norm1
[(completely and assume the compiler has already done it, to save time and increase compilation)]507.6 norm0
[(speeds. The )2(-a)0( option, requiring no argument, instructs NASM to replace its powerful )(preprocessor with)]495.6 norm0
[(a )(stub preprocessor which does nothing.)]483.6 norm2
[{/section-2.1.24 xa}(The )2(-O)0( Option: Specifying )(Multipass Optimization)](2.1.24)463.2 subh3
[(Using the )2(-O)0( option, you can tell NASM to carry out different levels of optimization. Multiple flags can be)]445.2 norm1
[(specified after the )2(-O)0( options, some of which can be combined in a single option, e.g. )2(-Oxv)0(.)]433.2 norm2
[2(-O0)0(: No optimization. All operands take their long forms, if a short form is not specified, except)]415.2 bull1
[(conditional jumps. This is intended to match NASM 0.98 behavior.)]403.2 bull2
[2(-O1)0(: Minimal optimization. As above, but immediate operands which will fit in a signed byte are)]385.2 bull1
[(optimized, unless the long form is specified. Conditional jumps default to the long form unless)]373.2 bull0
[(otherwise specified.)]361.2 bull2
[2(-Ox)0( \(where )2(x)0( is the actual letter )2(x)0(\): Multipass optimization. Minimize branch offsets and signed)]343.2 bull1
[(immediate bytes, overriding size specification unless the )2(strict)0( keyword has been used \(see ){/section-3.7 xl}(section){el}]331.2 bull0
[{/section-3.7 xl}(3.7){el}(\). For compatibility with earlier releases, the letter )2(x)0( may also be any number greater than one.)]319.2 bull0
[(This number has no effect on the actual number of passes.)]307.2 bull2
[2(-Ov)0(: At the end of assembly, print the number of passes actually executed.)]289.2 bull3
[(The )2(-Ox)0( mode is recommended for most uses, and is the default since NASM 2.09.)]271.2 norm3
[(Note that this is a capital )2(O)0(, and is different from a small )2(o)0(, which is used to specify the output file name.)]253.2 norm1
[(See ){/section-2.1.1 xl}(section 2.1.1){el}(.)]241.2 norm2
[{/section-2.1.25 xa}(The )2(-t)0( Option: Enable TASM Compatibility Mode)](2.1.25)220.8 subh3
[(NASM includes a limited form of compatibility with Borland's )2(TASM)0(. When NASM's )2(-t)0( option is used, the)]202.8 norm1
[(following changes are made:)]190.8 norm2
[(local labels may be prefixed with )2(@@)0( instead of )2(.)]172.8 bull3
[(size override is supported within brackets. In TASM compatible mode, a size override inside square)]154.8 bull1
[(brackets changes the size of the operand, and not the address type of the operand as it does in)]142.8 bull0
[(NASM syntax. E.g. )2(mov eax,[DWORD val])0( is valid syntax in TASM compatibility mode. Note that you)]130.8 bull0
[(lose the ability to override the default address type for the instruction.)]118.8 bull2
[(unprefixed forms of some directives supported \()2(arg)0(, )2(elif)0(, )2(else)0(, )2(endif)0(, )2(if)0(, )2(ifdef)0(, )2(ifdifi)0(, )2(ifndef)0(,)]100.8 bull1
[2(include)0(, )2(local)0(\))]88.8 bull2
(24)pageeven
restore showpage
%%Page: 25 25
%%BeginPageSetup
save
%%EndPageSetup
/25 pa
[{/section-2.1.26 xa}(The )2(-w)0( and )2(-W)0( Options: Enable or Disable Assembly )(Warnings)](2.1.26)705.6 subh3
[(NASM can observe many conditions during the course of assembly which are worth mentioning to the)]687.6 norm1
[(user, but not a sufficiently severe error to justify NASM refusing to generate an output file. These)]675.6 norm0
[(conditions are reported like errors, but come up with the word `warning' before the message. Warnings)]663.6 norm0
[(do not prevent NASM from generating an output file and returning a success status to the operating)]651.6 norm0
[(system.)]639.6 norm2
[(Some conditions are even less severe than that: they are only sometimes worth mentioning to the user.)]621.6 norm1
[(Therefore NASM supports the )2(-w)0( command-line option, which enables or disables certain classes of)]609.6 norm0
[(assembly warning. Such warning classes are described by a name, for example )2(label-orphan)0(; you can)]597.6 norm0
[(enable warnings of this class by the command-line option )2(-w+label-orphan)0( and disable it by)]585.6 norm0
[2(-w-label-orphan)0(.)]573.6 norm2
[(The current )(warning classes are:)]555.6 norm3
[2(all)0( is an group alias for )1(all)0( warning classes. Thus, )2(-w+all)0( enables all available warnings, and )2(-w-all)]537.6 bull1
[(disables warnings entirely \(since NASM 2.13\).)]525.6 bull2
[2(bad-pragma)0( is a backwards compatibility alias for )2(pragma-bad)0(.)]507.6 bull3
[2(bnd)0( warns about ineffective use of the )2(BND)0( prefix when the )2(JMP)0( instruction is converted to the )2(SHORT)]489.6 bull1
[(form. This should be extremely rare since the short )2(JMP)0( only is applicable to jumps inside the same)]477.6 bull0
[(module, but if it is legitimate, it may be necessary to use )2(bnd jmp dword)0(.)]465.6 bull2
[(Enabled by default.)]447.6 indt3
[2(db-empty)0( warns about a )2(DB)0(, )2(DW)0(, etc declaration with no operands, producing no output. This is)]429.6 bull1
[(permitted, but often indicative of an error. See ){/section-3.2.1 xl}(section 3.2.1){el}(.)]417.6 bull2
[(Enabled by default.)]399.6 indt3
[2(environment)0( warns if a nonexistent environment variable is accessed using the )2(%!)0( preprocessor)]381.6 bull1
[(construct \(see ){/section-4.11.2 xl}(section 4.11.2){el}(.\) Such environment variables are treated as empty \(with this warning)]369.6 bull0
[(issued\) starting in NASM 2.15; earlier versions of NASM would treat this as an error.)]357.6 bull2
[(Enabled by default.)]339.6 indt3
[2(float)0( is a group alias for all warning classes prefixed by )2(float-)0(; currently )2(float-denorm)0(,)]321.6 bull1
[2(float-overflow)0(, )2(float-toolong)0(, and )2(float-underflow)0(.)]309.6 bull2
[2(float-denorm)0( warns about denormal floating point constants.)]291.6 bull3
[(Disabled by default.)]273.6 indt3
[2(float-overflow)0( warns about floating point underflow.)]255.6 bull3
[(Enabled by default.)]237.6 indt3
[2(float-toolong)0( warns about too many digits in floating-point numbers.)]219.6 bull3
[(Enabled by default.)]201.6 indt3
[2(float-underflow)0( warns about floating point underflow \(a nonzero constant rounded to zero.\))]183.6 bull3
[(Disabled by default.)]165.6 indt3
[2(hle)0( warns about invalid use of the HLE )2(XACQUIRE)0( or )2(XRELEASE)0( prefixes.)]147.6 bull3
[(Enabled by default.)]129.6 indt3
[2(label)0( is a group alias for all warning classes prefixed by )2(label-)0(; currently )2(label-orphan)0(,)]111.6 bull1
[2(label-redef)0(, and )2(label-redef-late)0(.)]99.6 bull2
(25)pageodd
restore showpage
%%Page: 26 26
%%BeginPageSetup
save
%%EndPageSetup
/26 pa
[2(label-orphan)0( warns about source lines which contain no instruction but define a label without a)]708 bull1
[(trailing colon. This is most likely indicative of a typo, but is technically correct NASM syntax \(see)]696 bull0
[{/section-3.1 xl}(section 3.1){el}(.\))]684 bull2
[(Enabled by default.)]666 indt3
[2(label-redef)0( warns if a label is defined more than once, but the value is identical. It is an)]648 bull1
[(unconditional error to define the same label more than once to )1(different)0( values.)]636 bull2
[(Disabled by default.)]618 indt3
[2(label-redef-late)0( the value of a label changed during the final, code-generation pass. This may be)]600 bull1
[(the result of strange use of the preprocessor. This is very likely to produce incorrect code and may)]588 bull0
[(end up being an unconditional error in a future version of NASM.)]576 bull2
[(Enabled and promoted to error by default.)]558 indt3
[2(lock)0( warns about )2(LOCK)0( prefixes on unlockable instructions.)]540 bull3
[(Enabled by default.)]522 indt3
[2(macro)0( is a group alias for all warning classes prefixed by )2(macro-)0(; currently )2(macro-def-case-single)0(,)]504 bull1
[2(macro-def-greedy-single)0(, )2(macro-def-param-single)0(, )2(macro-defaults)0(, )2(macro-params-legacy)0(,)]492 bull0
[2(macro-params-multi)0(, and )2(macro-params-single)0(.)]480 bull2
[2(macro-def)0( is a group alias for all warning classes prefixed by )2(macro-def-)0(; currently)]462 bull1
[2(macro-def-case-single)0(, )2(macro-def-greedy-single)0(, and )2(macro-def-param-single)0(.)]450 bull2
[2(macro-def-case-single)0( warns when a single-line macro is defined both case sensitive and case)]432 bull1
[(insensitive. The new macro definition will override \(shadow\) the original one, although the original)]420 bull0
[(macro is not deleted, and will be re-exposed if the new macro is deleted with )2(%undef)0(, or, if the)]408 bull0
[(original macro is the case insensitive one, the macro call is done with a different case.)]396 bull2
[(Enabled by default.)]378 indt3
[2(macro-def-greedy-single)0( definition shadows greedy macro warns when a single-line macro is)]360 bull1
[(defined which would match a previously existing greedy definition. The new macro definition will)]348 bull0
[(override \(shadow\) the original one, although the original macro is not deleted, and will be)]336 bull0
[(re-exposed if the new macro is deleted with )2(%undef)0(, and will be invoked if called with a parameter)]324 bull0
[(count that does not match the new definition.)]312 bull2
[(Enabled by default.)]294 indt3
[2(macro-def-param-single)0( warns if the same single-line macro is defined with and without)]276 bull1
[(parameters. The new macro definition will override \(shadow\) the original one, although the original)]264 bull0
[(macro is not deleted, and will be re-exposed if the new macro is deleted with )2(%undef)0(.)]252 bull2
[(Enabled and promoted to error by default.)]234 indt3
[2(macro-defaults)0( warns when a macro has more default parameters than optional parameters. See)]216 bull1
[{/section-4.3.5 xl}(section 4.3.5){el}( for why might want to disable this warning.)]204 bull2
[(Enabled by default.)]186 indt3
[2(macro-params)0( is a group alias for all warning classes prefixed by )2(macro-params-)0(; currently)]168 bull1
[2(macro-params-legacy)0(, )2(macro-params-multi)0(, and )2(macro-params-single)0(.)]156 bull2
[2(macro-params-legacy)0( warns about )(multi-line macros being invoked with the wrong number of)]138 bull1
[(parameters, but for bug-compatibility with NASM versions older than 2.15, NASM tried to fix up the)]126 bull0
[(parameters to match the legacy behavior and call the macro anyway. This can happen in certain)]114 bull0
[(cases where there are empty arguments without braces, sometimes as a result of macro expansion.)]102 bull2
[(The legacy behavior is quite strange and highly context-dependent, and can be disabled with:)]84 indt3
(26)pageeven
restore showpage
%%Page: 27 27
%%BeginPageSetup
save
%%EndPageSetup
/27 pa
[2(     %pragma preproc sane_empty_expansion true)]710.4 code3
[(It is highly recommended to use this option in new code.)]692.4 indt3
[(Enabled by default.)]674.4 indt3
[2(macro-params-multi)0( warns about )(multi-line macros being invoked with the wrong number of)]656.4 bull1
[(parameters. See ){/section-4.3.1 xl}(section 4.3.1){el}( for an example of why you might want to disable this warning.)]644.4 bull2
[(Enabled by default.)]626.4 indt3
[2(macro-params-single)0( warns about )(single-line macros being invoked with the wrong number of)]608.4 bull1
[(parameters.)]596.4 bull2
[(Enabled by default.)]578.4 indt3
[2(negative-rep)0( warns about negative counts given to the )2(%rep)0( preprocessor directive.)]560.4 bull3
[(Enabled by default.)]542.4 indt3
[2(not-my-pragma)0( is a backwards compatibility alias for )2(pragma-na)0(.)]524.4 bull3
[2(number-overflow)0( covers warnings about numeric constants which don't fit in 64 bits.)]506.4 bull3
[(Enabled by default.)]488.4 indt3
[2(obsolete)0( is a group alias for all warning classes prefixed by )2(obsolete-)0(; currently )2(obsolete-nop)0(,)]470.4 bull1
[2(obsolete-removed)0(, and )2(obsolete-valid)0(.)]458.4 bull2
[2(obsolete-nop)0( warns for an instruction which has been removed from the architecture, but has been)]440.4 bull1
[(architecturally defined to be a noop for future CPUs.)]428.4 bull2
[(Enabled by default.)]410.4 indt3
[2(obsolete-removed)0( warns for an instruction which has been removed from the architecture, and is no)]392.4 bull1
[(longer included in the CPU definition given in the )2([CPU])0( directive, for example )2(POP CS)0(, the opcode)]380.4 bull0
[(for which, )2(0Fh)0(, instead is an opcode prefix on CPUs newer than the first generation 8086.)]368.4 bull2
[(Enabled by default.)]350.4 indt3
[2(obsolete-valid)0( warns for an instruction which has been removed from the architecture, but is still)]332.4 bull1
[(valid on the specific CPU given in the )2(CPU)0( directive. Code using these instructions is most likely not)]320.4 bull0
[(forward compatible.)]308.4 bull2
[(Enabled by default.)]290.4 indt3
[2(orphan-labels)0( is a backwards compatibility alias for )2(label-orphan)0(.)]272.4 bull3
[2(other)0( specifies any warning not included in any specific warning class.)]254.4 bull3
[(Enabled by default.)]236.4 indt3
[2(phase)0( warns about symbols having changed values during the second-to-last assembly pass. This is)]218.4 bull1
[(not inherently fatal, but may be a source of bugs.)]206.4 bull2
[(Disabled by default.)]188.4 indt3
[2(pragma)0( is a group alias for all warning classes prefixed by )2(pragma-)0(; currently )2(pragma-bad)0(,)]170.4 bull1
[2(pragma-empty)0(, )2(pragma-na)0(, and )2(pragma-unknown)0(.)]158.4 bull2
[2(pragma-bad)0( warns about a malformed or otherwise unparsable )2(%pragma)0( directive.)]140.4 bull3
[(Disabled by default.)]122.4 indt3
[2(pragma-empty)0( warns about a )2(%pragma)0( directive containing nothing. This is treated identically to)]104.4 bull1
[2(%pragma ignore)0( except for this optional warning.)]92.4 bull2
[(Disabled by default.)]74.4 indt3
(27)pageodd
restore showpage
%%Page: 28 28
%%BeginPageSetup
save
%%EndPageSetup
/28 pa
[2(pragma-na)0( warns about a )2(%pragma)0( directive which is not applicable to this particular assembly)]708 bull1
[(session. This is not yet implemented.)]696 bull2
[(Disabled by default.)]678 indt3
[2(pragma-unknown)0( warns about an unknown )2(%pragma)0( directive. This is not yet implemented for most)]660 bull1
[(cases.)]648 bull2
[(Disabled by default.)]630 indt3
[2(ptr)0( warns about keywords used in other assemblers that might indicate a mistake in the source)]612 bull1
[(code. Currently only the MASM )2(PTR)0( keyword is recognized. See also ){/section-6.5 xl}(section 6.5){el}(.)]600 bull2
[(Enabled by default.)]582 indt3
[2(regsize)0( warns about a register with implicit size \(such as )2(EAX)0(, which is always 32 bits\) been given an)]564 bull1
[(explicit size specification which is inconsistent with the size of the named register, e.g. )2(WORD EAX)0(.)]552 bull0
[2(DWORD EAX)0( or )2(WORD AX)0( are permitted, and do not trigger this warning. Some registers which )1(do not)]540 bull0
[(imply a specific size, such as )2(K0)0(, may need this specification unless the instruction itself implies the)]528 bull0
[(instruction size:)]516 bull2
[2(     KMOVW K0,[foo]          ; Permitted, KMOVW implies 16 bits )]500.4 code1
[2(     KMOV  WORD K0,[foo]     ; Permitted, WORD K0 specifies instruction size )]490.8 code0
[2(     KMOV  K0,WORD [foo]     ; Permitted, WORD [foo] specifies instruction size )]481.2 code0
[2(     KMOV  K0,[foo]          ; Not permitted, instruction size ambiguous)]471.6 code2
[(Enabled by default.)]453.6 indt3
[2(unknown-pragma)0( is a backwards compatibility alias for )2(pragma-unknown)0(.)]435.6 bull3
[2(unknown-warning)0( warns about a )2(-w)0( or )2(-W)0( option or a )2([WARNING])0( directive that contains an unknown)]417.6 bull1
[(warning name or is otherwise not possible to process.)]405.6 bull2
[(Disabled by default.)]387.6 indt3
[2(user)0( controls output of )2(%warning)0( directives \(see ){/section-4.9 xl}(section 4.9){el}(\).)]369.6 bull3
[(Enabled by default.)]351.6 indt3
[2(warn-stack-empty)0( a [WARNING POP] directive was executed when the warning stack is empty. This)]333.6 bull1
[(is treated as a [WARNING *all] directive.)]321.6 bull2
[(Enabled by default.)]303.6 indt3
[2(zeroing)0( a )2(RESx)0( directive was used in a section which contains initialized data, and the output format)]285.6 bull1
[(does not support this. Instead, this will be replaced with explicit zero content, which may produce a)]273.6 bull0
[(large output file.)]261.6 bull2
[(Enabled by default.)]243.6 indt3
[2(zext-reloc)0( warns that a relocation has been zero-extended due to limitations in the output format.)]225.6 bull3
[(Enabled by default.)]207.6 indt3
[(Since version 2.15, NASM has group aliases for all prefixed warnings, so they can be used to enable or)]189.6 norm1
[(disable all warnings in the group. For example, \226w+float enables all warnings with names starting with)]177.6 norm0
[(float-*.)]165.6 norm2
[(Since version 2.00, NASM has also supported the )2(gcc)0(\226like syntax )2(-Wwarning-class)0( and)]147.6 norm1
[2(-Wno-warning-class)0( instead of )2(-w+warning-class)0( and )2(-w-warning-class)0(, respectively; both syntaxes)]135.6 norm0
[(work identically.)]123.6 norm2
[(The option )2(-w+error)0( or )2(-Werror)0( can be used to treat warnings as errors. This can be controlled on a per)]105.6 norm1
[(warning class basis \()2(-w+error=)1(warning-class)0( or )2(-Werror=)1(warning-class)0(\); if no )1(warning-class)0( is specified)]93.6 norm0
[(NASM treats it as )2(-w+error=all)0(; the same applies to )2(-w-error)0( or )2(-Wno-error)0(, of course.)]81.6 norm2
(28)pageeven
restore showpage
%%Page: 29 29
%%BeginPageSetup
save
%%EndPageSetup
/29 pa
[(In addition, you can control warnings in the source code itself, using the )2([WARNING])0( directive. See)]708 norm1
[{/section-7.13 xl}(section 7.13){el}(.)]696 norm2
[{/section-2.1.27 xa}(The )2(-v)0( Option: Display )(Version Info)](2.1.27)675.6 subh3
[(Typing )2(NASM -v)0( will display the version of NASM which you are using, and the date on which it was)]657.6 norm1
[(compiled.)]645.6 norm2
[(You will need the version number if you report a bug.)]627.6 norm3
[(For command-line compatibility with Yasm, the form )2(--v)0( is also accepted for this option starting in)]609.6 norm1
[(NASM version 2.11.05.)]597.6 norm2
[{/section-2.1.28 xa}(The )2(--\(g|l\)prefix)0(, )2(--\(g|l\)postfix)0( Options.)](2.1.28)577.2 subh3
[(The )2(--\(g\)prefix)0( options prepend the given argument to all )2(extern)0(, )2(common)0(, )2(static)0(, and )2(global)]559.2 norm1
[(symbols, and the )2(--lprefix)0( option prepends to all other symbols. Similarly, )2(--\(g\)postfix)0( and)]547.2 norm0
[2(--lpostfix)0( options append the argument in the exactly same way as the )2(--xxprefix)0( options does.)]535.2 norm2
[(Running this:)]517.2 norm3
[2(nasm -f macho --gprefix _)]501.6 code3
[(is equivalent to place the directive with )2(%pragma macho gprefix _)0( at the start of the file \(){/section-7.10 xl}(section 7.10){el}(\).)]483.6 norm1
[(It will prepend the underscore to all global and external variables, as C requires it in some, but not all,)]471.6 norm0
[(system calling conventions.)]459.6 norm2
[{/section-2.1.29 xa}(The )2(--pragma)0( Option)](2.1.29)439.2 subh3
[(NASM accepts an argument as )2(%pragma)0( option, which is like placing a )2(%pragma)0( preprocess statement at)]421.2 norm1
[(the beginning of the source. Running this:)]409.2 norm2
[2(nasm -f macho --pragma "macho gprefix _")]393.6 code3
[(is equivalent to the example in ){/section-2.1.28 xl}(section 2.1.28){el}(. See ){/section-4.10 xl}(section 4.10){el}(.)]375.6 norm3
[{/section-2.1.30 xa}(The )2(--before)0( Option)](2.1.30)355.2 subh3
[(A preprocess statement can be accepted with this option. The example shown in ){/section-2.1.29 xl}(section 2.1.29){el}( is the)]337.2 norm1
[(same as running this:)]325.2 norm2
[2(nasm -f macho --before "%pragma macho gprefix _")]309.6 code3
[{/section-2.1.31 xa}(The )2(--limit-X)0( Option)](2.1.31)289.2 subh3
[(This option allows user to setup various maximum values after which NASM will terminate with a fatal)]271.2 norm1
[(error rather than consume arbitrary amount of compute time. Each limit can be set to a positive)]259.2 norm0
[(number or )2(unlimited)0(.)]247.2 norm2
[2(--limit-passes)0(: Number of maximum allowed passes. Default is )2(unlimited)0(.)]229.2 bull3
[2(--limit-stalled-passes)0(: Maximum number of allowed unfinished passes. Default is 1000.)]211.2 bull3
[2(--limit-macro-levels)0(: Define maximum depth of macro expansion \(in preprocess\). Default is 10000)]193.2 bull3
[2(--limit-macro-tokens)0(: Maximum number of tokens processed during single-line macro expansion.)]175.2 bull1
[(Default is 10000000.)]163.2 bull2
[2(--limit-mmacros)0(: Maximum number of multi-line macros processed before returning to the)]145.2 bull1
[(top-level input. Default is 100000.)]133.2 bull2
[2(--limit-rep)0(: Maximum number of allowed preprocessor loop, defined under )2(%rep)0(. Default is)]115.2 bull1
[(1000000.)]103.2 bull2
[2(--limit-eval)0(: This number sets the boundary condition of allowed expression length. Default is)]85.2 bull1
[(8192 on most systems.)]73.2 bull2
(29)pageodd
restore showpage
%%Page: 30 30
%%BeginPageSetup
save
%%EndPageSetup
/30 pa
[2(--limit-lines)0(: Total number of source lines allowed to be processed. Default is 2000000000.)]708 bull3
[(For example, set the maximum line count to 1000:)]690 norm3
[2(nasm --limit-lines 1000)]674.4 code3
[(Limits can also be set via the directive )2(%pragma limit)0(, for example:)]656.4 norm3
[2(%pragma limit lines 1000)]640.8 code3
[{/section-2.1.32 xa}(The )2(--keep-all)0( Option)](2.1.32)620.4 subh3
[(This option prevents NASM from deleting any output files even if an error happens.)]602.4 norm3
[{/section-2.1.33 xa}(The )2(--no-line)0( Option)](2.1.33)582 subh3
[(If this option is given, all )2(%line)0( directives in the source code are ignored. This can be useful for)]564 norm1
[(debugging already preprocessed code. See ){/section-4.11.1 xl}(section 4.11.1){el}(.)]552 norm2
[{/section-2.1.34 xa}(The )2(--reproducible)0( Option)](2.1.34)531.6 subh3
[(If this option is given, NASM will not emit information that is inherently dependent on the NASM version)]513.6 norm1
[(or different from run to run \(such as timestamps\) into the output file.)]501.6 norm2
[{/section-2.1.35 xa}(The )2(NASMENV)0( )(Environment Variable)](2.1.35)481.2 subh3
[(If you define an environment variable called )2(NASMENV)0(, the program will interpret it as a list of extra)]463.2 norm1
[(command-line options, which are processed before the real command line. You can use this to define)]451.2 norm0
[(standard search directories for include files, by putting )2(-i)0( options in the )2(NASMENV)0( variable.)]439.2 norm2
[(The value of the variable is split up at white space, so that the value )2(-s -ic:\\nasmlib\\)0( will be treated)]421.2 norm1
[(as two separate options. However, that means that the value )2(-dNAME="my name")0( won't do what you)]409.2 norm0
[(might want, because it will be split at the space and the NASM command-line processing will get)]397.2 norm0
[(confused by the two nonsensical words )2(-dNAME="my)0( and )2(name")0(.)]385.2 norm2
[(To get round this, NASM provides a feature whereby, if you begin the )2(NASMENV)0( environment variable)]367.2 norm1
[(with some character that isn't a minus sign, then NASM will treat this character as the )(separator)]355.2 norm0
[(character for options. So setting the )2(NASMENV)0( variable to the value )2(!-s!-ic:\\nasmlib\\)0( is equivalent to)]343.2 norm0
[(setting it to )2(-s -ic:\\nasmlib\\)0(, but )2(!-dNAME="my name")0( will work.)]331.2 norm2
[(This environment variable was previously called )2(NASM)0(. This was changed with version 0.98.31.)]313.2 norm3
[{/section-2.2 xa}(Quick Start for )(MASM Users)](2.2)290.4 head3
[(If you're used to writing programs with MASM, or with )(TASM in MASM-compatible \(non-Ideal\) mode, or)]272.4 norm1
[(with )2(a86)0(, this section attempts to outline the major differences between MASM's syntax and NASM's. If)]260.4 norm0
[(you're not already used to MASM, it's probably worth skipping this section.)]248.4 norm2
[{/section-2.2.1 xa}(NASM Is )(Case-Sensitive)](2.2.1)228 subh3
[(One simple difference is that NASM is case-sensitive. It makes a difference whether you call your label)]210 norm1
[2(foo)0(, )2(Foo)0( or )2(FOO)0(. If you're assembling to )2(DOS)0( or )2(OS/2)0( )2(.OBJ)0( files, you can invoke the )2(UPPERCASE)0( directive)]198 norm0
[(\(documented in ){/section-8.4 xl}(section 8.4){el}(\) to ensure that all symbols exported to other code modules are forced to be)]186 norm0
[(upper case; but even then, )1(within)0( a single module, NASM will distinguish between labels differing only)]174 norm0
[(in case.)]162 norm2
[{/section-2.2.2 xa}(NASM Requires )(Square Brackets For )(Memory References)](2.2.2)141.6 subh3
[(NASM was designed with simplicity of syntax in mind. One of the )(design goals of NASM is that it should)]123.6 norm1
[(be possible, as far as is practical, for the user to look at a single line of NASM code and tell what opcode)]111.6 norm0
[(is generated by it. You can't do this in MASM: if you declare, for example,)]99.6 norm2
[2(foo     equ     1 )]84 code1
[2(bar     dw      2)]74.4 code2
(30)pageeven
restore showpage
%%Page: 31 31
%%BeginPageSetup
save
%%EndPageSetup
/31 pa
[(then the two lines of code)]708 norm3
[2(        mov     ax,foo )]692.4 code1
[2(        mov     ax,bar)]682.8 code2
[(generate completely different opcodes, despite having identical-looking syntaxes.)]664.8 norm3
[(NASM avoids this undesirable situation by having a much simpler syntax for memory references. The)]646.8 norm1
[(rule is simply that any access to the )1(contents)0( of a memory location requires square brackets around the)]634.8 norm0
[(address, and any access to the )1(address)0( of a variable doesn't. So an instruction of the form )2(mov ax,foo)]622.8 norm0
[(will )1(always)0( refer to a compile-time constant, whether it's an )2(EQU)0( or the address of a variable; and to)]610.8 norm0
[(access the )1(contents)0( of the variable )2(bar)0(, you must code )2(mov ax,[bar])0(.)]598.8 norm2
[(This also means that NASM has no need for MASM's )2(OFFSET)0( keyword, since the MASM code)]580.8 norm1
[2(mov ax,offset bar)0( means exactly the same thing as NASM's )2(mov ax,bar)0(. If you're trying to get large)]568.8 norm0
[(amounts of MASM code to assemble sensibly under NASM, you can always code )2(%idefine offset)0( to)]556.8 norm0
[(make the preprocessor treat the )2(OFFSET)0( keyword as a no-op.)]544.8 norm2
[(This issue is even more confusing in )2(a86)0(, where declaring a label with a trailing colon defines it to be a)]526.8 norm1
[(`label' as opposed to a `variable' and causes )2(a86)0( to adopt NASM-style semantics; so in )2(a86)0(, )2(mov ax,var)]514.8 norm0
[(has different behaviour depending on whether )2(var)0( was declared as )2(var: dw 0)0( \(a label\) or )2(var dw 0)0( \(a)]502.8 norm0
[(word-size variable\). NASM is very simple by comparison: )1(everything)0( is a label.)]490.8 norm2
[(NASM, in the interests of simplicity, also does not support the )(hybrid syntaxes supported by MASM and)]472.8 norm1
[(its clones, such as )2(mov ax,table[bx])0(, where a memory reference is denoted by one portion outside)]460.8 norm0
[(square brackets and another portion inside. The correct syntax for the above is )2(mov ax,[table+bx])0(.)]448.8 norm0
[(Likewise, )2(mov ax,es:[di])0( is wrong and )2(mov ax,[es:di])0( is right.)]436.8 norm2
[{/section-2.2.3 xa}(NASM Doesn't Store )(Variable Types)](2.2.3)416.4 subh3
[(NASM, by design, chooses not to remember the types of variables you declare. Whereas MASM will)]398.4 norm1
[(remember, on seeing )2(var dw 0)0(, that you declared )2(var)0( as a word-size variable, and will then be able to)]386.4 norm0
[(fill in the )(ambiguity in the size of the instruction )2(mov var,2)0(, NASM will deliberately remember nothing)]374.4 norm0
[(about the symbol )2(var)0( except where it begins, and so you must explicitly code )2(mov word [var],2)0(.)]362.4 norm2
[(For this reason, NASM doesn't support the )2(LODS)0(, )2(MOVS)0(, )2(STOS)0(, )2(SCAS)0(, )2(CMPS)0(, )2(INS)0(, or )2(OUTS)0( instructions, but)]344.4 norm1
[(only supports the forms such as )2(LODSB)0(, )2(MOVSW)0(, and )2(SCASD)0(, which explicitly specify the size of the)]332.4 norm0
[(components of the strings being manipulated.)]320.4 norm2
[{/section-2.2.4 xa}(NASM Doesn't )2(ASSUME)](2.2.4)300 subh3
[(As part of NASM's drive for simplicity, it also does not support the )2(ASSUME)0( directive. NASM will not keep)]282 norm1
[(track of what values you choose to put in your segment registers, and will never )1(automatically)0( generate)]270 norm0
[(a )(segment override prefix.)]258 norm2
[{/section-2.2.5 xa}(NASM Doesn't Support )(Memory Models)](2.2.5)237.6 subh3
[(NASM also does not have any directives to support different 16-bit memory models. The programmer)]219.6 norm1
[(has to keep track of which functions are supposed to be called with a )(far call and which with a )(near call,)]207.6 norm0
[(and is responsible for putting the correct form of )2(RET)0( instruction \()2(RETN)0( or )2(RETF)0(; NASM accepts )2(RET)0( itself)]195.6 norm0
[(as an alternate form for )2(RETN)0(\); in addition, the programmer is responsible for coding CALL FAR)]183.6 norm0
[(instructions where necessary when calling )1(external)0( functions, and must also keep track of which)]171.6 norm0
[(external variable definitions are far and which are near.)]159.6 norm2
[{/section-2.2.6 xa}(Floating-Point Differences)](2.2.6)139.2 subh3
[(NASM uses different names to refer to floating-point registers from MASM: where MASM would call them)]121.2 norm1
[2(ST\(0\))0(, )2(ST\(1\))0( and so on, and )2(a86)0( would call them simply )2(0)0(, )2(1)0( and so on, NASM chooses to call them )2(st0)0(,)]109.2 norm0
[2(st1)0( etc.)]97.2000000000002 norm2
(31)pageodd
restore showpage
%%Page: 32 32
%%BeginPageSetup
save
%%EndPageSetup
/32 pa
[(As of version 0.96, NASM now treats the instructions with )(`nowait' forms in the same way as)]708 norm1
[(MASM-compatible assemblers. The idiosyncratic treatment employed by 0.95 and earlier was based on)]696 norm0
[(a misunderstanding by the authors.)]684 norm2
[{/section-2.2.7 xa}(Other Differences)](2.2.7)663.6 subh3
[(For historical reasons, NASM uses the keyword )2(TWORD)0( where MASM and compatible assemblers use)]645.6 norm1
[2(TBYTE)0(.)]633.6 norm2
[(Historically, NASM does not declare )(uninitialized storage in the same way as MASM: where a MASM)]615.6 norm1
[(programmer might use )2(stack db 64 dup \(?\))0(, NASM requires )2(stack resb 64)0(, intended to be read as)]603.6 norm0
[(`reserve 64 bytes'. For a limited amount of compatibility, since NASM treats )2(?)0( as a valid character in)]591.6 norm0
[(symbol names, you can code )2(? equ 0)0( and then writing )2(dw ?)0( will at least do something vaguely useful.)]579.6 norm2
[(As of NASM 2.15, the MASM syntax is also supported.)]561.6 norm3
[(In addition to all of this, macros and directives work completely differently to MASM. See ){/chapter-4 xl}(chapter 4){el}( and)]543.6 norm1
[{/chapter-7 xl}(chapter 7){el}( for further details.)]531.6 norm2
[{/section-2.2.8 xa}(MASM compatibility package)](2.2.8)511.2 subh3
[(See ){/section-6.5 xl}(section 6.5){el}(.)]493.2 norm3
(32)pageeven
restore showpage
%%Page: 33 33
%%BeginPageSetup
save
%%EndPageSetup
/33 pa
[{/chapter-3 xa}(Chapter 3: The NASM Language)]698.4 chap3
[{/section-3.1 xa}(Layout of a NASM Source Line)](3.1)657.6 head3
[(Like most assemblers, each NASM source line contains \(unless it is a macro, a preprocessor directive or)]639.6 norm1
[(an assembler directive: see ){/chapter-4 xl}(chapter 4){el}( and ){/chapter-7 xl}(chapter 7){el}(\) some combination of the four fields)]627.6 norm2
[2(label:    instruction operands        ; comment)]612 code3
[(As usual, most of these fields are optional; the presence or absence of any combination of a label, an)]594 norm1
[(instruction and a comment is allowed. Of course, the operand field is either required or forbidden by)]582 norm0
[(the presence and nature of the instruction field.)]570 norm2
[(NASM uses backslash \(\\\) as the line continuation character; if a line ends with backslash, the next line is)]552 norm1
[(considered to be a part of the backslash-ended line.)]540 norm2
[(NASM places no restrictions on white space within a line: labels may have white space before them, or)]522 norm1
[(instructions may have no space before them, or anything. The )(colon after a label is also optional. \(Note)]510 norm0
[(that this means that if you intend to code )2(lodsb)0( alone on a line, and type )2(lodab)0( by accident, then that's)]498 norm0
[(still a valid source line which does nothing but define a label. Running NASM with the command-line)]486 norm0
[(option )2(-w+orphan-labels)0( will cause it to warn you if you define a label alone on a line without a )(trailing)]474 norm0
[(colon.\))]462 norm2
[(Valid characters in labels are letters, numbers, )2(_)0(, )2($)0(, )2(#)0(, )2(@)0(, )2(~)0(, )2(.)0(, and )2(?)0(. The only characters which may be)]444 norm1
[(used as the )1(first)0( character of an identifier are letters, )2(.)0( \(with special meaning: see ){/section-3.9 xl}(section 3.9){el}(\), )2(_)0( and )2(?)0(.)]432 norm0
[(An identifier may also be prefixed with a )2($)0( to indicate that it is intended to be read as an identifier and)]420 norm0
[(not a reserved word; thus, if some other module you are linking with defines a symbol called )2(eax)0(, you)]408 norm0
[(can refer to )2($eax)0( in NASM code to distinguish the symbol from the register. Maximum length of an)]396 norm0
[(identifier is 4095 characters.)]384 norm2
[(The instruction field may contain any machine instruction: Pentium and P6 instructions, FPU)]366 norm1
[(instructions, MMX instructions and even undocumented instructions are all supported. The instruction)]354 norm0
[(may be prefixed by )2(LOCK)0(, )2(REP)0(, )2(REPE)0(/)2(REPZ)0(, )2(REPNE)0(/)2(REPNZ)0(, )2(XACQUIRE)0(/)2(XRELEASE)0( or )2(BND)0(/)2(NOBND)0(, in the usual)]342 norm0
[(way. Explicit )(address-size and )(operand-size prefixes )2(A16)0(, )2(A32)0(, )2(A64)0(, )2(O16)0( and )2(O32)0(, )2(O64)0( are provided \226 one)]330 norm0
[(example of their use is given in ){/chapter-11 xl}(chapter 11){el}(. You can also use the name of a )(segment register as an)]318 norm0
[(instruction prefix: coding )2(es mov [bx],ax)0( is equivalent to coding )2(mov [es:bx],ax)0(. We recommend the)]306 norm0
[(latter syntax, since it is consistent with other syntactic features of the language, but for instructions)]294 norm0
[(such as )2(LODSB)0(, which has no operands and yet can require a segment override, there is no clean)]282 norm0
[(syntactic way to proceed apart from )2(es lodsb)0(.)]270 norm2
[(An instruction is not required to use a prefix: prefixes such as )2(CS)0(, )2(A32)0(, )2(LOCK)0( or )2(REPE)0( can appear on a line)]252 norm1
[(by themselves, and NASM will just generate the prefix bytes.)]240 norm2
[(In addition to actual machine instructions, NASM also supports a number of pseudo-instructions,)]222 norm1
[(described in ){/section-3.2 xl}(section 3.2){el}(.)]210 norm2
[(Instruction )(operands may take a number of forms: they can be registers, described simply by the)]192 norm1
[(register name \(e.g. )2(ax)0(, )2(bp)0(, )2(ebx)0(, )2(cr0)0(: NASM does not use the )2(gas)0(\226style syntax in which register names)]180 norm0
[(must be prefixed by a )2(%)0( sign\), or they can be )(effective addresses \(see ){/section-3.3 xl}(section 3.3){el}(\), constants \(){/section-3.4 xl}(section){el}]168 norm0
[{/section-3.4 xl}(3.4){el}(\) or expressions \(){/section-3.5 xl}(section 3.5){el}(\).)]156 norm2
[(For x87 )(floating-point instructions, NASM accepts a wide range of syntaxes: you can use two-operand)]138 norm1
[(forms like MASM supports, or you can use NASM's native single-operand forms in most cases. For)]126 norm0
[(example, you can code:)]114 norm2
[2(        fadd    st1             ; this sets st0 := st0 + st1 )]98.4 code1
[2(        fadd    st0,st1         ; so does this )]88.8 code0
[2()]79.1999999999999 code0
(33)pageodd
restore showpage
%%Page: 34 34
%%BeginPageSetup
save
%%EndPageSetup
/34 pa
[2(        fadd    st1,st0         ; this sets st1 := st1 + st0 )]710.4 code0
[2(        fadd    to st1          ; so does this)]700.8 code2
[(Almost any x87 floating-point instruction that references memory must use one of the prefixes )2(DWORD)0(,)]682.8 norm1
[2(QWORD)0( or )2(TWORD)0( to indicate what size of )(memory operand it refers to.)]670.8 norm2
[{/section-3.2 xa}(Pseudo-Instructions)](3.2)648 head3
[(Pseudo-instructions are things which, though not real x86 machine instructions, are used in the)]630 norm1
[(instruction field anyway because that's the most convenient place to put them. The current)]618 norm0
[(pseudo-instructions are )2(DB)0(, )2(DW)0(, )2(DD)0(, )2(DQ)0(, )2(DT)0(, )2(DO)0(, )2(DY)0( and )2(DZ)0(; their )(uninitialized counterparts )2(RESB)0(, )2(RESW)0(,)]606 norm0
[2(RESD)0(, )2(RESQ)0(, )2(REST)0(, )2(RESO)0(, )2(RESY)0( and )2(RESZ)0(; the )2(INCBIN)0( command, the )2(EQU)0( command, and the )2(TIMES)0( prefix.)]594 norm2
[(In this documentation, the notation ")2(Dx)0(" and ")2(RESx)0(" is used to indicate all the )2(DB)0( and )2(RESB)0( type)]576 norm1
[(directives, respectively.)]564 norm2
[{/section-3.2.1 xa}2(Dx)0(: Declaring Initialized Data)](3.2.1)543.6 subh3
[2(DB)0(, )2(DW)0(, )2(DD)0(, )2(DQ)0(, )2(DT)0(, )2(DO)0(, )2(DY)0( and )2(DZ)0( \(collectively ")2(Dx)0(" in this documentation\) are used, much as in MASM, to)]525.6 norm1
[(declare initialized data in the output file. They can be invoked in a wide range of ways: )]513.6 norm2
[2(      db    0x55                ; just the byte 0x55 )]498 code1
[2(      db    0x55,0x56,0x57      ; three bytes in succession )]488.4 code0
[2(      db    'a',0x55            ; character constants are OK )]478.8 code0
[2(      db    'hello',13,10,'$'   ; so are string constants )]469.2 code0
[2(      dw    0x1234              ; 0x34 0x12 )]459.6 code0
[2(      dw    'a'                 ; 0x61 0x00 \(it's just a number\) )]450 code0
[2(      dw    'ab'                ; 0x61 0x62 \(character constant\) )]440.4 code0
[2(      dw    'abc'               ; 0x61 0x62 0x63 0x00 \(string\) )]430.8 code0
[2(      dd    0x12345678          ; 0x78 0x56 0x34 0x12 )]421.2 code0
[2(      dd    1.234567e20         ; floating-point constant )]411.6 code0
[2(      dq    0x123456789abcdef0  ; eight byte constant )]402 code0
[2(      dq    1.234567e20         ; double-precision float )]392.4 code0
[2(      dt    1.234567e20         ; extended-precision float)]382.8 code2
[2(DT)0(, )2(DO)0(, )2(DY)0( and )2(DZ)0( do not accept integer )(numeric constants as operands.)]364.8 norm3
[( Starting in NASM 2.15, a the following )(MASM\226like features have been implemented:)]346.8 norm3
[(A )2(?)0( argument to declare )(uninitialized storage:)]328.8 bull3
[2(      db    ?                   ; uninitialized)]313.2 code3
[(A superset of the )2(DUP)0( syntax. The NASM version of this has the following syntax specification; capital)]295.2 bull1
[(letters indicate literal keywords:)]283.2 bull2
[2(     dx      := DB | DW | DD | DQ | DT | DO | DY | DZ )]267.6 code1
[2(     type    := BYTE | WORD | DWORD | QWORD | TWORD | OWORD | YWORD | ZWORD )]258 code0
[2(     atom    := expression | string | float | '?' )]248.4 code0
[2(     parlist := '\(' value [, value ...] '\)' )]238.8 code0
[2(     duplist := expression DUP [type] ['%'] parlist )]229.2 code0
[2(     list    := duplist | '%' parlist | type ['%'] parlist )]219.6 code0
[2(     value   := atom | type value | list )]210 code0
[2()]200.4 code0
[2(     stmt    := dx value [, value...])]190.8 code2
[(Note that a )1(list)0( needs to be prefixed with a )2(%)0( sign unless prefixed by either )2(DUP)0( or a )1(type)0( in order to)]172.8 indt1
[(avoid confusing it with a parentesis starting an expression. The following expressions are all valid:)]160.8 indt2
[2(       db 33 )]145.2 code1
[2(       db \(44\)               ; Integer expression )]135.6 code0
[2(     ; db \(44,55\)            ; Invalid - error )]126 code0
[2(       db %\(44,55\) )]116.4 code0
[2(       db %\('XX','YY'\) )]106.799999999999 code0
[2(       db \('AA'\)             ; Integer expression - outputs single byte )]97.1999999999995 code0
[2(       db %\('BB'\)            ; List, containing a string )]87.5999999999995 code0
[2(       db ? )]77.9999999999994 code0
(34)pageeven
restore showpage
%%Page: 35 35
%%BeginPageSetup
save
%%EndPageSetup
/35 pa
[2(       db 6 dup \(33\) )]710.4 code0
[2(       db 6 dup \(33, 34\) )]700.8 code0
[2(       db 6 dup \(33, 34\), 35 )]691.2 code0
[2(       db 7 dup \(99\) )]681.6 code0
[2(       db 7 dup dword \(?, word ?, ?\) )]672 code0
[2(       dw byte \(?,44\) )]662.4 code0
[2(       dw 3 dup \(0xcc, 4 dup byte \('PQR'\), ?\), 0xabcd )]652.8 code0
[2(       dd 16 dup \(0xaaaa, ?, 0xbbbbbb\) )]643.2 code0
[2(       dd 64 dup \(?\))]633.6 code2
[( The use of )2($)0( \(current address\) in a )2(Dx)0( statement is undefined in the current version of NASM, )1(except in)]615.6 norm1
[1(the following cases)0(:)]603.6 norm2
[(For the first expression in the statement, either a )2(DUP)0( or a data item.)]585.6 bull3
[(An expression of the form ")1(value)2( - $)0(", which is converted to a self-relative relocation.)]567.6 bull3
[(Future versions of NASM is likely to produce a different result or issue an error this case.)]549.6 norm3
[(There is no such restriction on using )2($$)0( or section-relative symbols.)]531.6 norm3
[{/section-3.2.2 xa}2(RESB)0( and Friends: Declaring )(Uninitialized Data)](3.2.2)511.2 subh3
[2(RESB)0(, )2(RESW)0(, )2(RESD)0(, )2(RESQ)0(, )2(REST)0(, )2(RESO)0(, )2(RESY)0( and )2(RESZ)0( are designed to be used in the BSS section of a)]493.2 norm1
[(module: they declare )1(uninitialized)0( storage space. Each takes a single operand, which is the number of)]481.2 norm0
[(bytes, words, doublewords or whatever to reserve. The operand to a )2(RESB)0(\226type pseudo-instruction is a)]469.2 norm0
[1(critical expression)0(: see ){/section-3.8 xl}(section 3.8){el}(.)]457.2 norm2
[(For example:)]439.2 norm3
[2(buffer:         resb    64              ; reserve 64 bytes )]423.6 code1
[2(wordvar:        resw    1               ; reserve a word )]414 code0
[2(realarray       resq    10              ; array of ten reals )]404.4 code0
[2(ymmval:         resy    1               ; one YMM register )]394.8 code0
[2(zmmvals:        resz    32              ; 32 ZMM registers)]385.2 code2
[( Since NASM 2.15, the MASM syntax of using )2(?)0( and )2(DUP)0( in the )2(D)1(x)0( directives is also supported. Thus, the)]367.2 norm1
[(above example could also be written:)]355.2 norm2
[2(buffer:         db      64 dup \(?\)      ; reserve 64 bytes )]339.6 code1
[2(wordvar:        dw      ?               ; reserve a word )]330 code0
[2(realarray       dq      10 dup \(?\)      ; array of ten reals )]320.4 code0
[2(ymmval:         dy      ?               ; one YMM register )]310.8 code0
[2(zmmvals:        dz      32 dup \(?\)      ; 32 ZMM registers)]301.2 code2
[{/section-3.2.3 xa}2(INCBIN)0(: Including External )(Binary Files)](3.2.3)280.8 subh3
[2(INCBIN)0( includes binary file data verbatim into the output file. This can be handy for \(for example\))]262.8 norm1
[(including )(graphics and )(sound data directly into a game executable file. It can be called in one of these)]250.8 norm0
[(three ways:)]238.8 norm2
[2(    incbin  "file.dat"             ; include the whole file )]223.2 code1
[2(    incbin  "file.dat",1024        ; skip the first 1024 bytes )]213.6 code0
[2(    incbin  "file.dat",1024,512    ; skip the first 1024, and )]204 code0
[2(                                   ; actually include at most 512)]194.4 code2
[2(INCBIN)0( is both a directive and a standard macro; the standard macro version searches for the file in the)]176.4 norm1
[(include file search path and adds the file to the dependency lists. This macro can be overridden if)]164.4 norm0
[(desired.)]152.4 norm2
[{/section-3.2.4 xa}2(EQU)0(: Defining Constants)](3.2.4)132 subh3
[2(EQU)0( defines a symbol to a given constant value: when )2(EQU)0( is used, the source line must contain a label.)]114 norm1
[(The action of )2(EQU)0( is to define the given label name to the value of its \(only\) operand. This definition is)]102 norm0
[(absolute, and cannot change later. So, for example,)]89.9999999999998 norm2
(35)pageodd
restore showpage
%%Page: 36 36
%%BeginPageSetup
save
%%EndPageSetup
/36 pa
[2(message         db      'hello, world' )]710.4 code1
[2(msglen          equ     $-message)]700.8 code2
[(defines )2(msglen)0( to be the constant 12. )2(msglen)0( may not then be redefined later. This is not a )(preprocessor)]682.8 norm1
[(definition either: the value of )2(msglen)0( is evaluated )1(once)0(, using the value of )2($)0( \(see ){/section-3.5 xl}(section 3.5){el}( for an)]670.8 norm0
[(explanation of )2($)0(\) at the point of definition, rather than being evaluated wherever it is referenced and)]658.8 norm0
[(using the value of )2($)0( at the point of reference.)]646.8 norm2
[{/section-3.2.5 xa}2(TIMES)0(: )(Repeating Instructions or Data)](3.2.5)626.4 subh3
[(The )2(TIMES)0( prefix causes the instruction to be assembled multiple times. This is partly present as NASM's)]608.4 norm1
[(equivalent of the )2(DUP)0( syntax supported by )(MASM\226compatible assemblers, in that you can code)]596.4 norm2
[2(zerobuf:        times 64 db 0)]580.8 code3
[(or similar things; but )2(TIMES)0( is more versatile than that. The argument to )2(TIMES)0( is not just a numeric)]562.8 norm1
[(constant, but a numeric )1(expression)0(, so you can do things like)]550.8 norm2
[2(buffer: db      'hello, world' )]535.2 code1
[2(        times 64-$+buffer db ' ')]525.6 code2
[(which will store exactly enough spaces to make the total length of )2(buffer)0( up to 64. Finally, )2(TIMES)0( can)]507.6 norm1
[(be applied to ordinary instructions, so you can code trivial )(unrolled loops in it:)]495.6 norm2
[2(        times 100 movsb)]480 code3
[(Note that there is no effective difference between )2(times 100 resb 1)0( and )2(resb 100)0(, except that the)]462 norm1
[(latter will be assembled about 100 times faster due to the internal structure of the assembler.)]450 norm2
[(The operand to )2(TIMES)0( is a critical expression \(){/section-3.8 xl}(section 3.8){el}(\).)]432 norm3
[(Note also that )2(TIMES)0( can't be applied to )(macros: the reason for this is that )2(TIMES)0( is processed after the)]414 norm1
[(macro phase, which allows the argument to )2(TIMES)0( to contain expressions such as )2(64-$+buffer)0( as)]402 norm0
[(above. To repeat more than one line of code, or a complex macro, use the preprocessor )2(%rep)0( directive.)]390 norm2
[{/section-3.3 xa}(Effective Addresses)](3.3)367.2 head3
[(An )(effective address is any operand to an instruction which )(references memory. Effective addresses, in)]349.2 norm1
[(NASM, have a very simple syntax: they consist of an expression evaluating to the desired address,)]337.2 norm0
[(enclosed in )(square brackets. For example:)]325.2 norm2
[2(wordvar dw      123 )]309.6 code1
[2(        mov     ax,[wordvar] )]300 code0
[2(        mov     ax,[wordvar+1] )]290.4 code0
[2(        mov     ax,[es:wordvar+bx])]280.8 code2
[(Anything not conforming to this simple system is not a valid memory reference in NASM, for example)]262.8 norm1
[2(es:wordvar[bx])0(.)]250.8 norm2
[(More complicated effective addresses, such as those involving more than one register, work in exactly)]232.8 norm1
[(the same way:)]220.8 norm2
[2(        mov     eax,[ebx*2+ecx+offset] )]205.2 code1
[2(        mov     ax,[bp+di+8])]195.6 code2
[(NASM is capable of doing )(algebra on these effective addresses, so that things which don't necessarily)]177.6 norm1
[1(look)0( legal are perfectly all right:)]165.6 norm2
[2(    mov     eax,[ebx*5]             ; assembles as [ebx*4+ebx] )]150 code1
[2(    mov     eax,[label1*2-label2]   ; ie [label1+\(label1-label2\)])]140.4 code2
[(Some forms of effective address have more than one assembled form; in most such cases NASM will)]122.4 norm1
[(generate the smallest form it can. For example, there are distinct assembled forms for the 32-bit)]110.4 norm0
[(effective addresses )2([eax*2+0])0( and )2([eax+eax])0(, and NASM will generally generate the latter on the)]98.3999999999999 norm0
[(grounds that the former requires four bytes to store a zero offset.)]86.3999999999999 norm2
(36)pageeven
restore showpage
%%Page: 37 37
%%BeginPageSetup
save
%%EndPageSetup
/37 pa
[(NASM has a hinting mechanism which will cause )2([eax+ebx])0( and )2([ebx+eax])0( to generate different)]708 norm1
[(opcodes; this is occasionally useful because )2([esi+ebp])0( and )2([ebp+esi])0( have different default segment)]696 norm0
[(registers.)]684 norm2
[(However, you can force NASM to generate an effective address in a particular form by the use of the)]666 norm1
[(keywords )2(BYTE)0(, )2(WORD)0(, )2(DWORD)0( and )2(NOSPLIT)0(. If you need )2([eax+3])0( to be assembled using a double-word)]654 norm0
[(offset field instead of the one byte NASM will normally generate, you can code )2([dword eax+3])0(.)]642 norm0
[(Similarly, you can force NASM to use a byte offset for a small value which it hasn't seen on the first pass)]630 norm0
[(\(see ){/section-3.8 xl}(section 3.8){el}( for an example of such a code fragment\) by using )2([byte eax+offset])0(. As special cases,)]618 norm0
[2([byte eax])0( will code )2([eax+0])0( with a byte offset of zero, and )2([dword eax])0( will code it with a)]606 norm0
[(double-word offset of zero. The normal form, )2([eax])0(, will be coded with no offset field.)]594 norm2
[(The form described in the previous paragraph is also useful if you are trying to access data in a 32-bit)]576 norm1
[(segment from within 16 bit code. For more information on this see the section on mixed-size)]564 norm0
[(addressing \(){/section-11.2 xl}(section 11.2){el}(\). In particular, if you need to access data with a known offset that is larger)]552 norm0
[(than will fit in a 16-bit value, if you don't specify that it is a dword offset, nasm will cause the high word)]540 norm0
[(of the offset to be lost.)]528 norm2
[(Similarly, NASM will split )2([eax*2])0( into )2([eax+eax])0( because that allows the offset field to be absent and)]510 norm1
[(space to be saved; in fact, it will also split )2([eax*2+offset])0( into )2([eax+eax+offset])0(. You can combat this)]498 norm0
[(behaviour by the use of the )2(NOSPLIT)0( keyword: )2([nosplit eax*2])0( will force )2([eax*2+0])0( to be generated)]486 norm0
[(literally. )2([nosplit eax*1])0( also has the same effect. In another way, a split EA form )2([0, eax*2])0( can be)]474 norm0
[(used, too. However, )2(NOSPLIT)0( in )2([nosplit eax+eax])0( will be ignored because user's intention here is)]462 norm0
[(considered as )2([eax+eax])0(.)]450 norm2
[(In 64-bit mode, NASM will by default generate absolute addresses. The )2(REL)0( keyword makes it produce)]432 norm1
[2(RIP)0(\226relative addresses. Since this is frequently the normally desired behaviour, see the )2(DEFAULT)]420 norm0
[(directive \(){/section-7.2 xl}(section 7.2){el}(\). The keyword )2(ABS)0( overrides )2(REL)0(.)]408 norm2
[(A new form of split effective addres syntax is also supported. This is mainly intended for mib operands)]390 norm1
[(as used by MPX instructions, but can be used for any memory reference. The basic concept of this form)]378 norm0
[(is splitting base and index.)]366 norm2
[2(     mov eax,[ebx+8,ecx*4]   ; ebx=base, ecx=index, 4=scale, 8=disp)]350.4 code3
[(For mib operands, there are several ways of writing effective address depending on the tools. NASM)]332.4 norm1
[(supports all currently possible ways of mib syntax:)]320.4 norm2
[2(     ; bndstx )]304.8 code1
[2(     ; next 5 lines are parsed same )]295.2 code0
[2(     ; base=rax, index=rbx, scale=1, displacement=3 )]285.6 code0
[2(     bndstx [rax+0x3,rbx], bnd0      ; NASM - split EA )]276 code0
[2(     bndstx [rbx*1+rax+0x3], bnd0    ; GAS - '*1' indecates an index reg )]266.4 code0
[2(     bndstx [rax+rbx+3], bnd0        ; GAS - without hints )]256.8 code0
[2(     bndstx [rax+0x3], bnd0, rbx     ; ICC-1 )]247.2 code0
[2(     bndstx [rax+0x3], rbx, bnd0     ; ICC-2)]237.6 code2
[(When broadcasting decorator is used, the opsize keyword should match the size of each element.)]219.6 norm3
[2(     VDIVPS zmm4, zmm5, dword [rbx]{1to16}   ; single-precision float )]204 code1
[2(     VDIVPS zmm4, zmm5, zword [rbx]          ; packed 512 bit memory)]194.4 code2
[{/section-3.4 xa}(Constants)](3.4)171.6 head3
[(NASM understands four different types of constant: numeric, character, string and floating-point.)]153.6 norm3
[{/section-3.4.1 xa}(Numeric Constants)](3.4.1)133.2 subh3
[(A numeric constant is simply a number. NASM allows you to specify numbers in a variety of number)]115.2 norm1
[(bases, in a variety of ways: you can suffix )2(H)0( or )2(X)0(, )2(D)0( or )2(T)0(, )2(Q)0( or )2(O)0(, and )2(B)0( or )2(Y)0( for )(hexadecimal, )(decimal, )(octal)]103.2 norm0
[(and )(binary respectively, or you can prefix )2(0x)0(, for hexadecimal in the style of C, or you can prefix )2($)0( for)]91.1999999999998 norm0
[(hexadecimal in the style of Borland Pascal or Motorola Assemblers. Note, though, that the )2($)0( prefix does)]79.1999999999998 norm0
(37)pageodd
restore showpage
%%Page: 38 38
%%BeginPageSetup
save
%%EndPageSetup
/38 pa
[(double duty as a prefix on identifiers \(see ){/section-3.1 xl}(section 3.1){el}(\), so a hex number prefixed with a )2($)0( sign must have)]708 norm0
[(a digit after the )2($)0( rather than a letter. In addition, current versions of NASM accept the prefix )2(0h)0( for)]696 norm0
[(hexadecimal, )2(0d)0( or )2(0t)0( for decimal, )2(0o)0( or )2(0q)0( for octal, and )2(0b)0( or )2(0y)0( for binary. Please note that unlike C, a)]684 norm0
[2(0)0( prefix by itself does )1(not)0( imply an octal constant!)]672 norm2
[(Numeric constants can have underscores \()2(_)0(\) interspersed to break up long strings.)]654 norm3
[(Some examples \(all producing exactly the same code\):)]636 norm3
[2(        mov     ax,200          ; decimal )]620.4 code1
[2(        mov     ax,0200         ; still decimal )]610.8 code0
[2(        mov     ax,0200d        ; explicitly decimal )]601.2 code0
[2(        mov     ax,0d200        ; also decimal )]591.6 code0
[2(        mov     ax,0c8h         ; hex )]582 code0
[2(        mov     ax,$0c8         ; hex again: the 0 is required )]572.4 code0
[2(        mov     ax,0xc8         ; hex yet again )]562.8 code0
[2(        mov     ax,0hc8         ; still hex )]553.2 code0
[2(        mov     ax,310q         ; octal )]543.6 code0
[2(        mov     ax,310o         ; octal again )]534 code0
[2(        mov     ax,0o310        ; octal yet again )]524.4 code0
[2(        mov     ax,0q310        ; octal yet again )]514.8 code0
[2(        mov     ax,11001000b    ; binary )]505.2 code0
[2(        mov     ax,1100_1000b   ; same binary constant )]495.6 code0
[2(        mov     ax,1100_1000y   ; same binary constant once more )]486 code0
[2(        mov     ax,0b1100_1000  ; same binary constant yet again )]476.4 code0
[2(        mov     ax,0y1100_1000  ; same binary constant yet again)]466.8 code2
[{/section-3.4.2 xa}(Character Strings)](3.4.2)446.4 subh3
[(A character string consists of up to eight characters enclosed in either single quotes \()2('...')0(\), double)]428.4 norm1
[(quotes \()2("...")0(\) or backquotes \()2(`...`)0(\). Single or double quotes are equivalent to NASM \(except of)]416.4 norm0
[(course that surrounding the constant with single quotes allows double quotes to appear within it and)]404.4 norm0
[(vice versa\); the contents of those are represented verbatim. Strings enclosed in backquotes support)]392.4 norm0
[(C-style )2(\\)0(\226escapes for special characters.)]380.4 norm2
[(The following )(escape sequences are recognized by backquoted strings:)]362.4 norm3
[2(      \\'          single quote \('\) )]346.8 code1
[2(      \\"          double quote \("\) )]337.2 code0
[2(      \\`          backquote \(`\) )]327.6 code0
[2(      \\\\          backslash \(\\\) )]318 code0
[2(      \\?          question mark \(?\) )]308.4 code0
[2(      \\a          BEL \(ASCII 7\) )]298.8 code0
[2(      \\b          BS  \(ASCII 8\) )]289.2 code0
[2(      \\t          TAB \(ASCII 9\) )]279.6 code0
[2(      \\n          LF  \(ASCII 10\) )]270 code0
[2(      \\v          VT  \(ASCII 11\) )]260.4 code0
[2(      \\f          FF  \(ASCII 12\) )]250.8 code0
[2(      \\r          CR  \(ASCII 13\) )]241.2 code0
[2(      \\e          ESC \(ASCII 27\) )]231.6 code0
[2(      \\377        Up to 3 octal digits - literal byte )]222 code0
[2(      \\xFF        Up to 2 hexadecimal digits - literal byte )]212.4 code0
[2(      \\u1234      4 hexadecimal digits - Unicode character )]202.8 code0
[2(      \\U12345678  8 hexadecimal digits - Unicode character)]193.2 code2
[(All other escape sequences are reserved. Note that )2(\\0)0(, meaning a )2(NUL)0( character \(ASCII 0\), is a special)]175.2 norm1
[(case of the octal escape sequence.)]163.2 norm2
[(Unicode characters specified with )2(\\u)0( or )2(\\U)0( are converted to )(UTF-8. For example, the following lines are)]145.2 norm1
[(all equivalent:)]133.2 norm2
[2(      db `\\u263a`            ; UTF-8 smiley face )]117.6 code1
[2(      db `\\xe2\\x98\\xba`      ; UTF-8 smiley face )]108 code0
[2(      db 0E2h, 098h, 0BAh    ; UTF-8 smiley face)]98.3999999999996 code2
(38)pageeven
restore showpage
%%Page: 39 39
%%BeginPageSetup
save
%%EndPageSetup
/39 pa
[{/section-3.4.3 xa}(Character Constants)](3.4.3)705.6 subh3
[(A character constant consists of a string up to eight bytes long, used in an expression context. It is)]687.6 norm1
[(treated as if it was an integer.)]675.6 norm2
[(A character constant with more than one byte will be arranged with )(little-endian order in mind: if you)]657.6 norm1
[(code)]645.6 norm2
[2(          mov eax,'abcd')]630 code3
[(then the constant generated is not )2(0x61626364)0(, but )2(0x64636261)0(, so that if you were then to store the)]612 norm1
[(value into memory, it would read )2(abcd)0( rather than )2(dcba)0(. This is also the sense of character constants)]600 norm0
[(understood by the Pentium's )2(CPUID)0( instruction.)]588 norm2
[{/section-3.4.4 xa}(String Constants)](3.4.4)567.6 subh3
[(String constants are character strings used in the context of some pseudo-instructions, namely the )2(DB)]549.6 norm1
[(family and )2(INCBIN)0( \(where it represents a filename.\) They are also used in certain preprocessor)]537.6 norm0
[(directives.)]525.6 norm2
[(A string constant looks like a character constant, only longer. It is treated as a concatenation of)]507.6 norm1
[(maximum-size character constants for the conditions. So the following are equivalent:)]495.6 norm2
[2(      db    'hello'               ; string constant )]480 code1
[2(      db    'h','e','l','l','o'   ; equivalent character constants)]470.4 code2
[(And the following are also equivalent:)]452.4 norm3
[2(      dd    'ninechars'           ; doubleword string constant )]436.8 code1
[2(      dd    'nine','char','s'     ; becomes three doublewords )]427.2 code0
[2(      db    'ninechars',0,0,0     ; and really looks like this)]417.6 code2
[(Note that when used in a string-supporting context, quoted strings are treated as a string constants)]399.6 norm1
[(even if they are short enough to be a character constant, because otherwise )2(db 'ab')0( would have the)]387.6 norm0
[(same effect as )2(db 'a')0(, which would be silly. Similarly, three-character or four-character constants are)]375.6 norm0
[(treated as strings when they are operands to )2(DW)0(, and so forth.)]363.6 norm2
[{/section-3.4.5 xa}(Unicode Strings)](3.4.5)343.2 subh3
[(The special operators )2(__?utf16?__)0(, )2(__?utf16le?__)0(, )2(__?utf16be?__)0(, )2(__?utf32?__)0(, )2(__?utf32le?__)0( and)]325.2 norm1
[2(__?utf32be?__)0( allows definition of Unicode strings. They take a string in UTF-8 format and converts it)]313.2 norm0
[(to UTF-16 or UTF-32, respectively. Unless the )2(be)0( forms are specified, the output is littleendian.)]301.2 norm2
[(For example:)]283.2 norm3
[2(%define u\(x\) __?utf16?__\(x\) )]267.6 code1
[2(%define w\(x\) __?utf32?__\(x\) )]258 code0
[2()]248.4 code0
[2(      dw u\('C:\\WINDOWS'\), 0       ; Pathname in UTF-16 )]238.8 code0
[2(      dd w\(`A + B = \\u206a`\), 0   ; String in UTF-32)]229.2 code2
[(The UTF operators can be applied either to strings passed to the )2(DB)0( family instructions, or to character)]211.2 norm1
[(constants in an expression context.)]199.2 norm2
[{/section-3.4.6 xa}(Floating-Point Constants)](3.4.6)178.8 subh3
[(Floating-point constants are acceptable only as arguments to )2(DB)0(, )2(DW)0(, )2(DD)0(, )2(DQ)0(, )2(DT)0(, and )2(DO)0(, or as arguments)]160.8 norm1
[(to the special operators )2(__?float8?__)0(, )2(__?float16?__)0(, )2(__?bfloat16?__)0(, )2(__?float32?__)0(,)]148.8 norm0
[2(__?float64?__)0(, )2(__?float80m?__)0(, )2(__?float80e?__)0(, )2(__?float128l?__)0(, and )2(__?float128h?__)0(. See also)]136.8 norm0
[{/section-6.3 xl}(section 6.3){el}(.)]124.8 norm2
[(Floating-point constants are expressed in the traditional form: digits, then a period, then optionally)]106.8 norm1
[(more digits, then optionally an )2(E)0( followed by an exponent. The period is mandatory, so that NASM can)]94.7999999999998 norm0
(39)pageodd
restore showpage
%%Page: 40 40
%%BeginPageSetup
save
%%EndPageSetup
/40 pa
[(distinguish between )2(dd 1)0(, which declares an integer constant, and )2(dd 1.0)0( which declares a)]708 norm0
[(floating-point constant.)]696 norm2
[(NASM also support C99-style hexadecimal floating-point: )2(0x)0(, hexadecimal digits, period, optionally)]678 norm1
[(more hexadeximal digits, then optionally a )2(P)0( followed by a )1(binary)0( \(not hexadecimal\) exponent in)]666 norm0
[(decimal notation. As an extension, NASM additionally supports the )2(0h)0( and )2($)0( prefixes for hexadecimal,)]654 norm0
[(as well binary and octal floating-point, using the )2(0b)0( or )2(0y)0( and )2(0o)0( or )2(0q)0( prefixes, respectively.)]642 norm2
[(Underscores to break up groups of digits are permitted in floating-point constants as well.)]624 norm3
[(Some examples:)]606 norm3
[2(      db    -0.2                    ; "Quarter precision" )]590.4 code1
[2(      dw    -0.5                    ; IEEE 754r/SSE5 half precision )]580.8 code0
[2(      dd    1.2                     ; an easy one )]571.2 code0
[2(      dd    1.222_222_222           ; underscores are permitted )]561.6 code0
[2(      dd    0x1p+2                  ; 1.0x2^2 = 4.0 )]552 code0
[2(      dq    0x1p+32                 ; 1.0x2^32 = 4 294 967 296.0 )]542.4 code0
[2(      dq    1.e10                   ; 10 000 000 000.0 )]532.8 code0
[2(      dq    1.e+10                  ; synonymous with 1.e10 )]523.2 code0
[2(      dq    1.e-10                  ; 0.000 000 000 1 )]513.6 code0
[2(      dt    3.141592653589793238462 ; pi )]504 code0
[2(      do    1.e+4000                ; IEEE 754r quad precision)]494.4 code2
[(The 8-bit "quarter-precision" floating-point format is sign:exponent:mantissa = 1:4:3 with an exponent)]476.4 norm1
[(bias of 7. This appears to be the most frequently used 8-bit floating-point format, although it is not)]464.4 norm0
[(covered by any formal standard. This is sometimes called a ")(minifloat.")]452.4 norm2
[(The )2(bfloat16)0( format is effectively a compressed version of the 32-bit single precision format, with a)]434.4 norm1
[(reduced mantissa. It is effectively the same as truncating the 32-bit format to the upper 16 bits, except)]422.4 norm0
[(for rounding. There is no )2(D)1(x)0( directive that corresponds to )2(bfloat16)0( as it obviously has the same size as)]410.4 norm0
[(the IEEE standard 16-bit half precision format, see however ){/section-6.3 xl}(section 6.3){el}(.)]398.4 norm2
[(The special operators are used to produce floating-point numbers in other contexts. They produce the)]380.4 norm1
[(binary representation of a specific floating-point number as an integer, and can use anywhere integer)]368.4 norm0
[(constants are used in an expression. )2(__?float80m?__)0( and )2(__?float80e?__)0( produce the 64-bit mantissa)]356.4 norm0
[(and 16-bit exponent of an 80-bit floating-point number, and )2(__?float128l?__)0( and )2(__?float128h?__)]344.4 norm0
[(produce the lower and upper 64-bit halves of a 128-bit floating-point number, respectively.)]332.4 norm2
[(For example:)]314.4 norm3
[2(      mov    rax,__?float64?__\(3.141592653589793238462\))]298.8 code3
[(... would assign the binary representation of pi as a 64-bit floating point number into )2(RAX)0(. This is exactly)]280.8 norm1
[(equivalent to:)]268.8 norm2
[2(      mov    rax,0x400921fb54442d18)]253.2 code3
[(NASM cannot do compile-time arithmetic on floating-point constants. This is because NASM is designed)]235.2 norm1
[(to be portable \226 although it always generates code to run on x86 processors, the assembler itself can)]223.2 norm0
[(run on any system with an ANSI C compiler. Therefore, the assembler cannot guarantee the presence of)]211.2 norm0
[(a floating-point unit capable of handling the )(Intel number formats, and so for NASM to be able to do)]199.2 norm0
[(floating arithmetic it would have to include its own complete set of floating-point routines, which)]187.2 norm0
[(would significantly increase the size of the assembler for very little benefit.)]175.2 norm2
[(The special tokens )2(__?Infinity?__)0(, )2(__?QNaN?__)0( \(or )2(__?NaN?__)0(\) and )2(__?SNaN?__)0( can be used to)]157.2 norm1
[(generate )(infinities, quiet )(NaNs, and signalling NaNs, respectively. These are normally used as macros:)]145.2 norm2
[2(%define Inf __?Infinity?__ )]129.6 code1
[2(%define NaN __?QNaN?__ )]120 code0
[2()]110.4 code0
[2(      dq    +1.5, -Inf, NaN         ; Double-precision constants)]100.8 code2
[(The )2(%use fp)0( standard macro package contains a set of convenience macros. See ){/section-6.3 xl}(section 6.3){el}(.)]82.8 norm3
(40)pageeven
restore showpage
%%Page: 41 41
%%BeginPageSetup
save
%%EndPageSetup
/41 pa
[{/section-3.4.7 xa}(Packed BCD Constants)](3.4.7)705.6 subh3
[(x87-style packed BCD constants can be used in the same contexts as 80-bit floating-point numbers.)]687.6 norm1
[(They are suffixed with )2(p)0( or prefixed with )2(0p)0(, and can include up to 18 decimal digits.)]675.6 norm2
[(As with other numeric constants, underscores can be used to separate digits.)]657.6 norm3
[(For example:)]639.6 norm3
[2(      dt 12_345_678_901_245_678p )]624 code1
[2(      dt -12_345_678_901_245_678p )]614.4 code0
[2(      dt +0p33 )]604.8 code0
[2(      dt 33p)]595.2 code2
[{/section-3.5 xa}(Expressions)](3.5)572.4 head3
[(Expressions in NASM are similar in syntax to those in C. Expressions are evaluated as 64-bit integers)]554.4 norm1
[(which are then adjusted to the appropriate size.)]542.4 norm2
[(NASM supports two special tokens in expressions, allowing calculations to involve the current assembly)]524.4 norm1
[(position: the )2($)0( and )2($$)0( tokens. )2($)0( evaluates to the assembly position at the beginning of the line)]512.4 norm0
[(containing the expression; so you can code an )(infinite loop using )2(JMP $)0(. )2($$)0( evaluates to the beginning)]500.4 norm0
[(of the current section; so you can tell how far into the section you are by using )2(\($-$$\))0(.)]488.4 norm2
[(The arithmetic )(operators provided by NASM are listed here, in increasing order of )(precedence.)]470.4 norm3
[(A )1(boolean)0( value is true if nonzero and false if zero. The operators which return a boolean value always)]452.4 norm1
[(return 1 for true and 0 for false.)]440.4 norm2
[{/section-3.5.1 xa}2(?)0( ... )2(:)0(: Conditional Operator)](3.5.1)420 subh3
[(The syntax of this operator, similar to the C conditional operator, is:)]402 norm3
[1(boolean)0( )2(?)0( )1(trueval)0( )2(:)0( )1(falseval)]384 norm3
[(This operator evaluates to )1(trueval)0( if )1(boolean)0( is true, otherwise to )1(falseval)0(.)]366 norm3
[(Note that NASM allows )2(?)0( characters in symbol names. Therefore, it is highly advisable to always put)]348 norm1
[(spaces around the )2(?)0( and )2(:)0( characters.)]336 norm2
[{/section-3.5.2 xa}(: )2(||)0(: )(Boolean OR Operator)](3.5.2)315.6 subh3
[(The )2(||)0( operator gives a boolean OR: it evaluates to 1 if both sides of the expression are nonzero,)]297.6 norm1
[(otherwise 0.)]285.6 norm2
[{/section-3.5.3 xa}(: )2(^^)0(: )(Boolean XOR Operator)](3.5.3)265.2 subh3
[(The )2(^^)0( operator gives a boolean XOR: it evaluates to 1 if any one side of the expression is nonzero,)]247.2 norm1
[(otherwise 0.)]235.2 norm2
[{/section-3.5.4 xa}(: )2(&&)0(: )(Boolean AND Operator)](3.5.4)214.8 subh3
[(The )2(&&)0( operator gives a boolean AND: it evaluates to 1 if both sides of the expression is nonzero,)]196.8 norm1
[(otherwise 0.)]184.8 norm2
[{/section-3.5.5 xa}(: )(Comparison Operators)](3.5.5)164.4 subh3
[(NASM supports the following comparison operators:)]146.4 norm3
[2(=)0( or )2(==)0( compare for equality.)]128.4 bull3
[2(!=)0( or )2(<>)0( compare for inequality.)]110.4 bull3
[2(<)0( compares signed less than.)]92.4000000000001 bull3
[2(<=)0( compares signed less than or equal.)]74.4000000000001 bull3
(41)pageodd
restore showpage
%%Page: 42 42
%%BeginPageSetup
save
%%EndPageSetup
/42 pa
[2(>)0( compares signed greater than.)]708 bull3
[2(>=)0( compares signed greather than or equal.)]690 bull3
[(These operators evaluate to 0 for false or 1 for true.)]672 norm3
[(<=> does a signed comparison, and evaluates to \2261 for less than, 0 for equal, and 1 for greater than.)]654 bull3
[(At this time, NASM does not provide unsigned comparison operators.)]636 norm3
[{/section-3.5.6 xa}2(|)0(: )(Bitwise OR Operator)](3.5.6)615.6 subh3
[(The )2(|)0( operator gives a bitwise OR, exactly as performed by the )2(OR)0( machine instruction.)]597.6 norm3
[{/section-3.5.7 xa}2(^)0(: )(Bitwise XOR Operator)](3.5.7)577.2 subh3
[2(^)0( provides the bitwise XOR operation.)]559.2 norm3
[{/section-3.5.8 xa}2(&)0(: )(Bitwise AND Operator)](3.5.8)538.8 subh3
[2(&)0( provides the bitwise AND operation.)]520.8 norm3
[{/section-3.5.9 xa}(Bit Shift Operators)](3.5.9)500.4 subh3
[2(<<)0( gives a bit-shift to the left, just as it does in C. So )2(5<<3)0( evaluates to 5 times 8, or 40. )2(>>)0( gives an)]482.4 norm1
[1(unsigned)0( \(logical\) bit-shift to the right; the bits shifted in from the left are set to zero.)]470.4 norm2
[2(<<<)0( gives a bit-shift to the left, exactly equivalent to the )2(<<)0( operator; it is included for completeness. )2(>>>)]452.4 norm1
[(gives an )1(signed)0( \(arithmetic\) bit-shift to the right; the bits shifted in from the left are filled with copies of)]440.4 norm0
[(the most significant \(sign\) bit.)]428.4 norm2
[{/section-3.5.10 xa}2(+)0( and )2(-)0(: )(Addition and )(Subtraction Operators)](3.5.10)408 subh3
[(The )2(+)0( and )2(-)0( operators do perfectly ordinary addition and subtraction.)]390 norm3
[{/section-3.5.11 xa}(Multiplication, )(Division and )(Modulo)](3.5.11)369.6 subh3
[2(*)0( is the multiplication operator.)]351.6 norm3
[2(/)0( and )2(//)0( are both division operators: )2(/)0( is )(unsigned division and )2(//)0( is )(signed division.)]333.6 norm3
[(Similarly, )2(%)0( and )2(%%)0( provide )(unsigned and )(signed modulo operators respectively.)]315.6 norm3
[(Since the )2(%)0( character is used extensively by the macro )(preprocessor, you should ensure that both the)]297.6 norm1
[(signed and unsigned modulo operators are followed by white space wherever they appear.)]285.6 norm2
[(NASM, like ANSI C, provides no guarantees about the sensible operation of the signed modulo operator.)]267.6 norm1
[(On most systems it will match the signed division operator, such that:)]255.6 norm2
[2(     b * \(a // b\) + \(a %% b\) = a       \(b != 0\))]240 code3
[{/section-3.5.12 xa}(Unary Operators)](3.5.12)219.6 subh3
[(The highest-priority operators in NASM's expression grammar are those which only apply to one)]201.6 norm1
[(argument. These are:)]189.6 norm2
[2(-)0( )(negates \()(2's complement\) its operand.)]171.6 bull3
[2(+)0( does nothing; it's provided for symmetry with )2(-)0(.)]153.6 bull3
[2(~)0( computes the )(bitwise negation \()(1's complement\) of its operand.)]135.6 bull3
[2(!)0( is the )(boolean negation operator. It evaluates to 1 if the argument is 0, otherwise 0.)]117.6 bull3
[2(SEG)0( provides the )(segment address of its operand \(explained in more detail in ){/section-3.6 xl}(section 3.6){el}(\).)]99.6 bull3
(42)pageeven
restore showpage
%%Page: 43 43
%%BeginPageSetup
save
%%EndPageSetup
/43 pa
[(A set of additional operators with leading and trailing double underscores are used to implement)]708 bull1
[(the )2(integer functions)0( of the )2(ifunc)0( macro package, see ){/section-6.4 xl}(section 6.4){el}(.)]696 bull2
[{/section-3.6 xa}2(SEG)0( and )2(WRT)](3.6)673.2 head3
[(When writing large 16-bit programs, which must be split into multiple )(segments, it is often necessary to)]655.2 norm1
[(be able to refer to the )(segment part of the address of a symbol. NASM supports the )2(SEG)0( operator to)]643.2 norm0
[(perform this function.)]631.2 norm2
[(The )2(SEG)0( operator evaluates to the )1(preferred)0( segment base of a symbol, defined as the segment base)]613.2 norm1
[(relative to which the offset of the symbol makes sense. So the code)]601.2 norm2
[2(        mov     ax,seg symbol )]585.6 code1
[2(        mov     es,ax )]576 code0
[2(        mov     bx,symbol)]566.4 code2
[(will load )2(ES:BX)0( with a valid pointer to the symbol )2(symbol)0(.)]548.4 norm3
[(Things can be more complex than this: since 16-bit segments and )(groups may )(overlap, you might)]530.4 norm1
[(occasionally want to refer to some symbol using a different segment base from the preferred one.)]518.4 norm0
[(NASM lets you do this, by the use of the )2(WRT)0( \(With Reference To\) keyword. So you can do things like)]506.4 norm2
[2(        mov     ax,weird_seg        ; weird_seg is a segment base )]490.8 code1
[2(        mov     es,ax )]481.2 code0
[2(        mov     bx,symbol wrt weird_seg)]471.6 code2
[(to load )2(ES:BX)0( with a different, but functionally equivalent, pointer to the symbol )2(symbol)0(.)]453.6 norm3
[(NASM supports far \(inter-segment\) calls and jumps by means of the syntax )2(call segment:offset)0(,)]435.6 norm1
[(where )2(segment)0( and )2(offset)0( both represent immediate values. So to call a far procedure, you could code)]423.6 norm0
[(either of)]411.6 norm2
[2(        call    \(seg procedure\):procedure )]396 code1
[2(        call    weird_seg:\(procedure wrt weird_seg\))]386.4 code2
[(\(The parentheses are included for clarity, to show the intended parsing of the above instructions. They)]368.4 norm1
[(are not necessary in practice.\))]356.4 norm2
[(NASM supports the syntax )2(call far procedure)0( as a synonym for the first of the above usages. )2(JMP)]338.4 norm1
[(works identically to )2(CALL)0( in these examples.)]326.4 norm2
[(To declare a )(far pointer to a data item in a data segment, you must code)]308.4 norm3
[2(        dw      symbol, seg symbol)]292.8 code3
[(NASM supports no convenient synonym for this, though you can always invent one using the macro)]274.8 norm1
[(processor.)]262.8 norm2
[{/section-3.7 xa}2(STRICT)0(: Inhibiting Optimization)](3.7)240 head3
[(When assembling with the optimizer set to level 2 or higher \(see ){/section-2.1.24 xl}(section 2.1.24){el}(\), NASM will use size)]222 norm1
[(specifiers \()2(BYTE)0(, )2(WORD)0(, )2(DWORD)0(, )2(QWORD)0(, )2(TWORD)0(, )2(OWORD)0(, )2(YWORD)0( or )2(ZWORD)0(\), but will give them the smallest)]210 norm0
[(possible size. The keyword )2(STRICT)0( can be used to inhibit optimization and force a particular operand to)]198 norm0
[(be emitted in the specified size. For example, with the optimizer on, and in )2(BITS 16)0( mode,)]186 norm2
[2(        push dword 33)]170.4 code3
[(is encoded in three bytes )2(66 6A 21)0(, whereas)]152.4 norm3
[2(        push strict dword 33)]136.8 code3
[(is encoded in six bytes, with a full dword immediate operand )2(66 68 21 00 00 00)0(.)]118.8 norm3
[(With the optimizer off, the same code \(six bytes\) is generated whether the )2(STRICT)0( keyword was used or)]100.8 norm1
[(not.)]88.8 norm2
(43)pageodd
restore showpage
%%Page: 44 44
%%BeginPageSetup
save
%%EndPageSetup
/44 pa
[{/section-3.8 xa}(Critical Expressions)](3.8)703.2 head3
[(Although NASM has an optional multi-pass optimizer, there are some expressions which must be)]685.2 norm1
[(resolvable on the first pass. These are called )1(Critical Expressions)0(.)]673.2 norm2
[(The first pass is used to determine the size of all the assembled code and data, so that the second pass,)]655.2 norm1
[(when generating all the code, knows all the symbol addresses the code refers to. So one thing NASM)]643.2 norm0
[(can't handle is code whose size depends on the value of a symbol declared after the code in question.)]631.2 norm0
[(For example,)]619.2 norm2
[2(        times \(label-$\) db 0 )]603.6 code1
[2(label:  db      'Where am I?')]594 code2
[(The argument to )2(TIMES)0( in this case could equally legally evaluate to anything at all; NASM will reject)]576 norm1
[(this example because it cannot tell the size of the )2(TIMES)0( line when it first sees it. It will just as firmly)]564 norm0
[(reject the slightly )(paradoxical code)]552 norm2
[2(        times \(label-$+1\) db 0 )]536.4 code1
[2(label:  db      'NOW where am I?')]526.8 code2
[(in which )1(any)0( value for the )2(TIMES)0( argument is by definition wrong!)]508.8 norm3
[(NASM rejects these examples by means of a concept called a )1(critical expression)0(, which is defined to be)]490.8 norm1
[(an expression whose value is required to be computable in the first pass, and which must therefore)]478.8 norm0
[(depend only on symbols defined before it. The argument to the )2(TIMES)0( prefix is a critical expression.)]466.8 norm2
[{/section-3.9 xa}(Local Labels)](3.9)444 head3
[(NASM gives special treatment to symbols beginning with a )(period. A label beginning with a single)]426 norm1
[(period is treated as a )1(local)0( label, which means that it is associated with the previous non-local label.)]414 norm0
[(So, for example:)]402 norm2
[2(label1  ; some code )]386.4 code1
[2()]376.8 code0
[2(.loop )]367.2 code0
[2(        ; some more code )]357.6 code0
[2()]348 code0
[2(        jne     .loop )]338.4 code0
[2(        ret )]328.8 code0
[2()]319.2 code0
[2(label2  ; some code )]309.6 code0
[2()]300 code0
[2(.loop )]290.4 code0
[2(        ; some more code )]280.8 code0
[2()]271.2 code0
[2(        jne     .loop )]261.6 code0
[2(        ret)]252 code2
[(In the above code fragment, each )2(JNE)0( instruction jumps to the line immediately before it, because the)]234 norm1
[(two definitions of )2(.loop)0( are kept separate by virtue of each being associated with the previous)]222 norm0
[(non-local label.)]210 norm2
[(This form of local label handling is borrowed from the old Amiga assembler )(DevPac; however, NASM)]192 norm1
[(goes one step further, in allowing access to local labels from other parts of the code. This is achieved by)]180 norm0
[(means of )1(defining)0( a local label in terms of the previous non-local label: the first definition of )2(.loop)]168 norm0
[(above is really defining a symbol called )2(label1.loop)0(, and the second defines a symbol called)]156 norm0
[2(label2.loop)0(. So, if you really needed to, you could write)]144 norm2
[2(label3  ; some more code )]128.4 code1
[2(        ; and some more )]118.8 code0
[2()]109.2 code0
[2(        jmp label1.loop)]99.5999999999996 code2
(44)pageeven
restore showpage
%%Page: 45 45
%%BeginPageSetup
save
%%EndPageSetup
/45 pa
[(Sometimes it is useful \226 in a macro, for instance \226 to be able to define a label which can be referenced)]708 norm1
[(from anywhere but which doesn't interfere with the normal local-label mechanism. Such a label can't)]696 norm0
[(be non-local because it would interfere with subsequent definitions of, and references to, local labels;)]684 norm0
[(and it can't be local because the macro that defined it wouldn't know the label's full name. NASM)]672 norm0
[(therefore introduces a third type of label, which is probably only useful in macro definitions: if a label)]660 norm0
[(begins with the )(special prefix )2(..@)0(, then it does nothing to the local label mechanism. So you could code)]648 norm2
[2(label1:                         ; a non-local label )]632.4 code1
[2(.local:                         ; this is really label1.local )]622.8 code0
[2(..@foo:                         ; this is a special symbol )]613.2 code0
[2(label2:                         ; another non-local label )]603.6 code0
[2(.local:                         ; this is really label2.local )]594 code0
[2()]584.4 code0
[2(        jmp     ..@foo          ; this will jump three lines up)]574.8 code2
[(NASM has the capacity to define other special symbols beginning with a double period: for example,)]556.8 norm1
[2(..start)0( is used to specify the entry point in the )2(obj)0( output format \(see ){/section-8.4.6 xl}(section 8.4.6){el}(\), )2(..imagebase)0( is)]544.8 norm0
[(used to find out the offset from a base address of the current image in the )2(win64)0( output format \(see)]532.8 norm0
[{/section-8.6.1 xl}(section 8.6.1){el}(\). So just keep in mind that symbols beginning with a double period are special.)]520.8 norm2
(45)pageodd
restore showpage
%%Page: 46 46
%%BeginPageSetup
save
%%EndPageSetup
/46 pa
(46)pageeven
restore showpage
%%Page: 47 47
%%BeginPageSetup
save
%%EndPageSetup
/47 pa
[{/chapter-4 xa}(Chapter 4: The NASM )(Preprocessor)]698.4 chap3
[(NASM contains a powerful )(macro processor, which supports conditional assembly, multi-level file)]662.4 norm1
[(inclusion, two forms of macro \(single-line and multi-line\), and a `context stack' mechanism for extra)]650.4 norm0
[(macro power. Preprocessor directives all begin with a )2(%)0( sign.)]638.4 norm2
[(The preprocessor collapses all lines which end with a backslash \(\\\) character into a single line. Thus:)]620.4 norm3
[2(%define THIS_VERY_LONG_MACRO_NAME_IS_DEFINED_TO \\ )]604.8 code1
[2(        THIS_VALUE)]595.2 code2
[(will work like a single-line macro without the backslash-newline sequence.)]577.2 norm3
[{/section-4.1 xa}(Single-Line Macros)](4.1)554.4 head3
[{/section-4.1.1 xa}(The Normal Way: )2(%define)](4.1.1)534 subh3
[(Single-line macros are defined using the )2(%define)0( preprocessor directive. The definitions work in a)]516 norm1
[(similar way to C; so you can do things like)]504 norm2
[2(%define ctrl    0x1F & )]488.4 code1
[2(%define param\(a,b\) \(\(a\)+\(a\)*\(b\)\) )]478.8 code0
[2()]469.2 code0
[2(        mov     byte [param\(2,ebx\)], ctrl 'D')]459.6 code2
[(which will expand to)]441.6 norm3
[2(        mov     byte [\(2\)+\(2\)*\(ebx\)], 0x1F & 'D')]426 code3
[(When the expansion of a single-line macro contains tokens which invoke another macro, the expansion)]408 norm1
[(is performed at invocation time, not at definition time. Thus the code)]396 norm2
[2(%define a\(x\)    1+b\(x\) )]380.4 code1
[2(%define b\(x\)    2*x )]370.8 code0
[2()]361.2 code0
[2(        mov     ax,a\(8\))]351.6 code2
[(will evaluate in the expected way to )2(mov ax,1+2*8)0(, even though the macro )2(b)0( wasn't defined at the time)]333.6 norm1
[(of definition of )2(a)0(.)]321.6 norm2
[(Note that single-line macro argument list cannot be preceded by whitespace. Otherwise it will be)]303.6 norm1
[(treated as an expansion. For example:)]291.6 norm2
[2(   %define foo \(a,b\)               ; no arguments, \(a,b\) is the expansion )]276 code1
[2(   %define bar\(a,b\)                ; two arguments, empty expansion)]266.4 code2
[(Macros defined with )2(%define)0( are )(case sensitive: after )2(%define foo bar)0(, only )2(foo)0( will expand to )2(bar)0(: )2(Foo)]248.4 norm1
[(or )2(FOO)0( will not. By using )2(%idefine)0( instead of )2(%define)0( \(the `i' stands for `insensitive'\) you can define all)]236.4 norm0
[(the case variants of a macro at once, so that )2(%idefine foo bar)0( would cause )2(foo)0(, )2(Foo)0(, )2(FOO)0(, )2(fOO)0( and so)]224.4 norm0
[(on all to expand to )2(bar)0(.)]212.4 norm2
[(There is a mechanism which detects when a macro call has occurred as a result of a previous expansion)]194.4 norm1
[(of the same macro, to guard against )(circular references and infinite loops. If this happens, the)]182.4 norm0
[(preprocessor will only expand the first occurrence of the macro. Hence, if you code)]170.4 norm2
[2(%define a\(x\)    1+a\(x\) )]154.8 code1
[2()]145.2 code0
[2(        mov     ax,a\(3\))]135.6 code2
[(the macro )2(a\(3\))0( will expand once, becoming )2(1+a\(3\))0(, and will then expand no further. This behaviour)]117.6 norm1
[(can be useful: see ){/section-10.1 xl}(section 10.1){el}( for an example of its use.)]105.6 norm2
[(You can )(overload single-line macros: if you write)]87.5999999999998 norm3
(47)pageodd
restore showpage
%%Page: 48 48
%%BeginPageSetup
save
%%EndPageSetup
/48 pa
[2(%define foo\(x\)   1+x )]710.4 code1
[2(%define foo\(x,y\) 1+x*y)]700.8 code2
[(the preprocessor will be able to handle both types of macro call, by counting the parameters you pass;)]682.8 norm1
[(so )2(foo\(3\))0( will become )2(1+3)0( whereas )2(foo\(ebx,2\))0( will become )2(1+ebx*2)0(. However, if you define)]670.8 norm2
[2(%define foo bar)]655.2 code3
[(then no other definition of )2(foo)0( will be accepted: a macro with no parameters prohibits the definition of)]637.2 norm1
[(the same name as a macro )1(with)0( parameters, and vice versa.)]625.2 norm2
[(This doesn't prevent single-line macros being )1(redefined)0(: you can perfectly well define a macro with)]607.2 norm3
[2(%define foo bar)]591.6 code3
[(and then re-define it later in the same source file with)]573.6 norm3
[2(%define foo baz)]558 code3
[(Then everywhere the macro )2(foo)0( is invoked, it will be expanded according to the most recent definition.)]540 norm1
[(This is particularly useful when defining single-line macros with )2(%assign)0( \(see ){/section-4.1.8 xl}(section 4.1.8){el}(\).)]528 norm2
[(The following additional features were added in NASM 2.15:)]510 norm3
[(It is possible to define an empty string instead of an argument name if the argument is never used. For)]492 norm1
[(example:)]480 norm2
[2(   %define ereg\(foo,\) e %+ foo )]464.4 code1
[2(     mov eax,ereg\(dx,cx\))]454.8 code2
[(A single pair of parentheses is a subcase of a single, unused argument:)]436.8 norm3
[2(   %define myreg\(\) eax )]421.2 code1
[2(     mov edx,myreg\(\))]411.6 code2
[(This is similar to the behavior of the C preprocessor.)]393.6 norm3
[(If declared with an )2(=)0(, NASM will evaluate the argument as an expression after expansion.)]375.6 bull3
[(If an argument declared with an )2(&)0(, a macro parameter will be turned into a quoted string after)]357.6 bull1
[(expansion.)]345.6 bull2
[(If declared with a )2(+)0(, it is a greedy or variadic parameter; it includes any subsequent commas and)]327.6 bull1
[(parameters.)]315.6 bull2
[(If declared with an )2(!)0(, NASM will not strip whitespace and braces \(useful in conjunction with )2(&)0(\).)]297.6 bull3
[(For example:)]279.6 norm3
[2(    %define xyzzy\(=expr,&val\) expr, str )]264 code1
[2(    %define plugh\(x\) xyzzy\(x,x\) )]254.4 code0
[2(    db plugh\(3+5\), `\\0` ; Expands to: db 8, "3+5", `\\0`)]244.8 code2
[(You can )(pre-define single-line macros using the `-d' option on the NASM command line: see ){/section-2.1.20 xl}(section){el}]226.8 norm1
[{/section-2.1.20 xl}(2.1.20){el}(.)]214.8 norm2
[{/section-4.1.2 xa}(Resolving )2(%define)0(: )2(%xdefine)](4.1.2)194.4 subh3
[(To have a reference to an embedded single-line macro resolved at the time that the embedding macro)]176.4 norm1
[(is )1(defined)0(, as opposed to when the embedding macro is )1(expanded)0(, you need a different mechanism to)]164.4 norm0
[(the one offered by )2(%define)0(. The solution is to use )2(%xdefine)0(, or it's )(case-insensitive counterpart)]152.4 norm0
[2(%ixdefine)0(.)]140.4 norm2
[(Suppose you have the following code:)]122.4 norm3
[2(%define  isTrue  1 )]106.8 code1
[2(%define  isFalse isTrue )]97.1999999999998 code0
[2(%define  isTrue  0 )]87.5999999999998 code0
[2()]77.9999999999998 code0
(48)pageeven
restore showpage
%%Page: 49 49
%%BeginPageSetup
save
%%EndPageSetup
/49 pa
[2(val1:    db      isFalse )]710.4 code0
[2()]700.8 code0
[2(%define  isTrue  1 )]691.2 code0
[2()]681.6 code0
[2(val2:    db      isFalse)]672 code2
[(In this case, )2(val1)0( is equal to 0, and )2(val2)0( is equal to 1. This is because, when a single-line macro is)]654 norm1
[(defined using )2(%define)0(, it is expanded only when it is called. As )2(isFalse)0( expands to )2(isTrue)0(, the)]642 norm0
[(expansion will be the current value of )2(isTrue)0(. The first time it is called that is 0, and the second time it)]630 norm0
[(is 1.)]618 norm2
[(If you wanted )2(isFalse)0( to expand to the value assigned to the embedded macro )2(isTrue)0( at the time that)]600 norm1
[2(isFalse)0( was defined, you need to change the above code to use )2(%xdefine)0(.)]588 norm2
[2(%xdefine isTrue  1 )]572.4 code1
[2(%xdefine isFalse isTrue )]562.8 code0
[2(%xdefine isTrue  0 )]553.2 code0
[2()]543.6 code0
[2(val1:    db      isFalse )]534 code0
[2()]524.4 code0
[2(%xdefine isTrue  1 )]514.8 code0
[2()]505.2 code0
[2(val2:    db      isFalse)]495.6 code2
[(Now, each time that )2(isFalse)0( is called, it expands to 1, as that is what the embedded macro )2(isTrue)]477.6 norm1
[(expanded to at the time that )2(isFalse)0( was defined.)]465.6 norm2
[2(%xdefine)0( and )2(%ixdefine)0( supports argument expansion exactly the same way that )2(%define)0( and)]447.6 norm1
[2(%idefine)0( does.)]435.6 norm2
[{/section-4.1.3 xa}(Macro Indirection: )2(%[...])](4.1.3)415.2 subh3
[(The )2(%[...])0( construct can be used to expand macros in contexts where macro expansion would)]397.2 norm1
[(otherwise not occur, including in the names other macros. For example, if you have a set of macros)]385.2 norm0
[(named )2(Foo16)0(, )2(Foo32)0( and )2(Foo64)0(, you could write:)]373.2 norm2
[2(     mov ax,Foo%[__?BITS?__] ; The Foo value)]357.6 code3
[(to use the builtin macro )2(__?BITS?__)0( \(see ){/section-5.3 xl}(section 5.3){el}(\) to automatically select between them. Similarly,)]339.6 norm1
[(the two statements:)]327.6 norm2
[2(%xdefine Bar         Quux    ; Expands due to %xdefine )]312 code1
[2(%define  Bar         %[Quux] ; Expands due to %[...])]302.4 code2
[(have, in fact, exactly the same effect.)]284.4 norm3
[2(%[...])0( concatenates to adjacent tokens in the same way that multi-line macro parameters do, see)]266.4 norm1
[{/section-4.3.9 xl}(section 4.3.9){el}( for details.)]254.4 norm2
[{/section-4.1.4 xa}(Concatenating Single Line Macro Tokens: )2(%+)](4.1.4)234 subh3
[(Individual tokens in single line macros can be concatenated, to produce longer tokens for later)]216 norm1
[(processing. This can be useful if there are several similar macros that perform similar functions.)]204 norm2
[(Please note that a space is required after )2(%+)0(, in order to disambiguate it from the syntax )2(%+1)0( used in)]186 norm1
[(multiline macros.)]174 norm2
[(As an example, consider the following:)]156 norm3
[2(%define BDASTART 400h                ; Start of BIOS data area)]140.4 code3
[2(struc   tBIOSDA                      ; its structure )]124.8 code1
[2(        .COM1addr       RESW    1 )]115.2 code0
[2(        .COM2addr       RESW    1 )]105.6 code0
[2(        ; ..and so on )]95.9999999999999 code0
[2(endstruc)]86.3999999999999 code2
(49)pageodd
restore showpage
%%Page: 50 50
%%BeginPageSetup
save
%%EndPageSetup
/50 pa
[(Now, if we need to access the elements of tBIOSDA in different places, we can end up with:)]708 norm3
[2(        mov     ax,BDASTART + tBIOSDA.COM1addr )]692.4 code1
[2(        mov     bx,BDASTART + tBIOSDA.COM2addr)]682.8 code2
[(This will become pretty ugly \(and tedious\) if used in many places, and can be reduced in size)]664.8 norm1
[(significantly by using the following macro:)]652.8 norm2
[2(; Macro to access BIOS variables by their names \(from tBDA\):)]637.2 code3
[2(%define BDA\(x\)  BDASTART + tBIOSDA. %+ x)]621.6 code3
[(Now the above code can be written as:)]603.6 norm3
[2(        mov     ax,BDA\(COM1addr\) )]588 code1
[2(        mov     bx,BDA\(COM2addr\))]578.4 code2
[(Using this feature, we can simplify references to a lot of macros \(and, in turn, reduce typing errors\).)]560.4 norm3
[{/section-4.1.5 xa}(The Macro Name Itself: )2(%?)0( and )2(%??)](4.1.5)540 subh3
[(The special symbols )2(%?)0( and )2(%??)0( can be used to reference the macro name itself inside a macro)]522 norm1
[(expansion, this is supported for both single-and multi-line macros. )2(%?)0( refers to the macro name as)]510 norm0
[1(invoked)0(, whereas )2(%??)0( refers to the macro name as )1(declared)0(. The two are always the same for)]498 norm0
[(case-sensitive macros, but for case-insensitive macros, they can differ.)]486 norm2
[(For example:)]468 norm3
[2(%imacro Foo 0 )]452.4 code1
[2(        mov %?,%?? )]442.8 code0
[2(%endmacro )]433.2 code0
[2()]423.6 code0
[2(        foo )]414 code0
[2(        FOO)]404.4 code2
[(will expand to:)]386.4 norm3
[2(        mov foo,Foo )]370.8 code1
[2(        mov FOO,Foo)]361.2 code2
[(These tokens can be used for single-line macros )1(if defined outside any multi-line macros.)0( See below.)]343.2 norm3
[{/section-4.1.6 xa}(The Single-Line Macro Name: )2(%*?)0( and )2(%*??)](4.1.6)322.8 subh3
[(If the tokens )2(%?)0( and )2(%??)0( are used inside a multi-line macro, they are expanded before any directives are)]304.8 norm1
[(processed. As a result,)]292.8 norm2
[2(%imacro Foo 0 )]277.2 code1
[2(      %idefine Bar _%? )]267.6 code0
[2(      mov BAR,bAr )]258 code0
[2(%endmacro )]248.4 code0
[2()]238.8 code0
[2(      foo )]229.2 code0
[2(      mov eax,bar)]219.6 code2
[(will expand to:)]201.6 norm3
[2(      mov _foo,_foo )]186 code1
[2(      mov eax,_foo)]176.4 code2
[(which may or may not be what you expected. The tokens )2(%*?)0( and )2(%*??)0( behave like )2(%?)0( and )2(%??)0( but are)]158.4 norm1
[(only expanded inside single-line macros. Thus:)]146.4 norm2
[2(%imacro Foo 0 )]130.8 code1
[2(      %idefine Bar _%*? )]121.2 code0
[2(      mov BAR,bAr )]111.6 code0
[2(%endmacro )]102 code0
[2()]92.3999999999995 code0
[2(      foo )]82.7999999999995 code0
[2(      mov eax,bar)]73.1999999999995 code2
(50)pageeven
restore showpage
%%Page: 51 51
%%BeginPageSetup
save
%%EndPageSetup
/51 pa
[(will expand to:)]708 norm3
[2(      mov _BAR,_bAr )]692.4 code1
[2(      mov eax,_bar)]682.8 code2
[(The )2(%*?)0( can be used to make a keyword "disappear", for example in case a new instruction has been)]664.8 norm1
[(used as a label in older code. For example:)]652.8 norm2
[2(%idefine pause $%*?                 ; Hide the PAUSE instruction)]637.2 code3
[2(%*?)0( and )2(%*??)0( were introduced in NASM 2.15.04.)]619.2 norm3
[{/section-4.1.7 xa}(Undefining Single-Line Macros: )2(%undef)](4.1.7)598.8 subh3
[(Single-line macros can be removed with the )2(%undef)0( directive. For example, the following sequence:)]580.8 norm3
[2(%define foo bar )]565.2 code1
[2(%undef  foo )]555.6 code0
[2()]546 code0
[2(        mov     eax, foo)]536.4 code2
[(will expand to the instruction )2(mov eax, foo)0(, since after )2(%undef)0( the macro )2(foo)0( is no longer defined.)]518.4 norm3
[(Macros that would otherwise be pre-defined can be undefined on the command-line using the `-u')]500.4 norm1
[(option on the NASM command line: see ){/section-2.1.21 xl}(section 2.1.21){el}(.)]488.4 norm2
[{/section-4.1.8 xa}(Preprocessor Variables: )2(%assign)](4.1.8)468 subh3
[(An alternative way to define single-line macros is by means of the )2(%assign)0( command \(and its)]450 norm1
[(case-insensitive counterpart )2(%iassign)0(, which differs from )2(%assign)0( in exactly the same way that)]438 norm0
[2(%idefine)0( differs from )2(%define)0(\).)]426 norm2
[2(%assign)0( is used to define single-line macros which take no parameters and have a numeric value. This)]408 norm1
[(value can be specified in the form of an expression, and it will be evaluated once, when the )2(%assign)]396 norm0
[(directive is processed.)]384 norm2
[(Like )2(%define)0(, macros defined using )2(%assign)0( can be re-defined later, so you can do things like)]366 norm3
[2(%assign i i+1)]350.4 code3
[(to increment the numeric value of a macro.)]332.4 norm3
[2(%assign)0( is useful for controlling the termination of )2(%rep)0( preprocessor loops: see ){/section-4.5 xl}(section 4.5){el}( for an)]314.4 norm1
[(example of this. Another use for )2(%assign)0( is given in ){/section-9.4 xl}(section 9.4){el}( and ){/section-10.1 xl}(section 10.1){el}(.)]302.4 norm2
[(The expression passed to )2(%assign)0( is a )(critical expression \(see ){/section-3.8 xl}(section 3.8){el}(\), and must also evaluate to a)]284.4 norm1
[(pure number \(rather than a relocatable reference such as a code or data address, or anything involving)]272.4 norm0
[(a register\).)]260.4 norm2
[{/section-4.1.9 xa}(Defining Strings: )2(%defstr)](4.1.9)240 subh3
[2(%defstr)0(, and its case-insensitive counterpart )2(%idefstr)0(, define or redefine a single-line macro without)]222 norm1
[(parameters but converts the entire right-hand side, after macro expansion, to a quoted string before)]210 norm0
[(definition.)]198 norm2
[(For example:)]180 norm3
[2(%defstr test TEST)]164.4 code3
[(is equivalent to)]146.4 norm3
[2(%define test 'TEST')]130.8 code3
[(This can be used, for example, with the )2(%!)0( construct \(see ){/section-4.11.2 xl}(section 4.11.2){el}(\):)]112.8 norm3
[2(%defstr PATH %!PATH          ; The operating system PATH variable)]97.1999999999999 code3
(51)pageodd
restore showpage
%%Page: 52 52
%%BeginPageSetup
save
%%EndPageSetup
/52 pa
[{/section-4.1.10 xa}(Defining Tokens: )2(%deftok)](4.1.10)705.6 subh3
[2(%deftok)0(, and its case-insensitive counterpart )2(%ideftok)0(, define or redefine a single-line macro without)]687.6 norm1
[(parameters but converts the second parameter, after string conversion, to a sequence of tokens.)]675.6 norm2
[(For example:)]657.6 norm3
[2(%deftok test 'TEST')]642 code3
[(is equivalent to)]624 norm3
[2(%define test TEST)]608.4 code3
[{/section-4.1.11 xa}(Defining Aliases: )2(%defalias)](4.1.11)588 subh3
[2(%defalias)0(, and its case-insensitive counterpart )2(%idefalias)0(, define an alias to a macro, i.e. equivalent)]570 norm1
[(of a symbolic link.)]558 norm2
[(When used with various macro defining and undefining directives, it affects the aliased macro. This)]540 norm1
[(functionality is intended for being able to rename macros while retaining the legacy names.)]528 norm2
[(When an alias is defined, but the aliased macro is then undefined, the aliases can legitimately point to)]510 norm1
[(nonexistent macros.)]498 norm2
[(The alias can be undefined using the )2(%undefalias)0( directive. )1(All)0( aliases can be undefined using the)]480 norm1
[2(%clear defalias)0( directive. This includes backwards compatibility aliases defined by NASM itself.)]468 norm2
[(To disable aliases without undefining them, use the )2(%aliases off)0( directive.)]450 norm3
[(To check whether an alias is defined, regardless of the existence of the aliased macro, use )2(%ifdefalias)0(.)]432 norm3
[(For example:)]414 norm3
[2(%defalias OLD NEW )]398.4 code1
[2(   ; OLD and NEW both undefined )]388.8 code0
[2(%define NEW 123 )]379.2 code0
[2(   ; OLD and NEW both 123 )]369.6 code0
[2(%undef OLD )]360 code0
[2(   ; OLD and NEW both undefined )]350.4 code0
[2(%define OLD 456 )]340.8 code0
[2(   ; OLD and NEW both 456 )]331.2 code0
[2(%undefalias OLD )]321.6 code0
[2(   ; OLD undefined, NEW defined to 456)]312 code2
[{/section-4.1.12 xa}(Conditional Comma Operator: )2(%,)](4.1.12)291.6 subh3
[(As of version 2.15, NASM has a conditional comma operator )2(%,)0( that expands to a comma )1(unless)]273.6 norm1
[(followed by a null expansion, which allows suppressing the comma before an empty argument. This is)]261.6 norm0
[(especially useful with greedy single-line macros.)]249.6 norm2
[(For example, all the expressions below are valid:)]231.6 norm3
[2(%define greedy\(a,b,c+\) a + 66 %, b * 3 %, c )]216 code1
[2()]206.4 code0
[2(       db greedy\(1,2\)          ; db 1 + 66, 2 * 3 )]196.8 code0
[2(       db greedy\(1,2,3\)        ; db 1 + 66, 2 * 3, 3 )]187.2 code0
[2(       db greedy\(1,2,3,4\)      ; db 1 + 66, 2 * 3, 3, 4 )]177.6 code0
[2(       db greedy\(1,2,3,4,5\)    ; db 1 + 66, 2 * 3, 3, 4, 5)]168 code2
[{/section-4.2 xa}(String Manipulation in Macros)](4.2)145.2 head3
[(It's often useful to be able to handle strings in macros. NASM supports a few simple string handling)]127.2 norm1
[(macro operators from which more complex operations can be constructed.)]115.2 norm2
[(All the string operators define or redefine a value \(either a string or a numeric value\) to a single-line)]97.1999999999997 norm1
[(macro. When producing a string value, it may change the style of quoting of the input string or strings,)]85.1999999999997 norm0
[(and possibly use )2(\\)0(\226escapes inside )2(`)0(\226quoted strings.)]73.1999999999997 norm2
(52)pageeven
restore showpage
%%Page: 53 53
%%BeginPageSetup
save
%%EndPageSetup
/53 pa
[{/section-4.2.1 xa}(Concatenating Strings: )2(%strcat)](4.2.1)705.6 subh3
[(The )2(%strcat)0( operator concatenates quoted strings and assign them to a single-line macro.)]687.6 norm3
[(For example:)]669.6 norm3
[2(%strcat alpha "Alpha: ", '12" screen')]654 code3
[(... would assign the value )2('Alpha: 12" screen')0( to )2(alpha)0(. Similarly:)]636 norm3
[2(%strcat beta '"foo"\\', "'bar'")]620.4 code3
[(... would assign the value )2(`"foo"\\\\'bar'`)0( to )2(beta)0(.)]602.4 norm3
[(The use of commas to separate strings is permitted but optional.)]584.4 norm3
[{/section-4.2.2 xa}(String Length: )2(%strlen)](4.2.2)564 subh3
[(The )2(%strlen)0( operator assigns the length of a string to a macro. For example:)]546 norm3
[2(%strlen charcnt 'my string')]530.4 code3
[(In this example, )2(charcnt)0( would receive the value 9, just as if an )2(%assign)0( had been used. In this example,)]512.4 norm1
[2('my string')0( was a literal string but it could also have been a single-line macro that expands to a string,)]500.4 norm0
[(as in the following example:)]488.4 norm2
[2(%define sometext 'my string' )]472.8 code1
[2(%strlen charcnt sometext)]463.2 code2
[(As in the first case, this would result in )2(charcnt)0( being assigned the value of 9.)]445.2 norm3
[{/section-4.2.3 xa}(Extracting Substrings: )2(%substr)](4.2.3)424.8 subh3
[(Individual letters or substrings in strings can be extracted using the )2(%substr)0( operator. An example of its)]406.8 norm1
[(use is probably more useful than the description:)]394.8 norm2
[2(%substr mychar 'xyzw' 1       ; equivalent to %define mychar 'x' )]379.2 code1
[2(%substr mychar 'xyzw' 2       ; equivalent to %define mychar 'y' )]369.6 code0
[2(%substr mychar 'xyzw' 3       ; equivalent to %define mychar 'z' )]360 code0
[2(%substr mychar 'xyzw' 2,2     ; equivalent to %define mychar 'yz' )]350.4 code0
[2(%substr mychar 'xyzw' 2,-1    ; equivalent to %define mychar 'yzw' )]340.8 code0
[2(%substr mychar 'xyzw' 2,-2    ; equivalent to %define mychar 'yz')]331.2 code2
[(As with )2(%strlen)0( \(see ){/section-4.2.2 xl}(section 4.2.2){el}(\), the first parameter is the single-line macro to be created and the)]313.2 norm1
[(second is the string. The third parameter specifies the first character to be selected, and the optional)]301.2 norm0
[(fourth parameter preceeded by comma\) is the length. Note that the first index is 1, not 0 and the last)]289.2 norm0
[(index is equal to the value that )2(%strlen)0( would assign given the same string. Index values out of range)]277.2 norm0
[(result in an empty string. A negative length means "until N-1 characters before the end of string", i.e. )2(-1)]265.2 norm0
[(means until end of string, )2(-2)0( until one character before, etc.)]253.2 norm2
[{/section-4.3 xa}(Multi-Line Macros: )2(%macro)](4.3)230.4 head3
[(Multi-line macros are much more like the type of macro seen in MASM and TASM: a multi-line macro)]212.4 norm1
[(definition in NASM looks something like this.)]200.4 norm2
[2(%macro  prologue 1 )]184.8 code1
[2()]175.2 code0
[2(        push    ebp )]165.6 code0
[2(        mov     ebp,esp )]156 code0
[2(        sub     esp,%1 )]146.4 code0
[2()]136.8 code0
[2(%endmacro)]127.2 code2
[(This defines a C-like function prologue as a macro: so you would invoke the macro with a call such as:)]109.2 norm3
[2(myfunc:   prologue 12)]93.5999999999997 code3
[(which would expand to the three lines of code)]75.5999999999997 norm3
(53)pageodd
restore showpage
%%Page: 54 54
%%BeginPageSetup
save
%%EndPageSetup
/54 pa
[2(myfunc: push    ebp )]710.4 code1
[2(        mov     ebp,esp )]700.8 code0
[2(        sub     esp,12)]691.2 code2
[(The number )2(1)0( after the macro name in the )2(%macro)0( line defines the number of parameters the macro)]673.2 norm1
[2(prologue)0( expects to receive. The use of )2(%1)0( inside the macro definition refers to the first parameter to)]661.2 norm0
[(the macro call. With a macro taking more than one parameter, subsequent parameters would be)]649.2 norm0
[(referred to as )2(%2)0(, )2(%3)0( and so on.)]637.2 norm2
[(Multi-line macros, like single-line macros, are )(case-sensitive, unless you define them using the)]619.2 norm1
[(alternative directive )2(%imacro)0(.)]607.2 norm2
[(If you need to pass a comma as )1(part)0( of a parameter to a multi-line macro, you can do that by enclosing)]589.2 norm1
[(the entire parameter in )(braces. So you could code things like:)]577.2 norm2
[2(%macro  silly 2 )]561.6 code1
[2()]552 code0
[2(    %2: db      %1 )]542.4 code0
[2()]532.8 code0
[2(%endmacro )]523.2 code0
[2()]513.6 code0
[2(        silly 'a', letter_a             ; letter_a:  db 'a' )]504 code0
[2(        silly 'ab', string_ab           ; string_ab: db 'ab' )]494.4 code0
[2(        silly {13,10}, crlf             ; crlf:      db 13,10)]484.8 code2
[(The behavior with regards to empty arguments at the end of multi-line macros before NASM 2.15 was)]466.8 norm1
[(often very strange. For backwards compatibility, NASM attempts to recognize cases where the legacy)]454.8 norm0
[(behavior would give unexpected results, and issues a warning, but largely tries to match the legacy)]442.8 norm0
[(behavior. This can be disabled with the )2(%pragma)0( \(see ){/section-4.10.1 xl}(section 4.10.1){el}(\):)]430.8 norm2
[2(%pragma preproc sane_empty_expansion)]415.2 code3
[{/section-4.3.1 xa}(Overloading Multi-Line Macros)](4.3.1)394.8 subh3
[(As with single-line macros, multi-line macros can be overloaded by defining the same macro name)]376.8 norm1
[(several times with different numbers of parameters. This time, no exception is made for macros with no)]364.8 norm0
[(parameters at all. So you could define)]352.8 norm2
[2(%macro  prologue 0 )]337.2 code1
[2()]327.6 code0
[2(        push    ebp )]318 code0
[2(        mov     ebp,esp )]308.4 code0
[2()]298.8 code0
[2(%endmacro)]289.2 code2
[(to define an alternative form of the function prologue which allocates no local stack space.)]271.2 norm3
[(Sometimes, however, you might want to `overload' a machine instruction; for example, you might want)]253.2 norm1
[(to define)]241.2 norm2
[2(%macro  push 2 )]225.6 code1
[2()]216 code0
[2(        push    %1 )]206.4 code0
[2(        push    %2 )]196.8 code0
[2()]187.2 code0
[2(%endmacro)]177.6 code2
[(so that you could code)]159.6 norm3
[2(        push    ebx             ; this line is not a macro call )]144 code1
[2(        push    eax,ecx         ; but this one is)]134.4 code2
[(Ordinarily, NASM will give a warning for the first of the above two lines, since )2(push)0( is now defined to be)]116.4 norm1
[(a macro, and is being invoked with a number of parameters for which no definition has been given. The)]104.4 norm0
[(correct code will still be generated, but the assembler will give a warning. This warning can be disabled)]92.3999999999997 norm0
[(by the use of the )2(-w-macro-params)0( command-line option \(see ){/section-2.1.26 xl}(section 2.1.26){el}(\).)]80.3999999999997 norm2
(54)pageeven
restore showpage
%%Page: 55 55
%%BeginPageSetup
save
%%EndPageSetup
/55 pa
[{/section-4.3.2 xa}(Macro-Local Labels)](4.3.2)705.6 subh3
[(NASM allows you to define labels within a multi-line macro definition in such a way as to make them)]687.6 norm1
[(local to the macro call: so calling the same macro multiple times will use a different label each time.)]675.6 norm0
[(You do this by prefixing )2(%%)0( to the label name. So you can invent an instruction which executes a )2(RET)0( if)]663.6 norm0
[(the )2(Z)0( flag is set by doing this:)]651.6 norm2
[2(%macro  retz 0 )]636 code1
[2()]626.4 code0
[2(        jnz     %%skip )]616.8 code0
[2(        ret )]607.2 code0
[2(    %%skip: )]597.6 code0
[2()]588 code0
[2(%endmacro)]578.4 code2
[(You can call this macro as many times as you want, and every time you call it NASM will make up a)]560.4 norm1
[(different `real' name to substitute for the label )2(%%skip)0(. The names NASM invents are of the form)]548.4 norm0
[2(..@2345.skip)0(, where the number 2345 changes with every macro call. The )2(..@)0( prefix prevents)]536.4 norm0
[(macro-local labels from interfering with the local label mechanism, as described in ){/section-3.9 xl}(section 3.9){el}(. You)]524.4 norm0
[(should avoid defining your own labels in this form \(the )2(..@)0( prefix, then a number, then another period\))]512.4 norm0
[(in case they interfere with macro-local labels.)]500.4 norm2
[(These labels are really macro-local )1(tokens)0(, and can be used for other purposes where a token unique to)]482.4 norm1
[(each macro invocation is desired, e.g. to name single-line macros without using the context feature)]470.4 norm0
[(\(){/section-4.7.2 xl}(section 4.7.2){el}(\).)]458.4 norm2
[{/section-4.3.3 xa}(Greedy Macro Parameters)](4.3.3)438 subh3
[(Occasionally it is useful to define a macro which lumps its entire command line into one parameter)]420 norm1
[(definition, possibly after extracting one or two smaller parameters from the front. An example might be)]408 norm0
[(a macro to write a text string to a file in MS-DOS, where you might want to be able to write)]396 norm2
[2(        writefile [filehandle],"hello, world",13,10)]380.4 code3
[(NASM allows you to define the last parameter of a macro to be )1(greedy)0(, meaning that if you invoke the)]362.4 norm1
[(macro with more parameters than it expects, all the spare parameters get lumped into the last defined)]350.4 norm0
[(one along with the separating commas. So if you code:)]338.4 norm2
[2(%macro  writefile 2+ )]322.8 code1
[2()]313.2 code0
[2(        jmp     %%endstr )]303.6 code0
[2(  %%str:        db      %2 )]294 code0
[2(  %%endstr: )]284.4 code0
[2(        mov     dx,%%str )]274.8 code0
[2(        mov     cx,%%endstr-%%str )]265.2 code0
[2(        mov     bx,%1 )]255.6 code0
[2(        mov     ah,0x40 )]246 code0
[2(        int     0x21 )]236.4 code0
[2()]226.8 code0
[2(%endmacro)]217.2 code2
[(then the example call to )2(writefile)0( above will work as expected: the text before the first comma,)]199.2 norm1
[2([filehandle])0(, is used as the first macro parameter and expanded when )2(%1)0( is referred to, and all the)]187.2 norm0
[(subsequent text is lumped into )2(%2)0( and placed after the )2(db)0(.)]175.2 norm2
[(The greedy nature of the macro is indicated to NASM by the use of the )2(+)0( sign after the parameter count)]157.2 norm1
[(on the )2(%macro)0( line.)]145.2 norm2
[(If you define a greedy macro, you are effectively telling NASM how it should expand the macro given)]127.2 norm1
[1(any)0( number of parameters from the actual number specified up to infinity; in this case, for example,)]115.2 norm0
[(NASM now knows what to do when it sees a call to )2(writefile)0( with 2, 3, 4 or more parameters. NASM)]103.2 norm0
[(will take this into account when overloading macros, and will not allow you to define another form of)]91.1999999999998 norm0
[2(writefile)0( taking 4 parameters \(for example\).)]79.1999999999998 norm2
(55)pageodd
restore showpage
%%Page: 56 56
%%BeginPageSetup
save
%%EndPageSetup
/56 pa
[(Of course, the above macro could have been implemented as a non-greedy macro, in which case the)]708 norm1
[(call to it would have had to look like)]696 norm2
[2(          writefile [filehandle], {"hello, world",13,10})]680.4 code3
[(NASM provides both mechanisms for putting )(commas in macro parameters, and you choose which one)]662.4 norm1
[(you prefer for each macro definition.)]650.4 norm2
[(See ){/section-7.3.1 xl}(section 7.3.1){el}( for a better way to write the above macro.)]632.4 norm3
[{/section-4.3.4 xa}(Macro Parameters Range)](4.3.4)612 subh3
[(NASM allows you to expand parameters via special construction )2(%{x:y})0( where )2(x)0( is the first parameter)]594 norm1
[(index and )2(y)0( is the last. Any index can be either negative or positive but must never be zero.)]582 norm2
[(For example)]564 norm3
[2(%macro mpar 1-* )]548.4 code1
[2(     db %{3:5} )]538.8 code0
[2(%endmacro )]529.2 code0
[2()]519.6 code0
[2(mpar 1,2,3,4,5,6)]510 code2
[(expands to )2(3,4,5)0( range.)]492 norm3
[(Even more, the parameters can be reversed so that)]474 norm3
[2(%macro mpar 1-* )]458.4 code1
[2(     db %{5:3} )]448.8 code0
[2(%endmacro )]439.2 code0
[2()]429.6 code0
[2(mpar 1,2,3,4,5,6)]420 code2
[(expands to )2(5,4,3)0( range.)]402 norm3
[(But even this is not the last. The parameters can be addressed via negative indices so NASM will count)]384 norm1
[(them reversed. The ones who know Python may see the analogue here.)]372 norm2
[2(%macro mpar 1-* )]356.4 code1
[2(     db %{-1:-3} )]346.8 code0
[2(%endmacro )]337.2 code0
[2()]327.6 code0
[2(mpar 1,2,3,4,5,6)]318 code2
[(expands to )2(6,5,4)0( range.)]300 norm3
[(Note that NASM uses )(comma to separate parameters being expanded.)]282 norm3
[(By the way, here is a trick \226 you might use the index )2(%{-1:-1)0(} which gives you the )(last argument passed)]264 norm1
[(to a macro.)]252 norm2
[{/section-4.3.5 xa}(Default Macro Parameters)](4.3.5)231.6 subh3
[(NASM also allows you to define a multi-line macro with a )1(range)0( of allowable parameter counts. If you)]213.6 norm1
[(do this, you can specify defaults for )(omitted parameters. So, for example:)]201.6 norm2
[2(%macro  die 0-1 "Painful program death has occurred." )]186 code1
[2()]176.4 code0
[2(        writefile 2,%1 )]166.8 code0
[2(        mov     ax,0x4c01 )]157.2 code0
[2(        int     0x21 )]147.6 code0
[2()]138 code0
[2(%endmacro)]128.4 code2
[(This macro \(which makes use of the )2(writefile)0( macro defined in ){/section-4.3.3 xl}(section 4.3.3){el}(\) can be called with an)]110.4 norm1
[(explicit error message, which it will display on the error output stream before exiting, or it can be called)]98.3999999999997 norm0
[(with no parameters, in which case it will use the default error message supplied in the macro definition.)]86.3999999999997 norm2
(56)pageeven
restore showpage
%%Page: 57 57
%%BeginPageSetup
save
%%EndPageSetup
/57 pa
[(In general, you supply a minimum and maximum number of parameters for a macro of this type; the)]708 norm1
[(minimum number of parameters are then required in the macro call, and then you provide defaults for)]696 norm0
[(the optional ones. So if a macro definition began with the line)]684 norm2
[2(%macro foobar 1-3 eax,[ebx+2])]668.4 code3
[(then it could be called with between one and three parameters, and )2(%1)0( would always be taken from the)]650.4 norm1
[(macro call. )2(%2)0(, if not specified by the macro call, would default to )2(eax)0(, and )2(%3)0( if not specified would)]638.4 norm0
[(default to )2([ebx+2])0(.)]626.4 norm2
[(You can provide extra information to a macro by providing too many default parameters:)]608.4 norm3
[2(%macro quux 1 something)]592.8 code3
[(This will trigger a warning by default; see ){/section-2.1.26 xl}(section 2.1.26){el}( for more information. When )2(quux)0( is invoked, it)]574.8 norm1
[(receives not one but two parameters. )2(something)0( can be referred to as )2(%2)0(. The difference between)]562.8 norm0
[(passing )2(something)0( this way and writing )2(something)0( in the macro body is that with this way )2(something)0( is)]550.8 norm0
[(evaluated when the macro is defined, not when it is expanded.)]538.8 norm2
[(You may omit parameter defaults from the macro definition, in which case the parameter default is)]520.8 norm1
[(taken to be blank. This can be useful for macros which can take a variable number of parameters, since)]508.8 norm0
[(the )2(%0)0( token \(see ){/section-4.3.6 xl}(section 4.3.6){el}(\) allows you to determine how many parameters were really passed to)]496.8 norm0
[(the macro call.)]484.8 norm2
[(This defaulting mechanism can be combined with the greedy-parameter mechanism; so the )2(die)0( macro)]466.8 norm1
[(above could be made more powerful, and more useful, by changing the first line of the definition to)]454.8 norm2
[2(%macro die 0-1+ "Painful program death has occurred.",13,10)]439.2 code3
[(The maximum parameter count can be infinite, denoted by )2(*)0(. In this case, of course, it is impossible to)]421.2 norm1
[(provide a )1(full)0( set of default parameters. Examples of this usage are shown in ){/section-4.3.8 xl}(section 4.3.8){el}(.)]409.2 norm2
[{/section-4.3.6 xa}2(%0)0(: )(Macro Parameter Counter)](4.3.6)388.8 subh3
[(The parameter reference )2(%0)0( will return a numeric constant giving the number of parameters received,)]370.8 norm1
[(that is, if )2(%0)0( is n then )2(%)0(n is the last parameter. )2(%0)0( is mostly useful for macros that can take a variable)]358.8 norm0
[(number of parameters. It can be used as an argument to )2(%rep)0( \(see ){/section-4.5 xl}(section 4.5){el}(\) in order to iterate)]346.8 norm0
[(through all the parameters of a macro. Examples are given in ){/section-4.3.8 xl}(section 4.3.8){el}(.)]334.8 norm2
[{/section-4.3.7 xa}2(%00)0(: )(Label Preceeding Macro)](4.3.7)314.4 subh3
[2(%00)0( will return the label preceeding the macro invocation, if any. The label must be on the same line as)]296.4 norm1
[(the macro invocation, may be a local label \(see ){/section-3.9 xl}(section 3.9){el}(\), and need not end in a colon.)]284.4 norm2
[(If )2(%00)0( is present anywhere in the macro body, the label itself will not be emitted by NASM. You can, of)]266.4 norm1
[(course, put )2(%00:)0( explicitly at the beginning of your macro.)]254.4 norm2
[{/section-4.3.8 xa}2(%rotate)0(: )(Rotating Macro Parameters)](4.3.8)234 subh3
[(Unix shell programmers will be familiar with the )2(shift)0( shell command, which allows the arguments)]216 norm1
[(passed to a shell script \(referenced as )2($1)0(, )2($2)0( and so on\) to be moved left by one place, so that the)]204 norm0
[(argument previously referenced as )2($2)0( becomes available as )2($1)0(, and the argument previously)]192 norm0
[(referenced as )2($1)0( is no longer available at all.)]180 norm2
[(NASM provides a similar mechanism, in the form of )2(%rotate)0(. As its name suggests, it differs from the)]162 norm1
[(Unix )2(shift)0( in that no parameters are lost: parameters rotated off the left end of the argument list)]150 norm0
[(reappear on the right, and vice versa.)]138 norm2
[2(%rotate)0( is invoked with a single numeric argument \(which may be an expression\). The macro)]120 norm1
[(parameters are rotated to the left by that many places. If the argument to )2(%rotate)0( is negative, the)]108 norm0
[(macro parameters are rotated to the right.)]96 norm2
[(So a pair of macros to save and restore a set of registers might work as follows:)]78 norm3
(57)pageodd
restore showpage
%%Page: 58 58
%%BeginPageSetup
save
%%EndPageSetup
/58 pa
[2(%macro  multipush 1-* )]710.4 code1
[2()]700.8 code0
[2(  %rep  %0 )]691.2 code0
[2(        push    %1 )]681.6 code0
[2(  %rotate 1 )]672 code0
[2(  %endrep )]662.4 code0
[2()]652.8 code0
[2(%endmacro)]643.2 code2
[(This macro invokes the )2(PUSH)0( instruction on each of its arguments in turn, from left to right. It begins by)]625.2 norm1
[(pushing its first argument, )2(%1)0(, then invokes )2(%rotate)0( to move all the arguments one place to the left, so)]613.2 norm0
[(that the original second argument is now available as )2(%1)0(. Repeating this procedure as many times as)]601.2 norm0
[(there were arguments \(achieved by supplying )2(%0)0( as the argument to )2(%rep)0(\) causes each argument in)]589.2 norm0
[(turn to be pushed.)]577.2 norm2
[(Note also the use of )2(*)0( as the maximum parameter count, indicating that there is no upper limit on the)]559.2 norm1
[(number of parameters you may supply to the )2(multipush)0( macro.)]547.2 norm2
[(It would be convenient, when using this macro, to have a )2(POP)0( equivalent, which )1(didn't)0( require the)]529.2 norm1
[(arguments to be given in reverse order. Ideally, you would write the )2(multipush)0( macro call, then)]517.2 norm0
[(cut-and-paste the line to where the pop needed to be done, and change the name of the called macro)]505.2 norm0
[(to )2(multipop)0(, and the macro would take care of popping the registers in the opposite order from the one)]493.2 norm0
[(in which they were pushed.)]481.2 norm2
[(This can be done by the following definition:)]463.2 norm3
[2(%macro  multipop 1-* )]447.6 code1
[2()]438 code0
[2(  %rep %0 )]428.4 code0
[2(  %rotate -1 )]418.8 code0
[2(        pop     %1 )]409.2 code0
[2(  %endrep )]399.6 code0
[2()]390 code0
[2(%endmacro)]380.4 code2
[(This macro begins by rotating its arguments one place to the )1(right)0(, so that the original )1(last)0( argument)]362.4 norm1
[(appears as )2(%1)0(. This is then popped, and the arguments are rotated right again, so the second-to-last)]350.4 norm0
[(argument becomes )2(%1)0(. Thus the arguments are iterated through in reverse order.)]338.4 norm2
[{/section-4.3.9 xa}(Concatenating Macro Parameters)](4.3.9)318 subh3
[(NASM can concatenate macro parameters and macro indirection constructs on to other text)]300 norm1
[(surrounding them. This allows you to declare a family of symbols, for example, in a macro definition. If,)]288 norm0
[(for example, you wanted to generate a table of key codes along with offsets into the table, you could)]276 norm0
[(code something like)]264 norm2
[2(%macro keytab_entry 2 )]248.4 code1
[2()]238.8 code0
[2(    keypos%1    equ     $-keytab )]229.2 code0
[2(                db      %2 )]219.6 code0
[2()]210 code0
[2(%endmacro )]200.4 code0
[2()]190.8 code0
[2(keytab: )]181.2 code0
[2(          keytab_entry F1,128+1 )]171.6 code0
[2(          keytab_entry F2,128+2 )]162 code0
[2(          keytab_entry Return,13)]152.4 code2
[(which would expand to)]134.4 norm3
[2(keytab: )]118.8 code1
[2(keyposF1        equ     $-keytab )]109.2 code0
[2(                db     128+1 )]99.5999999999996 code0
[2(keyposF2        equ     $-keytab )]89.9999999999995 code0
[2(                db      128+2 )]80.3999999999995 code0
(58)pageeven
restore showpage
%%Page: 59 59
%%BeginPageSetup
save
%%EndPageSetup
/59 pa
[2(keyposReturn    equ     $-keytab )]710.4 code0
[2(                db      13)]700.8 code2
[(You can just as easily concatenate text on to the other end of a macro parameter, by writing )2(%1foo)0(.)]682.8 norm3
[(If you need to append a )1(digit)0( to a macro parameter, for example defining labels )2(foo1)0( and )2(foo2)0( when)]664.8 norm1
[(passed the parameter )2(foo)0(, you can't code )2(%11)0( because that would be taken as the eleventh macro)]652.8 norm0
[(parameter. Instead, you must code )2(%{1}1)0(, which will separate the first )2(1)0( \(giving the number of the)]640.8 norm0
[(macro parameter\) from the second \(literal text to be concatenated to the parameter\).)]628.8 norm2
[(This concatenation can also be applied to other preprocessor in-line objects, such as macro-local)]610.8 norm1
[(labels \(){/section-4.3.2 xl}(section 4.3.2){el}(\) and context-local labels \(){/section-4.7.2 xl}(section 4.7.2){el}(\). In all cases, ambiguities in syntax can be)]598.8 norm0
[(resolved by enclosing everything after the )2(%)0( sign and before the literal text in braces: so )2(%{%foo}bar)]586.8 norm0
[(concatenates the text )2(bar)0( to the end of the real name of the macro-local label )2(%%foo)0(. \(This is)]574.8 norm0
[(unnecessary, since the form NASM uses for the real names of macro-local labels means that the two)]562.8 norm0
[(usages )2(%{%foo}bar)0( and )2(%%foobar)0( would both expand to the same thing anyway; nevertheless, the)]550.8 norm0
[(capability is there.\))]538.8 norm2
[(The single-line macro indirection construct, )2(%[...])0( \(){/section-4.1.3 xl}(section 4.1.3){el}(\), behaves the same way as macro)]520.8 norm1
[(parameters for the purpose of concatenation.)]508.8 norm2
[(See also the )2(%+)0( operator, ){/section-4.1.4 xl}(section 4.1.4){el}(.)]490.8 norm3
[{/section-4.3.10 xa}(Condition Codes as Macro Parameters)](4.3.10)470.4 subh3
[(NASM can give special treatment to a macro parameter which contains a condition code. For a start,)]452.4 norm1
[(you can refer to the macro parameter )2(%1)0( by means of the alternative syntax )2(%+1)0(, which informs NASM)]440.4 norm0
[(that this macro parameter is supposed to contain a condition code, and will cause the preprocessor to)]428.4 norm0
[(report an error message if the macro is called with a parameter which is )1(not)0( a valid condition code.)]416.4 norm2
[(Far more usefully, though, you can refer to the macro parameter by means of )2(%-1)0(, which NASM will)]398.4 norm1
[(expand as the )1(inverse)0( condition code. So the )2(retz)0( macro defined in ){/section-4.3.2 xl}(section 4.3.2){el}( can be replaced by a)]386.4 norm0
[(general )(conditional-return macro like this:)]374.4 norm2
[2(%macro  retc 1 )]358.8 code1
[2()]349.2 code0
[2(        j%-1    %%skip )]339.6 code0
[2(        ret )]330 code0
[2(  %%skip: )]320.4 code0
[2()]310.8 code0
[2(%endmacro)]301.2 code2
[(This macro can now be invoked using calls like )2(retc ne)0(, which will cause the conditional-jump)]283.2 norm1
[(instruction in the macro expansion to come out as )2(JE)0(, or )2(retc po)0( which will make the jump a )2(JPE)0(.)]271.2 norm2
[(The )2(%+1)0( macro-parameter reference is quite happy to interpret the arguments )2(CXZ)0( and )2(ECXZ)0( as valid)]253.2 norm1
[(condition codes; however, )2(%-1)0( will report an error if passed either of these, because no inverse)]241.2 norm0
[(condition code exists.)]229.2 norm2
[{/section-4.3.11 xa}(Disabling Listing Expansion)](4.3.11)208.8 subh3
[(When NASM is generating a listing file from your program, it will generally expand multi-line macros by)]190.8 norm1
[(means of writing the macro call and then listing each line of the expansion. This allows you to see)]178.8 norm0
[(which instructions in the macro expansion are generating what code; however, for some macros this)]166.8 norm0
[(clutters the listing up unnecessarily.)]154.8 norm2
[(NASM therefore provides the )2(.nolist)0( qualifier, which you can include in a macro definition to inhibit)]136.8 norm1
[(the expansion of the macro in the listing file. The )2(.nolist)0( qualifier comes directly after the number of)]124.8 norm0
[(parameters, like this:)]112.8 norm2
[2(%macro foo 1.nolist)]97.1999999999998 code3
[(Or like this:)]79.1999999999998 norm3
(59)pageodd
restore showpage
%%Page: 60 60
%%BeginPageSetup
save
%%EndPageSetup
/60 pa
[2(%macro bar 1-5+.nolist a,b,c,d,e,f,g,h)]710.4 code3
[{/section-4.3.12 xa}(Undefining Multi-Line Macros: )2(%unmacro)](4.3.12)690 subh3
[(Multi-line macros can be removed with the )2(%unmacro)0( directive. Unlike the )2(%undef)0( directive, however,)]672 norm1
[2(%unmacro)0( takes an argument specification, and will only remove )(exact matches with that argument)]660 norm0
[(specification.)]648 norm2
[(For example:)]630 norm3
[2(%macro foo 1-3 )]614.4 code1
[2(        ; Do something )]604.8 code0
[2(%endmacro )]595.2 code0
[2(%unmacro foo 1-3)]585.6 code2
[(removes the previously defined macro )2(foo)0(, but)]567.6 norm3
[2(%macro bar 1-3 )]552 code1
[2(        ; Do something )]542.4 code0
[2(%endmacro )]532.8 code0
[2(%unmacro bar 1)]523.2 code2
[(does )1(not)0( remove the macro )2(bar)0(, since the argument specification does not match exactly.)]505.2 norm3
[{/section-4.4 xa}(Conditional Assembly)](4.4)482.4 head3
[(Similarly to the C preprocessor, NASM allows sections of a source file to be assembled only if certain)]464.4 norm1
[(conditions are met. The general syntax of this feature looks like this:)]452.4 norm2
[2(%if<condition> )]436.8 code1
[2(    ; some code which only appears if <condition> is met )]427.2 code0
[2(%elif<condition2> )]417.6 code0
[2(    ; only appears if <condition> is not met but <condition2> is )]408 code0
[2(%else )]398.4 code0
[2(    ; this appears if neither <condition> nor <condition2> was met )]388.8 code0
[2(%endif)]379.2 code2
[(The inverse forms )2(%ifn)0( and )2(%elifn)0( are also supported.)]361.2 norm3
[(The )2(%else)0( clause is optional, as is the )2(%elif)0( clause. You can have more than one )2(%elif)0( clause as well.)]343.2 norm3
[(There are a number of variants of the )2(%if)0( directive. Each has its corresponding )2(%elif)0(, )2(%ifn)0(, and )2(%elifn)]325.2 norm1
[(directives; for example, the equivalents to the )2(%ifdef)0( directive are )2(%elifdef)0(, )2(%ifndef)0(, and )2(%elifndef)0(.)]313.2 norm2
[{/section-4.4.1 xa}2(%ifdef)0(: Testing Single-Line Macro Existence)](4.4.1)292.8 subh3
[(Beginning a conditional-assembly block with the line )2(%ifdef MACRO)0( will assemble the subsequent code)]274.8 norm1
[(if, and only if, a single-line macro called )2(MACRO)0( is defined. If not, then the )2(%elif)0( and )2(%else)0( blocks \(if any\))]262.8 norm0
[(will be processed instead.)]250.8 norm2
[(For example, when debugging a program, you might want to write code such as)]232.8 norm3
[2(          ; perform some function )]217.2 code1
[2(%ifdef DEBUG )]207.6 code0
[2(          writefile 2,"Function performed successfully",13,10 )]198 code0
[2(%endif )]188.4 code0
[2(          ; go and do something else)]178.8 code2
[(Then you could use the command-line option )2(-dDEBUG)0( to create a version of the program which)]160.8 norm1
[(produced debugging messages, and remove the option to generate the final release version of the)]148.8 norm0
[(program.)]136.8 norm2
[(You can test for a macro )1(not)0( being defined by using )2(%ifndef)0( instead of )2(%ifdef)0(. You can also test for)]118.8 norm1
[(macro definitions in )2(%elif)0( blocks by using )2(%elifdef)0( and )2(%elifndef)0(.)]106.8 norm2
(60)pageeven
restore showpage
%%Page: 61 61
%%BeginPageSetup
save
%%EndPageSetup
/61 pa
[{/section-4.4.2 xa}2(%ifmacro)0(: Testing Multi-Line Macro Existence)](4.4.2)705.6 subh3
[(The )2(%ifmacro)0( directive operates in the same way as the )2(%ifdef)0( directive, except that it checks for the)]687.6 norm1
[(existence of a multi-line macro.)]675.6 norm2
[(For example, you may be working with a large project and not have control over the macros in a library.)]657.6 norm1
[(You may want to create a macro with one name if it doesn't already exist, and another name if one with)]645.6 norm0
[(that name does exist.)]633.6 norm2
[(The )2(%ifmacro)0( is considered true if defining a macro with the given name and number of arguments)]615.6 norm1
[(would cause a definitions conflict. For example:)]603.6 norm2
[2(%ifmacro MyMacro 1-3 )]588 code1
[2()]578.4 code0
[2(     %error "MyMacro 1-3" causes a conflict with an existing macro. )]568.8 code0
[2()]559.2 code0
[2(%else )]549.6 code0
[2()]540 code0
[2(     %macro MyMacro 1-3 )]530.4 code0
[2()]520.8 code0
[2(             ; insert code to define the macro )]511.2 code0
[2()]501.6 code0
[2(     %endmacro )]492 code0
[2()]482.4 code0
[2(%endif)]472.8 code2
[(This will create the macro "MyMacro 1-3" if no macro already exists which would conflict with it, and)]454.8 norm1
[(emits a warning if there would be a definition conflict.)]442.8 norm2
[(You can test for the macro not existing by using the )2(%ifnmacro)0( instead of )2(%ifmacro)0(. Additional tests can)]424.8 norm1
[(be performed in )2(%elif)0( blocks by using )2(%elifmacro)0( and )2(%elifnmacro)0(.)]412.8 norm2
[{/section-4.4.3 xa}2(%ifctx)0(: Testing the Context Stack)](4.4.3)392.4 subh3
[(The conditional-assembly construct )2(%ifctx)0( will cause the subsequent code to be assembled if and only)]374.4 norm1
[(if the top context on the preprocessor's context stack has the same name as one of the arguments. As)]362.4 norm0
[(with )2(%ifdef)0(, the inverse and )2(%elif)0( forms )2(%ifnctx)0(, )2(%elifctx)0( and )2(%elifnctx)0( are also supported.)]350.4 norm2
[(For more details of the context stack, see ){/section-4.7 xl}(section 4.7){el}(. For a sample use of )2(%ifctx)0(, see ){/section-4.7.6 xl}(section 4.7.6){el}(.)]332.4 norm3
[{/section-4.4.4 xa}2(%if)0(: Testing Arbitrary Numeric Expressions)](4.4.4)312 subh3
[(The conditional-assembly construct )2(%if expr)0( will cause the subsequent code to be assembled if and)]294 norm1
[(only if the value of the numeric expression )2(expr)0( is non-zero. An example of the use of this feature is in)]282 norm0
[(deciding when to break out of a )2(%rep)0( preprocessor loop: see ){/section-4.5 xl}(section 4.5){el}( for a detailed example.)]270 norm2
[(The expression given to )2(%if)0(, and its counterpart )2(%elif)0(, is a critical expression \(see ){/section-3.8 xl}(section 3.8){el}(\).)]252 norm3
[(Like other )2(%if)0( constructs, )2(%if)0( has a counterpart )2(%elif)0(, and negative forms )2(%ifn)0( and )2(%elifn)0(.)]234 norm3
[{/section-4.4.5 xa}2(%ifidn)0( and )2(%ifidni)0(: Testing Exact Text Identity)](4.4.5)213.6 subh3
[(The construct )2(%ifidn text1,text2)0( will cause the subsequent code to be assembled if and only if )2(text1)]195.6 norm1
[(and )2(text2)0(, after expanding single-line macros, are identical pieces of text. Differences in white space)]183.6 norm0
[(are not counted.)]171.6 norm2
[2(%ifidni)0( is similar to )2(%ifidn)0(, but is )(case-insensitive.)]153.6 norm3
[(For example, the following macro pushes a register or number on the stack, and allows you to treat )2(IP)]135.6 norm1
[(as a real register:)]123.6 norm2
[2(%macro  pushparam 1 )]108 code1
[2()]98.4000000000001 code0
[2(  %ifidni %1,ip )]88.8000000000001 code0
[2(        call    %%label )]79.2 code0
(61)pageodd
restore showpage
%%Page: 62 62
%%BeginPageSetup
save
%%EndPageSetup
/62 pa
[2(  %%label: )]710.4 code0
[2(  %else )]700.8 code0
[2(        push    %1 )]691.2 code0
[2(  %endif )]681.6 code0
[2()]672 code0
[2(%endmacro)]662.4 code2
[(Like other )2(%if)0( constructs, )2(%ifidn)0( has a counterpart )2(%elifidn)0(, and negative forms )2(%ifnidn)0( and)]644.4 norm1
[2(%elifnidn)0(. Similarly, )2(%ifidni)0( has counterparts )2(%elifidni)0(, )2(%ifnidni)0( and )2(%elifnidni)0(.)]632.4 norm2
[{/section-4.4.6 xa}2(%ifid)0(, )2(%ifnum)0(, )2(%ifstr)0(: Testing Token Types)](4.4.6)612 subh3
[(Some macros will want to perform different tasks depending on whether they are passed a number, a)]594 norm1
[(string, or an identifier. For example, a string output macro might want to be able to cope with being)]582 norm0
[(passed either a string constant or a pointer to an existing string.)]570 norm2
[(The conditional assembly construct )2(%ifid)0(, taking one parameter \(which may be blank\), assembles the)]552 norm1
[(subsequent code if and only if the first token in the parameter exists and is an identifier. )2(%ifnum)0( works)]540 norm0
[(similarly, but tests for the token being a numeric constant; )2(%ifstr)0( tests for it being a string.)]528 norm2
[(For example, the )2(writefile)0( macro defined in ){/section-4.3.3 xl}(section 4.3.3){el}( can be extended to take advantage of)]510 norm1
[2(%ifstr)0( in the following fashion:)]498 norm2
[2(%macro writefile 2-3+ )]482.4 code1
[2()]472.8 code0
[2(  %ifstr %2 )]463.2 code0
[2(        jmp     %%endstr )]453.6 code0
[2(    %if %0 = 3 )]444 code0
[2(      %%str:    db      %2,%3 )]434.4 code0
[2(    %else )]424.8 code0
[2(      %%str:    db      %2 )]415.2 code0
[2(    %endif )]405.6 code0
[2(      %%endstr: mov     dx,%%str )]396 code0
[2(                mov     cx,%%endstr-%%str )]386.4 code0
[2(  %else )]376.8 code0
[2(                mov     dx,%2 )]367.2 code0
[2(                mov     cx,%3 )]357.6 code0
[2(  %endif )]348 code0
[2(                mov     bx,%1 )]338.4 code0
[2(                mov     ah,0x40 )]328.8 code0
[2(                int     0x21 )]319.2 code0
[2()]309.6 code0
[2(%endmacro)]300 code2
[(Then the )2(writefile)0( macro can cope with being called in either of the following two ways:)]282 norm3
[2(        writefile [file], strpointer, length )]266.4 code1
[2(        writefile [file], "hello", 13, 10)]256.8 code2
[(In the first, )2(strpointer)0( is used as the address of an already-declared string, and )2(length)0( is used as its)]238.8 norm1
[(length; in the second, a string is given to the macro, which therefore declares it itself and works out the)]226.8 norm0
[(address and length for itself.)]214.8 norm2
[(Note the use of )2(%if)0( inside the )2(%ifstr)0(: this is to detect whether the macro was passed two arguments)]196.799999999999 norm1
[(\(so the string would be a single string constant, and )2(db %2)0( would be adequate\) or more \(in which case,)]184.799999999999 norm0
[(all but the first two would be lumped together into )2(%3)0(, and )2(db %2,%3)0( would be required\).)]172.799999999999 norm2
[(The usual )2(%elif)0(..., )2(%ifn)0(..., and )2(%elifn)0(... versions exist for each of )2(%ifid)0(, )2(%ifnum)0( and )2(%ifstr)0(.)]154.799999999999 norm3
[{/section-4.4.7 xa}2(%iftoken)0(: Test for a Single Token)](4.4.7)134.4 subh3
[(Some macros will want to do different things depending on if it is passed a single token \(e.g. paste it to)]116.4 norm1
[(something else using )2(%+)0(\) versus a multi-token sequence.)]104.4 norm2
[(The conditional assembly construct )2(%iftoken)0( assembles the subsequent code if and only if the)]86.3999999999995 norm1
[(expanded parameters consist of exactly one token, possibly surrounded by whitespace.)]74.3999999999995 norm2
(62)pageeven
restore showpage
%%Page: 63 63
%%BeginPageSetup
save
%%EndPageSetup
/63 pa
[(For example:)]708 norm3
[2(%iftoken 1)]692.4 code3
[(will assemble the subsequent code, but)]674.4 norm3
[2(%iftoken -1)]658.8 code3
[(will not, since )2(-1)0( contains two tokens: the unary minus operator )2(-)0(, and the number )2(1)0(.)]640.8 norm3
[(The usual )2(%eliftoken)0(, )2(%ifntoken)0(, and )2(%elifntoken)0( variants are also provided.)]622.8 norm3
[{/section-4.4.8 xa}2(%ifempty)0(: Test for Empty Expansion)](4.4.8)602.4 subh3
[(The conditional assembly construct )2(%ifempty)0( assembles the subsequent code if and only if the)]584.4 norm1
[(expanded parameters do not contain any tokens at all, whitespace excepted.)]572.4 norm2
[(The usual )2(%elifempty)0(, )2(%ifnempty)0(, and )2(%elifnempty)0( variants are also provided.)]554.4 norm3
[{/section-4.4.9 xa}2(%ifenv)0(: Test If Environment Variable Exists)](4.4.9)534 subh3
[(The conditional assembly construct )2(%ifenv)0( assembles the subsequent code if and only if the)]516 norm1
[(environment variable referenced by the )2(%!)1(variable)0( directive exists.)]504 norm2
[(The usual )2(%elifenv)0(, )2(%ifnenv)0(, and )2(%elifnenv)0( variants are also provided.)]486 norm3
[(Just as for )2(%!)1(variable)0( the argument should be written as a string if it contains characters that would not)]468 norm1
[(be legal in an identifier. See ){/section-4.11.2 xl}(section 4.11.2){el}(.)]456 norm2
[{/section-4.5 xa}(Preprocessor Loops)(: )2(%rep)](4.5)433.2 head3
[(NASM's )2(TIMES)0( prefix, though useful, cannot be used to invoke a multi-line macro multiple times,)]415.2 norm1
[(because it is processed by NASM after macros have already been expanded. Therefore NASM provides)]403.2 norm0
[(another form of loop, this time at the preprocessor level: )2(%rep)0(.)]391.2 norm2
[(The directives )2(%rep)0( and )2(%endrep)0( \()2(%rep)0( takes a numeric argument, which can be an expression; )2(%endrep)]373.2 norm1
[(takes no arguments\) can be used to enclose a chunk of code, which is then replicated as many times as)]361.2 norm0
[(specified by the preprocessor:)]349.2 norm2
[2(%assign i 0 )]333.6 code1
[2(%rep    64 )]324 code0
[2(        inc     word [table+2*i] )]314.4 code0
[2(%assign i i+1 )]304.8 code0
[2(%endrep)]295.2 code2
[(This will generate a sequence of 64 )2(INC)0( instructions, incrementing every word of memory from )2([table])]277.2 norm1
[(to )2([table+126])0(.)]265.2 norm2
[(For more complex termination conditions, or to break out of a repeat loop part way along, you can use)]247.2 norm1
[(the )2(%exitrep)0( directive to terminate the loop, like this:)]235.2 norm2
[2(fibonacci: )]219.6 code1
[2(%assign i 0 )]210 code0
[2(%assign j 1 )]200.4 code0
[2(%rep 100 )]190.8 code0
[2(%if j > 65535 )]181.2 code0
[2(    %exitrep )]171.6 code0
[2(%endif )]162 code0
[2(        dw j )]152.4 code0
[2(%assign k j+i )]142.8 code0
[2(%assign i j )]133.2 code0
[2(%assign j k )]123.6 code0
[2(%endrep )]114 code0
[2()]104.4 code0
[2(fib_number equ \($-fibonacci\)/2)]94.7999999999996 code2
(63)pageodd
restore showpage
%%Page: 64 64
%%BeginPageSetup
save
%%EndPageSetup
/64 pa
[(This produces a list of all the Fibonacci numbers that will fit in 16 bits. Note that a maximum repeat)]708 norm1
[(count must still be given to )2(%rep)0(. This is to prevent the possibility of NASM getting into an infinite loop)]696 norm0
[(in the preprocessor, which \(on multitasking or multi-user systems\) would typically cause all the system)]684 norm0
[(memory to be gradually used up and other applications to start crashing.)]672 norm2
[(Note the maximum repeat count is limited to the value specified by the )2(--limit-rep)0( option or)]654 norm1
[2(%pragma limit rep)0(, see ){/section-2.1.31 xl}(section 2.1.31){el}(.)]642 norm2
[{/section-4.6 xa}(Source Files and Dependencies)](4.6)619.2 head3
[(These commands allow you to split your sources into multiple files.)]601.2 norm3
[{/section-4.6.1 xa}2(%include)0(: )(Including Other Files)](4.6.1)580.8 subh3
[(Using, once again, a very similar syntax to the C preprocessor, NASM's preprocessor lets you include)]562.8 norm1
[(other source files into your code. This is done by the use of the )2(%include)0( directive:)]550.8 norm2
[2(%include "macros.mac")]535.2 code3
[(will include the contents of the file )2(macros.mac)0( into the source file containing the )2(%include)0( directive.)]517.2 norm3
[(Include files are )(searched for in the current directory \(the directory you're in when you run NASM, as)]499.2 norm1
[(opposed to the location of the NASM executable or the location of the source file\), plus any directories)]487.2 norm0
[(specified on the NASM command line using the )2(-i)0( option.)]475.2 norm2
[(The standard C idiom for preventing a file being included more than once is just as applicable in NASM:)]457.2 norm1
[(if the file )2(macros.mac)0( has the form)]445.2 norm2
[2(%ifndef MACROS_MAC )]429.6 code1
[2(    %define MACROS_MAC )]420 code0
[2(    ; now define some macros )]410.4 code0
[2(%endif)]400.8 code2
[(then including the file more than once will not cause errors, because the second time the file is)]382.8 norm1
[(included nothing will happen because the macro )2(MACROS_MAC)0( will already be defined.)]370.8 norm2
[(You can force a file to be included even if there is no )2(%include)0( directive that explicitly includes it, by)]352.8 norm1
[(using the )2(-p)0( option on the NASM command line \(see ){/section-2.1.19 xl}(section 2.1.19){el}(\).)]340.8 norm2
[{/section-4.6.2 xa}2(%pathsearch)0(: Search the Include Path)](4.6.2)320.4 subh3
[(The )2(%pathsearch)0( directive takes a single-line macro name and a filename, and declare or redefines the)]302.4 norm1
[(specified single-line macro to be the include-path-resolved version of the filename, if the file exists)]290.4 norm0
[(\(otherwise, it is passed unchanged.\))]278.4 norm2
[(For example,)]260.4 norm3
[2(%pathsearch MyFoo "foo.bin")]244.8 code3
[(... with )2(-Ibins/)0( in the include path may end up defining the macro )2(MyFoo)0( to be )2("bins/foo.bin")0(.)]226.8 norm3
[{/section-4.6.3 xa}2(%depend)0(: Add Dependent Files)](4.6.3)206.4 subh3
[(The )2(%depend)0( directive takes a filename and adds it to the list of files to be emitted as dependency)]188.4 norm1
[(generation when the )2(-M)0( options and its relatives \(see ){/section-2.1.5 xl}(section 2.1.5){el}(\) are used. It produces no output.)]176.4 norm2
[(This is generally used in conjunction with )2(%pathsearch)0(. For example, a simplified version of the)]158.4 norm1
[(standard macro wrapper for the )2(INCBIN)0( directive looks like:)]146.4 norm2
[2(%imacro incbin 1-2+ 0 )]130.8 code1
[2(%pathsearch dep %1 )]121.2 code0
[2(%depend dep )]111.6 code0
[2(        incbin dep,%2 )]102 code0
[2(%endmacro)]92.3999999999999 code2
(64)pageeven
restore showpage
%%Page: 65 65
%%BeginPageSetup
save
%%EndPageSetup
/65 pa
[(This first resolves the location of the file into the macro )2(dep)0(, then adds it to the dependency lists, and)]708 norm1
[(finally issues the assembler-level )2(INCBIN)0( directive.)]696 norm2
[{/section-4.6.4 xa}2(%use)0(: Include Standard Macro Package)](4.6.4)675.6 subh3
[(The )2(%use)0( directive is similar to )2(%include)0(, but rather than including the contents of a file, it includes a)]657.6 norm1
[(named standard macro package. The standard macro packages are part of NASM, and are described in)]645.6 norm0
[{/chapter-6 xl}(chapter 6){el}(.)]633.6 norm2
[(Unlike the )2(%include)0( directive, package names for the )2(%use)0( directive do not require quotes, but quotes)]615.6 norm1
[(are permitted. In NASM 2.04 and 2.05 the unquoted form would be macro-expanded; this is no longer)]603.6 norm0
[(true. Thus, the following lines are equivalent:)]591.6 norm2
[2(%use altreg )]576 code1
[2(%use 'altreg')]566.4 code2
[(Standard macro packages are protected from multiple inclusion. When a standard macro package is)]548.4 norm1
[(used, a testable single-line macro of the form )2(__?USE_)1(package)2(?__)0( is also defined, see ){/section-5.7 xl}(section 5.7){el}(.)]536.4 norm2
[{/section-4.7 xa}(The )(Context Stack)](4.7)513.6 head3
[(Having labels that are local to a macro definition is sometimes not quite powerful enough: sometimes)]495.6 norm1
[(you want to be able to share labels between several macro calls. An example might be a )2(REPEAT)0( ...)]483.6 norm0
[2(UNTIL)0( loop, in which the expansion of the )2(REPEAT)0( macro would need to be able to refer to a label which)]471.6 norm0
[(the )2(UNTIL)0( macro had defined. However, for such a macro you would also want to be able to nest these)]459.6 norm0
[(loops.)]447.6 norm2
[(NASM provides this level of power by means of a )1(context stack)0(. The preprocessor maintains a stack of)]429.6 norm1
[1(contexts)0(, each of which is characterized by a name. You add a new context to the stack using the )2(%push)]417.6 norm0
[(directive, and remove one using )2(%pop)0(. You can define labels that are local to a particular context on the)]405.6 norm0
[(stack.)]393.6 norm2
[{/section-4.7.1 xa}2(%push)0( and )2(%pop)0(: )(Creating and Removing Contexts)](4.7.1)373.2 subh3
[(The )2(%push)0( directive is used to create a new context and place it on the top of the context stack. )2(%push)]355.2 norm1
[(takes an optional argument, which is the name of the context. For example:)]343.2 norm2
[2(%push    foobar)]327.6 code3
[(This pushes a new context called )2(foobar)0( on the stack. You can have several contexts on the stack with)]309.6 norm1
[(the same name: they can still be distinguished. If no name is given, the context is unnamed \(this is)]297.6 norm0
[(normally used when both the )2(%push)0( and the )2(%pop)0( are inside a single macro definition.\))]285.6 norm2
[(The directive )2(%pop)0(, taking one optional argument, removes the top context from the context stack and)]267.6 norm1
[(destroys it, along with any labels associated with it. If an argument is given, it must match the name of)]255.6 norm0
[(the current context, otherwise it will issue an error.)]243.6 norm2
[{/section-4.7.2 xa}(Context-Local Labels)](4.7.2)223.2 subh3
[(Just as the usage )2(%%foo)0( defines a label which is local to the particular macro call in which it is used, the)]205.2 norm1
[(usage )2(%$foo)0( is used to define a label which is local to the context on the top of the context stack. So the)]193.2 norm0
[2(REPEAT)0( and )2(UNTIL)0( example given above could be implemented by means of:)]181.2 norm2
[2(%macro repeat 0 )]165.6 code1
[2()]156 code0
[2(    %push   repeat )]146.4 code0
[2(    %$begin: )]136.8 code0
[2()]127.2 code0
[2(%endmacro )]117.6 code0
[2()]108 code0
[2(%macro until 1 )]98.3999999999999 code0
[2()]88.7999999999998 code0
[2(        j%-1    %$begin )]79.1999999999998 code0
(65)pageodd
restore showpage
%%Page: 66 66
%%BeginPageSetup
save
%%EndPageSetup
/66 pa
[2(    %pop )]710.4 code0
[2()]700.8 code0
[2(%endmacro)]691.2 code2
[(and invoked by means of, for example,)]673.2 norm3
[2(        mov     cx,string )]657.6 code1
[2(        repeat )]648 code0
[2(        add     cx,3 )]638.4 code0
[2(        scasb )]628.8 code0
[2(        until   e)]619.2 code2
[(which would scan every fourth byte of a string in search of the byte in )2(AL)0(.)]601.2 norm3
[(If you need to define, or access, labels local to the context )1(below)0( the top one on the stack, you can use)]583.2 norm1
[2(%$$foo)0(, or )2(%$$$foo)0( for the context below that, and so on.)]571.2 norm2
[{/section-4.7.3 xa}(Context-Local Single-Line Macros)](4.7.3)550.8 subh3
[(NASM also allows you to define single-line macros which are local to a particular context, in just the)]532.8 norm1
[(same way:)]520.8 norm2
[2(%define %$localmac 3)]505.2 code3
[(will define the single-line macro )2(%$localmac)0( to be local to the top context on the stack. Of course, after)]487.2 norm1
[(a subsequent )2(%push)0(, it can then still be accessed by the name )2(%$$localmac)0(.)]475.2 norm2
[{/section-4.7.4 xa}(Context Fall-Through Lookup )1(\(deprecated\))](4.7.4)454.8 subh3
[(Context fall-through lookup \(automatic searching of outer contexts\) is a feature that was added in)]436.8 norm1
[(NASM version 0.98.03. Unfortunately, this feature is unintuitive and can result in buggy code that would)]424.8 norm0
[(have otherwise been prevented by NASM's error reporting. As a result, this feature has been)]412.8 norm0
[1(deprecated)0(. NASM version 2.09 will issue a warning when usage of this )1(deprecated)0( feature is detected.)]400.8 norm0
[(Starting with NASM version 2.10, usage of this )1(deprecated)0( feature will simply result in an )1(expression)]388.8 norm0
[1(syntax error)0(.)]376.8 norm2
[(An example usage of this )1(deprecated)0( feature follows:)]358.8 norm3
[2(%macro ctxthru 0 )]343.2 code1
[2(%push ctx1 )]333.6 code0
[2(    %assign %$external 1 )]324 code0
[2(        %push ctx2 )]314.4 code0
[2(            %assign %$internal 1 )]304.8 code0
[2(            mov eax, %$external )]295.2 code0
[2(            mov eax, %$internal )]285.6 code0
[2(        %pop )]276 code0
[2(%pop )]266.4 code0
[2(%endmacro)]256.8 code2
[(As demonstrated, )2(%$external)0( is being defined in the )2(ctx1)0( context and referenced within the )2(ctx2)]238.8 norm1
[(context. With context fall-through lookup, referencing an undefined context-local macro like this)]226.8 norm0
[(implicitly searches through all outer contexts until a match is made or isn't found in any context. As a)]214.8 norm0
[(result, )2(%$external)0( referenced within the )2(ctx2)0( context would implicitly use )2(%$external)0( as defined in)]202.8 norm0
[2(ctx1)0(. Most people would expect NASM to issue an error in this situation because )2(%$external)0( was never)]190.8 norm0
[(defined within )2(ctx2)0( and also isn't qualified with the proper context depth, )2(%$$external)0(.)]178.8 norm2
[(Here is a revision of the above example with proper context depth:)]160.8 norm3
[2(%macro ctxthru 0 )]145.2 code1
[2(%push ctx1 )]135.6 code0
[2(    %assign %$external 1 )]126 code0
[2(        %push ctx2 )]116.4 code0
[2(            %assign %$internal 1 )]106.8 code0
[2(            mov eax, %$$external )]97.1999999999996 code0
[2(            mov eax, %$internal )]87.5999999999996 code0
[2(        %pop )]77.9999999999995 code0
(66)pageeven
restore showpage
%%Page: 67 67
%%BeginPageSetup
save
%%EndPageSetup
/67 pa
[2(%pop )]710.4 code0
[2(%endmacro)]700.8 code2
[(As demonstrated, )2(%$external)0( is still being defined in the )2(ctx1)0( context and referenced within the )2(ctx2)]682.8 norm1
[(context. However, the reference to )2(%$external)0( within )2(ctx2)0( has been fully qualified with the proper)]670.8 norm0
[(context depth, )2(%$$external)0(, and thus is no longer ambiguous, unintuitive or erroneous.)]658.8 norm2
[{/section-4.7.5 xa}2(%repl)0(: )(Renaming a Context)](4.7.5)638.4 subh3
[(If you need to change the name of the top context on the stack \(in order, for example, to have it)]620.4 norm1
[(respond differently to )2(%ifctx)0(\), you can execute a )2(%pop)0( followed by a )2(%push)0(; but this will have the side)]608.4 norm0
[(effect of destroying all context-local labels and macros associated with the context that was just)]596.4 norm0
[(popped.)]584.4 norm2
[(NASM provides the directive )2(%repl)0(, which )1(replaces)0( a context with a different name, without touching)]566.4 norm1
[(the associated macros and labels. So you could replace the destructive code)]554.4 norm2
[2(%pop )]538.8 code1
[2(%push   newname)]529.2 code2
[(with the non-destructive version )2(%repl newname)0(.)]511.2 norm3
[{/section-4.7.6 xa}(Example Use of the )(Context Stack: )(Block IFs)](4.7.6)490.8 subh3
[(This example makes use of almost all the context-stack features, including the conditional-assembly)]472.8 norm1
[(construct )2(%ifctx)0(, to implement a block IF statement as a set of macros.)]460.8 norm2
[2(%macro if 1 )]445.2 code1
[2()]435.6 code0
[2(    %push if )]426 code0
[2(    j%-1  %$ifnot )]416.4 code0
[2()]406.8 code0
[2(%endmacro )]397.2 code0
[2()]387.6 code0
[2(%macro else 0 )]378 code0
[2()]368.4 code0
[2(  %ifctx if )]358.8 code0
[2(        %repl   else )]349.2 code0
[2(        jmp     %$ifend )]339.6 code0
[2(        %$ifnot: )]330 code0
[2(  %else )]320.4 code0
[2(        %error  "expected `if' before `else'" )]310.8 code0
[2(  %endif )]301.2 code0
[2()]291.6 code0
[2(%endmacro )]282 code0
[2()]272.4 code0
[2(%macro endif 0 )]262.8 code0
[2()]253.2 code0
[2(  %ifctx if )]243.6 code0
[2(        %$ifnot: )]233.999999999999 code0
[2(        %pop )]224.399999999999 code0
[2(  %elifctx      else )]214.799999999999 code0
[2(        %$ifend: )]205.199999999999 code0
[2(        %pop )]195.599999999999 code0
[2(  %else )]185.999999999999 code0
[2(        %error  "expected `if' or `else' before `endif'" )]176.399999999999 code0
[2(  %endif )]166.799999999999 code0
[2()]157.199999999999 code0
[2(%endmacro)]147.599999999999 code2
[(This code is more robust than the )2(REPEAT)0( and )2(UNTIL)0( macros given in ){/section-4.7.2 xl}(section 4.7.2){el}(, because it uses)]129.599999999999 norm1
[(conditional assembly to check that the macros are issued in the right order \(for example, not calling)]117.599999999999 norm0
[2(endif)0( before )2(if)0(\) and issues a )2(%error)0( if they're not.)]105.599999999999 norm2
(67)pageodd
restore showpage
%%Page: 68 68
%%BeginPageSetup
save
%%EndPageSetup
/68 pa
[(In addition, the )2(endif)0( macro has to be able to cope with the two distinct cases of either directly)]708 norm1
[(following an )2(if)0(, or following an )2(else)0(. It achieves this, again, by using conditional assembly to do)]696 norm0
[(different things depending on whether the context on top of the stack is )2(if)0( or )2(else)0(.)]684 norm2
[(The )2(else)0( macro has to preserve the context on the stack, in order to have the )2(%$ifnot)0( referred to by the)]666 norm1
[2(if)0( macro be the same as the one defined by the )2(endif)0( macro, but has to change the context's name so)]654 norm0
[(that )2(endif)0( will know there was an intervening )2(else)0(. It does this by the use of )2(%repl)0(.)]642 norm2
[(A sample usage of these macros might look like:)]624 norm3
[2(        cmp     ax,bx )]608.4 code1
[2()]598.8 code0
[2(        if ae )]589.2 code0
[2(               cmp     bx,cx )]579.6 code0
[2()]570 code0
[2(               if ae )]560.4 code0
[2(                       mov     ax,cx )]550.8 code0
[2(               else )]541.2 code0
[2(                       mov     ax,bx )]531.6 code0
[2(               endif )]522 code0
[2()]512.4 code0
[2(        else )]502.8 code0
[2(               cmp     ax,cx )]493.2 code0
[2()]483.6 code0
[2(               if ae )]474 code0
[2(                       mov     ax,cx )]464.4 code0
[2(               endif )]454.8 code0
[2()]445.2 code0
[2(        endif)]435.6 code2
[(The block-)2(IF)0( macros handle nesting quite happily, by means of pushing another context, describing)]417.6 norm1
[(the inner )2(if)0(, on top of the one describing the outer )2(if)0(; thus )2(else)0( and )2(endif)0( always refer to the last)]405.6 norm0
[(unmatched )2(if)0( or )2(else)0(.)]393.6 norm2
[{/section-4.8 xa}(Stack Relative Preprocessor Directives)](4.8)370.8 head3
[(The following preprocessor directives provide a way to use labels to refer to local variables allocated)]352.8 norm1
[(on the stack.)]340.8 norm2
[2(%arg)0( \(see ){/section-4.8.1 xl}(section 4.8.1){el}(\))]322.8 bull3
[2(%stacksize)0( \(see ){/section-4.8.2 xl}(section 4.8.2){el}(\))]304.8 bull3
[2(%local)0( \(see ){/section-4.8.3 xl}(section 4.8.3){el}(\))]286.8 bull3
[{/section-4.8.1 xa}2(%arg)0( Directive)](4.8.1)266.4 subh3
[(The )2(%arg)0( directive is used to simplify the handling of parameters passed on the stack. Stack based)]248.4 norm1
[(parameter passing is used by many high level languages, including C, C++ and Pascal.)]236.4 norm2
[(While NASM has macros which attempt to duplicate this functionality \(see ){/section-9.4.5 xl}(section 9.4.5){el}(\), the syntax is)]218.4 norm1
[(not particularly convenient to use and is not TASM compatible. Here is an example which shows the use)]206.4 norm0
[(of )2(%arg)0( without any external macros:)]194.4 norm2
[2(some_function: )]178.8 code1
[2()]169.2 code0
[2(    %push     mycontext        ; save the current context )]159.6 code0
[2(    %stacksize large           ; tell NASM to use bp )]150 code0
[2(    %arg      i:word, j_ptr:word )]140.4 code0
[2()]130.8 code0
[2(        mov     ax,[i] )]121.2 code0
[2(        mov     bx,[j_ptr] )]111.6 code0
[2(        add     ax,[bx] )]102 code0
[2(        ret )]92.3999999999999 code0
[2()]82.7999999999998 code0
[2(    %pop                       ; restore original context)]73.1999999999998 code2
(68)pageeven
restore showpage
%%Page: 69 69
%%BeginPageSetup
save
%%EndPageSetup
/69 pa
[(This is similar to the procedure defined in ){/section-9.4.5 xl}(section 9.4.5){el}( and adds the value in i to the value pointed to)]708 norm1
[(by j_ptr and returns the sum in the ax register. See ){/section-4.7.1 xl}(section 4.7.1){el}( for an explanation of )2(push)0( and )2(pop)0( and)]696 norm0
[(the use of context stacks.)]684 norm2
[{/section-4.8.2 xa}2(%stacksize)0( Directive)](4.8.2)663.6 subh3
[(The )2(%stacksize)0( directive is used in conjunction with the )2(%arg)0( \(see ){/section-4.8.1 xl}(section 4.8.1){el}(\) and the )2(%local)0( \(see)]645.6 norm1
[{/section-4.8.3 xl}(section 4.8.3){el}(\) directives. It tells NASM the default size to use for subsequent )2(%arg)0( and )2(%local)0( directives.)]633.6 norm0
[(The )2(%stacksize)0( directive takes one required argument which is one of )2(flat)0(, )2(flat64)0(, )2(large)0( or )2(small)0(.)]621.6 norm2
[2(%stacksize flat)]606 code3
[(This form causes NASM to use stack-based parameter addressing relative to )2(ebp)0( and it assumes that a)]588 norm1
[(near form of call was used to get to this label \(i.e. that )2(eip)0( is on the stack\).)]576 norm2
[2(%stacksize flat64)]560.4 code3
[(This form causes NASM to use stack-based parameter addressing relative to )2(rbp)0( and it assumes that a)]542.4 norm1
[(near form of call was used to get to this label \(i.e. that )2(rip)0( is on the stack\).)]530.4 norm2
[2(%stacksize large)]514.8 code3
[(This form uses )2(bp)0( to do stack-based parameter addressing and assumes that a far form of call was used)]496.8 norm1
[(to get to this address \(i.e. that )2(ip)0( and )2(cs)0( are on the stack\).)]484.8 norm2
[2(%stacksize small)]469.2 code3
[(This form also uses )2(bp)0( to address stack parameters, but it is different from )2(large)0( because it also)]451.2 norm1
[(assumes that the old value of bp is pushed onto the stack \(i.e. it expects an )2(ENTER)0( instruction\). In other)]439.2 norm0
[(words, it expects that )2(bp)0(, )2(ip)0( and )2(cs)0( are on the top of the stack, underneath any local space which may)]427.2 norm0
[(have been allocated by )2(ENTER)0(. This form is probably most useful when used in combination with the)]415.2 norm0
[2(%local)0( directive \(see ){/section-4.8.3 xl}(section 4.8.3){el}(\).)]403.2 norm2
[{/section-4.8.3 xa}2(%local)0( Directive)](4.8.3)382.8 subh3
[(The )2(%local)0( directive is used to simplify the use of local temporary stack variables allocated in a stack)]364.8 norm1
[(frame. Automatic local variables in C are an example of this kind of variable. The )2(%local)0( directive is)]352.8 norm0
[(most useful when used with the )2(%stacksize)0( \(see ){/section-4.8.2 xl}(section 4.8.2){el}( and is also compatible with the )2(%arg)]340.8 norm0
[(directive \(see ){/section-4.8.1 xl}(section 4.8.1){el}(\). It allows simplified reference to variables on the stack which have been)]328.8 norm0
[(allocated typically by using the )2(ENTER)0( instruction. An example of its use is the following:)]316.8 norm2
[2(silly_swap: )]301.2 code1
[2()]291.6 code0
[2(    %push mycontext             ; save the current context )]282 code0
[2(    %stacksize small            ; tell NASM to use bp )]272.4 code0
[2(    %assign %$localsize 0       ; see text for explanation )]262.8 code0
[2(    %local old_ax:word, old_dx:word )]253.2 code0
[2()]243.6 code0
[2(        enter   %$localsize,0   ; see text for explanation )]234 code0
[2(        mov     [old_ax],ax     ; swap ax & bx )]224.4 code0
[2(        mov     [old_dx],dx     ; and swap dx & cx )]214.8 code0
[2(        mov     ax,bx )]205.2 code0
[2(        mov     dx,cx )]195.6 code0
[2(        mov     bx,[old_ax] )]186 code0
[2(        mov     cx,[old_dx] )]176.4 code0
[2(        leave                   ; restore old bp )]166.8 code0
[2(        ret                     ; )]157.2 code0
[2()]147.6 code0
[2(    %pop                        ; restore original context)]138 code2
[(The )2(%$localsize)0( variable is used internally by the )2(%local)0( directive and )1(must)0( be defined within the)]120 norm1
[(current context before the )2(%local)0( directive may be used. Failure to do so will result in one expression)]108 norm0
[(syntax error for each )2(%local)0( variable declared. It then may be used in the construction of an)]95.9999999999997 norm0
[(appropriately sized ENTER instruction as shown in the example.)]83.9999999999997 norm2
(69)pageodd
restore showpage
%%Page: 70 70
%%BeginPageSetup
save
%%EndPageSetup
/70 pa
[{/section-4.9 xa}(Reporting )(User-Defined Errors: )2(%error)0(, )2(%warning)0(, )2(%fatal)](4.9)703.2 head3
[(The preprocessor directive )2(%error)0( will cause NASM to report an error if it occurs in assembled code. So)]685.2 norm1
[(if other users are going to try to assemble your source files, you can ensure that they define the right)]673.2 norm0
[(macros by means of code like this:)]661.2 norm2
[2(%ifdef F1 )]645.6 code1
[2(    ; do some setup )]636 code0
[2(%elifdef F2 )]626.4 code0
[2(    ; do some different setup )]616.8 code0
[2(%else )]607.2 code0
[2(    %error "Neither F1 nor F2 was defined." )]597.6 code0
[2(%endif)]588 code2
[(Then any user who fails to understand the way your code is supposed to be assembled will be quickly)]570 norm1
[(warned of their mistake, rather than having to wait until the program crashes on being run and then)]558 norm0
[(not knowing what went wrong.)]546 norm2
[(Similarly, )2(%warning)0( issues a warning, but allows assembly to continue:)]528 norm3
[2(%ifdef F1 )]512.4 code1
[2(    ; do some setup )]502.8 code0
[2(%elifdef F2 )]493.2 code0
[2(    ; do some different setup )]483.6 code0
[2(%else )]474 code0
[2(    %warning "Neither F1 nor F2 was defined, assuming F1." )]464.4 code0
[2(    %define F1 )]454.8 code0
[2(%endif)]445.2 code2
[2(%error)0( and )2(%warning)0( are issued only on the final assembly pass. This makes them safe to use in)]427.2 norm1
[(conjunction with tests that depend on symbol values.)]415.2 norm2
[2(%fatal)0( terminates assembly immediately, regardless of pass. This is useful when there is no point in)]397.2 norm1
[(continuing the assembly further, and doing so is likely just going to cause a spew of confusing error)]385.2 norm0
[(messages.)]373.2 norm2
[(It is optional for the message string after )2(%error)0(, )2(%warning)0( or )2(%fatal)0( to be quoted. If it is )1(not)0(, then)]355.2 norm1
[(single-line macros are expanded in it, which can be used to display more information to the user. For)]343.2 norm0
[(example:)]331.2 norm2
[2(%if foo > 64 )]315.6 code1
[2(    %assign foo_over foo-64 )]306 code0
[2(    %error foo is foo_over bytes too large )]296.4 code0
[2(%endif)]286.8 code2
[{/section-4.10 xa}2(%pragma)0(: Setting Options)](4.10)264 head3
[(The )2(%pragma)0( directive controls a number of options in NASM. Pragmas are intended to remain)]246 norm1
[(backwards compatible, and therefore an unknown )2(%pragma)0( directive is not an error.)]234 norm2
[(The various pragmas are documented with the options they affect.)]216 norm3
[(The general structure of a NASM pragma is:)]198 norm3
[2(%pragma)0( )1(namespace)0( )1(directive)0( [)1(arguments...)0(])]180 norm3
[(Currently defined namespaces are:)]162 norm3
[2(ignore)0(: this )2(%pragma)0( is unconditionally ignored.)]144 bull3
[2(preproc)0(: preprocessor, see ){/section-4.10.1 xl}(section 4.10.1){el}(.)]126 bull3
[2(limit)0(: resource limits, see ){/section-2.1.31 xl}(section 2.1.31){el}(.)]108 bull3
[2(asm)0(: the parser and assembler proper. Currently no such pragmas are defined.)]90 bull3
[2(list)0(: listing options, see ){/section-2.1.4 xl}(section 2.1.4){el}(.)]72 bull3
(70)pageeven
restore showpage
%%Page: 71 71
%%BeginPageSetup
save
%%EndPageSetup
/71 pa
[2(file)0(: general file handling options. Currently no such pragmas are defined.)]708 bull3
[2(input)0(: input file handling options. Currently no such pragmas are defined.)]690 bull3
[2(output)0(: output format options.)]672 bull3
[2(debug)0(: debug format options.)]654 bull3
[(In addition, the name of any output or debug format, and sometimes groups thereof, also constitue)]636 norm1
[2(%pragma)0( namespaces. The namespaces )2(output)0( and )2(debug)0( simply refer to )1(any)0( output or debug format,)]624 norm0
[(respectively.)]612 norm2
[(For example, to prepend an underscore to global symbols regardless of the output format \(see ){/section-7.10 xl}(section){el}]594 norm1
[{/section-7.10 xl}(7.10){el}(\):)]582 norm2
[2(%pragma output gprefix _)]566.4 code3
[(... whereas to prepend an underscore to global symbols only when the output is either )2(win32)0( or )2(win64)0(:)]548.4 norm3
[2(%pragma win gprefix _)]532.8 code3
[{/section-4.10.1 xa}(Preprocessor Pragmas)](4.10.1)512.4 subh3
[(The only preprocessor )2(%pragma)0( defined in NASM 2.15 is:)]494.4 norm3
[2(%pragma preproc sane_empty_expansion)0(: disables legacy compatibility handling of braceless empty)]476.4 bull1
[(arguments to multi-line macros. See ){/section-4.3 xl}(section 4.3){el}( and ){/section-2.1.26 xl}(section 2.1.26){el}(.)]464.4 bull2
[{/section-4.11 xa}(Other Preprocessor Directives)](4.11)441.6 head3
[{/section-4.11.1 xa}2(%line)0( Directive)](4.11.1)421.2 subh3
[(The )2(%line)0( directive is used to notify NASM that the input line corresponds to a specific line number in)]403.2 norm1
[(another file. Typically this other file would be an original source file, with the current NASM input being)]391.2 norm0
[(the output of a pre-processor. The )2(%line)0( directive allows NASM to output messages which indicate the)]379.2 norm0
[(line number of the original source file, instead of the file that is being read by NASM.)]367.2 norm2
[(This preprocessor directive is not generally used directly by programmers, but may be of interest to)]349.2 norm1
[(preprocessor authors. The usage of the )2(%line)0( preprocessor directive is as follows:)]337.2 norm2
[2(%line nnn[+mmm] [filename])]321.6 code3
[(In this directive, )2(nnn)0( identifies the line of the original source file which this line corresponds to. )2(mmm)0( is an)]303.6 norm1
[(optional parameter which specifies a line increment value; each line of the input file read in is)]291.6 norm0
[(considered to correspond to )2(mmm)0( lines of the original source file. Finally, )2(filename)0( is an optional)]279.6 norm0
[(parameter which specifies the file name of the original source file. It may be a quoted string, in which)]267.6 norm0
[(case any additional argument after the quoted string will be ignored.)]255.6 norm2
[(After reading a )2(%line)0( preprocessor directive, NASM will report all file name and line numbers relative to)]237.6 norm1
[(the values specified therein.)]225.6 norm2
[(If the command line option )2(--no-line)0( is given, all )2(%line)0( directives are ignored. This may be useful for)]207.6 norm1
[(debugging preprocessed code. See ){/section-2.1.33 xl}(section 2.1.33){el}(.)]195.6 norm2
[(Starting in NASM 2.15, )2(%line)0( directives are processed before any other processing takes place.)]177.6 norm3
[(For compatibility with the output from some other preprocessors, including many C preprocessors, a )2(#)]159.6 norm1
[(character followed by whitespace )1(at the very beginning of a line)0( is also treated as a )2(%line)0( directive,)]147.6 norm0
[(except that double quotes surrounding the filename are treated like NASM backquotes, with )2(\\)0(\226escaped)]135.6 norm0
[(sequences decoded.)]123.6 norm2
(71)pageodd
restore showpage
%%Page: 72 72
%%BeginPageSetup
save
%%EndPageSetup
/72 pa
[{/section-4.11.2 xa}2(%!)1(variable)0(: Read an Environment Variable.)](4.11.2)705.6 subh3
[(The )2(%!)1(variable)0( directive makes it possible to read the value of an environment variable at assembly)]687.6 norm1
[(time. This could, for example, be used to store the contents of an environment variable into a string,)]675.6 norm0
[(which could be used at some other point in your code.)]663.6 norm2
[(For example, suppose that you have an environment variable )2(FOO)0(, and you want the contents of )2(FOO)0( to)]645.6 norm1
[(be embedded in your program as a quoted string. You could do that as follows:)]633.6 norm2
[2(%defstr FOO          %!FOO)]618 code3
[(See ){/section-4.1.9 xl}(section 4.1.9){el}( for notes on the )2(%defstr)0( directive.)]600 norm3
[(If the name of the environment variable contains non-identifier characters, you can use string quotes to)]582 norm1
[(surround the name of the variable, for example:)]570 norm2
[2(%defstr C_colon      %!'C:')]554.4 code3
[{/section-4.11.3 xa}2(%clear)0(: Clear All Macro Definitions)](4.11.3)534 subh3
[(The directive )2(%clear)0( clears all definitions of a certain type, )1(including the ones defined by NASM itself.)]516 norm1
[(This can be useful when preprocessing non-NASM code, or to drop backwards compatibility aliases.)]504 norm2
[(The syntax is:)]486 norm3
[2(   %clear [global|context] type...)]470.4 code3
[(... where )2(context)0( indicates that this applies to context-local macros only; the default is )2(global)0(.)]452.4 norm3
[2(type)0( can be one or more of:)]434.4 norm3
[2(define)0( single-line macros)]416.4 bull3
[2(defalias)0( single-line macro aliases \(useful to remove backwards compatibility aliases\))]398.4 bull3
[2(alldefine)0( same as )2(define defalias)]380.4 bull3
[2(macro)0( multi-line macros)]362.4 bull3
[2(all)0( same as )2(alldefine macro)0( \(default\))]344.4 bull3
[(In NASM 2.14 and earlier, only the single syntax )2(%clear)0( was supported, which is equivalent to)]326.4 norm1
[2(%clear global all)0(.)]314.4 norm2
(72)pageeven
restore showpage
%%Page: 73 73
%%BeginPageSetup
save
%%EndPageSetup
/73 pa
[{/chapter-5 xa}(Chapter 5: )(Standard Macros)]698.4 chap3
[(NASM defines a set of standard macros, which are already defined when it starts to process any source)]662.4 norm1
[(file. If you really need a program to be assembled with no pre-defined macros, you can use the )2(%clear)]650.4 norm0
[(directive to empty the preprocessor of everything but context-local preprocessor variables and)]638.4 norm0
[(single-line macros, see ){/section-4.11.3 xl}(section 4.11.3){el}(.)]626.4 norm2
[(Most )(user-level directives \(see ){/chapter-7 xl}(chapter 7){el}(\) are implemented as macros which invoke primitive directives;)]608.4 norm1
[(these are described in ){/chapter-7 xl}(chapter 7){el}(. The rest of the standard macro set is described here.)]596.4 norm2
[(For compability with NASM versions before NASM 2.15, most standard macros of the form )2(__?foo?__)]578.4 norm1
[(have aliases of form )2(__foo__)0( \(see ){/section-4.1.11 xl}(section 4.1.11){el}(\). These can be removed with the directive)]566.4 norm0
[2(%clear defalias)0(.)]554.4 norm2
[{/section-5.1 xa}(NASM Version Macros)](5.1)531.6 head3
[(The single-line macros )2(__?NASM_MAJOR?__)0(, )2(__?NASM_MINOR?__)0(, )2(__?NASM_SUBMINOR?__)0( and)]513.6 norm1
[2(__?NASM_PATCHLEVEL?__)0( expand to the major, minor, subminor and patch level parts of the )(version)]501.6 norm0
[(number of NASM being used. So, under NASM 0.98.32p1 for example, )2(__?NASM_MAJOR?__)0( would be)]489.6 norm0
[(defined to be 0, )2(__?NASM_MINOR?__)0( would be defined as 98, )2(__?NASM_SUBMINOR?__)0( would be defined to)]477.6 norm0
[(32, and )2(__?NASM_PATCHLEVEL?__)0( would be defined as 1.)]465.6 norm2
[(Additionally, the macro )2(__?NASM_SNAPSHOT?__)0( is defined for automatically generated snapshot releases)]447.6 norm1
[1(only)0(.)]435.6 norm2
[{/section-5.1.1 xa}2(__?NASM_VERSION_ID?__)0(: )(NASM Version ID)](5.1.1)415.2 subh3
[(The single-line macro )2(__?NASM_VERSION_ID?__)0( expands to a dword integer representing the full version)]397.2 norm1
[(number of the version of nasm being used. The value is the equivalent to )2(__?NASM_MAJOR?__)0(,)]385.2 norm0
[2(__?NASM_MINOR?__)0(, )2(__?NASM_SUBMINOR?__)0( and )2(__?NASM_PATCHLEVEL?__)0( concatenated to produce a)]373.2 norm0
[(single doubleword. Hence, for 0.98.32p1, the returned number would be equivalent to:)]361.2 norm2
[2(        dd      0x00622001)]345.6 code3
[(or)]327.6 norm3
[2(        db      1,32,98,0)]312 code3
[(Note that the above lines are generate exactly the same code, the second line is used just to give an)]294 norm1
[(indication of the order that the separate values will be present in memory.)]282 norm2
[{/section-5.1.2 xa}2(__?NASM_VER?__)0(: )(NASM Version String)](5.1.2)261.6 subh3
[(The single-line macro )2(__?NASM_VER?__)0( expands to a string which defines the version number of nasm)]243.6 norm1
[(being used. So, under NASM 0.98.32 for example,)]231.6 norm2
[2(        db      __?NASM_VER?__)]216 code3
[(would expand to)]198 norm3
[2(        db      "0.98.32")]182.4 code3
[{/section-5.2 xa}2(__?FILE?__)0( and )2(__?LINE?__)0(: File Name and Line Number)](5.2)159.6 head3
[(Like the C preprocessor, NASM allows the user to find out the file name and line number containing the)]141.6 norm1
[(current instruction. The macro )2(__?FILE?__)0( expands to a string constant giving the name of the current)]129.6 norm0
[(input file \(which may change through the course of assembly if )2(%include)0( directives are used\), and)]117.6 norm0
[2(__?LINE?__)0( expands to a numeric constant giving the current line number in the input file.)]105.6 norm2
[(These macros could be used, for example, to communicate debugging information to a macro, since)]87.6 norm1
[(invoking )2(__?LINE?__)0( inside a macro definition \(either single-line or multi-line\) will return the line)]75.6 norm0
(73)pageodd
restore showpage
%%Page: 74 74
%%BeginPageSetup
save
%%EndPageSetup
/74 pa
[(number of the macro )1(call)0(, rather than )1(definition)0(. So to determine where in a piece of code a crash is)]708 norm0
[(occurring, for example, one could write a routine )2(stillhere)0(, which is passed a line number in )2(EAX)0( and)]696 norm0
[(outputs something like )2(line 155: still here)0(. You could then write a macro:)]684 norm2
[2(%macro  notdeadyet 0 )]668.4 code1
[2()]658.8 code0
[2(        push    eax )]649.2 code0
[2(        mov     eax,__?LINE?__ )]639.6 code0
[2(        call    stillhere )]630 code0
[2(        pop     eax )]620.4 code0
[2()]610.8 code0
[2(%endmacro)]601.2 code2
[(and then pepper your code with calls to )2(notdeadyet)0( until you find the crash point.)]583.2 norm3
[{/section-5.3 xa}2(__?BITS?__)0(: Current Code Generation Mode)](5.3)560.4 head3
[(The )2(__?BITS?__)0( standard macro is updated every time that the BITS mode is set using the )2(BITS XX)0( or)]542.4 norm1
[2([BITS XX])0( directive, where XX is a valid mode number of 16, 32 or 64. )2(__?BITS?__)0( receives the specified)]530.4 norm0
[(mode number and makes it globally available. This can be very useful for those who utilize)]518.4 norm0
[(mode-dependent macros.)]506.4 norm2
[{/section-5.4 xa}2(__?OUTPUT_FORMAT?__)0(: Current Output Format)](5.4)483.6 head3
[(The )2(__?OUTPUT_FORMAT?__)0( standard macro holds the current output format name, as given by the )2(-f)]465.6 norm1
[(option or NASM's default. Type )2(nasm -h)0( for a list.)]453.6 norm2
[2(%ifidn __?OUTPUT_FORMAT?__, win32 )]438 code1
[2( %define NEWLINE 13, 10 )]428.4 code0
[2(%elifidn __?OUTPUT_FORMAT?__, elf32 )]418.8 code0
[2( %define NEWLINE 10 )]409.2 code0
[2(%endif)]399.6 code2
[{/section-5.5 xa}2(__?DEBUG_FORMAT?__)0(: Current Debug Format)](5.5)376.8 head3
[(If debugging information generation is enabled, The )2(__?DEBUG_FORMAT?__)0( standard macro holds the)]358.8 norm1
[(current debug format name as specified by the )2(-F)0( or )2(-g)0( option or the output format default. Type)]346.8 norm0
[2(nasm -f)0( )1(output)0( )2(y)0( for a list.)]334.8 norm2
[2(__?DEBUG_FORMAT?__)0( is not defined if debugging is not enabled, or if the debug format specified is )2(null)0(.)]316.8 norm3
[{/section-5.6 xa}(Assembly Date and Time Macros)](5.6)294 head3
[(NASM provides a variety of macros that represent the timestamp of the assembly session.)]276 norm3
[(The )2(__?DATE?__)0( and )2(__?TIME?__)0( macros give the assembly date and time as strings, in ISO 8601)]258 bull1
[(format \()2("YYYY-MM-DD")0( and )2("HH:MM:SS")0(, respectively.\))]246 bull2
[(The )2(__?DATE_NUM?__)0( and )2(__?TIME_NUM?__)0( macros give the assembly date and time in numeric form;)]228 bull1
[(in the format )2(YYYYMMDD)0( and )2(HHMMSS)0( respectively.)]216 bull2
[(The )2(__?UTC_DATE?__)0( and )2(__?UTC_TIME?__)0( macros give the assembly date and time in universal time)]198 bull1
[(\(UTC\) as strings, in ISO 8601 format \()2("YYYY-MM-DD")0( and )2("HH:MM:SS")0(, respectively.\) If the host)]186 bull0
[(platform doesn't provide UTC time, these macros are undefined.)]174 bull2
[(The )2(__?UTC_DATE_NUM?__)0( and )2(__?UTC_TIME_NUM?__)0( macros give the assembly date and time)]156 bull1
[(universal time \(UTC\) in numeric form; in the format )2(YYYYMMDD)0( and )2(HHMMSS)0( respectively. If the host)]144 bull0
[(platform doesn't provide UTC time, these macros are undefined.)]132 bull2
[(The )2(__?POSIX_TIME?__)0( macro is defined as a number containing the number of seconds since the)]114 bull1
[(POSIX epoch, 1 January 1970 00:00:00 UTC; excluding any leap seconds. This is computed using UTC)]102 bull0
[(time if available on the host platform, otherwise it is computed using the local time as if it was UTC.)]89.9999999999999 bull2
(74)pageeven
restore showpage
%%Page: 75 75
%%BeginPageSetup
save
%%EndPageSetup
/75 pa
[(All instances of time and date macros in the same assembly session produce consistent output. For)]708 norm1
[(example, in an assembly session started at 42 seconds after midnight on January 1, 2010 in Moscow)]696 norm0
[(\(timezone UTC+3\) these macros would have the following values, assuming, of course, a properly)]684 norm0
[(configured environment with a correct clock:)]672 norm2
[2(      __?DATE?__             "2010-01-01" )]656.4 code1
[2(      __?TIME?__             "00:00:42" )]646.8 code0
[2(      __?DATE_NUM?__         20100101 )]637.2 code0
[2(      __?TIME_NUM?__         000042 )]627.6 code0
[2(      __?UTC_DATE?__         "2009-12-31" )]618 code0
[2(      __?UTC_TIME?__         "21:00:42" )]608.4 code0
[2(      __?UTC_DATE_NUM?__     20091231 )]598.8 code0
[2(      __?UTC_TIME_NUM?__     210042 )]589.2 code0
[2(      __?POSIX_TIME?__       1262293242)]579.6 code2
[{/section-5.7 xa}2(__?USE_)1(package)2(?__)0(: Package Include Test)](5.7)556.8 head3
[(When a standard macro package \(see ){/chapter-6 xl}(chapter 6){el}(\) is included with the )2(%use)0( directive \(see ){/section-4.6.4 xl}(section 4.6.4){el}(\), a)]538.8 norm1
[(single-line macro of the form )2(__USE_)1(package)2(__)0( is automatically defined. This allows testing if a)]526.8 norm0
[(particular package is invoked or not.)]514.8 norm2
[(For example, if the )2(altreg)0( package is included \(see ){/section-6.1 xl}(section 6.1){el}(\), then the macro )2(__?USE_ALTREG?__)0( is)]496.8 norm1
[(defined.)]484.8 norm2
[{/section-5.8 xa}2(__?PASS?__)0(: Assembly Pass)](5.8)462 head3
[(The macro )2(__?PASS?__)0( is defined to be )2(1)0( on preparatory passes, and )2(2)0( on the final pass. In)]444 norm1
[(preprocess-only mode, it is set to )2(3)0(, and when running only to generate dependencies \(due to the )2(-M)0( or)]432 norm0
[2(-MG)0( option, see ){/section-2.1.5 xl}(section 2.1.5){el}(\) it is set to )2(0)0(.)]420 norm2
[1(Avoid using this macro if at all possible. It is tremendously easy to generate very strange errors by)]402 norm1
[1(misusing it, and the semantics may change in future versions of NASM.)]390 norm2
[{/section-5.9 xa}(Structure Data Types)](5.9)367.2 head3
[{/section-5.9.1 xa}2(STRUC)0( and )2(ENDSTRUC)0(: )(Declaring Structure Data Types)](5.9.1)346.8 subh3
[(The core of NASM contains no intrinsic means of defining data structures; instead, the preprocessor is)]328.8 norm1
[(sufficiently powerful that data structures can be implemented as a set of macros. The macros )2(STRUC)]316.8 norm0
[(and )2(ENDSTRUC)0( are used to define a structure data type.)]304.8 norm2
[2(STRUC)0( takes one or two parameters. The first parameter is the name of the data type. The second,)]286.8 norm1
[(optional parameter is the base offset of the structure. The name of the data type is defined as a symbol)]274.8 norm0
[(with the value of the base offset, and the name of the data type with the suffix )2(_size)0( appended to it is)]262.8 norm0
[(defined as an )2(EQU)0( giving the size of the structure. Once )2(STRUC)0( has been issued, you are defining the)]250.8 norm0
[(structure, and should define fields using the )2(RESB)0( family of pseudo-instructions, and then invoke)]238.8 norm0
[2(ENDSTRUC)0( to finish the definition.)]226.8 norm2
[(For example, to define a structure called )2(mytype)0( containing a longword, a word, a byte and a string of)]208.8 norm1
[(bytes, you might code)]196.8 norm2
[2(struc   mytype )]181.2 code1
[2()]171.6 code0
[2(  mt_long:      resd    1 )]162 code0
[2(  mt_word:      resw    1 )]152.4 code0
[2(  mt_byte:      resb    1 )]142.8 code0
[2(  mt_str:       resb    32 )]133.2 code0
[2()]123.6 code0
[2(endstruc)]114 code2
[(The above code defines six symbols: )2(mt_long)0( as 0 \(the offset from the beginning of a )2(mytype)0( structure to)]95.9999999999998 norm1
[(the longword field\), )2(mt_word)0( as 4, )2(mt_byte)0( as 6, )2(mt_str)0( as 7, )2(mytype_size)0( as 39, and )2(mytype)0( itself as zero.)]83.9999999999998 norm2
(75)pageodd
restore showpage
%%Page: 76 76
%%BeginPageSetup
save
%%EndPageSetup
/76 pa
[(The reason why the structure type name is defined at zero by default is a side effect of allowing)]708 norm1
[(structures to work with the local label mechanism: if your structure members tend to have the same)]696 norm0
[(names in more than one structure, you can define the above structure like this:)]684 norm2
[2(struc mytype )]668.4 code1
[2()]658.8 code0
[2(  .long:        resd    1 )]649.2 code0
[2(  .word:        resw    1 )]639.6 code0
[2(  .byte:        resb    1 )]630 code0
[2(  .str:         resb    32 )]620.4 code0
[2()]610.8 code0
[2(endstruc)]601.2 code2
[(This defines the offsets to the structure fields as )2(mytype.long)0(, )2(mytype.word)0(, )2(mytype.byte)0( and)]583.2 norm1
[2(mytype.str)0(.)]571.2 norm2
[(NASM, since it has no )1(intrinsic)0( structure support, does not support any form of period notation to refer)]553.2 norm1
[(to the elements of a structure once you have one \(except the above local-label notation\), so code such)]541.2 norm0
[(as )2(mov ax,[mystruc.mt_word])0( is not valid. )2(mt_word)0( is a constant just like any other constant, so the)]529.2 norm0
[(correct syntax is )2(mov ax,[mystruc+mt_word])0( or )2(mov ax,[mystruc+mytype.word])0(.)]517.2 norm2
[(Sometimes you only have the address of the structure displaced by an offset. For example, consider)]499.2 norm1
[(this standard stack frame setup:)]487.2 norm2
[2(push ebp )]471.6 code1
[2(mov ebp, esp )]462 code0
[2(sub esp, 40)]452.4 code2
[(In this case, you could access an element by subtracting the offset:)]434.4 norm3
[2(mov [ebp - 40 + mytype.word], ax)]418.8 code3
[(However, if you do not want to repeat this offset, you can use \22640 as a base offset:)]400.8 norm3
[2(struc mytype, -40)]385.2 code3
[(And access an element this way:)]367.2 norm3
[2(mov [ebp + mytype.word], ax)]351.6 code3
[{/section-5.9.2 xa}2(ISTRUC)0(, )2(AT)0( and )2(IEND)0(: Declaring )(Instances of Structures)](5.9.2)331.2 subh3
[(Having defined a structure type, the next thing you typically want to do is to declare instances of that)]313.2 norm1
[(structure in your data segment. NASM provides an easy way to do this in the )2(ISTRUC)0( mechanism. To)]301.2 norm0
[(declare a structure of type )2(mytype)0( in a program, you code something like this:)]289.2 norm2
[2(mystruc: )]273.6 code1
[2(    istruc mytype )]264 code0
[2()]254.4 code0
[2(        at mt_long, dd      123456 )]244.8 code0
[2(        at mt_word, dw      1024 )]235.2 code0
[2(        at mt_byte, db      'x' )]225.6 code0
[2(        at mt_str,  db      'hello, world', 13, 10, 0 )]216 code0
[2()]206.4 code0
[2(    iend)]196.8 code2
[(The function of the )2(AT)0( macro is to make use of the )2(TIMES)0( prefix to advance the assembly position to the)]178.8 norm1
[(correct point for the specified structure field, and then to declare the specified data. Therefore the)]166.8 norm0
[(structure fields must be declared in the same order as they were specified in the structure definition.)]154.8 norm2
[(If the data to go in a structure field requires more than one source line to specify, the remaining source)]136.8 norm1
[(lines can easily come after the )2(AT)0( line. For example:)]124.8 norm2
[2(        at mt_str,  db      123,134,145,156,167,178,189 )]109.2 code1
[2(                    db      190,100,0)]99.5999999999998 code2
(76)pageeven
restore showpage
%%Page: 77 77
%%BeginPageSetup
save
%%EndPageSetup
/77 pa
[(Depending on personal taste, you can also omit the code part of the )2(AT)0( line completely, and start the)]708 norm1
[(structure field on the next line:)]696 norm2
[2(        at mt_str )]680.4 code1
[2(                db      'hello, world' )]670.8 code0
[2(                db      13,10,0)]661.2 code2
[{/section-5.10 xa}(Alignment Control)](5.10)638.4 head3
[{/section-5.10.1 xa}2(ALIGN)0( and )2(ALIGNB)0(: Code and Data Alignment)](5.10.1)618 subh3
[(The )2(ALIGN)0( and )2(ALIGNB)0( macros provides a convenient way to align code or data on a word, longword,)]600 norm1
[(paragraph or other boundary. \(Some assemblers call this directive )2(EVEN)0(.\) The syntax of the )2(ALIGN)0( and)]588 norm0
[2(ALIGNB)0( macros is)]576 norm2
[2(        align   4               ; align on 4-byte boundary )]560.4 code1
[2(        align   16              ; align on 16-byte boundary )]550.8 code0
[2(        align   8,db 0          ; pad with 0s rather than NOPs )]541.2 code0
[2(        align   4,resb 1        ; align to 4 in the BSS )]531.6 code0
[2(        alignb  4               ; equivalent to previous line)]522 code2
[(Both macros require their first argument to be a power of two; they both compute the number of)]504 norm1
[(additional bytes required to bring the length of the current section up to a multiple of that power of)]492 norm0
[(two, and then apply the )2(TIMES)0( prefix to their second argument to perform the alignment.)]480 norm2
[(If the second argument is not specified, the default for )2(ALIGN)0( is )2(NOP)0(, and the default for )2(ALIGNB)0( is)]462 norm1
[2(RESB 1)0(. So if the second argument is specified, the two macros are equivalent. Normally, you can just)]450 norm0
[(use )2(ALIGN)0( in code and data sections and )2(ALIGNB)0( in BSS sections, and never need the second argument)]438 norm0
[(except for special purposes.)]426 norm2
[2(ALIGN)0( and )2(ALIGNB)0(, being simple macros, perform no error checking: they cannot warn you if their first)]408 norm1
[(argument fails to be a power of two, or if their second argument generates more than one byte of code.)]396 norm0
[(In each of these cases they will silently do the wrong thing.)]384 norm2
[2(ALIGNB)0( \(or )2(ALIGN)0( with a second argument of )2(RESB 1)0(\) can be used within structure definitions:)]366 norm3
[2(struc mytype2 )]350.4 code1
[2()]340.8 code0
[2(  mt_byte: )]331.2 code0
[2(        resb 1 )]321.6 code0
[2(        alignb 2 )]312 code0
[2(  mt_word: )]302.4 code0
[2(        resw 1 )]292.8 code0
[2(        alignb 4 )]283.2 code0
[2(  mt_long: )]273.6 code0
[2(        resd 1 )]264 code0
[2(  mt_str: )]254.4 code0
[2(        resb 32 )]244.8 code0
[2()]235.2 code0
[2(endstruc)]225.6 code2
[(This will ensure that the structure members are sensibly aligned relative to the base of the structure.)]207.6 norm3
[(A final caveat: )2(ALIGN)0( and )2(ALIGNB)0( work relative to the beginning of the )1(section)0(, not the beginning of the)]189.6 norm1
[(address space in the final executable. Aligning to a 16-byte boundary when the section you're in is only)]177.6 norm0
[(guaranteed to be aligned to a 4-byte boundary, for example, is a waste of effort. Again, NASM does not)]165.6 norm0
[(check that the section's alignment characteristics are sensible for the use of )2(ALIGN)0( or )2(ALIGNB)0(.)]153.6 norm2
[(Both )2(ALIGN)0( and )2(ALIGNB)0( do call )2(SECTALIGN)0( macro implicitly. See ){/section-5.10.2 xl}(section 5.10.2){el}( for details.)]135.6 norm3
[(See also the )2(smartalign)0( standard macro package, ){/section-6.2 xl}(section 6.2){el}(.)]117.6 norm3
(77)pageodd
restore showpage
%%Page: 78 78
%%BeginPageSetup
save
%%EndPageSetup
/78 pa
[{/section-5.10.2 xa}2(SECTALIGN)0(: Section Alignment)](5.10.2)705.6 subh3
[(The )2(SECTALIGN)0( macros provides a way to modify alignment attribute of output file section. Unlike the)]687.6 norm1
[2(align=)0( attribute \(which is allowed at section definition only\) the )2(SECTALIGN)0( macro may be used at any)]675.6 norm0
[(time.)]663.6 norm2
[(For example the directive)]645.6 norm3
[2(SECTALIGN 16)]630 code3
[(sets the section alignment requirements to 16 bytes. Once increased it can not be decreased, the)]612 norm1
[(magnitude may grow only.)]600 norm2
[(Note that )2(ALIGN)0( \(see ){/section-5.10.1 xl}(section 5.10.1){el}(\) calls the )2(SECTALIGN)0( macro implicitly so the active section alignment)]582 norm1
[(requirements may be updated. This is by default behaviour, if for some reason you want the )2(ALIGN)0( do)]570 norm0
[(not call )2(SECTALIGN)0( at all use the directive)]558 norm2
[2(SECTALIGN OFF)]542.4 code3
[(It is still possible to turn in on again by)]524.4 norm3
[2(SECTALIGN ON)]508.8 code3
[(Note that )2(SECTALIGN <ON|OFF>)0( affects only the )2(ALIGN)0(/)2(ALIGNB)0( directives, not an explicit )2(SECTALIGN)]490.8 norm1
[(directive.)]478.8 norm2
(78)pageeven
restore showpage
%%Page: 79 79
%%BeginPageSetup
save
%%EndPageSetup
/79 pa
[{/chapter-6 xa}(Chapter 6: )(Standard Macro Packages)]698.4 chap3
[(The )2(%use)0( directive \(see ){/section-4.6.4 xl}(section 4.6.4){el}(\) includes one of the standard macro packages included with the)]662.4 norm1
[(NASM distribution and compiled into the NASM binary. It operates like the )2(%include)0( directive \(see)]650.4 norm0
[{/section-4.6.1 xl}(section 4.6.1){el}(\), but the included contents is provided by NASM itself.)]638.4 norm2
[(The names of standard macro packages are case insensitive and can be quoted or not.)]620.4 norm3
[(As of version 2.15, NASM has )2(%ifusable)0( and )2(%ifusing)0( directives to help the user understand whether)]602.4 norm1
[(an individual package available in this version of NASM \()2(%ifusable)0(\) or a particular package already)]590.4 norm0
[(loaded \()2(%ifusing)0(\).)]578.4 norm2
[{/section-6.1 xa}2(altreg)0(: )(Alternate Register Names)](6.1)555.6 head3
[(The )2(altreg)0( standard macro package provides alternate register names. It provides numeric register)]537.6 norm1
[(names for all registers \(not just )2(R8)0(\226)2(R15)0(\), the Intel-defined aliases )2(R8L)0(\226)2(R15L)0( for the low bytes of register)]525.6 norm0
[(\(as opposed to the NASM/AMD standard names )2(R8B)0(\226)2(R15B)0(\), and the names )2(R0H)0(\226)2(R3H)0( \(by analogy with)]513.6 norm0
[2(R0L)0(\226)2(R3L)0(\) for )2(AH)0(, )2(CH)0(, )2(DH)0(, and )2(BH)0(.)]501.6 norm2
[(Example use:)]483.6 norm3
[2(%use altreg )]468 code1
[2()]458.4 code0
[2(proc: )]448.8 code0
[2(      mov r0l,r3h                    ; mov al,bh )]439.2 code0
[2(      ret)]429.6 code2
[(See also ){/section-12.1 xl}(section 12.1){el}(.)]411.6 norm3
[{/section-6.2 xa}2(smartalign)0(: Smart )2(ALIGN)0( Macro)](6.2)388.8 head3
[(The )2(smartalign)0( standard macro package provides for an )2(ALIGN)0( macro which is more powerful than the)]370.8 norm1
[(default \(and backwards-compatible\) one \(see ){/section-5.10.1 xl}(section 5.10.1){el}(\). When the )2(smartalign)0( package is enabled,)]358.8 norm0
[(when )2(ALIGN)0( is used without a second argument, NASM will generate a sequence of instructions more)]346.8 norm0
[(efficient than a series of )2(NOP)0(. Furthermore, if the padding exceeds a specific threshold, then NASM will)]334.8 norm0
[(generate a jump over the entire padding sequence.)]322.8 norm2
[(The specific instructions generated can be controlled with the new )2(ALIGNMODE)0( macro. This macro takes)]304.8 norm1
[(two parameters: one mode, and an optional jump threshold override. If \(for any reason\) you need to)]292.8 norm0
[(turn off the jump completely just set jump threshold value to \2261 \(or set it to )2(nojmp)0(\). The following)]280.8 norm0
[(modes are possible:)]268.8 norm2
[2(generic)0(: Works on all x86 CPUs and should have reasonable performance. The default jump)]250.8 bull1
[(threshold is 8. This is the default.)]238.8 bull2
[2(nop)0(: Pad out with )2(NOP)0( instructions. The only difference compared to the standard )2(ALIGN)0( macro is)]220.8 bull1
[(that NASM can still jump over a large padding area. The default jump threshold is 16.)]208.8 bull2
[2(k7)0(: Optimize for the AMD K7 \(Athlon/Althon XP\). These instructions should still work on all x86 CPUs.)]190.8 bull1
[(The default jump threshold is 16.)]178.8 bull2
[2(k8)0(: Optimize for the AMD K8 \(Opteron/Althon 64\). These instructions should still work on all x86)]160.8 bull1
[(CPUs. The default jump threshold is 16.)]148.8 bull2
[2(p6)0(: Optimize for Intel CPUs. This uses the long )2(NOP)0( instructions first introduced in Pentium Pro. This)]130.8 bull1
[(is incompatible with all CPUs of family 5 or lower, as well as some VIA CPUs and several)]118.8 bull0
[(virtualization solutions. The default jump threshold is 16.)]106.8 bull2
[(The macro )2(__?ALIGNMODE?__)0( is defined to contain the current alignment mode. A number of other)]88.8 norm1
[(macros beginning with )2(__?ALIGN_)0( are used internally by this macro package.)]76.8 norm2
(79)pageodd
restore showpage
%%Page: 80 80
%%BeginPageSetup
save
%%EndPageSetup
/80 pa
[{/section-6.3 xa}2(fp)0(: Floating-point macros)](6.3)703.2 head3
[(This packages contains the following floating-point convenience macros:)]685.2 norm3
[2(%define Inf             __?Infinity?__ )]669.6 code1
[2(%define NaN             __?QNaN?__ )]660 code0
[2(%define QNaN            __?QNaN?__ )]650.4 code0
[2(%define SNaN            __?SNaN?__ )]640.8 code0
[2()]631.2 code0
[2(%define float8\(x\)       __?float8?__\(x\) )]621.6 code0
[2(%define float16\(x\)      __?float16?__\(x\) )]612 code0
[2(%define bfloat16\(x\)     __?bfloat16?__\(x\) )]602.4 code0
[2(%define float32\(x\)      __?float32?__\(x\) )]592.8 code0
[2(%define float64\(x\)      __?float64?__\(x\) )]583.2 code0
[2(%define float80m\(x\)     __?float80m?__\(x\) )]573.6 code0
[2(%define float80e\(x\)     __?float80e?__\(x\) )]564 code0
[2(%define float128l\(x\)    __?float128l?__\(x\) )]554.4 code0
[2(%define float128h\(x\)    __?float128h?__\(x\))]544.8 code2
[(It also defines the a multi-line macro )2(bf16)0( that can be used in a similar way to the )2(D)1(x)0( directives for the)]526.8 norm1
[(other floating-point numbers:)]514.8 norm2
[2(     bf16 -3.1415, NaN, 2000.0, +Inf)]499.2 code3
[{/section-6.4 xa}2(ifunc)0(: )(Integer functions)](6.4)476.4 head3
[(This package contains a set of macros which implement integer functions. These are actually)]458.4 norm1
[(implemented as special operators, but are most conveniently accessed via this macro package.)]446.4 norm2
[(The macros provided are:)]428.4 norm3
[{/section-6.4.1 xa}(Integer logarithms)](6.4.1)408 subh3
[(These functions calculate the integer logarithm base 2 of their argument, considered as an unsigned)]390 norm1
[(integer. The only differences between the functions is their respective behavior if the argument)]378 norm0
[(provided is not a power of two.)]366 norm2
[(The function )2(ilog2e\(\))0( \(alias )2(ilog2\(\))0(\) generates an error if the argument is not a power of two.)]348 norm3
[(The function )2(ilog2f\(\))0( rounds the argument down to the nearest power of two; if the argument is zero)]330 norm1
[(it returns zero.)]318 norm2
[(The function )2(ilog2c\(\))0( rounds the argument up to the nearest power of two.)]300 norm3
[(The functions )2(ilog2fw\(\))0( \(alias )2(ilog2w\(\))0(\) and )2(ilog2cw\(\))0( generate a warning if the argument is not a)]282 norm1
[(power of two, but otherwise behaves like )2(ilog2f\(\))0( and )2(ilog2c\(\))0(, respectively.)]270 norm2
[{/section-6.5 xa}2(masm)0(: )(MASM compatibility)](6.5)247.2 head3
[(Since version 2.15, NASM has a MASM compatibility package with minimal functionality, as intended to)]229.2 norm1
[(be used primarily with machine-generated code. It does not include any "programmer-friendly")]217.2 norm0
[(shortcuts, nor does it in any way support ASSUME, symbol typing, or MASM-style structures.)]205.2 norm2
[(To enable the package, use the directive:)]187.2 norm3
[2(%use masm)]169.2 norm3
[(Currently, the MASM compatibility package emulates:)]151.2 norm3
[(The )2(FLAT)0( and )2(OFFSET)0( keywords are recognized and ignored.)]133.2 bull3
[(The )2(PTR)0( keyword signifies a memory reference, as if the argument had been put in square brackets:)]115.2 bull3
[2(     mov eax,[foo]               ; memory reference )]99.6 code1
[2(     mov eax,dword ptr foo       ; memory reference )]90 code0
[2(     mov eax,dowrd ptr flat:foo  ; memory reference )]80.4 code0
(80)pageeven
restore showpage
%%Page: 81 81
%%BeginPageSetup
save
%%EndPageSetup
/81 pa
[2(     mov eax,offset foo          ; address )]710.4 code0
[2(     mov eax,foo                 ; address \(ambiguous syntax in MASM\))]700.8 code2
[(The )2(SEGMENT)0( ... )2(ENDS)0( syntax:)]682.8 bull3
[2(   segname SEGMENT )]667.2 code1
[2(       ... )]657.6 code0
[2(   segname ENDS)]648 code2
[(The )2(PROC)0( ... )2(ENDP)0( syntax:)]630 bull3
[2(   procname PROC [FAR] )]614.4 code1
[2(        ... )]604.8 code0
[2(   procname ENDP)]595.2 code2
[2(PROC)0( will also define )2(RET)0( as a macro expanding to either )2(RETF)0( if )2(FAR)0( is specified and )2(RETN)0( otherwise.)]577.2 indt1
[(Any keyword after )2(PROC)0( other than )2(FAR)0( is ignored.)]565.2 indt2
[(The )2(TBYTE)0( keyword as an alias for )2(TWORD)0( \(see ){/section-2.2.7 xl}(section 2.2.7){el}(\).)]547.2 bull3
[(The )2(END)0( directive is ignored.)]529.2 bull3
[(In 64-bit mode relative addressing is the default \()2(DEFAULT REL)0(, see ){/section-7.2.1 xl}(section 7.2.1){el}(\).)]511.2 bull3
[(In addition, NASM now natively supports, regardless of whether this package is used or not:)]493.2 norm3
[2(?)0( and )2(DUP)0( syntax for the )2(DB)0( etc data declaration directives \(see ){/section-3.2.1 xl}(section 3.2.1){el}(\).)]475.2 bull3
[2(displacement[base+index])0( syntax for memory operations, instead of )2([base+index+displacement])0(.)]457.2 bull3
[2(seg:[addr])0( instead of )2([seg:addr])0( syntax.)]439.2 bull3
[(A pure offset can be given to )2(LEA)0( without square brackets:)]421.2 bull3
[2(     lea rax,[foo]               ; standard syntax )]405.6 code1
[2(     lea rax,foo                 ; also accepted)]396 code2
(81)pageodd
restore showpage
%%Page: 82 82
%%BeginPageSetup
save
%%EndPageSetup
/82 pa
(82)pageeven
restore showpage
%%Page: 83 83
%%BeginPageSetup
save
%%EndPageSetup
/83 pa
[{/chapter-7 xa}(Chapter 7: )(Assembler Directives)]698.4 chap3
[(NASM, though it attempts to avoid the bureaucracy of assemblers like MASM and TASM, is nevertheless)]662.4 norm1
[(forced to support a )1(few)0( directives. These are described in this chapter.)]650.4 norm2
[(NASM's directives come in two types: )1(user-level)0( directives and )1(primitive)0( directives. Typically, each)]632.4 norm1
[(directive has a user-level form and a primitive form. In almost all cases, we recommend that users use)]620.4 norm0
[(the user-level forms of the directives, which are implemented as macros which call the primitive forms.)]608.4 norm2
[(Primitive directives are enclosed in square brackets; user-level directives are not.)]590.4 norm3
[(In addition to the universal directives described in this chapter, each object file format can optionally)]572.4 norm1
[(supply extra directives in order to control particular features of that file format. These )1(format-specific)]560.4 norm0
[(directives are documented along with the formats that implement them, in ){/chapter-8 xl}(chapter 8){el}(.)]548.4 norm2
[{/section-7.1 xa}2(BITS)0(: Specifying Target )(Processor Mode)](7.1)525.6 head3
[(The )2(BITS)0( directive specifies whether NASM should generate code )(designed to run on a processor)]507.6 norm1
[(operating in 16-bit mode, 32-bit mode or 64-bit mode. The syntax is )2(BITS XX)0(, where XX is 16, 32 or 64.)]495.6 norm2
[(In most cases, you should not need to use )2(BITS)0( explicitly. The )2(aout)0(, )2(coff)0(, )2(elf*)0(, )2(macho)0(, )2(win32)0( and )2(win64)]477.6 norm1
[(object formats, which are designed for use in 32-bit or 64-bit operating systems, all cause NASM to)]465.6 norm0
[(select 32-bit or 64-bit mode, respectively, by default. The )2(obj)0( object format allows you to specify each)]453.6 norm0
[(segment you define as either )2(USE16)0( or )2(USE32)0(, and NASM will set its operating mode accordingly, so the)]441.6 norm0
[(use of the )2(BITS)0( directive is once again unnecessary.)]429.6 norm2
[(The most likely reason for using the )2(BITS)0( directive is to write 32-bit or 64-bit code in a flat binary file;)]411.6 norm1
[(this is because the )2(bin)0( output format defaults to 16-bit mode in anticipation of it being used most)]399.6 norm0
[(frequently to write DOS )2(.COM)0( programs, DOS )2(.SYS)0( device drivers and boot loader software.)]387.6 norm2
[(The )2(BITS)0( directive can also be used to generate code for a different mode than the standard one for the)]369.6 norm1
[(output format.)]357.6 norm2
[(You do )1(not)0( need to specify )2(BITS 32)0( merely in order to use 32-bit instructions in a 16-bit DOS program; if)]339.6 norm1
[(you do, the assembler will generate incorrect code because it will be writing code targeted at a 32-bit)]327.6 norm0
[(platform, to be run on a 16-bit one.)]315.6 norm2
[(When NASM is in )2(BITS 16)0( mode, instructions which use 32-bit data are prefixed with an 0x66 byte, and)]297.6 norm1
[(those referring to 32-bit addresses have an 0x67 prefix. In )2(BITS 32)0( mode, the reverse is true: 32-bit)]285.6 norm0
[(instructions require no prefixes, whereas instructions using 16-bit data need an 0x66 and those working)]273.6 norm0
[(on 16-bit addresses need an 0x67.)]261.6 norm2
[(When NASM is in )2(BITS 64)0( mode, most instructions operate the same as they do for )2(BITS 32)0( mode.)]243.6 norm1
[(However, there are 8 more general and SSE registers, and 16-bit addressing is no longer supported.)]231.6 norm2
[(The default address size is 64 bits; 32-bit addressing can be selected with the 0x67 prefix. The default)]213.6 norm1
[(operand size is still 32 bits, however, and the 0x66 prefix selects 16-bit operand size. The )2(REX)0( prefix is)]201.6 norm0
[(used both to select 64-bit operand size, and to access the new registers. NASM automatically inserts)]189.6 norm0
[(REX prefixes when necessary.)]177.6 norm2
[(When the )2(REX)0( prefix is used, the processor does not know how to address the AH, BH, CH or DH \(high)]159.6 norm1
[(8-bit legacy\) registers. Instead, it is possible to access the the low 8-bits of the SP, BP SI and DI registers)]147.6 norm0
[(as SPL, BPL, SIL and DIL, respectively; but only when the REX prefix is used.)]135.6 norm2
[(The )2(BITS)0( directive has an exactly equivalent primitive form, )2([BITS 16])0(, )2([BITS 32])0( and )2([BITS 64])0(. The)]117.6 norm1
[(user-level form is a macro which has no function other than to call the primitive form.)]105.6 norm2
[(Note that the space is neccessary, e.g. )2(BITS32)0( will )1(not)0( work!)]87.6 norm3
(83)pageodd
restore showpage
%%Page: 84 84
%%BeginPageSetup
save
%%EndPageSetup
/84 pa
[{/section-7.1.1 xa}2(USE16)0( & )2(USE32)0(: Aliases for BITS)](7.1.1)705.6 subh3
[(The `)2(USE16)0(' and `)2(USE32)0(' directives can be used in place of `)2(BITS 16)0(' and `)2(BITS 32)0(', for compatibility with)]687.6 norm1
[(other assemblers.)]675.6 norm2
[{/section-7.2 xa}2(DEFAULT)0(: Change the assembler defaults)](7.2)652.8 head3
[(The )2(DEFAULT)0( directive changes the assembler defaults. Normally, NASM defaults to a mode where the)]634.8 norm1
[(programmer is expected to explicitly specify most features directly. However, this is occasionally)]622.8 norm0
[(obnoxious, as the explicit form is pretty much the only one one wishes to use.)]610.8 norm2
[(Currently, )2(DEFAULT)0( can set )2(REL)0( & )2(ABS)0( and )2(BND)0( & )2(NOBND)0(.)]592.8 norm3
[{/section-7.2.1 xa}2(REL)0( & )2(ABS)0(: RIP-relative addressing)](7.2.1)572.4 subh3
[(This sets whether registerless instructions in 64-bit mode are )2(RIP)0(\226relative or not. By default, they are)]554.4 norm1
[(absolute unless overridden with the )2(REL)0( specifier \(see ){/section-3.3 xl}(section 3.3){el}(\). However, if )2(DEFAULT REL)0( is specified,)]542.4 norm0
[2(REL)0( is default, unless overridden with the )2(ABS)0( specifier, )1(except when used with an FS or GS segment)]530.4 norm0
[1(override)0(.)]518.4 norm2
[(The special handling of )2(FS)0( and )2(GS)0( overrides are due to the fact that these registers are generally used as)]500.4 norm1
[(thread pointers or other special functions in 64-bit mode, and generating )2(RIP)0(\226relative addresses would)]488.4 norm0
[(be extremely confusing.)]476.4 norm2
[2(DEFAULT REL)0( is disabled with )2(DEFAULT ABS)0(.)]458.4 norm3
[{/section-7.2.2 xa}2(BND)0( & )2(NOBND)0(: )2(BND)0( prefix)](7.2.2)438 subh3
[(If )2(DEFAULT BND)0( is set, all bnd-prefix available instructions following this directive are prefixed with bnd.)]420 norm1
[(To override it, )2(NOBND)0( prefix can be used.)]408 norm2
[2( DEFAULT BND )]392.4 code1
[2(     call foo            ; BND will be prefixed )]382.8 code0
[2(     nobnd call foo      ; BND will NOT be prefixed)]373.2 code2
[2(DEFAULT NOBND)0( can disable )2(DEFAULT BND)0( and then )2(BND)0( prefix will be added only when explicitly specified)]355.2 norm1
[(in code.)]343.2 norm2
[2(DEFAULT BND)0( is expected to be the normal configuration for writing MPX-enabled code.)]325.2 norm3
[{/section-7.3 xa}2(SECTION)0( or )2(SEGMENT)0(: Changing and )(Defining Sections)](7.3)302.4 head3
[(The )2(SECTION)0( directive \()2(SEGMENT)0( is an exactly equivalent synonym\) changes which section of the output)]284.4 norm1
[(file the code you write will be assembled into. In some object file formats, the number and names of)]272.4 norm0
[(sections are fixed; in others, the user may make up as many as they wish. Hence )2(SECTION)0( may)]260.4 norm0
[(sometimes give an error message, or may define a new section, if you try to switch to a section that)]248.4 norm0
[(does not \(yet\) exist.)]236.4 norm2
[(The Unix object formats, and the )2(bin)0( object format \(but see ){/section-8.1.3 xl}(section 8.1.3){el}(\), all support the )(standardized)]218.4 norm1
[(section names )2(.text)0(, )2(.data)0( and )2(.bss)0( for the code, data and uninitialized-data sections. The )2(obj)]206.4 norm0
[(format, by contrast, does not recognize these section names as being special, and indeed will strip off)]194.4 norm0
[(the leading period of any section name that has one.)]182.4 norm2
[{/section-7.3.1 xa}(The )2(__?SECT?__)0( Macro)](7.3.1)162 subh3
[(The )2(SECTION)0( directive is unusual in that its user-level form functions differently from its primitive form.)]144 norm1
[(The primitive form, )2([SECTION xyz])0(, simply switches the current target section to the one given. The)]132 norm0
[(user-level form, )2(SECTION xyz)0(, however, first defines the single-line macro )2(__?SECT?__)0( to be the)]120 norm0
[(primitive )2([SECTION])0( directive which it is about to issue, and then issues it. So the user-level directive)]108 norm2
[2(        SECTION .text)]92.3999999999999 code3
[(expands to the two lines)]74.3999999999999 norm3
(84)pageeven
restore showpage
%%Page: 85 85
%%BeginPageSetup
save
%%EndPageSetup
/85 pa
[2(%define __?SECT?__        [SECTION .text] )]710.4 code1
[2(        [SECTION .text])]700.8 code2
[(Users may find it useful to make use of this in their own macros. For example, the )2(writefile)0( macro)]682.8 norm1
[(defined in ){/section-4.3.3 xl}(section 4.3.3){el}( can be usefully rewritten in the following more sophisticated form:)]670.8 norm2
[2(%macro  writefile 2+ )]655.2 code1
[2()]645.6 code0
[2(        [section .data] )]636 code0
[2()]626.4 code0
[2(  %%str:        db      %2 )]616.8 code0
[2(  %%endstr: )]607.2 code0
[2()]597.6 code0
[2(        __?SECT?__ )]588 code0
[2()]578.4 code0
[2(        mov     dx,%%str )]568.8 code0
[2(        mov     cx,%%endstr-%%str )]559.2 code0
[2(        mov     bx,%1 )]549.6 code0
[2(        mov     ah,0x40 )]540 code0
[2(        int     0x21 )]530.4 code0
[2()]520.8 code0
[2(%endmacro)]511.2 code2
[(This form of the macro, once passed a string to output, first switches temporarily to the data section of)]493.2 norm1
[(the file, using the primitive form of the )2(SECTION)0( directive so as not to modify )2(__?SECT?__)0(. It then)]481.2 norm0
[(declares its string in the data section, and then invokes )2(__?SECT?__)0( to switch back to )1(whichever)0( section)]469.2 norm0
[(the user was previously working in. It thus avoids the need, in the previous version of the macro, to)]457.2 norm0
[(include a )2(JMP)0( instruction to jump over the data, and also does not fail if, in a complicated )2(OBJ)0( format)]445.2 norm0
[(module, the user could potentially be assembling the code in any of several separate code sections.)]433.2 norm2
[{/section-7.4 xa}2(ABSOLUTE)0(: Defining Absolute Labels)](7.4)410.4 head3
[(The )2(ABSOLUTE)0( directive can be thought of as an alternative form of )2(SECTION)0(: it causes the subsequent)]392.4 norm1
[(code to be directed at no physical section, but at the hypothetical section starting at the given absolute)]380.4 norm0
[(address. The only instructions you can use in this mode are the )2(RESB)0( family.)]368.4 norm2
[2(ABSOLUTE)0( is used as follows:)]350.4 norm3
[2(absolute 0x1A )]334.8 code1
[2()]325.2 code0
[2(    kbuf_chr    resw    1 )]315.6 code0
[2(    kbuf_free   resw    1 )]306 code0
[2(    kbuf        resw    16)]296.4 code2
[(This example describes a section of the PC BIOS data area, at segment address 0x40: the above code)]278.4 norm1
[(defines )2(kbuf_chr)0( to be 0x1A, )2(kbuf_free)0( to be 0x1C, and )2(kbuf)0( to be 0x1E.)]266.4 norm2
[(The user-level form of )2(ABSOLUTE)0(, like that of )2(SECTION)0(, redefines the )2(__?SECT?__)0( macro when it is)]248.4 norm1
[(invoked.)]236.4 norm2
[2(STRUC)0( and )2(ENDSTRUC)0( are defined as macros which use )2(ABSOLUTE)0( \(and also )2(__?SECT?__)0(\).)]218.4 norm3
[2(ABSOLUTE)0( doesn't have to take an absolute constant as an argument: it can take an expression)]200.4 norm1
[(\(actually, a )(critical expression: see ){/section-3.8 xl}(section 3.8){el}(\) and it can be a value in a segment. For example, a TSR)]188.4 norm0
[(can re-use its setup code as run-time BSS like this:)]176.4 norm2
[2(        org     100h               ; it's a .COM program )]160.8 code1
[2()]151.2 code0
[2(        jmp     setup              ; setup code comes last )]141.6 code0
[2()]132 code0
[2(        ; the resident part of the TSR goes here )]122.4 code0
[2(setup: )]112.8 code0
[2(        ; now write the code that installs the TSR here )]103.2 code0
[2()]93.5999999999997 code0
[2(absolute setup )]83.9999999999997 code0
[2()]74.3999999999996 code0
(85)pageodd
restore showpage
%%Page: 86 86
%%BeginPageSetup
save
%%EndPageSetup
/86 pa
[2(runtimevar1     resw    1 )]710.4 code0
[2(runtimevar2     resd    20 )]700.8 code0
[2()]691.2 code0
[2(tsr_end:)]681.6 code2
[(This defines some variables `on top of' the setup code, so that after the setup has finished running, the)]663.6 norm1
[(space it took up can be re-used as data storage for the running TSR. The symbol `tsr_end' can be used)]651.6 norm0
[(to calculate the total size of the part of the TSR that needs to be made resident.)]639.6 norm2
[{/section-7.5 xa}2(EXTERN)0(: )(Importing Symbols from Other Modules)](7.5)616.8 head3
[2(EXTERN)0( is similar to the MASM directive )2(EXTRN)0( and the C keyword )2(extern)0(: it is used to declare a symbol)]598.8 norm1
[(which is not defined anywhere in the module being assembled, but is assumed to be defined in some)]586.8 norm0
[(other module and needs to be referred to by this one. Not every object-file format can support external)]574.8 norm0
[(variables: the )2(bin)0( format cannot.)]562.8 norm2
[(The )2(EXTERN)0( directive takes as many arguments as you like. Each argument is the name of a symbol:)]544.8 norm3
[2(extern  _printf )]529.2 code1
[2(extern  _sscanf,_fscanf)]519.6 code2
[(Some object-file formats provide extra features to the )2(EXTERN)0( directive. In all cases, the extra features)]501.6 norm1
[(are used by suffixing a colon to the symbol name followed by object-format specific text. For example,)]489.6 norm0
[(the )2(obj)0( format allows you to declare that the default segment base of an external should be the group)]477.6 norm0
[2(dgroup)0( by means of the directive)]465.6 norm2
[2(extern  _variable:wrt dgroup)]450 code3
[(The primitive form of )2(EXTERN)0( differs from the user-level form only in that it can take only one argument)]432 norm1
[(at a time: the support for multiple arguments is implemented at the preprocessor level.)]420 norm2
[(You can declare the same variable as )2(EXTERN)0( more than once: NASM will quietly ignore the second and)]402 norm1
[(later redeclarations.)]390 norm2
[(If a variable is declared both )2(GLOBAL)0( and )2(EXTERN)0(, or if it is declared as )2(EXTERN)0( and then defined, it will be)]372 norm1
[(treated as )2(GLOBAL)0(. If a variable is declared both as )2(COMMON)0( and )2(EXTERN)0(, it will be treated as )2(COMMON)0(.)]360 norm2
[{/section-7.6 xa}2(REQUIRED)0(: )(Unconditionally Importing Symbols from Other Modules)](7.6)337.2 head3
[(The )2(REQUIRED)0( keyword is similar to )2(EXTERN)0( one. The difference is that the )2(EXTERN)0( keyword as of version)]319.2 norm1
[(2.15 does not generate unknown symbols as that prevents using common header files, as it might)]307.2 norm0
[(cause the linker to pull in a bunch of unnecessary modules.)]295.2 norm2
[(If the old behavior is required, use )2(REQUIRED)0( keyword instead.)]277.2 norm3
[{/section-7.7 xa}2(GLOBAL)0(: )(Exporting Symbols to Other Modules)](7.7)254.4 head3
[2(GLOBAL)0( is the other end of )2(EXTERN)0(: if one module declares a symbol as )2(EXTERN)0( and refers to it, then in)]236.4 norm1
[(order to prevent linker errors, some other module must actually )1(define)0( the symbol and declare it as)]224.4 norm0
[2(GLOBAL)0(. Some assemblers use the name )2(PUBLIC)0( for this purpose.)]212.4 norm2
[2(GLOBAL)0( uses the same syntax as )2(EXTERN)0(, except that it must refer to symbols which )1(are)0( defined in the)]194.4 norm1
[(same module as the )2(GLOBAL)0( directive. For example:)]182.4 norm2
[2(global _main )]166.8 code1
[2(_main: )]157.2 code0
[2(        ; some code)]147.6 code2
[2(GLOBAL)0(, like )2(EXTERN)0(, allows object formats to define private extensions by means of a colon. The ELF)]129.6 norm1
[(object format, for example, lets you specify whether global data items are functions or data:)]117.6 norm2
[2(global  hashlookup:function, hashtable:data)]102 code3
(86)pageeven
restore showpage
%%Page: 87 87
%%BeginPageSetup
save
%%EndPageSetup
/87 pa
[(Like )2(EXTERN)0(, the primitive form of )2(GLOBAL)0( differs from the user-level form only in that it can take only)]708 norm1
[(one argument at a time.)]696 norm2
[{/section-7.8 xa}2(COMMON)0(: Defining Common Data Areas)](7.8)673.2 head3
[(The )2(COMMON)0( directive is used to declare )1(common variables)0(. A common variable is much like a global)]655.2 norm1
[(variable declared in the uninitialized data section, so that)]643.2 norm2
[2(common  intvar  4)]627.6 code3
[(is similar in function to)]609.6 norm3
[2(global  intvar )]594 code1
[2(section .bss )]584.4 code0
[2()]574.8 code0
[2(intvar  resd    1)]565.2 code2
[(The difference is that if more than one module defines the same common variable, then at link time)]547.2 norm1
[(those variables will be )1(merged)0(, and references to )2(intvar)0( in all modules will point at the same piece of)]535.2 norm0
[(memory.)]523.2 norm2
[(Like )2(GLOBAL)0( and )2(EXTERN)0(, )2(COMMON)0( supports object-format specific extensions. For example, the )2(obj)]505.2 norm1
[(format allows common variables to be NEAR or FAR, and the ELF format allows you to specify the)]493.2 norm0
[(alignment requirements of a common variable:)]481.2 norm2
[2(common  commvar  4:near  ; works in OBJ )]465.6 code1
[2(common  intarray 100:4   ; works in ELF: 4 byte aligned)]456 code2
[(Once again, like )2(EXTERN)0( and )2(GLOBAL)0(, the primitive form of )2(COMMON)0( differs from the user-level form only in)]438 norm1
[(that it can take only one argument at a time.)]426 norm2
[{/section-7.9 xa}2(STATIC)0(: Local Symbols within Modules)](7.9)403.2 head3
[(Opposite to )2(EXTERN)0( and )2(GLOBAL)0(, )2(STATIC)0( is local symbol, but should be named according to the global)]385.2 norm1
[(mangling rules \(named by analogy with the C keyword )2(static)0( as applied to functions or global)]373.2 norm0
[(variables\).)]361.2 norm2
[2(static foo )]345.6 code1
[2(foo: )]336 code0
[2(         ; codes)]326.4 code2
[(Unlike )2(GLOBAL)0(, )2(STATIC)0( does not allow object formats to accept private extensions mentioned in ){/section-7.7 xl}(section){el}]308.4 norm1
[{/section-7.7 xl}(7.7){el}(.)]296.4 norm2
[{/section-7.10 xa}2(\(G|L\)PREFIX)0(, )2(\(G|L\)POSTFIX)0(: Mangling Symbols)](7.10)273.6 head3
[2(PREFIX)0(, )2(GPREFIX)0(, )2(LPREFIX)0(, )2(POSTFIX)0(, )2(GPOSTFIX)0(, and )2(LPOSTFIX)0( directives can prepend or append a string)]255.6 norm1
[(to a certain type of symbols, normally to fit specific ABI conventions)]243.6 norm2
[2(PREFIX)0(|)2(GPREFIX)0(: Prepend the argument to all )2(EXTERN)0( )2(COMMON)0(, )2(STATIC)0(, and )2(GLOBAL)0( symbols.)]225.6 bull3
[2(LPREFIX)0(: Prepend the argument to all other symbols such as local labels and backend defined)]207.6 bull1
[(symbols.)]195.6 bull2
[2(POSTFIX)0(|)2(GPOSTFIX)0(: Append the argument to all )2(EXTERN)0( )2(COMMON)0(, )2(STATIC)0(, and )2(GLOBAL)0( symbols.)]177.6 bull3
[2(LPOSTFIX)0(: Append the argument to all other symbols such as local labels and backend defined)]159.6 bull1
[(symbols.)]147.6 bull2
[(These a macros implemented as pragmas, and using )2(%pragma)0( syntax can be restricted to specific)]129.6 norm1
[(backends \(see ){/section-4.10 xl}(section 4.10){el}(\):)]117.6 norm2
[2(%pragma macho lprefix L_)]102 code3
[(Command line options are also available. See also ){/section-2.1.28 xl}(section 2.1.28){el}(.)]83.9999999999999 norm3
(87)pageodd
restore showpage
%%Page: 88 88
%%BeginPageSetup
save
%%EndPageSetup
/88 pa
[(One example which supports many ABIs:)]708 norm3
[2(; The most common conventions )]692.4 code1
[2(%pragma output gprefix _ )]682.8 code0
[2(%pragma output lprefix L_ )]673.2 code0
[2(; ELF uses a different convention )]663.6 code0
[2(%pragma elf    gprefix                       ; empty )]654 code0
[2(%pragma elf    lprefix .L)]644.4 code2
[(Some toolchains is aware of a particular prefix for its own optimization options, such as code)]626.4 norm1
[(elimination. For instance, Mach-O backend has a linker that uses a simplistic naming scheme to chunk)]614.4 norm0
[(up sections into a meta section. When the )2(subsections_via_symbols)0( directive \(){/section-8.8.4 xl}(section 8.8.4){el}(\) is)]602.4 norm0
[(declared, each symbol is the start of a separate block. The meta section is, then, defined to include)]590.4 norm0
[(sections before the one that starts with a 'L'. )2(LPREFIX)0( is useful here to mark all local symbols with the)]578.4 norm0
[('L' prefix to be excluded to the meta section. It converts local symbols compatible with the particular)]566.4 norm0
[(toolchain. Note that local symbols declared with )2(STATIC)0( \(){/section-7.9 xl}(section 7.9){el}(\) are excluded from the symbol)]554.4 norm0
[(mangling and also not marked as global.)]542.4 norm2
[{/section-7.11 xa}2(CPU)0(: Defining CPU Dependencies)](7.11)519.6 head3
[(The )2(CPU)0( directive restricts assembly to those instructions which are available on the specified CPU.)]501.6 norm3
[(Options are:)]483.6 norm3
[2(CPU 8086)0( Assemble only 8086 instruction set)]465.6 bull3
[2(CPU 186)0( Assemble instructions up to the 80186 instruction set)]447.6 bull3
[2(CPU 286)0( Assemble instructions up to the 286 instruction set)]429.6 bull3
[2(CPU 386)0( Assemble instructions up to the 386 instruction set)]411.6 bull3
[2(CPU 486)0( 486 instruction set)]393.6 bull3
[2(CPU 586)0( Pentium instruction set)]375.6 bull3
[2(CPU PENTIUM)0( Same as 586)]357.6 bull3
[2(CPU 686)0( P6 instruction set)]339.6 bull3
[2(CPU PPRO)0( Same as 686)]321.6 bull3
[2(CPU P2)0( Same as 686)]303.6 bull3
[2(CPU P3)0( Pentium III \(Katmai\) instruction sets)]285.6 bull3
[2(CPU KATMAI)0( Same as P3)]267.6 bull3
[2(CPU P4)0( Pentium 4 \(Willamette\) instruction set)]249.6 bull3
[2(CPU WILLAMETTE)0( Same as P4)]231.6 bull3
[2(CPU PRESCOTT)0( Prescott instruction set)]213.6 bull3
[2(CPU X64)0( x86-64 \(x64/AMD64/Intel 64\) instruction set)]195.6 bull3
[2(CPU IA64)0( IA64 CPU \(in x86 mode\) instruction set)]177.6 bull3
[(All options are case insensitive. All instructions will be selected only if they apply to the selected CPU or)]159.6 norm1
[(lower. By default, all instructions are available.)]147.6 norm2
[{/section-7.12 xa}2(FLOAT)0(: Handling of )(floating-point constants)](7.12)124.8 head3
[(By default, floating-point constants are rounded to nearest, and IEEE denormals are supported. The)]106.8 norm1
[(following options can be set to alter this behaviour:)]94.8000000000001 norm2
[2(FLOAT DAZ)0( Flush denormals to zero)]76.8000000000001 bull3
(88)pageeven
restore showpage
%%Page: 89 89
%%BeginPageSetup
save
%%EndPageSetup
/89 pa
[2(FLOAT NODAZ)0( Do not flush denormals to zero \(default\))]708 bull3
[2(FLOAT NEAR)0( Round to nearest \(default\))]690 bull3
[2(FLOAT UP)0( Round up \(toward +Infinity\))]672 bull3
[2(FLOAT DOWN)0( Round down \(toward \226Infinity\))]654 bull3
[2(FLOAT ZERO)0( Round toward zero)]636 bull3
[2(FLOAT DEFAULT)0( Restore default settings)]618 bull3
[(The standard macros )2(__?FLOAT_DAZ?__)0(, )2(__?FLOAT_ROUND?__)0(, and )2(__?FLOAT?__)0( contain the current)]600 norm1
[(state, as long as the programmer has avoided the use of the brackeded primitive form, \()2([FLOAT])0(\).)]588 norm2
[2(__?FLOAT?__)0( contains the full set of floating-point settings; this value can be saved away and invoked)]570 norm1
[(later to restore the setting.)]558 norm2
[{/section-7.13 xa}2([WARNING])0(: Enable or disable warnings)](7.13)535.2 head3
[(The )2([WARNING])0( directive can be used to enable or disable classes of warnings in the same way as the )2(-w)]517.2 norm1
[(option, see ){/section-2.1.26 xl}(section 2.1.26){el}( for more details about warning classes.)]505.2 norm2
[2([warning +)1(warning-class)2(])0( enables warnings for )1(warning-class)0(.)]487.2 bull3
[2([warning -)1(warning-class)2(])0( disables warnings for )1(warning-class)0(.)]469.2 bull3
[2([warning *)1(warning-class)2(])0( restores )1(warning-class)0( to the original value, either the default value or as)]451.2 bull1
[(specified on the command line.)]439.2 bull2
[2([warning push])0( saves the current warning state on a stack.)]421.2 bull3
[2([warning pop])0( restores the current warning state from the stack.)]403.2 bull3
[(The )2([WARNING])0( directive also accepts the )2(all)0(, )2(error)0( and )2(error=)1(warning-class)0( specifiers.)]385.2 norm3
[(No "user form" \(without the brackets\) currently exists.)]367.2 norm3
(89)pageodd
restore showpage
%%Page: 90 90
%%BeginPageSetup
save
%%EndPageSetup
/90 pa
(90)pageeven
restore showpage
%%Page: 91 91
%%BeginPageSetup
save
%%EndPageSetup
/91 pa
[{/chapter-8 xa}(Chapter 8: )(Output Formats)]698.4 chap3
[(NASM is a portable assembler, designed to be able to compile on any ANSI C-supporting platform and)]662.4 norm1
[(produce output to run on a variety of Intel x86 operating systems. For this reason, it has a large number)]650.4 norm0
[(of available output formats, selected using the )2(-f)0( option on the NASM )(command line. Each of these)]638.4 norm0
[(formats, along with its extensions to the base NASM syntax, is detailed in this chapter.)]626.4 norm2
[(As stated in ){/section-2.1.1 xl}(section 2.1.1){el}(, NASM chooses a )(default name for your output file based on the input file)]608.4 norm1
[(name and the chosen output format. This will be generated by removing the )(extension \()2(.asm)0(, )2(.s)0(, or)]596.4 norm0
[(whatever you like to use\) from the input file name, and substituting an extension defined by the output)]584.4 norm0
[(format. The extensions are given with each format below.)]572.4 norm2
[{/section-8.1 xa}2(bin)0(: )(Flat-Form Binary)( Output)](8.1)549.6 head3
[(The )2(bin)0( format does not produce object files: it generates nothing in the output file except the code)]531.6 norm1
[(you wrote. Such `pure binary' files are used by )(MS-DOS: )2(.COM)0( executables and )2(.SYS)0( device drivers are)]519.6 norm0
[(pure binary files. Pure binary output is also useful for )(operating system and )(boot loader development.)]507.6 norm2
[(The )2(bin)0( format supports )(multiple section names. For details of how NASM handles sections in the )2(bin)]489.6 norm1
[(format, see ){/section-8.1.3 xl}(section 8.1.3){el}(.)]477.6 norm2
[(Using the )2(bin)0( format puts NASM by default into 16-bit mode \(see ){/section-7.1 xl}(section 7.1){el}(\). In order to use )2(bin)0( to)]459.6 norm1
[(write 32-bit or 64-bit code, such as an OS kernel, you need to explicitly issue the )2(BITS 32)0( or )2(BITS 64)]447.6 norm0
[(directive.)]435.6 norm2
[2(bin)0( has no default output file name extension: instead, it leaves your file name as it is once the original)]417.6 norm1
[(extension has been removed. Thus, the default is for NASM to assemble )2(binprog.asm)0( into a binary file)]405.6 norm0
[(called )2(binprog)0(.)]393.6 norm2
[{/section-8.1.1 xa}2(ORG)0(: Binary File )(Program Origin)](8.1.1)373.2 subh3
[(The )2(bin)0( format provides an additional directive to the list given in ){/chapter-7 xl}(chapter 7){el}(: )2(ORG)0(. The function of the)]355.2 norm1
[2(ORG)0( directive is to specify the origin address which NASM will assume the program begins at when it is)]343.2 norm0
[(loaded into memory.)]331.2 norm2
[(For example, the following code will generate the longword )2(0x00000104)0(:)]313.2 norm3
[2(        org     0x100 )]297.6 code1
[2(        dd      label )]288 code0
[2(label:)]278.4 code2
[(Unlike the )2(ORG)0( directive provided by MASM-compatible assemblers, which allows you to jump around in)]260.4 norm1
[(the object file and overwrite code you have already generated, NASM's )2(ORG)0( does exactly what the)]248.4 norm0
[(directive says: )1(origin)0(. Its sole function is to specify one offset which is added to all internal address)]236.4 norm0
[(references within the section; it does not permit any of the trickery that MASM's version does. See)]224.4 norm0
[{/section-13.1.3 xl}(section 13.1.3){el}( for further comments.)]212.4 norm2
[{/section-8.1.2 xa}2(bin)0( Extensions to the )2(SECTION)0( Directive)(, )2(bin)0( extensions to})](8.1.2)192 subh3
[(The )2(bin)0( output format extends the )2(SECTION)0( \(or )2(SEGMENT)0(\) directive to allow you to specify the alignment)]174 norm1
[(requirements of segments. This is done by appending the )2(ALIGN)0( qualifier to the end of the)]162 norm0
[(section-definition line. For example,)]150 norm2
[2(section .data   align=16)]134.4 code3
[(switches to the section )2(.data)0( and also specifies that it must be aligned on a 16-byte boundary.)]116.4 norm3
[(The parameter to )2(ALIGN)0( specifies how many low bits of the section start address must be forced to zero.)]98.4 norm1
[(The alignment value given may be any power of two.)]86.4 norm2
(91)pageodd
restore showpage
%%Page: 92 92
%%BeginPageSetup
save
%%EndPageSetup
/92 pa
[{/section-8.1.3 xa}(Multisection)( Support for the )2(bin)0( Format)](8.1.3)705.6 subh3
[(The )2(bin)0( format allows the use of multiple sections, of arbitrary names, besides the "known" )2(.text)0(,)]687.6 norm1
[2(.data)0(, and )2(.bss)0( names.)]675.6 norm2
[(Sections may be designated )2(progbits)0( or )2(nobits)0(. Default is )2(progbits)0( \(except )2(.bss)0(, which defaults to)]657.6 bull1
[2(nobits)0(, of course\).)]645.6 bull2
[(Sections can be aligned at a specified boundary following the previous section with )2(align=)0(, or at an)]627.6 bull1
[(arbitrary byte-granular position with )2(start=)0(.)]615.6 bull2
[(Sections can be given a virtual start address, which will be used for the calculation of all memory)]597.6 bull1
[(references within that section with )2(vstart=)0(.)]585.6 bull2
[(Sections can be ordered using )2(follows=<section>)0( or )2(vfollows=<section>)0( as an alternative to)]567.6 bull1
[(specifying an explicit start address.)]555.6 bull2
[(Arguments to )2(org)0(, )2(start)0(, )2(vstart)0(, and )2(align=)0( are critical expressions. See ){/section-3.8 xl}(section 3.8){el}(. E.g.)]537.6 bull1
[2(align=\(1 << ALIGN_SHIFT\))0( \226 )2(ALIGN_SHIFT)0( must be defined before it is used here.)]525.6 bull2
[(Any code which comes before an explicit )2(SECTION)0( directive is directed by default into the )2(.text)]507.6 bull1
[(section.)]495.6 bull2
[(If an )2(ORG)0( statement is not given, )2(ORG 0)0( is used by default.)]477.6 bull3
[(The )2(.bss)0( section will be placed after the last )2(progbits)0( section, unless )2(start=)0(, )2(vstart=)0(, )2(follows=)0(, or)]459.6 bull1
[2(vfollows=)0( has been specified.)]447.6 bull2
[(All sections are aligned on dword boundaries, unless a different alignment has been specified.)]429.6 bull3
[(Sections may not overlap.)]411.6 bull3
[(NASM creates the )2(section.<secname>.start)0( for each section, which may be used in your code.)]393.6 bull3
[{/section-8.1.4 xa}(Map Files)](8.1.4)373.2 subh3
[(Map files can be generated in )2(-f bin)0( format by means of the )2([map])0( option. Map types of )2(all)0( \(default\),)]355.2 norm1
[2(brief)0(, )2(sections)0(, )2(segments)0(, or )2(symbols)0( may be specified. Output may be directed to )2(stdout)0( \(default\),)]343.2 norm0
[2(stderr)0(, or a specified file. E.g. )2([map symbols myfile.map])0(. No "user form" exists, the square brackets)]331.2 norm0
[(must be used.)]319.2 norm2
[{/section-8.2 xa}2(ith)0(: )(Intel Hex Output)](8.2)296.4 head3
[(The )2(ith)0( file format produces Intel hex-format files. Just as the )2(bin)0( format, this is a flat memory image)]278.4 norm1
[(format with no support for relocation or linking. It is usually used with ROM programmers and similar)]266.4 norm0
[(utilities.)]254.4 norm2
[(All extensions supported by the )2(bin)0( file format is also supported by the )2(ith)0( file format.)]236.4 norm3
[2(ith)0( provides a default output file-name extension of )2(.ith)0(.)]218.4 norm3
[{/section-8.3 xa}2(srec)0(: )(Motorola S-Records Output)](8.3)195.6 head3
[(The )2(srec)0( file format produces Motorola S-records files. Just as the )2(bin)0( format, this is a flat memory)]177.6 norm1
[(image format with no support for relocation or linking. It is usually used with ROM programmers and)]165.6 norm0
[(similar utilities.)]153.6 norm2
[(All extensions supported by the )2(bin)0( file format is also supported by the )2(srec)0( file format.)]135.6 norm3
[2(srec)0( provides a default output file-name extension of )2(.srec)0(.)]117.6 norm3
(92)pageeven
restore showpage
%%Page: 93 93
%%BeginPageSetup
save
%%EndPageSetup
/93 pa
[{/section-8.4 xa}2(obj)0(: )(Microsoft OMF)( Object Files)](8.4)703.2 head3
[(The )2(obj)0( file format \(NASM calls it )2(obj)0( rather than )2(omf)0( for historical reasons\) is the one produced by)]685.2 norm1
[(MASM and )(TASM, which is typically fed to 16-bit DOS linkers to produce )2(.EXE)0( files. It is also the format)]673.2 norm0
[(used by )(OS/2.)]661.2 norm2
[2(obj)0( provides a default output file-name extension of )2(.obj)0(.)]643.2 norm3
[2(obj)0( is not exclusively a 16-bit format, though: NASM has full support for the 32-bit extensions to the)]625.2 norm1
[(format. In particular, 32-bit )2(obj)0( format files are used by )(Borland's Win32 compilers, instead of using)]613.2 norm0
[(Microsoft's newer )2(win32)0( object file format.)]601.2 norm2
[(The )2(obj)0( format does not define any special segment names: you can call your segments anything you)]583.2 norm1
[(like. Typical names for segments in )2(obj)0( format files are )2(CODE)0(, )2(DATA)0( and )2(BSS)0(.)]571.2 norm2
[(If your source file contains code before specifying an explicit )2(SEGMENT)0( directive, then NASM will invent)]553.2 norm1
[(its own segment called )2(__NASMDEFSEG)0( for you.)]541.2 norm2
[(When you define a segment in an )2(obj)0( file, NASM defines the segment name as a symbol as well, so that)]523.2 norm1
[(you can access the segment address of the segment. So, for example:)]511.2 norm2
[2(segment data )]495.6 code1
[2()]486 code0
[2(dvar:   dw      1234 )]476.4 code0
[2()]466.8 code0
[2(segment code )]457.2 code0
[2()]447.6 code0
[2(function: )]438 code0
[2(        mov     ax,data         ; get segment address of data )]428.4 code0
[2(        mov     ds,ax           ; and move it into DS )]418.8 code0
[2(        inc     word [dvar]     ; now this reference will work )]409.2 code0
[2(        ret)]399.6 code2
[(The )2(obj)0( format also enables the use of the )2(SEG)0( and )2(WRT)0( operators, so that you can write code which)]381.6 norm1
[(does things like)]369.6 norm2
[2(extern  foo )]354 code1
[2()]344.4 code0
[2(      mov   ax,seg foo            ; get preferred segment of foo )]334.8 code0
[2(      mov   ds,ax )]325.2 code0
[2(      mov   ax,data               ; a different segment )]315.6 code0
[2(      mov   es,ax )]306 code0
[2(      mov   ax,[ds:foo]           ; this accesses `foo' )]296.4 code0
[2(      mov   [es:foo wrt data],bx  ; so does this)]286.8 code2
[{/section-8.4.1 xa}2(obj)0( Extensions to the )2(SEGMENT)0( Directive)](8.4.1)266.4 subh3
[(The )2(obj)0( output format extends the )2(SEGMENT)0( \(or )2(SECTION)0(\) directive to allow you to specify various)]248.4 norm1
[(properties of the segment you are defining. This is done by appending extra qualifiers to the end of the)]236.4 norm0
[(segment-definition line. For example,)]224.4 norm2
[2(segment code private align=16)]208.8 code3
[(defines the segment )2(code)0(, but also declares it to be a private segment, and requires that the portion of)]190.8 norm1
[(it described in this code module must be aligned on a 16-byte boundary.)]178.8 norm2
[(The available qualifiers are:)]160.8 norm3
[2(PRIVATE)0(, )2(PUBLIC)0(, )2(COMMON)0( and )2(STACK)0( specify the combination characteristics of the segment. )2(PRIVATE)]142.8 bull1
[(segments do not get combined with any others by the linker; )2(PUBLIC)0( and )2(STACK)0( segments get)]130.8 bull0
[(concatenated together at link time; and )2(COMMON)0( segments all get overlaid on top of each other rather)]118.8 bull0
[(than stuck end-to-end.)]106.8 bull2
[2(ALIGN)0( is used, as shown above, to specify how many low bits of the segment start address must be)]88.7999999999997 bull1
[(forced to zero. The alignment value given may be any power of two from 1 to 4096; in reality, the)]76.7999999999997 bull0
(93)pageodd
restore showpage
%%Page: 94 94
%%BeginPageSetup
save
%%EndPageSetup
/94 pa
[(only values supported are 1, 2, 4, 16, 256 and 4096, so if 8 is specified it will be rounded up to 16, and)]708 bull0
[(32, 64 and 128 will all be rounded up to 256, and so on. Note that alignment to 4096-byte boundaries)]696 bull0
[(is a )(PharLap extension to the format and may not be supported by all linkers.)]684 bull2
[2(CLASS)0( can be used to specify the segment class; this feature indicates to the linker that segments of)]666 bull1
[(the same class should be placed near each other in the output file. The class name can be any word,)]654 bull0
[(e.g. )2(CLASS=CODE)0(.)]642 bull2
[2(OVERLAY)0(, like )2(CLASS)0(, is specified with an arbitrary word as an argument, and provides overlay)]624 bull1
[(information to an overlay-capable linker.)]612 bull2
[(Segments can be declared as )2(USE16)0( or )2(USE32)0(, which has the effect of recording the choice in the)]594 bull1
[(object file and also ensuring that NASM's default assembly mode when assembling in that segment)]582 bull0
[(is 16-bit or 32-bit respectively.)]570 bull2
[(When writing )(OS/2 object files, you should declare 32-bit segments as )2(FLAT)0(, which causes the default)]552 bull1
[(segment base for anything in the segment to be the special group )2(FLAT)0(, and also defines the group if)]540 bull0
[(it is not already defined.)]528 bull2
[(The )2(obj)0( file format also allows segments to be declared as having a pre-defined absolute segment)]510 bull1
[(address, although no linkers are currently known to make sensible use of this feature; nevertheless,)]498 bull0
[(NASM allows you to declare a segment such as )2(SEGMENT SCREEN ABSOLUTE=0xB800)0( if you need to. The)]486 bull0
[2(ABSOLUTE)0( and )2(ALIGN)0( keywords are mutually exclusive.)]474 bull2
[(NASM's default segment attributes are )2(PUBLIC)0(, )2(ALIGN=1)0(, no class, no overlay, and )2(USE16)0(.)]456 norm3
[{/section-8.4.2 xa}2(GROUP)0(: Defining Groups of Segments)](8.4.2)435.6 subh3
[(The )2(obj)0( format also allows segments to be grouped, so that a single segment register can be used to)]417.6 norm1
[(refer to all the segments in a group. NASM therefore supplies the )2(GROUP)0( directive, whereby you can code)]405.6 norm2
[2(segment data )]390 code1
[2()]380.4 code0
[2(        ; some data )]370.8 code0
[2()]361.2 code0
[2(segment bss )]351.6 code0
[2()]342 code0
[2(        ; some uninitialized data )]332.4 code0
[2()]322.8 code0
[2(group dgroup data bss)]313.2 code2
[(which will define a group called )2(dgroup)0( to contain the segments )2(data)0( and )2(bss)0(. Like )2(SEGMENT)0(, )2(GROUP)]295.2 norm1
[(causes the group name to be defined as a symbol, so that you can refer to a variable )2(var)0( in the )2(data)]283.2 norm0
[(segment as )2(var wrt data)0( or as )2(var wrt dgroup)0(, depending on which segment value is currently in your)]271.2 norm0
[(segment register.)]259.2 norm2
[(If you just refer to )2(var)0(, however, and )2(var)0( is declared in a segment which is part of a group, then NASM)]241.2 norm1
[(will default to giving you the offset of )2(var)0( from the beginning of the )1(group)0(, not the )1(segment)0(. Therefore)]229.2 norm0
[2(SEG var)0(, also, will return the group base rather than the segment base.)]217.2 norm2
[(NASM will allow a segment to be part of more than one group, but will generate a warning if you do)]199.2 norm1
[(this. Variables declared in a segment which is part of more than one group will default to being relative)]187.2 norm0
[(to the first group that was defined to contain the segment.)]175.2 norm2
[(A group does not have to contain any segments; you can still make )2(WRT)0( references to a group which)]157.2 norm1
[(does not contain the variable you are referring to. OS/2, for example, defines the special group )2(FLAT)]145.2 norm0
[(with no segments in it.)]133.2 norm2
[{/section-8.4.3 xa}2(UPPERCASE)0(: Disabling Case Sensitivity in Output)](8.4.3)112.8 subh3
[(Although NASM itself is )(case sensitive, some OMF linkers are not; therefore it can be useful for NASM to)]94.7999999999998 norm1
[(output single-case object files. The )2(UPPERCASE)0( format-specific directive causes all segment, group and)]82.7999999999998 norm0
(94)pageeven
restore showpage
%%Page: 95 95
%%BeginPageSetup
save
%%EndPageSetup
/95 pa
[(symbol names that are written to the object file to be forced to upper case just before being written.)]708 norm0
[(Within a source file, NASM is still case-sensitive; but the object file can be written entirely in upper case)]696 norm0
[(if desired.)]684 norm2
[2(UPPERCASE)0( is used alone on a line; it requires no parameters.)]666 norm3
[{/section-8.4.4 xa}2(IMPORT)0(: Importing DLL Symbols)](8.4.4)645.6 subh3
[(The )2(IMPORT)0( format-specific directive defines a symbol to be imported from a DLL, for use if you are)]627.6 norm1
[(writing a DLL's )(import library in NASM. You still need to declare the symbol as )2(EXTERN)0( as well as using)]615.6 norm0
[(the )2(IMPORT)0( directive.)]603.6 norm2
[(The )2(IMPORT)0( directive takes two required parameters, separated by white space, which are \(respectively\))]585.6 norm1
[(the name of the symbol you wish to import and the name of the library you wish to import it from. For)]573.6 norm0
[(example:)]561.6 norm2
[2(    import  WSAStartup wsock32.dll)]546 code3
[(A third optional parameter gives the name by which the symbol is known in the library you are)]528 norm1
[(importing it from, in case this is not the same as the name you wish the symbol to be known by to your)]516 norm0
[(code once you have imported it. For example:)]504 norm2
[2(    import  asyncsel wsock32.dll WSAAsyncSelect)]488.4 code3
[{/section-8.4.5 xa}2(EXPORT)0(: Exporting DLL Symbols)](8.4.5)468 subh3
[(The )2(EXPORT)0( format-specific directive defines a global symbol to be exported as a DLL symbol, for use if)]450 norm1
[(you are writing a DLL in NASM. You still need to declare the symbol as )2(GLOBAL)0( as well as using the)]438 norm0
[2(EXPORT)0( directive.)]426 norm2
[2(EXPORT)0( takes one required parameter, which is the name of the symbol you wish to export, as it was)]408 norm1
[(defined in your source file. An optional second parameter \(separated by white space from the first\))]396 norm0
[(gives the )1(external)0( name of the symbol: the name by which you wish the symbol to be known to)]384 norm0
[(programs using the DLL. If this name is the same as the internal name, you may leave the second)]372 norm0
[(parameter off.)]360 norm2
[(Further parameters can be given to define attributes of the exported symbol. These parameters, like)]342 norm1
[(the second, are separated by white space. If further parameters are given, the external name must also)]330 norm0
[(be specified, even if it is the same as the internal name. The available attributes are:)]318 norm2
[2(resident)0( indicates that the exported name is to be kept resident by the system loader. This is an)]300 bull1
[(optimization for frequently used symbols imported by name.)]288 bull2
[2(nodata)0( indicates that the exported symbol is a function which does not make use of any initialized)]270 bull1
[(data.)]258 bull2
[2(parm=NNN)0(, where )2(NNN)0( is an integer, sets the number of parameter words for the case in which the)]240 bull1
[(symbol is a call gate between 32-bit and 16-bit segments.)]228 bull2
[(An attribute which is just a number indicates that the symbol should be exported with an identifying)]210 bull1
[(number \(ordinal\), and gives the desired number.)]198 bull2
[(For example:)]180 norm3
[2(    export  myfunc )]164.4 code1
[2(    export  myfunc TheRealMoreFormalLookingFunctionName )]154.8 code0
[2(    export  myfunc myfunc 1234  ; export by ordinal )]145.2 code0
[2(    export  myfunc myfunc resident parm=23 nodata)]135.6 code2
[{/section-8.4.6 xa}2(..start)0(: Defining the )(Program Entry Point)](8.4.6)115.2 subh3
[2(OMF)0( linkers require exactly one of the object files being linked to define the program entry point, where)]97.1999999999999 norm1
[(execution will begin when the program is run. If the object file that defines the entry point is assembled)]85.1999999999999 norm0
(95)pageodd
restore showpage
%%Page: 96 96
%%BeginPageSetup
save
%%EndPageSetup
/96 pa
[(using NASM, you specify the entry point by declaring the special symbol )2(..start)0( at the point where you)]708 norm0
[(wish execution to begin.)]696 norm2
[{/section-8.4.7 xa}2(obj)0( Extensions to the )2(EXTERN)0( Directive)](8.4.7)675.6 subh3
[(If you declare an external symbol with the directive)]657.6 norm3
[2(    extern  foo)]642 code3
[(then references such as )2(mov ax,foo)0( will give you the offset of )2(foo)0( from its preferred segment base \(as)]624 norm1
[(specified in whichever module )2(foo)0( is actually defined in\). So to access the contents of )2(foo)0( you will)]612 norm0
[(usually need to do something like)]600 norm2
[2(        mov     ax,seg foo      ; get preferred segment base )]584.4 code1
[2(        mov     es,ax           ; move it into ES )]574.8 code0
[2(        mov     ax,[es:foo]     ; and use offset `foo' from it)]565.2 code2
[(This is a little unwieldy, particularly if you know that an external is going to be accessible from a given)]547.2 norm1
[(segment or group, say )2(dgroup)0(. So if )2(DS)0( already contained )2(dgroup)0(, you could simply code)]535.2 norm2
[2(        mov     ax,[foo wrt dgroup])]519.6 code3
[(However, having to type this every time you want to access )2(foo)0( can be a pain; so NASM allows you to)]501.6 norm1
[(declare )2(foo)0( in the alternative form)]489.6 norm2
[2(    extern  foo:wrt dgroup)]474 code3
[(This form causes NASM to pretend that the preferred segment base of )2(foo)0( is in fact )2(dgroup)0(; so the)]456 norm1
[(expression )2(seg foo)0( will now return )2(dgroup)0(, and the expression )2(foo)0( is equivalent to )2(foo wrt dgroup)0(.)]444 norm2
[(This )(default-)2(WRT)0( mechanism can be used to make externals appear to be relative to any group or)]426 norm1
[(segment in your program. It can also be applied to common variables: see ){/section-8.4.8 xl}(section 8.4.8){el}(.)]414 norm2
[{/section-8.4.8 xa}2(obj)0( Extensions to the )2(COMMON)0( Directive)](8.4.8)393.6 subh3
[(The )2(obj)0( format allows common variables to be either near)( or far)(; NASM allows you to specify which)]375.6 norm1
[(your variables should be by the use of the syntax)]363.6 norm2
[2(common  nearvar 2:near   ; `nearvar' is a near common )]348 code1
[2(common  farvar  10:far   ; and `farvar' is far)]338.4 code2
[(Far common variables may be greater in size than 64Kb, and so the OMF specification says that they are)]320.4 norm1
[(declared as a number of )1(elements)0( of a given size. So a 10-byte far common variable could be declared)]308.4 norm0
[(as ten one-byte elements, five two-byte elements, two five-byte elements or one ten-byte element.)]296.4 norm2
[(Some )2(OMF)0( linkers require the )(element size, as well as the variable size, to match when resolving)]278.4 norm1
[(common variables declared in more than one module. Therefore NASM must allow you to specify the)]266.4 norm0
[(element size on your far common variables. This is done by the following syntax:)]254.4 norm2
[2(common  c_5by2  10:far 5        ; two five-byte elements )]238.8 code1
[2(common  c_2by5  10:far 2        ; five two-byte elements)]229.2 code2
[(If no element size is specified, the default is 1. Also, the )2(FAR)0( keyword is not required when an element)]211.2 norm1
[(size is specified, since only far commons may have element sizes at all. So the above declarations could)]199.2 norm0
[(equivalently be)]187.2 norm2
[2(common  c_5by2  10:5            ; two five-byte elements )]171.6 code1
[2(common  c_2by5  10:2            ; five two-byte elements)]162 code2
[(In addition to these extensions, the )2(COMMON)0( directive in )2(obj)0( also supports default-)2(WRT)0( specification like)]144 norm1
[2(EXTERN)0( does \(explained in ){/section-8.4.7 xl}(section 8.4.7){el}(\). So you can also declare things like)]132 norm2
[2(common  foo     10:wrt dgroup )]116.4 code1
[2(common  bar     16:far 2:wrt data )]106.8 code0
[2(common  baz     24:wrt data:6)]97.1999999999998 code2
(96)pageeven
restore showpage
%%Page: 97 97
%%BeginPageSetup
save
%%EndPageSetup
/97 pa
[{/section-8.4.9 xa}(Embedded File Dependency Information)](8.4.9)705.6 subh3
[(Since NASM 2.13.02, )2(obj)0( files contain embedded dependency file information. To suppress the)]687.6 norm1
[(generation of dependencies, use)]675.6 norm2
[2(%pragma obj nodepend)]660 code3
[{/section-8.5 xa}2(win32)0(: Microsoft Win32 Object Files)](8.5)637.2 head3
[(The )2(win32)0( output format generates Microsoft Win32 object files, suitable for passing to Microsoft linkers)]619.2 norm1
[(such as )(Visual C++. Note that Borland Win32 compilers do not use this format, but use )2(obj)0( instead \(see)]607.2 norm0
[{/section-8.4 xl}(section 8.4){el}(\).)]595.2 norm2
[2(win32)0( provides a default output file-name extension of )2(.obj)0(.)]577.2 norm3
[(Note that although Microsoft say that Win32 object files follow the )2(COFF)0( \(Common Object File Format\))]559.2 norm1
[(standard, the object files produced by Microsoft Win32 compilers are not compatible with COFF linkers)]547.2 norm0
[(such as DJGPP's, and vice versa. This is due to a difference of opinion over the precise semantics of)]535.2 norm0
[(PC-relative relocations. To produce COFF files suitable for DJGPP, use NASM's )2(coff)0( output format;)]523.2 norm0
[(conversely, the )2(coff)0( format does not produce object files that Win32 linkers can generate correct)]511.2 norm0
[(output from.)]499.2 norm2
[{/section-8.5.1 xa}2(win32)0( Extensions to the )2(SECTION)0( Directive)](8.5.1)478.8 subh3
[(Like the )2(obj)0( format, )2(win32)0( allows you to specify additional information on the )2(SECTION)0( directive line, to)]460.8 norm1
[(control the type and properties of sections you declare. Section types and properties are generated)]448.8 norm0
[(automatically by NASM for the )(standard section names )2(.text)0(, )2(.data)0( and )2(.bss)0(, but may still be)]436.8 norm0
[(overridden by these qualifiers.)]424.8 norm2
[(The available qualifiers are:)]406.8 norm3
[2(code)0(, or equivalently )2(text)0(, defines the section to be a code section. This marks the section as)]388.8 bull1
[(readable and executable, but not writable, and also indicates to the linker that the type of the)]376.8 bull0
[(section is code.)]364.8 bull2
[2(data)0( and )2(bss)0( define the section to be a data section, analogously to )2(code)0(. Data sections are marked)]346.8 bull1
[(as readable and writable, but not executable. )2(data)0( declares an initialized data section, whereas )2(bss)]334.8 bull0
[(declares an uninitialized data section.)]322.8 bull2
[2(rdata)0( declares an initialized data section that is readable but not writable. Microsoft compilers use)]304.8 bull1
[(this section to place constants in it.)]292.8 bull2
[2(info)0( defines the section to be an )(informational section, which is not included in the executable file)]274.8 bull1
[(by the linker, but may \(for example\) pass information )1(to)0( the linker. For example, declaring an)]262.8 bull0
[2(info)0(\226type section called )2(.drectve)0( causes the linker to interpret the contents of the section as)]250.8 bull0
[(command-line options.)]238.8 bull2
[2(align=)0(, used with a trailing number as in )2(obj)0(, gives the )(alignment requirements of the section. The)]220.8 bull1
[(maximum you may specify is 64: the Win32 object file format contains no means to request a greater)]208.8 bull0
[(section alignment than this. If alignment is not explicitly specified, the defaults are 16-byte)]196.8 bull0
[(alignment for code sections, 8-byte alignment for rdata sections and 4-byte alignment for data \(and)]184.8 bull0
[(BSS\) sections. Informational sections get a default alignment of 1 byte \(no alignment\), though the)]172.8 bull0
[(value does not matter.)]160.8 bull2
[(The defaults assumed by NASM if you do not specify the above qualifiers are:)]142.8 norm3
[2(section .text    code  align=16 )]127.2 code1
[2(section .data    data  align=4 )]117.6 code0
[2(section .rdata   rdata align=8 )]108 code0
[2(section .bss     bss   align=4)]98.3999999999999 code2
[(The )2(win64)0( format also adds:)]80.3999999999999 norm3
(97)pageodd
restore showpage
%%Page: 98 98
%%BeginPageSetup
save
%%EndPageSetup
/98 pa
[2(section .pdata   rdata align=4 )]710.4 code1
[2(section .xdata   rdata align=8)]700.8 code2
[(Any other section name is treated by default like )2(.text)0(.)]682.8 norm3
[{/section-8.5.2 xa}2(win32)0(: Safe Structured Exception Handling)](8.5.2)662.4 subh3
[(Among other improvements in Windows XP SP2 and Windows Server 2003 Microsoft has introduced)]644.4 norm1
[(concept of "safe structured exception handling." General idea is to collect handlers' entry points in)]632.4 norm0
[(designated read-only table and have alleged entry point verified against this table prior exception)]620.4 norm0
[(control is passed to the handler. In order for an executable module to be equipped with such "safe)]608.4 norm0
[(exception handler table," all object modules on linker command line has to comply with certain)]596.4 norm0
[(criteria. If one single module among them does not, then the table in question is omitted and above)]584.4 norm0
[(mentioned run-time checks will not be performed for application in question. Table omission is by)]572.4 norm0
[(default silent and therefore can be easily overlooked. One can instruct linker to refuse to produce)]560.4 norm0
[(binary without such table by passing )2(/safeseh)0( command line option.)]548.4 norm2
[(Without regard to this run-time check merits it's natural to expect NASM to be capable of generating)]530.4 norm1
[(modules suitable for )2(/safeseh)0( linking. From developer's viewpoint the problem is two-fold:)]518.4 norm2
[(how to adapt modules not deploying exception handlers of their own;)]500.4 bull3
[(how to adapt/develop modules utilizing custom exception handling;)]482.4 bull3
[(Former can be easily achieved with any NASM version by adding following line to source code:)]464.4 norm3
[2($@feat.00 equ 1)]448.8 code3
[(As of version 2.03 NASM adds this absolute symbol automatically. If it's not already present to be)]430.8 norm1
[(precise. I.e. if for whatever reason developer would choose to assign another value in source file, it)]418.8 norm0
[(would still be perfectly possible.)]406.8 norm2
[(Registering custom exception handler on the other hand requires certain "magic." As of version 2.03)]388.8 norm1
[(additional directive is implemented, )2(safeseh)0(, which instructs the assembler to produce appropriately)]376.8 norm0
[(formatted input data for above mentioned "safe exception handler table." Its typical use would be:)]364.8 norm2
[2(section .text )]349.2 code1
[2(extern  _MessageBoxA@16 )]339.6 code0
[2(%if     __?NASM_VERSION_ID?__ >= 0x02030000 )]330 code0
[2(safeseh handler         ; register handler as "safe handler" )]320.4 code0
[2(%endif )]310.8 code0
[2(handler: )]301.2 code0
[2(        push    DWORD 1 ; MB_OKCANCEL )]291.6 code0
[2(        push    DWORD caption )]282 code0
[2(        push    DWORD text )]272.4 code0
[2(        push    DWORD 0 )]262.8 code0
[2(        call    _MessageBoxA@16 )]253.2 code0
[2(        sub     eax,1   ; incidentally suits as return value )]243.6 code0
[2(                        ; for exception handler )]234 code0
[2(        ret )]224.4 code0
[2(global  _main )]214.8 code0
[2(_main: )]205.2 code0
[2(        push    DWORD handler )]195.6 code0
[2(        push    DWORD [fs:0] )]186 code0
[2(        mov     DWORD [fs:0],esp ; engage exception handler )]176.4 code0
[2(        xor     eax,eax )]166.799999999999 code0
[2(        mov     eax,DWORD[eax]   ; cause exception )]157.199999999999 code0
[2(        pop     DWORD [fs:0]     ; disengage exception handler )]147.599999999999 code0
[2(        add     esp,4 )]137.999999999999 code0
[2(        ret )]128.399999999999 code0
[2(text:   db      'OK to rethrow, CANCEL to generate core dump',0 )]118.799999999999 code0
[2(caption:db      'SEGV',0 )]109.199999999999 code0
[2()]99.5999999999993 code0
[2(section .drectve info )]89.9999999999993 code0
[2(        db      '/defaultlib:user32.lib /defaultlib:msvcrt.lib ')]80.3999999999993 code2
(98)pageeven
restore showpage
%%Page: 99 99
%%BeginPageSetup
save
%%EndPageSetup
/99 pa
[(As you might imagine, it's perfectly possible to produce .exe binary with "safe exception handler table")]708 norm1
[(and yet engage unregistered exception handler. Indeed, handler is engaged by simply manipulating)]696 norm0
[2([fs:0])0( location at run-time, something linker has no power over, run-time that is. It should be explicitly)]684 norm0
[(mentioned that such failure to register handler's entry point with )2(safeseh)0( directive has undesired side)]672 norm0
[(effect at run-time. If exception is raised and unregistered handler is to be executed, the application is)]660 norm0
[(abruptly terminated without any notification whatsoever. One can argue that system could at least)]648 norm0
[(have logged some kind "non-safe exception handler in x.exe at address n" message in event log, but no,)]636 norm0
[(literally no notification is provided and user is left with no clue on what caused application failure.)]624 norm2
[(Finally, all mentions of linker in this paragraph refer to Microsoft linker version 7.x and later. Presence)]606 norm1
[(of )2(@feat.00)0( symbol and input data for "safe exception handler table" causes no backward)]594 norm0
[(incompatibilities and "safeseh" modules generated by NASM 2.03 and later can still be linked by earlier)]582 norm0
[(versions or non-Microsoft linkers.)]570 norm2
[{/section-8.5.3 xa}(Debugging formats for Windows )](8.5.3)549.6 subh3
[(The )2(win32)0( and )2(win64)0( formats support the Microsoft )(CodeView debugging format. Currently CodeView)]531.6 norm1
[(version 8 format is supported \()2(cv8)0(\), but newer versions of the CodeView debugger should be able to)]519.6 norm0
[(handle this format as well.)]507.6 norm2
[{/section-8.6 xa}2(win64)0(: Microsoft Win64 Object Files)](8.6)484.8 head3
[(The )2(win64)0( output format generates Microsoft Win64 object files, which is nearly 100% identical to the)]466.8 norm1
[2(win32)0( object format \(){/section-8.5 xl}(section 8.5){el}(\) with the exception that it is meant to target 64-bit code and the)]454.8 norm0
[(x86-64 platform altogether. This object file is used exactly the same as the )2(win32)0( object format \(){/section-8.5 xl}(section){el}]442.8 norm0
[{/section-8.5 xl}(8.5){el}(\), in NASM, with regard to this exception.)]430.8 norm2
[{/section-8.6.1 xa}2(win64)0(: Writing Position-Independent Code)](8.6.1)410.4 subh3
[(While )2(REL)0( takes good care of RIP-relative addressing, there is one aspect that is easy to overlook for a)]392.4 norm1
[(Win64 programmer: indirect references. Consider a switch dispatch table:)]380.4 norm2
[2(        jmp     qword [dsptch+rax*8] )]364.8 code1
[2(        ... )]355.2 code0
[2(dsptch: dq      case0 )]345.6 code0
[2(        dq      case1 )]336 code0
[2(        ...)]326.4 code2
[(Even a novice Win64 assembler programmer will soon realize that the code is not 64-bit savvy. Most)]308.4 norm1
[(notably linker will refuse to link it with)]296.4 norm2
[2('ADDR32' relocation to '.text' invalid without /LARGEADDRESSAWARE:NO)]280.8 code3
[(So [s]he will have to split jmp instruction as following:)]262.8 norm3
[2(        lea     rbx,[rel dsptch] )]247.2 code1
[2(        jmp     qword [rbx+rax*8])]237.6 code2
[(What happens behind the scene is that effective address in )2(lea)0( is encoded relative to instruction)]219.6 norm1
[(pointer, or in perfectly position-independent manner. But this is only part of the problem! Trouble is)]207.6 norm0
[(that in .dll context )2(caseN)0( relocations will make their way to the final module and might have to be)]195.6 norm0
[(adjusted at .dll load time. To be specific when it can't be loaded at preferred address. And when this)]183.6 norm0
[(occurs, pages with such relocations will be rendered private to current process, which kind of)]171.6 norm0
[(undermines the idea of sharing .dll. But no worry, it's trivial to fix:)]159.6 norm2
[2(        lea     rbx,[rel dsptch] )]144 code1
[2(        add     rbx,[rbx+rax*8] )]134.4 code0
[2(        jmp     rbx )]124.8 code0
[2(        ... )]115.2 code0
[2(dsptch: dq      case0-dsptch )]105.6 code0
[2(        dq      case1-dsptch )]95.9999999999997 code0
[2(        ...)]86.3999999999996 code2
(99)pageodd
restore showpage
%%Page: 100 100
%%BeginPageSetup
save
%%EndPageSetup
/100 pa
[(NASM version 2.03 and later provides another alternative, )2(wrt ..imagebase)0( operator, which returns)]708 norm1
[(offset from base address of the current image, be it .exe or .dll module, therefore the name. For those)]696 norm0
[(acquainted with PE-COFF format base address denotes start of )2(IMAGE_DOS_HEADER)0( structure. Here is)]684 norm0
[(how to implement switch with these image-relative references:)]672 norm2
[2(        lea     rbx,[rel dsptch] )]656.4 code1
[2(        mov     eax,[rbx+rax*4] )]646.8 code0
[2(        sub     rbx,dsptch wrt ..imagebase )]637.2 code0
[2(        add     rbx,rax )]627.6 code0
[2(        jmp     rbx )]618 code0
[2(        ... )]608.4 code0
[2(dsptch: dd      case0 wrt ..imagebase )]598.8 code0
[2(        dd      case1 wrt ..imagebase)]589.2 code2
[(One can argue that the operator is redundant. Indeed, snippet before last works just fine with any)]571.2 norm1
[(NASM version and is not even Windows specific... The real reason for implementing )2(wrt ..imagebase)]559.2 norm0
[(will become apparent in next paragraph.)]547.2 norm2
[(It should be noted that )2(wrt ..imagebase)0( is defined as 32-bit operand only:)]529.2 norm3
[2(        dd      label wrt ..imagebase           ; ok )]513.6 code1
[2(        dq      label wrt ..imagebase           ; bad )]504 code0
[2(        mov     eax,label wrt ..imagebase       ; ok )]494.4 code0
[2(        mov     rax,label wrt ..imagebase       ; bad)]484.8 code2
[{/section-8.6.2 xa}2(win64)0(: Structured Exception Handling)](8.6.2)464.4 subh3
[(Structured exception handing in Win64 is completely different matter from Win32. Upon exception)]446.4 norm1
[(program counter value is noted, and linker-generated table comprising start and end addresses of all)]434.4 norm0
[(the functions [in given executable module] is traversed and compared to the saved program counter.)]422.4 norm0
[(Thus so called )2(UNWIND_INFO)0( structure is identified. If it's not found, then offending subroutine is)]410.4 norm0
[(assumed to be "leaf" and just mentioned lookup procedure is attempted for its caller. In Win64 leaf)]398.4 norm0
[(function is such function that does not call any other function )1(nor)0( modifies any Win64 non-volatile)]386.4 norm0
[(registers, including stack pointer. The latter ensures that it's possible to identify leaf function's caller by)]374.4 norm0
[(simply pulling the value from the top of the stack.)]362.4 norm2
[(While majority of subroutines written in assembler are not calling any other function, requirement for)]344.4 norm1
[(non-volatile registers' immutability leaves developer with not more than 7 registers and no stack)]332.4 norm0
[(frame, which is not necessarily what [s]he counted with. Customarily one would meet the requirement)]320.4 norm0
[(by saving non-volatile registers on stack and restoring them upon return, so what can go wrong? If [and)]308.4 norm0
[(only if] an exception is raised at run-time and no )2(UNWIND_INFO)0( structure is associated with such "leaf")]296.4 norm0
[(function, the stack unwind procedure will expect to find caller's return address on the top of stack)]284.4 norm0
[(immediately followed by its frame. Given that developer pushed caller's non-volatile registers on stack,)]272.4 norm0
[(would the value on top point at some code segment or even addressable space? Well, developer can)]260.4 norm0
[(attempt copying caller's return address to the top of stack and this would actually work in some very)]248.4 norm0
[(specific circumstances. But unless developer can guarantee that these circumstances are always met,)]236.4 norm0
[(it's more appropriate to assume worst case scenario, i.e. stack unwind procedure going berserk.)]224.4 norm0
[(Relevant question is what happens then? Application is abruptly terminated without any notification)]212.4 norm0
[(whatsoever. Just like in Win32 case, one can argue that system could at least have logged "unwind)]200.4 norm0
[(procedure went berserk in x.exe at address n" in event log, but no, no trace of failure is left.)]188.4 norm2
[(Now, when we understand significance of the )2(UNWIND_INFO)0( structure, let's discuss what's in it and/or)]170.4 norm1
[(how it's processed. First of all it is checked for presence of reference to custom language-specific)]158.4 norm0
[(exception handler. If there is one, then it's invoked. Depending on the return value, execution flow is)]146.4 norm0
[(resumed \(exception is said to be "handled"\), )1(or)0( rest of )2(UNWIND_INFO)0( structure is processed as following.)]134.4 norm0
[(Beside optional reference to custom handler, it carries information about current callee's stack frame)]122.4 norm0
[(and where non-volatile registers are saved. Information is detailed enough to be able to reconstruct)]110.4 norm0
[(contents of caller's non-volatile registers upon call to current callee. And so caller's context is)]98.4000000000001 norm0
[(reconstructed, and then unwind procedure is repeated, i.e. another )2(UNWIND_INFO)0( structure is)]86.4000000000001 norm0
[(associated, this time, with caller's instruction pointer, which is then checked for presence of reference)]74.4000000000001 norm0
(100)pageeven
restore showpage
%%Page: 101 101
%%BeginPageSetup
save
%%EndPageSetup
/101 pa
[(to language-specific handler, etc. The procedure is recursively repeated till exception is handled. As last)]708 norm0
[(resort system "handles" it by generating memory core dump and terminating the application.)]696 norm2
[(As for the moment of this writing NASM unfortunately does not facilitate generation of above)]678 norm1
[(mentioned detailed information about stack frame layout. But as of version 2.03 it implements building)]666 norm0
[(blocks for generating structures involved in stack unwinding. As simplest example, here is how to)]654 norm0
[(deploy custom exception handler for leaf function:)]642 norm2
[2(default rel )]626.4 code1
[2(section .text )]616.8 code0
[2(extern  MessageBoxA )]607.2 code0
[2(handler: )]597.6 code0
[2(        sub     rsp,40 )]588 code0
[2(        mov     rcx,0 )]578.4 code0
[2(        lea     rdx,[text] )]568.8 code0
[2(        lea     r8,[caption] )]559.2 code0
[2(        mov     r9,1    ; MB_OKCANCEL )]549.6 code0
[2(        call    MessageBoxA )]540 code0
[2(        sub     eax,1   ; incidentally suits as return value )]530.4 code0
[2(                        ; for exception handler )]520.8 code0
[2(        add     rsp,40 )]511.2 code0
[2(        ret )]501.6 code0
[2(global  main )]492 code0
[2(main: )]482.4 code0
[2(        xor     rax,rax )]472.8 code0
[2(        mov     rax,QWORD[rax]  ; cause exception )]463.2 code0
[2(        ret )]453.6 code0
[2(main_end: )]444 code0
[2(text:   db      'OK to rethrow, CANCEL to generate core dump',0 )]434.4 code0
[2(caption:db      'SEGV',0 )]424.8 code0
[2()]415.2 code0
[2(section .pdata  rdata align=4 )]405.6 code0
[2(        dd      main wrt ..imagebase )]396 code0
[2(        dd      main_end wrt ..imagebase )]386.4 code0
[2(        dd      xmain wrt ..imagebase )]376.8 code0
[2(section .xdata  rdata align=8 )]367.2 code0
[2(xmain:  db      9,0,0,0 )]357.6 code0
[2(        dd      handler wrt ..imagebase )]348 code0
[2(section .drectve info )]338.4 code0
[2(        db      '/defaultlib:user32.lib /defaultlib:msvcrt.lib ')]328.8 code2
[(What you see in )2(.pdata)0( section is element of the "table comprising start and end addresses of function")]310.8 norm1
[(along with reference to associated )2(UNWIND_INFO)0( structure. And what you see in )2(.xdata)0( section is)]298.8 norm0
[2(UNWIND_INFO)0( structure describing function with no frame, but with designated exception handler.)]286.8 norm0
[(References are )1(required)0( to be image-relative \(which is the real reason for implementing)]274.8 norm0
[2(wrt ..imagebase)0( operator\). It should be noted that )2(rdata align=n)0(, as well as )2(wrt ..imagebase)0(, are)]262.8 norm0
[(optional in these two segments' contexts, i.e. can be omitted. Latter means that )1(all)0( 32-bit references,)]250.8 norm0
[(not only above listed required ones, placed into these two segments turn out image-relative. Why is it)]238.8 norm0
[(important to understand? Developer is allowed to append handler-specific data to )2(UNWIND_INFO)]226.8 norm0
[(structure, and if [s]he adds a 32-bit reference, then [s]he will have to remember to adjust its value to)]214.8 norm0
[(obtain the real pointer.)]202.8 norm2
[(As already mentioned, in Win64 terms leaf function is one that does not call any other function )1(nor)]184.8 norm1
[(modifies any non-volatile register, including stack pointer. But it's not uncommon that assembler)]172.8 norm0
[(programmer plans to utilize every single register and sometimes even have variable stack frame. Is)]160.8 norm0
[(there anything one can do with bare building blocks? I.e. besides manually composing fully-fledged)]148.8 norm0
[2(UNWIND_INFO)0( structure, which would surely be considered error-prone? Yes, there is. Recall that)]136.8 norm0
[(exception handler is called first, before stack layout is analyzed. As it turned out, it's perfectly possible)]124.8 norm0
[(to manipulate current callee's context in custom handler in manner that permits further stack)]112.8 norm0
[(unwinding. General idea is that handler would not actually "handle" the exception, but instead restore)]100.8 norm0
[(callee's context, as it was at its entry point and thus mimic leaf function. In other words, handler would)]88.7999999999997 norm0
[(simply undertake part of unwinding procedure. Consider following example:)]76.7999999999997 norm2
(101)pageodd
restore showpage
%%Page: 102 102
%%BeginPageSetup
save
%%EndPageSetup
/102 pa
[2(function: )]710.4 code1
[2(        mov     rax,rsp         ; copy rsp to volatile register )]700.8 code0
[2(        push    r15             ; save non-volatile registers )]691.2 code0
[2(        push    rbx )]681.6 code0
[2(        push    rbp )]672 code0
[2(        mov     r11,rsp         ; prepare variable stack frame )]662.4 code0
[2(        sub     r11,rcx )]652.8 code0
[2(        and     r11,-64 )]643.2 code0
[2(        mov     QWORD[r11],rax  ; check for exceptions )]633.6 code0
[2(        mov     rsp,r11         ; allocate stack frame )]624 code0
[2(        mov     QWORD[rsp],rax  ; save original rsp value )]614.4 code0
[2(magic_point: )]604.8 code0
[2(        ... )]595.2 code0
[2(        mov     r11,QWORD[rsp]  ; pull original rsp value )]585.6 code0
[2(        mov     rbp,QWORD[r11-24] )]576 code0
[2(        mov     rbx,QWORD[r11-16] )]566.4 code0
[2(        mov     r15,QWORD[r11-8] )]556.8 code0
[2(        mov     rsp,r11         ; destroy frame )]547.2 code0
[2(        ret)]537.6 code2
[(The keyword is that up to )2(magic_point)0( original )2(rsp)0( value remains in chosen volatile register and no)]519.6 norm1
[(non-volatile register, except for )2(rsp)0(, is modified. While past )2(magic_point)0( )2(rsp)0( remains constant till the)]507.6 norm0
[(very end of the )2(function)0(. In this case custom language-specific exception handler would look like this:)]495.6 norm2
[2(EXCEPTION_DISPOSITION handler \(EXCEPTION_RECORD *rec,ULONG64 frame, )]480 code1
[2(        CONTEXT *context,DISPATCHER_CONTEXT *disp\) )]470.4 code0
[2({   ULONG64 *rsp; )]460.8 code0
[2(    if \(context->Rip<\(ULONG64\)magic_point\) )]451.2 code0
[2(        rsp = \(ULONG64 *\)context->Rax; )]441.6 code0
[2(    else )]432 code0
[2(    {   rsp = \(\(ULONG64 **\)context->Rsp\)[0]; )]422.4 code0
[2(        context->Rbp = rsp[-3]; )]412.8 code0
[2(        context->Rbx = rsp[-2]; )]403.2 code0
[2(        context->R15 = rsp[-1]; )]393.6 code0
[2(    } )]384 code0
[2(    context->Rsp = \(ULONG64\)rsp; )]374.4 code0
[2()]364.8 code0
[2(    memcpy \(disp->ContextRecord,context,sizeof\(CONTEXT\)\); )]355.2 code0
[2(    RtlVirtualUnwind\(UNW_FLAG_NHANDLER,disp->ImageBase, )]345.6 code0
[2(        dips->ControlPc,disp->FunctionEntry,disp->ContextRecord, )]336 code0
[2(        &disp->HandlerData,&disp->EstablisherFrame,NULL\); )]326.4 code0
[2(    return ExceptionContinueSearch; )]316.8 code0
[2(})]307.2 code2
[(As custom handler mimics leaf function, corresponding )2(UNWIND_INFO)0( structure does not have to contain)]289.2 norm1
[(any information about stack frame and its layout.)]277.2 norm2
[{/section-8.7 xa}2(coff)0(: )(Common Object File Format)](8.7)254.4 head3
[(The )2(coff)0( output type produces )2(COFF)0( object files suitable for linking with the )(DJGPP linker.)]236.4 norm3
[2(coff)0( provides a default output file-name extension of )2(.o)0(.)]218.4 norm3
[(The )2(coff)0( format supports the same extensions to the )2(SECTION)0( directive as )2(win32)0( does, except that the)]200.4 norm1
[2(align)0( qualifier and the )2(info)0( section type are not supported.)]188.4 norm2
[{/section-8.8 xa}2(macho32)0( and )2(macho64)0(: )(Mach Object File Format)](8.8)165.6 head3
[(The )2(macho32)0( and )2(macho64)0( output formts produces Mach-O object files suitable for linking with the)]147.6 norm1
[(MacOS X linker. )2(macho)0( is a synonym for )2(macho32)0(.)]135.6 norm2
[2(macho)0( provides a default output file-name extension of )2(.o)0(.)]117.6 norm3
(102)pageeven
restore showpage
%%Page: 103 103
%%BeginPageSetup
save
%%EndPageSetup
/103 pa
[{/section-8.8.1 xa}2(macho)0( extensions to the )2(SECTION)0( Directive )](8.8.1)705.6 subh3
[(The )2(macho)0( output format specifies section names in the format ")1(segment)2(,)1(section)0(". No spaces are)]687.6 norm1
[(allowed around the comma. The following flags can also be specified:)]675.6 norm2
[2(data)0( \226 this section contains initialized data items)]657.6 bull3
[2(code)0( \226 this section contains code exclusively)]639.6 bull3
[2(mixed)0( \226 this section contains both code and data)]621.6 bull3
[2(bss)0( \226 this section is uninitialized and filled with zero)]603.6 bull3
[2(zerofill)0( \226 same as )2(bss)]585.6 bull3
[2(no_dead_strip)0( \226 inhibit dead code stripping for this section)]567.6 bull3
[2(live_support)0( \226 set the live support flag for this section)]549.6 bull3
[2(strip_static_syms)0( \226 strip static symbols for this section)]531.6 bull3
[2(debug)0( \226 this section contains debugging information)]513.6 bull3
[2(align=)1(alignment)0( \226 specify section alignment)]495.6 bull3
[(The default is )2(data)0(, unless the section name is )2(__text)0( or )2(__bss)0( in which case the default is )2(text)0( or )2(bss)0(,)]477.6 norm1
[(respectively.)]465.6 norm2
[(For compatibility with other Unix platforms, the following standard names are also supported:)]447.6 norm3
[2(.text    = __TEXT,__text  text )]432 code1
[2(.rodata  = __DATA,__const data )]422.4 code0
[2(.data    = __DATA,__data  data )]412.8 code0
[2(.bss     = __DATA,__bss   bss)]403.2 code2
[(If the )2(.rodata)0( section contains no relocations, it is instead put into the )2(__TEXT,__const)0( section unless)]385.2 norm1
[(this section has already been specified explicitly. However, it is probably better to specify)]373.2 norm0
[2(__TEXT,__const)0( and )2(__DATA,__const)0( explicitly as appropriate.)]361.2 norm2
[{/section-8.8.2 xa}(Thread Local Storage in Mach-O)(: )2(macho)0( special symbols and )2(WRT)](8.8.2)340.8 subh3
[(Mach-O defines the following special symbols that can be used on the right-hand side of the )2(WRT)]322.8 norm1
[(operator:)]310.8 norm2
[2(..tlvp)0( is used to specify access to thread-local storage.)]292.8 bull3
[2(..gotpcrel)0( is used to specify references to the Global Offset Table. The GOT is supported in the)]274.8 bull1
[2(macho64)0( format only.)]262.8 bull2
[{/section-8.8.3 xa}2(macho)0( specfic directive )2(subsections_via_symbols)](8.8.3)242.4 subh3
[(The directive )2(subsections_via_symbols)0( sets the )2(MH_SUBSECTIONS_VIA_SYMBOLS)0( flag in the Mach-O)]224.4 norm1
[(header, that effectively separates a block \(or a subsection\) based on a symbol. It is often used for)]212.4 norm0
[(eliminating dead codes by a linker.)]200.4 norm2
[(This directive takes no arguments.)]182.4 norm3
[(This is a macro implemented as a )2(%pragma)0(. It can also be specified in its )2(%pragma)0( form, in which case it)]164.4 norm1
[(will not affect non-Mach-O builds of the same source code:)]152.4 norm2
[2(     %pragma macho subsections_via_symbols)]136.8 code3
[{/section-8.8.4 xa}2(macho)0( specfic directive )2(no_dead_strip)](8.8.4)116.4 subh3
[(The directive )2(no_dead_strip)0( sets the Mach-O )2(SH_NO_DEAD_STRIP)0( section flag on the section containing)]98.4 norm1
[(a a specific symbol. This directive takes a list of symbols as its arguments.)]86.4 norm2
(103)pageodd
restore showpage
%%Page: 104 104
%%BeginPageSetup
save
%%EndPageSetup
/104 pa
[(This is a macro implemented as a )2(%pragma)0(. It can also be specified in its )2(%pragma)0( form, in which case it)]708 norm1
[(will not affect non-Mach-O builds of the same source code:)]696 norm2
[2(     %pragma macho no_dead_strip symbol...)]680.4 code3
[{/section-8.8.5 xa}2(macho)0( specific extensions to the )2(GLOBAL)0( Directive: )2(private_extern)](8.8.5)660 subh3
[(The directive extension to )2(GLOBAL)0( marks the symbol with limited global scope. For example, you can)]642 norm1
[(specify the global symbol with this extension:)]630 norm2
[2(global foo:private_extern )]614.4 code1
[2(foo: )]604.8 code0
[2(         ; codes)]595.2 code2
[(Using with static linker will clear the private extern attribute. But linker option like)]577.2 norm1
[2(-keep_private_externs)0( can avoid it.)]565.2 norm2
[{/section-8.9 xa}2(elf32)0(, )2(elf64)0(, )2(elfx32)0(: )(Executable and Linkable Format Object Files)](8.9)542.4 head3
[(The )2(elf32)0(, )2(elf64)0( and )2(elfx32)0( output formats generate )2(ELF32 and ELF64)0( \(Executable and Linkable)]524.4 norm1
[(Format\) object files, as used by Linux as well as )(Unix System V, including )(Solaris x86, )(UnixWare and )(SCO)]512.4 norm0
[(Unix. ELF provides a default output file-name extension of )2(.o)0(. )2(elf)0( is a synonym for )2(elf32)0(.)]500.4 norm2
[(The )2(elfx32)0( format is used for the )(x32 ABI, which is a 32-bit ABI with the CPU in 64-bit mode.)]482.4 norm3
[{/section-8.9.1 xa}(ELF specific directive )2(osabi)](8.9.1)462 subh3
[(The ELF header specifies the application binary interface for the target operating system \(OSABI\). This)]444 norm1
[(field can be set by using the )2(osabi)0( directive with the numeric value \(0-255\) of the target system. If this)]432 norm0
[(directive is not used, the default value will be "UNIX System V ABI" \(0\) which will work on most systems)]420 norm0
[(which support ELF.)]408 norm2
[{/section-8.9.2 xa}(ELF extensions to the )2(SECTION)0( Directive )](8.9.2)387.6 subh3
[(Like the )2(obj)0( format, )2(elf)0( allows you to specify additional information on the )2(SECTION)0( directive line, to)]369.6 norm1
[(control the type and properties of sections you declare. Section types and properties are generated)]357.6 norm0
[(automatically by NASM for the )(standard section names, but may still be overridden by these qualifiers.)]345.6 norm2
[(The available qualifiers are:)]327.6 norm3
[2(alloc)0( defines the section to be one which is loaded into memory when the program is run. )2(noalloc)]309.6 bull1
[(defines it to be one which is not, such as an informational or comment section.)]297.6 bull2
[2(exec)0( defines the section to be one which should have execute permission when the program is run.)]279.6 bull1
[2(noexec)0( defines it as one which should not.)]267.6 bull2
[2(write)0( defines the section to be one which should be writable when the program is run. )2(nowrite)]249.6 bull1
[(defines it as one which should not.)]237.6 bull2
[2(progbits)0( defines the section to be one with explicit contents stored in the object file: an ordinary)]219.6 bull1
[(code or data section, for example.)]207.6 bull2
[2(nobits)0( defines the section to be one with no explicit contents given, such as a BSS section.)]189.6 bull3
[2(note)0( indicates that this section contains ELF notes. The content of ELF notes are specified using)]171.6 bull1
[(normal assembly instructions; it is up to the programmer to ensure these are valid ELF notes.)]159.6 bull2
[2(preinit_array)0( indicates that this section contains function addresses to be called before any other)]141.6 bull1
[(initialization has happened.)]129.6 bull2
[2(init_array)0( indicates that this section contains function addresses to be called during initialization.)]111.6 bull3
[2(fini_array)0( indicates that this section contains function pointers to be called during termination.)]93.6 bull3
[2(align=)0(, used with a trailing number as in )2(obj)0(, gives the )(alignment requirements of the section.)]75.6 bull3
(104)pageeven
restore showpage
%%Page: 105 105
%%BeginPageSetup
save
%%EndPageSetup
/105 pa
[2(byte)0(, )2(word)0(, )2(dword)0(, )2(qword)0(, )2(tword)0(, )2(oword)0(, )2(yword)0(, or )2(zword)0( with an optional )2(*)0(multiplier specify the)]708 bull1
[(fundamental data item size for a section which contains either fixed-sized data structures or strings;)]696 bull0
[(it also sets a default alignment. This is generally used with the )2(strings)0( and )2(merge)0( attributes \(see)]684 bull0
[(below.\) For example )2(byte*4)0( defines a unit size of 4 bytes, with a default alignment of 1; )2(dword)0( also)]672 bull0
[(defines a unit size of 4 bytes, but with a default alignment of 4. The )2(align=)0( attribute, if specified,)]660 bull0
[(overrides this default alignment.)]648 bull2
[2(pointer)0( is equivalent to )2(dword)0( for )2(elf32)0( or )2(elfx32)0(, and )2(qword)0( for )2(elf64)0(.)]630 bull3
[2(strings)0( indicate that this section contains exclusively null-terminated strings. By default these are)]612 bull1
[(assumed to be byte strings, but a size specifier can be used to override that.)]600 bull2
[2(merge)0( indicates that duplicate data elements in this section should be merged with data elements)]582 bull1
[(from other object files. Data elements can be either fixed-sized objects or null-terminatedstrings)]570 bull0
[(\(with the )2(strings)0( attribute.\) A size specifier is required unless )2(strings)0( is specified, in which case the)]558 bull0
[(size defaults to )2(byte)0(.)]546 bull2
[2(tls)0( defines the section to be one which contains thread local variables.)]528 bull3
[(The defaults assumed by NASM if you do not specify the above qualifiers are:)]510 norm3
[( )( )( )( )( )( )( )( )( )]492 norm3
[2(section .text          progbits      alloc   exec    nowrite  align=16 )]476.4 code1
[2(section .rodata        progbits      alloc   noexec  nowrite  align=4 )]466.8 code0
[2(section .lrodata       progbits      alloc   noexec  nowrite  align=4 )]457.2 code0
[2(section .data          progbits      alloc   noexec  write    align=4 )]447.6 code0
[2(section .ldata         progbits      alloc   noexec  write    align=4 )]438 code0
[2(section .bss           nobits        alloc   noexec  write    align=4 )]428.4 code0
[2(section .lbss          nobits        alloc   noexec  write    align=4 )]418.8 code0
[2(section .tdata         progbits      alloc   noexec  write    align=4   tls )]409.2 code0
[2(section .tbss          nobits        alloc   noexec  write    align=4   tls )]399.6 code0
[2(section .comment       progbits      noalloc noexec  nowrite  align=1 )]390 code0
[2(section .preinit_array preinit_array alloc   noexec  nowrite  pointer )]380.4 code0
[2(section .init_array    init_array    alloc   noexec  nowrite  pointer )]370.8 code0
[2(section .fini_array    fini_array    alloc   noexec  nowrite  pointer )]361.2 code0
[2(section .note          note          noalloc noexec  nowrite  align=4 )]351.6 code0
[2(section other          progbits      alloc   noexec  nowrite  align=1)]342 code2
[(\(Any section name other than those in the above table is treated by default like )2(other)0( in the above)]324 norm1
[(table. Please note that section names are case sensitive.\))]312 norm2
[{/section-8.9.3 xa}(Position-Independent Code)(: ELF Special Symbols and )2(WRT)](8.9.3)291.6 subh3
[(Since )2(ELF)0( does not support segment-base references, the )2(WRT)0( operator is not used for its normal)]273.6 norm1
[(purpose; therefore NASM's )2(elf)0( output format makes use of )2(WRT)0( for a different purpose, namely the)]261.6 norm0
[(PIC-specific )(relocation types.)]249.6 norm2
[2(elf)0( defines five special symbols which you can use as the right-hand side of the )2(WRT)0( operator to obtain)]231.6 norm1
[(PIC relocation types. They are )2(..gotpc)0(, )2(..gotoff)0(, )2(..got)0(, )2(..plt)0( and )2(..sym)0(. Their functions are)]219.6 norm0
[(summarized here:)]207.6 norm2
[(Referring to the symbol marking the global offset table base using )2(wrt ..gotpc)0( will end up giving)]189.6 bull1
[(the distance from the beginning of the current section to the global offset table.)]177.6 bull0
[(\()2(_GLOBAL_OFFSET_TABLE_)0( is the standard symbol name used to refer to the )(GOT.\) So you would then)]165.6 bull0
[(need to add )2($$)0( to the result to get the real address of the GOT.)]153.6 bull2
[(Referring to a location in one of your own sections using )2(wrt ..gotoff)0( will give the distance from)]135.6 bull1
[(the beginning of the GOT to the specified location, so that adding on the address of the GOT would)]123.6 bull0
[(give the real address of the location you wanted.)]111.6 bull2
[(Referring to an external or global symbol using )2(wrt ..got)0( causes the linker to build an entry )1(in)0( the)]93.5999999999997 bull1
[(GOT containing the address of the symbol, and the reference gives the distance from the beginning)]81.5999999999997 bull0
(105)pageodd
restore showpage
%%Page: 106 106
%%BeginPageSetup
save
%%EndPageSetup
/106 pa
[(of the GOT to the entry; so you can add on the address of the GOT, load from the resulting address,)]708 bull0
[(and end up with the address of the symbol.)]696 bull2
[(Referring to a procedure name using )2(wrt ..plt)0( causes the linker to build a )(procedure linkage table)]678 bull1
[(entry for the symbol, and the reference gives the address of the )(PLT entry. You can only use this in)]666 bull0
[(contexts which would generate a PC-relative relocation normally \(i.e. as the destination for )2(CALL)0( or)]654 bull0
[2(JMP)0(\), since ELF contains no relocation type to refer to PLT entries absolutely.)]642 bull2
[(Referring to a symbol name using )2(wrt ..sym)0( causes NASM to write an ordinary relocation, but)]624 bull1
[(instead of making the relocation relative to the start of the section and then adding on the offset to)]612 bull0
[(the symbol, it will write a relocation record aimed directly at the symbol in question. The distinction)]600 bull0
[(is a necessary one due to a peculiarity of the dynamic linker.)]588 bull2
[(A fuller explanation of how to use these relocation types to write shared libraries entirely in NASM is)]570 norm1
[(given in ){/section-10.2 xl}(section 10.2){el}(.)]558 norm2
[{/section-8.9.4 xa}(Thread Local Storage in ELF)(: )2(elf)0( Special Symbols and )2(WRT)](8.9.4)537.6 subh3
[(In ELF32 mode, referring to an external or global symbol using )2(wrt ..tlsie)0( )( causes the linker to)]519.6 bull1
[(build an entry )1(in)0( the GOT containing the offset of the symbol within the TLS block, so you can access)]507.6 bull0
[(the value of the symbol with code such as:)]495.6 bull2
[2(       mov  eax,[tid wrt ..tlsie] )]480 code1
[2(       mov  [gs:eax],ebx)]470.4 code2
[(In ELF64 or ELFx32 mode, referring to an external or global symbol using )2(wrt ..gottpoff)0( )( causes the)]452.4 bull1
[(linker to build an entry )1(in)0( the GOT containing the offset of the symbol within the TLS block, so you)]440.4 bull0
[(can access the value of the symbol with code such as:)]428.4 bull2
[2(       mov   rax,[rel tid wrt ..gottpoff] )]412.8 code1
[2(       mov   rcx,[fs:rax])]403.2 code2
[{/section-8.9.5 xa}2(elf)0( Extensions to the )2(GLOBAL)0( Directive)](8.9.5)382.8 subh3
[2(ELF)0( object files can contain more information about a global symbol than just its address: they can)]364.8 norm1
[(contain the )(size of the symbol and its )(type as well. These are not merely debugger conveniences, but)]352.8 norm0
[(are actually necessary when the program being written is a )(shared library. NASM therefore supports)]340.8 norm0
[(some extensions to the )2(GLOBAL)0( directive, allowing you to specify these features.)]328.8 norm2
[(You can specify whether a global variable is a function or a data object by suffixing the name with a)]310.8 norm1
[(colon and the word )2(function)0( or )2(data)0(. \()2(object)0( is a synonym for )2(data)0(.\) For example:)]298.8 norm2
[2(global   hashlookup:function, hashtable:data)]283.2 code3
[(exports the global symbol )2(hashlookup)0( as a function and )2(hashtable)0( as a data object.)]265.2 norm3
[(Optionally, you can control the ELF visibility of the symbol. Just add one of the visibility keywords:)]247.2 norm1
[2(default)0(, )2(internal)0(, )2(hidden)0(, or )2(protected)0(. The default is )2(default)0( of course. For example, to make)]235.2 norm0
[2(hashlookup)0( hidden:)]223.2 norm2
[2(global   hashlookup:function hidden)]207.6 code3
[(Since version 2.15, it is possible to specify symbols binding. The keywords are: )2(weak)0( to generate weak)]189.6 norm1
[(symbol or )2(strong)0(. The default is )2(strong)0(.)]177.6 norm2
[(You can also specify the size of the data associated with the symbol, as a numeric expression \(which)]159.6 norm1
[(may involve labels, and even forward references\) after the type specifier. Like this:)]147.6 norm2
[2(global  hashtable:data \(hashtable.end - hashtable\) )]132 code1
[2()]122.4 code0
[2(hashtable: )]112.8 code0
[2(        db this,that,theother  ; some data here )]103.2 code0
[2(.end:)]93.5999999999998 code2
(106)pageeven
restore showpage
%%Page: 107 107
%%BeginPageSetup
save
%%EndPageSetup
/107 pa
[(This makes NASM automatically calculate the length of the table and place that information into the)]708 norm1
[2(ELF)0( symbol table.)]696 norm2
[(Declaring the type and size of global symbols is necessary when writing shared library code. For more)]678 norm1
[(information, see ){/section-10.2.4 xl}(section 10.2.4){el}(.)]666 norm2
[{/section-8.9.6 xa}2(elf)0( Extensions to the )2(EXTERN)0( Directive)](8.9.6)645.6 subh3
[(Since version 2.15 it is possible to specify keyword )2(weak)0( to generate weak external reference. Example:)]627.6 norm3
[2(extern weak_ref:weak)]612 code3
[{/section-8.9.7 xa}2(elf)0( Extensions to the )2(COMMON)0( Directive )](8.9.7)591.6 subh3
[2(ELF)0( also allows you to specify alignment requirements )(on common variables. This is done by putting a)]573.6 norm1
[(number \(which must be a power of two\) after the name and size of the common variable, separated \(as)]561.6 norm0
[(usual\) by a colon. For example, an array of doublewords would benefit from 4-byte alignment:)]549.6 norm2
[2(common  dwordarray 128:4)]534 code3
[(This declares the total size of the array to be 128 bytes, and requires that it be aligned on a 4-byte)]516 norm1
[(boundary.)]504 norm2
[{/section-8.9.8 xa}(16-bit code and ELF )](8.9.8)483.6 subh3
[(Older versions of the )2(ELF32)0( specification did not provide relocations for 8- and 16-bit values. It is now)]465.6 norm1
[(part of the formal specification, and any new enough linker should support them.)]453.6 norm2
[(ELF has currently no support for segmented programming.)]435.6 norm3
[{/section-8.9.9 xa}(Debug formats and ELF )](8.9.9)415.2 subh3
[(ELF provides debug information in )2(STABS)0( and )2(DWARF)0( formats. Line number information is generated for)]397.2 norm1
[(all executable sections, but please note that only the ".text" section is executable by default.)]385.2 norm2
[{/section-8.10 xa}2(aout)0(: Linux )2(a.out)0( Object Files)](8.10)362.4 head3
[(The )2(aout)0( format generates )2(a.out)0( object files, in the form used by early Linux systems \(current Linux)]344.4 norm1
[(systems use ELF, see ){/section-8.9 xl}(section 8.9){el}(.\) These differ from other )2(a.out)0( object files in that the magic number in)]332.4 norm0
[(the first four bytes of the file is different; also, some implementations of )2(a.out)0(, for example NetBSD's,)]320.4 norm0
[(support position-independent code, which Linux's implementation does not.)]308.4 norm2
[2(a.out)0( provides a default output file-name extension of )2(.o)0(.)]290.4 norm3
[2(a.out)0( is a very simple object format. It supports no special directives, no special symbols, no use of )2(SEG)]272.4 norm1
[(or )2(WRT)0(, and no extensions to any standard directives. It supports only the three )(standard section names)]260.4 norm0
[2(.text)0(, )2(.data)0( and )2(.bss)0(.)]248.4 norm2
[{/section-8.11 xa}2(aoutb)0(: )(NetBSD/)(FreeBSD/)(OpenBSD )2(a.out)0( Object Files)](8.11)225.6 head3
[(The )2(aoutb)0( format generates )2(a.out)0( object files, in the form used by the various free )2(BSD Unix)0( clones,)]207.6 norm1
[2(NetBSD)0(, )2(FreeBSD)0( and )2(OpenBSD)0(. For simple object files, this object format is exactly the same as )2(aout)]195.6 norm0
[(except for the magic number in the first four bytes of the file. However, the )2(aoutb)0( format supports)]183.6 norm0
[(position-independent code in the same way as the )2(elf)0( format, so you can use it to write )2(BSD)0( )(shared)]171.6 norm0
[(libraries.)]159.6 norm2
[2(aoutb)0( provides a default output file-name extension of )2(.o)0(.)]141.6 norm3
[2(aoutb)0( supports no special directives, no special symbols, and only the three )(standard section names)]123.6 norm1
[2(.text)0(, )2(.data)0( and )2(.bss)0(. However, it also supports the same use of )2(WRT)0( as )2(elf)0( does, to provide)]111.6 norm0
[(position-independent code relocation types. See ){/section-8.9.3 xl}(section 8.9.3){el}( for full documentation of this feature.)]99.6 norm2
(107)pageodd
restore showpage
%%Page: 108 108
%%BeginPageSetup
save
%%EndPageSetup
/108 pa
[2(aoutb)0( also supports the same extensions to the )2(GLOBAL)0( directive as )2(elf)0( does: see ){/section-8.9.5 xl}(section 8.9.5){el}( for)]708 norm1
[(documentation of this.)]696 norm2
[{/section-8.12 xa}2(as86)0(: )(Minix/Linux)( )2(as86)0( Object Files)](8.12)673.2 head3
[(The Minix/Linux 16-bit assembler )2(as86)0( has its own non-standard object file format. Although its)]655.2 norm1
[(companion linker )2(ld86)0( produces something close to ordinary )2(a.out)0( binaries as output, the object file)]643.2 norm0
[(format used to communicate between )2(as86)0( and )2(ld86)0( is not itself )2(a.out)0(.)]631.2 norm2
[(NASM supports this format, just in case it is useful, as )2(as86)0(. )2(as86)0( provides a default output file-name)]613.2 norm1
[(extension of )2(.o)0(.)]601.2 norm2
[2(as86)0( is a very simple object format \(from the NASM user's point of view\). It supports no special)]583.2 norm1
[(directives, no use of )2(SEG)0( or )2(WRT)0(, and no extensions to any standard directives. It supports only the three)]571.2 norm0
[(standard section names )2(.text)0(, )2(.data)0( and )2(.bss)0(. The only special symbol supported is )2(..start)0(.)]559.2 norm2
[{/section-8.13 xa}2(rdf)0(: )(Relocatable Dynamic Object File Format \(deprecated\))](8.13)536.4 head3
[1(The RDOFF format is strongly deprecated and has been disabled starting in NASM 2.15.04. The RDOFF)]518.4 norm1
[1(backend has been broken since at least NASM 2.14. The RDOFF utilities are scheduled to be removed from)]506.4 norm0
[1(the NASM distribution in NASM 2.16.)0( If you have a strong use case for the RDOFF format, file a bug report)]494.4 norm0
[(at ){(https://bugs.nasm.us/)wl}2(https://bugs.nasm.us/){el}0( as soon as possible.)]482.4 norm2
[(The )2(rdf)0( output format produces )2(RDOFF)0( object files. )2(RDOFF)0( \(Relocatable Dynamic Object File Format\) is a)]464.4 norm1
[(home-grown object-file format, designed alongside NASM itself and reflecting in its file format the)]452.4 norm0
[(internal structure of the assembler.)]440.4 norm2
[2(RDOFF)0( is not used by any well-known operating systems. Those writing their own systems, however,)]422.4 norm1
[(may well wish to use )2(RDOFF)0( as their object format, on the grounds that it is designed primarily for)]410.4 norm0
[(simplicity and contains very little file-header bureaucracy.)]398.4 norm2
[(The Unix NASM archive, and the DOS archive which includes sources, both contain an )2(rdoff)]380.4 norm1
[(subdirectory holding a set of RDOFF utilities: an RDF linker, an )2(RDF)0( static-library manager, an RDF file)]368.4 norm0
[(dump utility, and a program which will load and execute an RDF executable under Linux.)]356.4 norm2
[{/section-8.13.1 xa}(Requiring a Library: The )2(LIBRARY)0( Directive)](8.13.1)336 subh3
[2(RDOFF)0( contains a mechanism for an object file to demand a given library to be linked to the module,)]318 norm1
[(either at load time or run time. This is done by the )2(LIBRARY)0( directive, which takes one argument which)]306 norm0
[(is the name of the module:)]294 norm2
[2(    library  mylib.rdl)]278.4 code3
[{/section-8.13.2 xa}(Specifying a Module Name: The )2(MODULE)0( Directive)](8.13.2)258 subh3
[(Special )2(RDOFF)0( header record is used to store the name of the module. It can be used, for example, by)]240 norm1
[(run-time loader to perform dynamic linking. )2(MODULE)0( directive takes one argument which is the name of)]228 norm0
[(current module:)]216 norm2
[2(    module  mymodname)]200.4 code3
[(Note that when you statically link modules and tell linker to strip the symbols from output file, all)]182.4 norm1
[(module names will be stripped too. To avoid it, you should start module names with )2($)0(, like:)]170.4 norm2
[2(    module  $kernel.core)]154.8 code3
[{/section-8.13.3 xa}2(rdf)0( Extensions to the )2(GLOBAL)0( Directive)](8.13.3)134.4 subh3
[2(RDOFF)0( global symbols can contain additional information needed by the static linker. You can mark a)]116.4 norm1
[(global symbol as exported, thus telling the linker do not strip it from target executable or library file.)]104.4 norm0
[(Like in )2(ELF)0(, you can also specify whether an exported symbol is a procedure \(function\) or data object.)]92.4 norm2
[(Suffixing the name with a colon and the word )2(export)0( you make the symbol exported:)]74.4 norm3
(108)pageeven
restore showpage
%%Page: 109 109
%%BeginPageSetup
save
%%EndPageSetup
/109 pa
[2(    global  sys_open:export)]710.4 code3
[(To specify that exported symbol is a procedure \(function\), you add the word )2(proc)0( or )2(function)0( after)]692.4 norm1
[(declaration:)]680.4 norm2
[2(    global  sys_open:export proc)]664.8 code3
[(Similarly, to specify exported data object, add the word )2(data)0( or )2(object)0( to the directive:)]646.8 norm3
[2(    global  kernel_ticks:export data)]631.2 code3
[{/section-8.13.4 xa}2(rdf)0( Extensions to the )2(EXTERN)0( Directive)](8.13.4)610.8 subh3
[(By default the )2(EXTERN)0( directive in )2(RDOFF)0( declares a "pure external" symbol \(i.e. the static linker will)]592.8 norm1
[(complain if such a symbol is not resolved\). To declare an "imported" symbol, which must be resolved)]580.8 norm0
[(later during a dynamic linking phase, )2(RDOFF)0( offers an additional )2(import)0( modifier. As in )2(GLOBAL)0(, you can)]568.8 norm0
[(also specify whether an imported symbol is a procedure \(function\) or data object. For example:)]556.8 norm2
[2(    library $libc )]541.2 code1
[2(    extern  _open:import )]531.6 code0
[2(    extern  _printf:import proc )]522 code0
[2(    extern  _errno:import data)]512.4 code2
[(Here the directive )2(LIBRARY)0( is also included, which gives the dynamic linker a hint as to where to find)]494.4 norm1
[(requested symbols.)]482.4 norm2
[{/section-8.14 xa}2(dbg)0(: Debugging Format)](8.14)459.6 head3
[(The )2(dbg)0( format does not output an object file as such; instead, it outputs a text file which contains a)]441.6 norm1
[(complete list of all the transactions between the main body of NASM and the output-format back end)]429.6 norm0
[(module. It is primarily intended to aid people who want to write their own output drivers, so that they)]417.6 norm0
[(can get a clearer idea of the various requests the main program makes of the output driver, and in what)]405.6 norm0
[(order they happen.)]393.6 norm2
[(For simple files, one can easily use the )2(dbg)0( format like this:)]375.6 norm3
[2(nasm -f dbg filename.asm)]360 code3
[(which will generate a diagnostic file called )2(filename.dbg)0(. However, this will not work well on files)]342 norm1
[(which were designed for a different object format, because each object format defines its own macros)]330 norm0
[(\(usually user-level forms of directives\), and those macros will not be defined in the )2(dbg)0( format.)]318 norm0
[(Therefore it can be useful to run NASM twice, in order to do the preprocessing with the native object)]306 norm0
[(format selected:)]294 norm2
[2(nasm -e -f rdf -o rdfprog.i rdfprog.asm )]278.4 code1
[2(nasm -a -f dbg rdfprog.i)]268.8 code2
[(This preprocesses )2(rdfprog.asm)0( into )2(rdfprog.i)0(, keeping the )2(rdf)0( object format selected in order to make)]250.8 norm1
[(sure RDF special directives are converted into primitive form correctly. Then the preprocessed source is)]238.8 norm0
[(fed through the )2(dbg)0( format to generate the final diagnostic output.)]226.8 norm2
[(This workaround will still typically not work for programs intended for )2(obj)0( format, because the )2(obj)]208.8 norm1
[2(SEGMENT)0( and )2(GROUP)0( directives have side effects of defining the segment and group names as symbols;)]196.8 norm0
[2(dbg)0( will not do this, so the program will not assemble. You will have to work around that by defining the)]184.8 norm0
[(symbols yourself \(using )2(EXTERN)0(, for example\) if you really need to get a )2(dbg)0( trace of an )2(obj)0(\226specific)]172.8 norm0
[(source file.)]160.8 norm2
[2(dbg)0( accepts any section name and any directives at all, and logs them all to its output file.)]142.8 norm3
[2(dbg)0( accepts and logs any )2(%pragma)0(, but the specific )2(%pragma)0(:)]124.8 norm3
[2(     %pragma dbg maxdump <size>)]109.2 code3
[(where )2(<size>)0( is either a number or )2(unlimited)0(, can be used to control the maximum size for dumping)]91.1999999999999 norm1
[(the full contents of a )2(rawdata)0( output object.)]79.1999999999999 norm2
(109)pageodd
restore showpage
%%Page: 110 110
%%BeginPageSetup
save
%%EndPageSetup
/110 pa
(110)pageeven
restore showpage
%%Page: 111 111
%%BeginPageSetup
save
%%EndPageSetup
/111 pa
[{/chapter-9 xa}(Chapter 9: Writing 16-bit Code \(DOS, Windows 3/3.1\))]698.4 chap3
[(This chapter attempts to cover some of the common issues encountered when writing 16-bit code to)]662.4 norm1
[(run under )2(MS-DOS)0( or )2(Windows 3.x)0(. It covers how to link programs to produce )2(.EXE)0( or )2(.COM)0( files, how to)]650.4 norm0
[(write )2(.SYS)0( device drivers, and how to interface assembly language code with 16-bit C compilers and)]638.4 norm0
[(with Borland Pascal.)]626.4 norm2
[{/section-9.1 xa}(Producing )2(.EXE)0( Files)](9.1)603.6 head3
[(Any large program written under DOS needs to be built as a )2(.EXE)0( file: only )2(.EXE)0( files have the necessary)]585.6 norm1
[(internal structure required to span more than one 64K segment. )(Windows programs, also, have to be)]573.6 norm0
[(built as )2(.EXE)0( files, since Windows does not support the )2(.COM)0( format.)]561.6 norm2
[(In general, you generate )2(.EXE)0( files by using the )2(obj)0( output format to produce one or more )2(.obj)0( files,)]543.6 norm1
[(and then linking them together using a linker. However, NASM also supports the direct generation of)]531.6 norm0
[(simple DOS )2(.EXE)0( files using the )2(bin)0( output format \(by using )2(DB)0( and )2(DW)0( to construct the )2(.EXE)0( file header\),)]519.6 norm0
[(and a macro package is supplied to do this. Thanks to Yann Guidon for contributing the code for this.)]507.6 norm2
[(NASM may also support )2(.EXE)0( natively as another output format in future releases.)]489.6 norm3
[{/section-9.1.1 xa}(Using the )2(obj)0( Format To Generate )2(.EXE)0( Files)](9.1.1)469.2 subh3
[(This section describes the usual method of generating )2(.EXE)0( files by linking )2(.OBJ)0( files together.)]451.2 norm3
[(Most 16-bit programming language packages come with a suitable linker; if you have none of these,)]433.2 norm1
[(there is a free linker called )(VAL)(, available in )2(LZH)0( archive format from ){(ftp://x2ftp.oulu.fi/pub/msdos/programming/lang/)wl}2(x2ftp.oulu.fi){el}0(. An LZH archiver)]421.2 norm0
[(can be found at ){(ftp://ftp.simtel.net/pub/simtelnet/msdos/arcers)wl}2(ftp.simtel.net){el}0(. There is another `free' linker \(though this one doesn't come with)]409.2 norm0
[(sources\) called )(FREELINK, available from ){(http://www.pcorner.com/tpc/old/3-101.html)wl}2(www.pcorner.com){el}0(. A third, )2(djlink)0(, written by DJ Delorie, is)]397.2 norm0
[(available at ){(http://www.delorie.com/djgpp/16bit/djlink/)wl}2(www.delorie.com){el}0(. A fourth linker, )2(ALINK)0(, written by Anthony A.J. Williams, is available at)]385.2 norm0
[{(http://alink.sourceforge.net)wl}2(alink.sourceforge.net){el}0(.)]373.2 norm2
[(When linking several )2(.OBJ)0( files into a )2(.EXE)0( file, you should ensure that exactly one of them has a start)]355.2 norm1
[(point defined \(using the )2(..start)0( special symbol defined by the )2(obj)0( format: see ){/section-8.4.6 xl}(section 8.4.6){el}(\). If no)]343.2 norm0
[(module defines a start point, the linker will not know what value to give the entry-point field in the)]331.2 norm0
[(output file header; if more than one defines a start point, the linker will not know )1(which)0( value to use.)]319.2 norm2
[(An example of a NASM source file which can be assembled to a )2(.OBJ)0( file and linked on its own to a )2(.EXE)]301.2 norm1
[(is given here. It demonstrates the basic principles of defining a stack, initialising the segment registers,)]289.2 norm0
[(and declaring a start point. This file is also provided in the )2(test)0( subdirectory of the NASM archives,)]277.2 norm0
[(under the name )2(objexe.asm)0(.)]265.2 norm2
[2(segment code )]249.6 code1
[2()]240 code0
[2(..start: )]230.4 code0
[2(        mov     ax,data )]220.8 code0
[2(        mov     ds,ax )]211.2 code0
[2(        mov     ax,stack )]201.6 code0
[2(        mov     ss,ax )]192 code0
[2(        mov     sp,stacktop)]182.4 code2
[(This initial piece of code sets up )2(DS)0( to point to the data segment, and initializes )2(SS)0( and )2(SP)0( to point to the)]164.4 norm1
[(top of the provided stack. Notice that interrupts are implicitly disabled for one instruction after a move)]152.4 norm0
[(into )2(SS)0(, precisely for this situation, so that there's no chance of an interrupt occurring between the)]140.4 norm0
[(loads of )2(SS)0( and )2(SP)0( and not having a stack to execute on.)]128.4 norm2
[(Note also that the special symbol )2(..start)0( is defined at the beginning of this code, which means that)]110.4 norm1
[(will be the entry point into the resulting executable file.)]98.3999999999999 norm2
(111)pageodd
restore showpage
%%Page: 112 112
%%BeginPageSetup
save
%%EndPageSetup
/112 pa
[2(        mov     dx,hello )]710.4 code1
[2(        mov     ah,9 )]700.8 code0
[2(        int     0x21)]691.2 code2
[(The above is the main program: load )2(DS:DX)0( with a pointer to the greeting message \()2(hello)0( is implicitly)]673.2 norm1
[(relative to the segment )2(data)0(, which was loaded into )2(DS)0( in the setup code, so the full pointer is valid\),)]661.2 norm0
[(and call the DOS print-string function.)]649.2 norm2
[2(        mov     ax,0x4c00 )]633.6 code1
[2(        int     0x21)]624 code2
[(This terminates the program using another DOS system call.)]606 norm3
[2(segment data )]590.4 code1
[2()]580.8 code0
[2(hello:  db      'hello, world', 13, 10, '$')]571.2 code2
[(The data segment contains the string we want to display.)]553.2 norm3
[2(segment stack stack )]537.6 code1
[2(        resb 64 )]528 code0
[2(stacktop:)]518.4 code2
[(The above code declares a stack segment containing 64 bytes of uninitialized stack space, and points)]500.4 norm1
[2(stacktop)0( at the top of it. The directive )2(segment stack stack)0( defines a segment )1(called)0( )2(stack)0(, and also)]488.4 norm0
[(of )1(type)0( )2(STACK)0(. The latter is not necessary to the correct running of the program, but linkers are likely to)]476.4 norm0
[(issue warnings or errors if your program has no segment of type )2(STACK)0(.)]464.4 norm2
[(The above file, when assembled into a )2(.OBJ)0( file, will link on its own to a valid )2(.EXE)0( file, which when run)]446.4 norm1
[(will print `hello, world' and then exit.)]434.4 norm2
[{/section-9.1.2 xa}(Using the )2(bin)0( Format To Generate )2(.EXE)0( Files)](9.1.2)414 subh3
[(The )2(.EXE)0( file format is simple enough that it's possible to build a )2(.EXE)0( file by writing a pure-binary)]396 norm1
[(program and sticking a 32-byte header on the front. This header is simple enough that it can be)]384 norm0
[(generated using )2(DB)0( and )2(DW)0( commands by NASM itself, so that you can use the )2(bin)0( output format to)]372 norm0
[(directly generate )2(.EXE)0( files.)]360 norm2
[(Included in the NASM archives, in the )2(misc)0( subdirectory, is a file )2(exebin.mac)0( of macros. It defines three)]342 norm1
[(macros: )2(EXE_begin)0(, )2(EXE_stack)0( and )2(EXE_end)0(.)]330 norm2
[(To produce a )2(.EXE)0( file using this method, you should start by using )2(%include)0( to load the )2(exebin.mac)]312 norm1
[(macro package into your source file. You should then issue the )2(EXE_begin)0( macro call \(which takes no)]300 norm0
[(arguments\) to generate the file header data. Then write code as normal for the )2(bin)0( format \226 you can)]288 norm0
[(use all three standard sections )2(.text)0(, )2(.data)0( and )2(.bss)0(. At the end of the file you should call the )2(EXE_end)]276 norm0
[(macro \(again, no arguments\), which defines some symbols to mark section sizes, and these symbols)]264 norm0
[(are referred to in the header code generated by )2(EXE_begin)0(.)]252 norm2
[(In this model, the code you end up writing starts at )2(0x100)0(, just like a )2(.COM)0( file \226 in fact, if you strip off the)]234 norm1
[(32-byte header from the resulting )2(.EXE)0( file, you will have a valid )2(.COM)0( program. All the segment bases)]222 norm0
[(are the same, so you are limited to a 64K program, again just like a )2(.COM)0( file. Note that an )2(ORG)0( directive)]210 norm0
[(is issued by the )2(EXE_begin)0( macro, so you should not explicitly issue one of your own.)]198 norm2
[(You can't directly refer to your segment base value, unfortunately, since this would require a relocation)]180 norm1
[(in the header, and things would get a lot more complicated. So you should get your segment base by)]168 norm0
[(copying it out of )2(CS)0( instead.)]156 norm2
[(On entry to your )2(.EXE)0( file, )2(SS:SP)0( are already set up to point to the top of a 2Kb stack. You can adjust the)]138 norm1
[(default stack size of 2Kb by calling the )2(EXE_stack)0( macro. For example, to change the stack size of your)]126 norm0
[(program to 64 bytes, you would call )2(EXE_stack 64)0(.)]114 norm2
[(A sample program which generates a )2(.EXE)0( file in this way is given in the )2(test)0( subdirectory of the NASM)]96 norm1
[(archive, as )2(binexe.asm)0(.)]84 norm2
(112)pageeven
restore showpage
%%Page: 113 113
%%BeginPageSetup
save
%%EndPageSetup
/113 pa
[{/section-9.2 xa}(Producing )2(.COM)0( Files)](9.2)703.2 head3
[(While large DOS programs must be written as )2(.EXE)0( files, small ones are often better written as )2(.COM)]685.2 norm1
[(files. )2(.COM)0( files are pure binary, and therefore most easily produced using the )2(bin)0( output format.)]673.2 norm2
[{/section-9.2.1 xa}(Using the )2(bin)0( Format To Generate )2(.COM)0( Files)](9.2.1)652.8 subh3
[2(.COM)0( files expect to be loaded at offset )2(100h)0( into their segment \(though the segment may change\).)]634.8 norm1
[(Execution then begins at )2(100h)0(, i.e. right at the start of the program. So to write a )2(.COM)0( program, you)]622.8 norm0
[(would create a source file looking like)]610.8 norm2
[2(        org 100h )]595.2 code1
[2()]585.6 code0
[2(section .text )]576 code0
[2()]566.4 code0
[2(start: )]556.8 code0
[2(        ; put your code here )]547.2 code0
[2()]537.6 code0
[2(section .data )]528 code0
[2()]518.4 code0
[2(        ; put data items here )]508.8 code0
[2()]499.2 code0
[2(section .bss )]489.6 code0
[2()]480 code0
[2(        ; put uninitialized data here)]470.4 code2
[(The )2(bin)0( format puts the )2(.text)0( section first in the file, so you can declare data or BSS items before)]452.4 norm1
[(beginning to write code if you want to and the code will still end up at the front of the file where it)]440.4 norm0
[(belongs.)]428.4 norm2
[(The BSS \(uninitialized data\) section does not take up space in the )2(.COM)0( file itself: instead, addresses of)]410.4 norm1
[(BSS items are resolved to point at space beyond the end of the file, on the grounds that this will be free)]398.4 norm0
[(memory when the program is run. Therefore you should not rely on your BSS being initialized to all)]386.4 norm0
[(zeros when you run.)]374.4 norm2
[(To assemble the above program, you should use a command line like)]356.4 norm3
[2(nasm myprog.asm -fbin -o myprog.com)]340.8 code3
[(The )2(bin)0( format would produce a file called )2(myprog)0( if no explicit output file name were specified, so you)]322.8 norm1
[(have to override it and give the desired file name.)]310.8 norm2
[{/section-9.2.2 xa}(Using the )2(obj)0( Format To Generate )2(.COM)0( Files)](9.2.2)290.4 subh3
[(If you are writing a )2(.COM)0( program as more than one module, you may wish to assemble several )2(.OBJ)]272.4 norm1
[(files and link them together into a )2(.COM)0( program. You can do this, provided you have a linker capable of)]260.4 norm0
[(outputting )2(.COM)0( files directly \()(TLINK does this\), or alternatively a converter program such as )2(EXE2BIN)0( to)]248.4 norm0
[(transform the )2(.EXE)0( file output from the linker into a )2(.COM)0( file.)]236.4 norm2
[(If you do this, you need to take care of several things:)]218.4 norm3
[(The first object file containing code should start its code segment with a line like )2(RESB 100h)0(. This is)]200.4 bull1
[(to ensure that the code begins at offset )2(100h)0( relative to the beginning of the code segment, so that)]188.4 bull0
[(the linker or converter program does not have to adjust address references within the file when)]176.4 bull0
[(generating the )2(.COM)0( file. Other assemblers use an )2(ORG)0( directive for this purpose, but )2(ORG)0( in NASM is a)]164.4 bull0
[(format-specific directive to the )2(bin)0( output format, and does not mean the same thing as it does in)]152.4 bull0
[(MASM-compatible assemblers.)]140.4 bull2
[(You don't need to define a stack segment.)]122.4 bull3
[(All your segments should be in the same group, so that every time your code or data references a)]104.4 bull1
[(symbol offset, all offsets are relative to the same segment base. This is because, when a )2(.COM)0( file is)]92.4000000000001 bull0
[(loaded, all the segment registers contain the same value.)]80.4000000000001 bull2
(113)pageodd
restore showpage
%%Page: 114 114
%%BeginPageSetup
save
%%EndPageSetup
/114 pa
[{/section-9.3 xa}(Producing )2(.SYS)0( Files)](9.3)703.2 head3
[(MS-DOS device drivers \226 )2(.SYS)0( files \226 are pure binary files, similar to )2(.COM)0( files, except that they start at)]685.2 norm1
[(origin zero rather than )2(100h)0(. Therefore, if you are writing a device driver using the )2(bin)0( format, you do)]673.2 norm0
[(not need the )2(ORG)0( directive, since the default origin for )2(bin)0( is zero. Similarly, if you are using )2(obj)0(, you do)]661.2 norm0
[(not need the )2(RESB 100h)0( at the start of your code segment.)]649.2 norm2
[2(.SYS)0( files start with a header structure, containing pointers to the various routines inside the driver)]631.2 norm1
[(which do the work. This structure should be defined at the start of the code segment, even though it is)]619.2 norm0
[(not actually code.)]607.2 norm2
[(For more information on the format of )2(.SYS)0( files, and the data which has to go in the header structure,)]589.2 norm1
[(a list of books is given in the Frequently Asked Questions list for the newsgroup)]577.2 norm0
[{(news:comp.os.msdos.programmer)wl}2(comp.os.msdos.programmer){el}0(.)]565.2 norm2
[{/section-9.4 xa}(Interfacing to 16-bit C Programs)](9.4)542.4 head3
[(This section covers the basics of writing assembly routines that call, or are called from, C programs. To)]524.4 norm1
[(do this, you would typically write an assembly module as a )2(.OBJ)0( file, and link it with your C modules to)]512.4 norm0
[(produce a )(mixed-language program.)]500.4 norm2
[{/section-9.4.1 xa}(External Symbol Names)](9.4.1)480 subh3
[(C compilers have the convention that the names of all global symbols \(functions or data\) they define)]462 norm1
[(are formed by prefixing an underscore to the name as it appears in the C program. So, for example, the)]450 norm0
[(function a C programmer thinks of as )2(printf)0( appears to an assembly language programmer as)]438 norm0
[2(_printf)0(. This means that in your assembly programs, you can define symbols without a leading)]426 norm0
[(underscore, and not have to worry about name clashes with C symbols.)]414 norm2
[(If you find the underscores inconvenient, you can define macros to replace the )2(GLOBAL)0( and )2(EXTERN)]396 norm1
[(directives as follows:)]384 norm2
[2(%macro  cglobal 1 )]368.4 code1
[2()]358.8 code0
[2(  global  _%1 )]349.2 code0
[2(  %define %1 _%1 )]339.6 code0
[2()]330 code0
[2(%endmacro )]320.4 code0
[2()]310.8 code0
[2(%macro  cextern 1 )]301.2 code0
[2()]291.6 code0
[2(  extern  _%1 )]282 code0
[2(  %define %1 _%1 )]272.4 code0
[2()]262.8 code0
[2(%endmacro)]253.2 code2
[(\(These forms of the macros only take one argument at a time; a )2(%rep)0( construct could solve this.\))]235.2 norm3
[(If you then declare an external like this:)]217.2 norm3
[2(cextern printf)]201.6 code3
[(then the macro will expand it as)]183.6 norm3
[2(extern  _printf )]168 code1
[2(%define printf _printf)]158.4 code2
[(Thereafter, you can reference )2(printf)0( as if it was a symbol, and the preprocessor will put the leading)]140.4 norm1
[(underscore on where necessary.)]128.4 norm2
[(The )2(cglobal)0( macro works similarly. You must use )2(cglobal)0( before defining the symbol in question, but)]110.4 norm1
[(you would have had to do that anyway if you used )2(GLOBAL)0(.)]98.3999999999996 norm2
[(Also see ){/section-2.1.28 xl}(section 2.1.28){el}(.)]80.3999999999996 norm3
(114)pageeven
restore showpage
%%Page: 115 115
%%BeginPageSetup
save
%%EndPageSetup
/115 pa
[{/section-9.4.2 xa}(Memory Models)](9.4.2)705.6 subh3
[(NASM contains no mechanism to support the various C memory models directly; you have to keep track)]687.6 norm1
[(yourself of which one you are writing for. This means you have to keep track of the following things:)]675.6 norm2
[(In models using a single code segment \(tiny, small and compact\), functions are near. This means)]657.6 bull1
[(that function pointers, when stored in data segments or pushed on the stack as function arguments,)]645.6 bull0
[(are 16 bits long and contain only an offset field \(the )2(CS)0( register never changes its value, and always)]633.6 bull0
[(gives the segment part of the full function address\), and that functions are called using ordinary)]621.6 bull0
[(near )2(CALL)0( instructions and return using )2(RETN)0( \(which, in NASM, is synonymous with )2(RET)0( anyway\). This)]609.6 bull0
[(means both that you should write your own routines to return with )2(RETN)0(, and that you should call)]597.6 bull0
[(external C routines with near )2(CALL)0( instructions.)]585.6 bull2
[(In models using more than one code segment \(medium, large and huge\), functions are far. This)]567.6 bull1
[(means that function pointers are 32 bits long \(consisting of a 16-bit offset followed by a 16-bit)]555.6 bull0
[(segment\), and that functions are called using )2(CALL FAR)0( \(or )2(CALL seg:offset)0(\) and return using )2(RETF)0(.)]543.6 bull0
[(Again, you should therefore write your own routines to return with )2(RETF)0( and use )2(CALL FAR)0( to call)]531.6 bull0
[(external routines.)]519.6 bull2
[(In models using a single data segment \(tiny, small and medium\), data pointers are 16 bits long,)]501.6 bull1
[(containing only an offset field \(the )2(DS)0( register doesn't change its value, and always gives the)]489.6 bull0
[(segment part of the full data item address\).)]477.6 bull2
[(In models using more than one data segment \(compact, large and huge\), data pointers are 32 bits)]459.6 bull1
[(long, consisting of a 16-bit offset followed by a 16-bit segment. You should still be careful not to)]447.6 bull0
[(modify )2(DS)0( in your routines without restoring it afterwards, but )2(ES)0( is free for you to use to access the)]435.6 bull0
[(contents of 32-bit data pointers you are passed.)]423.6 bull2
[(The huge memory model allows single data items to exceed 64K in size. In all other memory models,)]405.6 bull1
[(you can access the whole of a data item just by doing arithmetic on the offset field of the pointer you)]393.6 bull0
[(are given, whether a segment field is present or not; in huge model, you have to be more careful of)]381.6 bull0
[(your pointer arithmetic.)]369.6 bull2
[(In most memory models, there is a )1(default)0( data segment, whose segment address is kept in )2(DS)]351.6 bull1
[(throughout the program. This data segment is typically the same segment as the stack, kept in )2(SS)0(, so)]339.6 bull0
[(that functions' local variables \(which are stored on the stack\) and global data items can both be)]327.6 bull0
[(accessed easily without changing )2(DS)0(. Particularly large data items are typically stored in other)]315.6 bull0
[(segments. However, some memory models \(though not the standard ones, usually\) allow the)]303.6 bull0
[(assumption that )2(SS)0( and )2(DS)0( hold the same value to be removed. Be careful about functions' local)]291.6 bull0
[(variables in this latter case.)]279.6 bull2
[(In models with a single code segment, the segment is called )2(_TEXT)0(, so your code segment must also go)]261.6 norm1
[(by this name in order to be linked into the same place as the main code segment. In models with a)]249.6 norm0
[(single data segment, or with a default data segment, it is called )2(_DATA)0(.)]237.6 norm2
[{/section-9.4.3 xa}(Function Definitions and Function Calls)](9.4.3)217.2 subh3
[(The )(C calling convention in 16-bit programs is as follows. In the following description, the words )1(caller)]199.2 norm1
[(and )1(callee)0( are used to denote the function doing the calling and the function which gets called.)]187.2 norm2
[(The caller pushes the function's parameters on the stack, one after another, in reverse order \(right)]169.2 bull1
[(to left, so that the first argument specified to the function is pushed last\).)]157.2 bull2
[(The caller then executes a )2(CALL)0( instruction to pass control to the callee. This )2(CALL)0( is either near or far)]139.2 bull1
[(depending on the memory model.)]127.2 bull2
[(The callee receives control, and typically \(although this is not actually necessary, in functions which)]109.2 bull1
[(do not need to access their parameters\) starts by saving the value of )2(SP)0( in )2(BP)0( so as to be able to use)]97.2 bull0
[2(BP)0( as a base pointer to find its parameters on the stack. However, the caller was probably doing this)]85.2 bull0
(115)pageodd
restore showpage
%%Page: 116 116
%%BeginPageSetup
save
%%EndPageSetup
/116 pa
[(too, so part of the calling convention states that )2(BP)0( must be preserved by any C function. Hence the)]708 bull0
[(callee, if it is going to set up )2(BP)0( as a )1(frame pointer)0(, must push the previous value first.)]696 bull2
[(The callee may then access its parameters relative to )2(BP)0(. The word at )2([BP])0( holds the previous value)]678 bull1
[(of )2(BP)0( as it was pushed; the next word, at )2([BP+2])0(, holds the offset part of the return address, pushed)]666 bull0
[(implicitly by )2(CALL)0(. In a small-model \(near\) function, the parameters start after that, at )2([BP+4])0(; in a)]654 bull0
[(large-model \(far\) function, the segment part of the return address lives at )2([BP+4])0(, and the)]642 bull0
[(parameters begin at )2([BP+6])0(. The leftmost parameter of the function, since it was pushed last, is)]630 bull0
[(accessible at this offset from )2(BP)0(; the others follow, at successively greater offsets. Thus, in a function)]618 bull0
[(such as )2(printf)0( which takes a variable number of parameters, the pushing of the parameters in)]606 bull0
[(reverse order means that the function knows where to find its first parameter, which tells it the)]594 bull0
[(number and type of the remaining ones.)]582 bull2
[(The callee may also wish to decrease )2(SP)0( further, so as to allocate space on the stack for local)]564 bull1
[(variables, which will then be accessible at negative offsets from )2(BP)0(.)]552 bull2
[(The callee, if it wishes to return a value to the caller, should leave the value in )2(AL)0(, )2(AX)0( or )2(DX:AX)]534 bull1
[(depending on the size of the value. Floating-point results are sometimes \(depending on the)]522 bull0
[(compiler\) returned in )2(ST0)0(.)]510 bull2
[(Once the callee has finished processing, it restores )2(SP)0( from )2(BP)0( if it had allocated local stack space,)]492 bull1
[(then pops the previous value of )2(BP)0(, and returns via )2(RETN)0( or )2(RETF)0( depending on memory model.)]480 bull2
[(When the caller regains control from the callee, the function parameters are still on the stack, so it)]462 bull1
[(typically adds an immediate constant to )2(SP)0( to remove them \(instead of executing a number of slow)]450 bull0
[2(POP)0( instructions\). Thus, if a function is accidentally called with the wrong number of parameters due)]438 bull0
[(to a prototype mismatch, the stack will still be returned to a sensible state since the caller, which)]426 bull0
[1(knows)0( how many parameters it pushed, does the removing.)]414 bull2
[(It is instructive to compare this calling convention with that for Pascal programs \(described in ){/section-9.5.1 xl}(section){el}]396 norm1
[{/section-9.5.1 xl}(9.5.1){el}(\). Pascal has a simpler convention, since no functions have variable numbers of parameters.)]384 norm0
[(Therefore the callee knows how many parameters it should have been passed, and is able to deallocate)]372 norm0
[(them from the stack itself by passing an immediate argument to the )2(RET)0( or )2(RETF)0( instruction, so the)]360 norm0
[(caller does not have to do it. Also, the parameters are pushed in left-to-right order, not right-to-left,)]348 norm0
[(which means that a compiler can give better guarantees about sequence points without performance)]336 norm0
[(suffering.)]324 norm2
[(Thus, you would define a function in C style in the following way. The following example is for small)]306 norm1
[(model:)]294 norm2
[2(global  _myfunc )]278.4 code1
[2()]268.8 code0
[2(_myfunc: )]259.2 code0
[2(        push    bp )]249.6 code0
[2(        mov     bp,sp )]240 code0
[2(        sub     sp,0x40         ; 64 bytes of local stack space )]230.4 code0
[2(        mov     bx,[bp+4]       ; first parameter to function )]220.8 code0
[2()]211.2 code0
[2(        ; some more code )]201.6 code0
[2()]192 code0
[2(        mov     sp,bp           ; undo "sub sp,0x40" above )]182.4 code0
[2(        pop     bp )]172.8 code0
[2(        ret)]163.2 code2
[(For a large-model function, you would replace )2(RET)0( by )2(RETF)0(, and look for the first parameter at )2([BP+6])]145.2 norm1
[(instead of )2([BP+4])0(. Of course, if one of the parameters is a pointer, then the offsets of )1(subsequent)]133.2 norm0
[(parameters will change depending on the memory model as well: far pointers take up four bytes on the)]121.2 norm0
[(stack when passed as a parameter, whereas near pointers take up two.)]109.2 norm2
[(At the other end of the process, to call a C function from your assembly code, you would do something)]91.1999999999997 norm1
[(like this:)]79.1999999999997 norm2
(116)pageeven
restore showpage
%%Page: 117 117
%%BeginPageSetup
save
%%EndPageSetup
/117 pa
[2(extern  _printf )]710.4 code1
[2()]700.8 code0
[2(      ; and then, further down... )]691.2 code0
[2()]681.6 code0
[2(      push    word [myint]        ; one of my integer variables )]672 code0
[2(      push    word mystring       ; pointer into my data segment )]662.4 code0
[2(      call    _printf )]652.8 code0
[2(      add     sp,byte 4           ; `byte' saves space )]643.2 code0
[2()]633.6 code0
[2(      ; then those data items... )]624 code0
[2()]614.4 code0
[2(segment _DATA )]604.8 code0
[2()]595.2 code0
[2(myint         dw    1234 )]585.6 code0
[2(mystring      db    'This number -> %d <- should be 1234',10,0)]576 code2
[(This piece of code is the small-model assembly equivalent of the C code)]558 norm3
[2(    int myint = 1234; )]542.4 code1
[2(    printf\("This number -> %d <- should be 1234\\n", myint\);)]532.8 code2
[(In large model, the function-call code might look more like this. In this example, it is assumed that )2(DS)]514.8 norm1
[(already holds the segment base of the segment )2(_DATA)0(. If not, you would have to initialize it first.)]502.8 norm2
[2(      push    word [myint] )]487.2 code1
[2(      push    word seg mystring   ; Now push the segment, and... )]477.6 code0
[2(      push    word mystring       ; ... offset of "mystring" )]468 code0
[2(      call    far _printf )]458.4 code0
[2(      add    sp,byte 6)]448.8 code2
[(The integer value still takes up one word on the stack, since large model does not affect the size of the)]430.8 norm1
[2(int)0( data type. The first argument \(pushed last\) to )2(printf)0(, however, is a data pointer, and therefore has)]418.8 norm0
[(to contain a segment and offset part. The segment should be stored second in memory, and therefore)]406.8 norm0
[(must be pushed first. \(Of course, )2(PUSH DS)0( would have been a shorter instruction than)]394.8 norm0
[2(PUSH WORD SEG mystring)0(, if )2(DS)0( was set up as the above example assumed.\) Then the actual call)]382.8 norm0
[(becomes a far call, since functions expect far calls in large model; and )2(SP)0( has to be increased by 6)]370.8 norm0
[(rather than 4 afterwards to make up for the extra word of parameters.)]358.8 norm2
[{/section-9.4.4 xa}(Accessing Data Items)](9.4.4)338.4 subh3
[(To get at the contents of C variables, or to declare variables which C can access, you need only declare)]320.4 norm1
[(the names as )2(GLOBAL)0( or )2(EXTERN)0(. \(Again, the names require leading underscores, as stated in ){/section-9.4.1 xl}(section){el}]308.4 norm0
[{/section-9.4.1 xl}(9.4.1){el}(.\) Thus, a C variable declared as )2(int i)0( can be accessed from assembler as)]296.4 norm2
[2(extern _i )]280.8 code1
[2()]271.2 code0
[2(        mov ax,[_i])]261.6 code2
[(And to declare your own integer variable which C programs can access as )2(extern int j)0(, you do this)]243.6 norm1
[(\(making sure you are assembling in the )2(_DATA)0( segment, if necessary\):)]231.6 norm2
[2(global  _j )]216 code1
[2()]206.4 code0
[2(_j      dw      0)]196.8 code2
[(To access a C array, you need to know the size of the components of the array. For example, )2(int)]178.8 norm1
[(variables are two bytes long, so if a C program declares an array as )2(int a[10])0(, you can access )2(a[3])0( by)]166.8 norm0
[(coding )2(mov ax,[_a+6])0(. \(The byte offset 6 is obtained by multiplying the desired array index, 3, by the)]154.8 norm0
[(size of the array element, 2.\) The sizes of the C base types in 16-bit compilers are: 1 for )2(char)0(, 2 for )2(short)]142.8 norm0
[(and )2(int)0(, 4 for )2(long)0( and )2(float)0(, and 8 for )2(double)0(.)]130.8 norm2
[(To access a C )(data structure, you need to know the offset from the base of the structure to the field you)]112.8 norm1
[(are interested in. You can either do this by converting the C structure definition into a NASM structure)]100.8 norm0
[(definition \(using )2(STRUC)0(\), or by calculating the one offset and using just that.)]88.8 norm2
(117)pageodd
restore showpage
%%Page: 118 118
%%BeginPageSetup
save
%%EndPageSetup
/118 pa
[(To do either of these, you should read your C compiler's manual to find out how it organizes data)]708 norm1
[(structures. NASM gives no special alignment to structure members in its own )2(STRUC)0( macro, so you have)]696 norm0
[(to specify alignment yourself if the C compiler generates it. Typically, you might find that a structure like)]684 norm2
[2(struct { )]668.4 code1
[2(    char c; )]658.8 code0
[2(    int i; )]649.2 code0
[2(} foo;)]639.6 code2
[(might be four bytes long rather than three, since the )2(int)0( field would be aligned to a two-byte boundary.)]621.6 norm1
[(However, this sort of feature tends to be a configurable option in the C compiler, either using)]609.6 norm0
[(command-line options or )2(#pragma)0( lines, so you have to find out how your own compiler does it.)]597.6 norm2
[{/section-9.4.5 xa}2(c16.mac)0(: Helper Macros for the 16-bit C Interface)](9.4.5)577.2 subh3
[(Included in the NASM archives, in the )2(misc)0( directory, is a file )2(c16.mac)0( of macros. It defines three macros:)]559.2 norm1
[2(proc)0(, )2(arg)0( and )2(endproc)0(. These are intended to be used for C-style procedure definitions, and they)]547.2 norm0
[(automate a lot of the work involved in keeping track of the calling convention.)]535.2 norm2
[(\(An alternative, TASM compatible form of )2(arg)0( is also now built into NASM's preprocessor. See ){/section-4.8 xl}(section){el}]517.2 norm1
[{/section-4.8 xl}(4.8){el}( for details.\))]505.2 norm2
[(An example of an assembly function using the macro set is given here:)]487.2 norm3
[2(proc    _nearproc )]471.6 code1
[2()]462 code0
[2(%$i     arg )]452.4 code0
[2(%$j     arg )]442.8 code0
[2(        mov     ax,[bp + %$i] )]433.2 code0
[2(        mov     bx,[bp + %$j] )]423.6 code0
[2(        add     ax,[bx] )]414 code0
[2()]404.4 code0
[2(endproc)]394.8 code2
[(This defines )2(_nearproc)0( to be a procedure taking two arguments, the first \()2(i)0(\) an integer and the second)]376.8 norm1
[(\()2(j)0(\) a pointer to an integer. It returns )2(i + *j)0(.)]364.8 norm2
[(Note that the )2(arg)0( macro has an )2(EQU)0( as the first line of its expansion, and since the label before the)]346.8 norm1
[(macro call gets prepended to the first line of the expanded macro, the )2(EQU)0( works, defining )2(%$i)0( to be an)]334.8 norm0
[(offset from )2(BP)0(. A context-local variable is used, local to the context pushed by the )2(proc)0( macro and)]322.8 norm0
[(popped by the )2(endproc)0( macro, so that the same argument name can be used in later procedures. Of)]310.8 norm0
[(course, you don't )1(have)0( to do that.)]298.8 norm2
[(The macro set produces code for near functions \(tiny, small and compact-model code\) by default. You)]280.8 norm1
[(can have it generate far functions \(medium, large and huge-model code\) by means of coding)]268.8 norm0
[2(%define FARCODE)0(. This changes the kind of return instruction generated by )2(endproc)0(, and also changes)]256.8 norm0
[(the starting point for the argument offsets. The macro set contains no intrinsic dependency on whether)]244.8 norm0
[(data pointers are far or not.)]232.8 norm2
[2(arg)0( can take an optional parameter, giving the size of the argument. If no size is given, 2 is assumed,)]214.8 norm1
[(since it is likely that many function parameters will be of type )2(int)0(.)]202.8 norm2
[(The large-model equivalent of the above function would look like this:)]184.8 norm3
[2(%define FARCODE )]169.2 code1
[2()]159.6 code0
[2(proc    _farproc )]150 code0
[2()]140.4 code0
[2(%$i     arg )]130.8 code0
[2(%$j     arg     4 )]121.2 code0
[2(        mov     ax,[bp + %$i] )]111.6 code0
[2(        mov     bx,[bp + %$j] )]102 code0
[2(        mov     es,[bp + %$j + 2] )]92.3999999999996 code0
[2(        add     ax,[bx] )]82.7999999999996 code0
(118)pageeven
restore showpage
%%Page: 119 119
%%BeginPageSetup
save
%%EndPageSetup
/119 pa
[2()]710.4 code0
[2(endproc)]700.8 code2
[(This makes use of the argument to the )2(arg)0( macro to define a parameter of size 4, because )2(j)0( is now a far)]682.8 norm1
[(pointer. When we load from )2(j)0(, we must load a segment and an offset.)]670.8 norm2
[{/section-9.5 xa}(Interfacing to )(Borland Pascal Programs)](9.5)648 head3
[(Interfacing to Borland Pascal programs is similar in concept to interfacing to 16-bit C programs. The)]630 norm1
[(differences are:)]618 norm2
[(The leading underscore required for interfacing to C programs is not required for Pascal.)]600 bull3
[(The memory model is always large: functions are far, data pointers are far, and no data item can be)]582 bull1
[(more than 64K long. \(Actually, some functions are near, but only those functions that are local to a)]570 bull0
[(Pascal unit and never called from outside it. All assembly functions that Pascal calls, and all Pascal)]558 bull0
[(functions that assembly routines are able to call, are far.\) However, all static data declared in a)]546 bull0
[(Pascal program goes into the default data segment, which is the one whose segment address will be)]534 bull0
[(in )2(DS)0( when control is passed to your assembly code. The only things that do not live in the default)]522 bull0
[(data segment are local variables \(they live in the stack segment\) and dynamically allocated)]510 bull0
[(variables. All data )1(pointers)0(, however, are far.)]498 bull2
[(The function calling convention is different \226 described below.)]480 bull3
[(Some data types, such as strings, are stored differently.)]462 bull3
[(There are restrictions on the segment names you are allowed to use \226 Borland Pascal will ignore)]444 bull1
[(code or data declared in a segment it doesn't like the name of. The restrictions are described below.)]432 bull2
[{/section-9.5.1 xa}(The Pascal Calling Convention)](9.5.1)411.6 subh3
[(The 16-bit Pascal calling convention is as follows. In the following description, the words )1(caller)0( and)]393.6 norm1
[1(callee)0( are used to denote the function doing the calling and the function which gets called.)]381.6 norm2
[(The caller pushes the function's parameters on the stack, one after another, in normal order \(left to)]363.6 bull1
[(right, so that the first argument specified to the function is pushed first\).)]351.6 bull2
[(The caller then executes a far )2(CALL)0( instruction to pass control to the callee.)]333.6 bull3
[(The callee receives control, and typically \(although this is not actually necessary, in functions which)]315.6 bull1
[(do not need to access their parameters\) starts by saving the value of )2(SP)0( in )2(BP)0( so as to be able to use)]303.6 bull0
[2(BP)0( as a base pointer to find its parameters on the stack. However, the caller was probably doing this)]291.6 bull0
[(too, so part of the calling convention states that )2(BP)0( must be preserved by any function. Hence the)]279.6 bull0
[(callee, if it is going to set up )2(BP)0( as a )(frame pointer, must push the previous value first.)]267.6 bull2
[(The callee may then access its parameters relative to )2(BP)0(. The word at )2([BP])0( holds the previous value)]249.6 bull1
[(of )2(BP)0( as it was pushed. The next word, at )2([BP+2])0(, holds the offset part of the return address, and the)]237.6 bull0
[(next one at )2([BP+4])0( the segment part. The parameters begin at )2([BP+6])0(. The rightmost parameter of)]225.6 bull0
[(the function, since it was pushed last, is accessible at this offset from )2(BP)0(; the others follow, at)]213.6 bull0
[(successively greater offsets.)]201.6 bull2
[(The callee may also wish to decrease )2(SP)0( further, so as to allocate space on the stack for local)]183.6 bull1
[(variables, which will then be accessible at negative offsets from )2(BP)0(.)]171.6 bull2
[(The callee, if it wishes to return a value to the caller, should leave the value in )2(AL)0(, )2(AX)0( or )2(DX:AX)]153.6 bull1
[(depending on the size of the value. Floating-point results are returned in )2(ST0)0(. Results of type )2(Real)]141.6 bull0
[(\(Borland's own custom floating-point data type, not handled directly by the FPU\) are returned in)]129.6 bull0
[2(DX:BX:AX)0(. To return a result of type )2(String)0(, the caller pushes a pointer to a temporary string before)]117.6 bull0
[(pushing the parameters, and the callee places the returned string value at that location. The pointer)]105.6 bull0
[(is not a parameter, and should not be removed from the stack by the )2(RETF)0( instruction.)]93.6 bull2
(119)pageodd
restore showpage
%%Page: 120 120
%%BeginPageSetup
save
%%EndPageSetup
/120 pa
[(Once the callee has finished processing, it restores )2(SP)0( from )2(BP)0( if it had allocated local stack space,)]708 bull1
[(then pops the previous value of )2(BP)0(, and returns via )2(RETF)0(. It uses the form of )2(RETF)0( with an immediate)]696 bull0
[(parameter, giving the number of bytes taken up by the parameters on the stack. This causes the)]684 bull0
[(parameters to be removed from the stack as a side effect of the return instruction.)]672 bull2
[(When the caller regains control from the callee, the function parameters have already been removed)]654 bull1
[(from the stack, so it needs to do nothing further.)]642 bull2
[(Thus, you would define a function in Pascal style, taking two )2(Integer)0(\226type parameters, in the following)]624 norm1
[(way:)]612 norm2
[2(global  myfunc )]596.4 code1
[2()]586.8 code0
[2(myfunc: push    bp )]577.2 code0
[2(        mov     bp,sp )]567.6 code0
[2(        sub     sp,0x40         ; 64 bytes of local stack space )]558 code0
[2(        mov     bx,[bp+8]       ; first parameter to function )]548.4 code0
[2(        mov     bx,[bp+6]       ; second parameter to function )]538.8 code0
[2()]529.2 code0
[2(        ; some more code )]519.6 code0
[2()]510 code0
[2(        mov     sp,bp           ; undo "sub sp,0x40" above )]500.4 code0
[2(        pop     bp )]490.8 code0
[2(        retf    4               ; total size of params is 4)]481.2 code2
[(At the other end of the process, to call a Pascal function from your assembly code, you would do)]463.2 norm1
[(something like this:)]451.2 norm2
[2(extern  SomeFunc )]435.6 code1
[2()]426 code0
[2(       ; and then, further down... )]416.4 code0
[2()]406.8 code0
[2(       push   word seg mystring   ; Now push the segment, and... )]397.2 code0
[2(       push   word mystring       ; ... offset of "mystring" )]387.6 code0
[2(       push   word [myint]        ; one of my variables )]378 code0
[2(       call   far SomeFunc)]368.4 code2
[(This is equivalent to the Pascal code)]350.4 norm3
[2(procedure SomeFunc\(String: PChar; Int: Integer\); )]334.8 code1
[2(    SomeFunc\(@mystring, myint\);)]325.2 code2
[{/section-9.5.2 xa}(Borland Pascal )(Segment Name Restrictions)](9.5.2)304.8 subh3
[(Since Borland Pascal's internal unit file format is completely different from )2(OBJ)0(, it only makes a very)]286.8 norm1
[(sketchy job of actually reading and understanding the various information contained in a real )2(OBJ)0( file)]274.8 norm0
[(when it links that in. Therefore an object file intended to be linked to a Pascal program must obey a)]262.8 norm0
[(number of restrictions:)]250.8 norm2
[(Procedures and functions must be in a segment whose name is either )2(CODE)0(, )2(CSEG)0(, or something)]232.8 bull1
[(ending in )2(_TEXT)0(.)]220.8 bull2
[(initialized data must be in a segment whose name is either )2(CONST)0( or something ending in )2(_DATA)0(.)]202.8 bull3
[(Uninitialized data must be in a segment whose name is either )2(DATA)0(, )2(DSEG)0(, or something ending in)]184.8 bull1
[2(_BSS)0(.)]172.8 bull2
[(Any other segments in the object file are completely ignored. )2(GROUP)0( directives and segment)]154.8 bull1
[(attributes are also ignored.)]142.8 bull2
[{/section-9.5.3 xa}(Using )2(c16.mac)0( With Pascal Programs)](9.5.3)122.4 subh3
[(The )2(c16.mac)0( macro package, described in ){/section-9.4.5 xl}(section 9.4.5){el}(, can also be used to simplify writing functions to)]104.4 norm1
[(be called from Pascal programs, if you code )2(%define PASCAL)0(. This definition ensures that functions are)]92.3999999999999 norm0
[(far \(it implies )2(FARCODE)0(\), and also causes procedure return instructions to be generated with an operand.)]80.3999999999999 norm2
(120)pageeven
restore showpage
%%Page: 121 121
%%BeginPageSetup
save
%%EndPageSetup
/121 pa
[(Defining )2(PASCAL)0( does not change the code which calculates the argument offsets; you must declare)]708 norm1
[(your function's arguments in reverse order. For example:)]696 norm2
[2(%define PASCAL )]680.4 code1
[2()]670.8 code0
[2(proc    _pascalproc )]661.2 code0
[2()]651.6 code0
[2(%$j     arg 4 )]642 code0
[2(%$i     arg )]632.4 code0
[2(        mov     ax,[bp + %$i] )]622.8 code0
[2(        mov     bx,[bp + %$j] )]613.2 code0
[2(        mov     es,[bp + %$j + 2] )]603.6 code0
[2(        add     ax,[bx] )]594 code0
[2()]584.4 code0
[2(endproc)]574.8 code2
[(This defines the same routine, conceptually, as the example in ){/section-9.4.5 xl}(section 9.4.5){el}(: it defines a function taking)]556.8 norm1
[(two arguments, an integer and a pointer to an integer, which returns the sum of the integer and the)]544.8 norm0
[(contents of the pointer. The only difference between this code and the large-model C version is that)]532.8 norm0
[2(PASCAL)0( is defined instead of )2(FARCODE)0(, and that the arguments are declared in reverse order.)]520.8 norm2
(121)pageodd
restore showpage
%%Page: 122 122
%%BeginPageSetup
save
%%EndPageSetup
/122 pa
(122)pageeven
restore showpage
%%Page: 123 123
%%BeginPageSetup
save
%%EndPageSetup
/123 pa
[{/chapter-10 xa}(Chapter 10: Writing 32-bit Code \(Unix, Win32, DJGPP\))]698.4 chap3
[(This chapter attempts to cover some of the common issues involved when writing 32-bit code, to run)]662.4 norm1
[(under )(Win32 or Unix, or to be linked with C code generated by a Unix-style C compiler such as )(DJGPP. It)]650.4 norm0
[(covers how to write assembly code to interface with 32-bit C routines, and how to write)]638.4 norm0
[(position-independent code for shared libraries.)]626.4 norm2
[(Almost all 32-bit code, and in particular all code running under )2(Win32)0(, )2(DJGPP)0( or any of the PC Unix)]608.4 norm1
[(variants, runs in )1(flat)0( memory model. This means that the segment registers and paging have already)]596.4 norm0
[(been set up to give you the same 32-bit 4Gb address space no matter what segment you work relative)]584.4 norm0
[(to, and that you should ignore all segment registers completely. When writing flat-model application)]572.4 norm0
[(code, you never need to use a segment override or modify any segment register, and the code-section)]560.4 norm0
[(addresses you pass to )2(CALL)0( and )2(JMP)0( live in the same address space as the data-section addresses you)]548.4 norm0
[(access your variables by and the stack-section addresses you access local variables and procedure)]536.4 norm0
[(parameters by. Every address is 32 bits long and contains only an offset part.)]524.4 norm2
[{/section-10.1 xa}(Interfacing to 32-bit C Programs)](10.1)501.6 head3
[(A lot of the discussion in ){/section-9.4 xl}(section 9.4){el}(, about interfacing to 16-bit C programs, still applies when working)]483.6 norm1
[(in 32 bits. The absence of memory models or segmentation worries simplifies things a lot.)]471.6 norm2
[{/section-10.1.1 xa}(External Symbol Names)](10.1.1)451.2 subh3
[(Most 32-bit C compilers share the convention used by 16-bit compilers, that the names of all global)]433.2 norm1
[(symbols \(functions or data\) they define are formed by prefixing an underscore to the name as it)]421.2 norm0
[(appears in the C program. However, not all of them do: the )2(ELF)0( specification states that C symbols do)]409.2 norm0
[1(not)0( have a leading underscore on their assembly-language names.)]397.2 norm2
[(The older Linux )2(a.out)0( C compiler, all )2(Win32)0( compilers, )2(DJGPP)0(, and )2(NetBSD)0( and )2(FreeBSD)0(, all use the)]379.2 norm1
[(leading underscore; for these compilers, the macros )2(cextern)0( and )2(cglobal)0(, as given in ){/section-9.4.1 xl}(section 9.4.1){el}(, will)]367.2 norm0
[(still work. For )2(ELF)0(, though, the leading underscore should not be used.)]355.2 norm2
[(See also ){/section-2.1.28 xl}(section 2.1.28){el}(.)]337.2 norm3
[{/section-10.1.2 xa}(Function Definitions and Function Calls)](10.1.2)316.8 subh3
[(The )(C calling convention in 32-bit programs is as follows. In the following description, the words )1(caller)]298.8 norm1
[(and )1(callee)0( are used to denote the function doing the calling and the function which gets called.)]286.8 norm2
[(The caller pushes the function's parameters on the stack, one after another, in reverse order \(right)]268.8 bull1
[(to left, so that the first argument specified to the function is pushed last\).)]256.8 bull2
[(The caller then executes a near )2(CALL)0( instruction to pass control to the callee.)]238.8 bull3
[(The callee receives control, and typically \(although this is not actually necessary, in functions which)]220.8 bull1
[(do not need to access their parameters\) starts by saving the value of )2(ESP)0( in )2(EBP)0( so as to be able to)]208.8 bull0
[(use )2(EBP)0( as a base pointer to find its parameters on the stack. However, the caller was probably doing)]196.8 bull0
[(this too, so part of the calling convention states that )2(EBP)0( must be preserved by any C function. Hence)]184.8 bull0
[(the callee, if it is going to set up )2(EBP)0( as a )(frame pointer, must push the previous value first.)]172.8 bull2
[(The callee may then access its parameters relative to )2(EBP)0(. The doubleword at )2([EBP])0( holds the)]154.8 bull1
[(previous value of )2(EBP)0( as it was pushed; the next doubleword, at )2([EBP+4])0(, holds the return address,)]142.8 bull0
[(pushed implicitly by )2(CALL)0(. The parameters start after that, at )2([EBP+8])0(. The leftmost parameter of the)]130.8 bull0
[(function, since it was pushed last, is accessible at this offset from )2(EBP)0(; the others follow, at)]118.8 bull0
[(successively greater offsets. Thus, in a function such as )2(printf)0( which takes a variable number of)]106.8 bull0
[(parameters, the pushing of the parameters in reverse order means that the function knows where to)]94.8 bull0
[(find its first parameter, which tells it the number and type of the remaining ones.)]82.8 bull2
(123)pageodd
restore showpage
%%Page: 124 124
%%BeginPageSetup
save
%%EndPageSetup
/124 pa
[(The callee may also wish to decrease )2(ESP)0( further, so as to allocate space on the stack for local)]708 bull1
[(variables, which will then be accessible at negative offsets from )2(EBP)0(.)]696 bull2
[(The callee, if it wishes to return a value to the caller, should leave the value in )2(AL)0(, )2(AX)0( or )2(EAX)]678 bull1
[(depending on the size of the value. Floating-point results are typically returned in )2(ST0)0(.)]666 bull2
[(Once the callee has finished processing, it restores )2(ESP)0( from )2(EBP)0( if it had allocated local stack space,)]648 bull1
[(then pops the previous value of )2(EBP)0(, and returns via )2(RET)0( \(equivalently, )2(RETN)0(\).)]636 bull2
[(When the caller regains control from the callee, the function parameters are still on the stack, so it)]618 bull1
[(typically adds an immediate constant to )2(ESP)0( to remove them \(instead of executing a number of slow)]606 bull0
[2(POP)0( instructions\). Thus, if a function is accidentally called with the wrong number of parameters due)]594 bull0
[(to a prototype mismatch, the stack will still be returned to a sensible state since the caller, which)]582 bull0
[1(knows)0( how many parameters it pushed, does the removing.)]570 bull2
[(There is an alternative calling convention used by Win32 programs for Windows API calls, and also for)]552 norm1
[(functions called )1(by)0( the Windows API such as window procedures: they follow what Microsoft calls the)]540 norm0
[2(__stdcall)0( convention. This is slightly closer to the Pascal convention, in that the callee clears the stack)]528 norm0
[(by passing a parameter to the )2(RET)0( instruction. However, the parameters are still pushed in right-to-left)]516 norm0
[(order.)]504 norm2
[(Thus, you would define a function in C style in the following way:)]486 norm3
[2(global  _myfunc )]470.4 code1
[2()]460.8 code0
[2(_myfunc: )]451.2 code0
[2(        push    ebp )]441.6 code0
[2(        mov     ebp,esp )]432 code0
[2(        sub     esp,0x40        ; 64 bytes of local stack space )]422.4 code0
[2(        mov     ebx,[ebp+8]     ; first parameter to function )]412.8 code0
[2()]403.2 code0
[2(        ; some more code )]393.6 code0
[2()]384 code0
[2(        leave                   ; mov esp,ebp / pop ebp )]374.4 code0
[2(        ret)]364.8 code2
[(At the other end of the process, to call a C function from your assembly code, you would do something)]346.8 norm1
[(like this:)]334.8 norm2
[2(extern  _printf )]319.2 code1
[2()]309.6 code0
[2(        ; and then, further down... )]300 code0
[2()]290.4 code0
[2(        push    dword [myint]   ; one of my integer variables )]280.8 code0
[2(        push    dword mystring  ; pointer into my data segment )]271.2 code0
[2(        call    _printf )]261.6 code0
[2(        add     esp,byte 8      ; `byte' saves space )]252 code0
[2()]242.4 code0
[2(        ; then those data items... )]232.8 code0
[2()]223.2 code0
[2(segment _DATA )]213.6 code0
[2()]204 code0
[2(myint       dd   1234 )]194.4 code0
[2(mystring    db   'This number -> %d <- should be 1234',10,0)]184.799999999999 code2
[(This piece of code is the assembly equivalent of the C code)]166.799999999999 norm3
[2(    int myint = 1234; )]151.199999999999 code1
[2(    printf\("This number -> %d <- should be 1234\\n", myint\);)]141.599999999999 code2
[{/section-10.1.3 xa}(Accessing Data Items)](10.1.3)121.199999999999 subh3
[(To get at the contents of C variables, or to declare variables which C can access, you need only declare)]103.199999999999 norm1
[(the names as )2(GLOBAL)0( or )2(EXTERN)0(. \(Again, the names require leading underscores, as stated in ){/section-10.1.1 xl}(section){el}]91.1999999999995 norm0
[{/section-10.1.1 xl}(10.1.1){el}(.\) Thus, a C variable declared as )2(int i)0( can be accessed from assembler as)]79.1999999999995 norm2
(124)pageeven
restore showpage
%%Page: 125 125
%%BeginPageSetup
save
%%EndPageSetup
/125 pa
[2(          extern _i )]710.4 code1
[2(          mov eax,[_i])]700.8 code2
[(And to declare your own integer variable which C programs can access as )2(extern int j)0(, you do this)]682.8 norm1
[(\(making sure you are assembling in the )2(_DATA)0( segment, if necessary\):)]670.8 norm2
[2(          global _j )]655.2 code1
[2(_j        dd 0)]645.6 code2
[(To access a C array, you need to know the size of the components of the array. For example, )2(int)]627.6 norm1
[(variables are four bytes long, so if a C program declares an array as )2(int a[10])0(, you can access )2(a[3])0( by)]615.6 norm0
[(coding )2(mov ax,[_a+12])0(. \(The byte offset 12 is obtained by multiplying the desired array index, 3, by the)]603.6 norm0
[(size of the array element, 4.\) The sizes of the C base types in 32-bit compilers are: 1 for )2(char)0(, 2 for )2(short)0(,)]591.6 norm0
[(4 for )2(int)0(, )2(long)0( and )2(float)0(, and 8 for )2(double)0(. Pointers, being 32-bit addresses, are also 4 bytes long.)]579.6 norm2
[(To access a C )(data structure, you need to know the offset from the base of the structure to the field you)]561.6 norm1
[(are interested in. You can either do this by converting the C structure definition into a NASM structure)]549.6 norm0
[(definition \(using )2(STRUC)0(\), or by calculating the one offset and using just that.)]537.6 norm2
[(To do either of these, you should read your C compiler's manual to find out how it organizes data)]519.6 norm1
[(structures. NASM gives no special alignment to structure members in its own )2(STRUC)0( macro, so you have)]507.6 norm0
[(to specify alignment yourself if the C compiler generates it. Typically, you might find that a structure like)]495.6 norm2
[2(struct { )]480 code1
[2(    char c; )]470.4 code0
[2(    int i; )]460.8 code0
[2(} foo;)]451.2 code2
[(might be eight bytes long rather than five, since the )2(int)0( field would be aligned to a four-byte boundary.)]433.2 norm1
[(However, this sort of feature is sometimes a configurable option in the C compiler, either using)]421.2 norm0
[(command-line options or )2(#pragma)0( lines, so you have to find out how your own compiler does it.)]409.2 norm2
[{/section-10.1.4 xa}2(c32.mac)0(: Helper Macros for the 32-bit C Interface)](10.1.4)388.8 subh3
[(Included in the NASM archives, in the )2(misc)0( directory, is a file )2(c32.mac)0( of macros. It defines three macros:)]370.8 norm1
[2(proc)0(, )2(arg)0( and )2(endproc)0(. These are intended to be used for C-style procedure definitions, and they)]358.8 norm0
[(automate a lot of the work involved in keeping track of the calling convention.)]346.8 norm2
[(An example of an assembly function using the macro set is given here:)]328.8 norm3
[2(proc    _proc32 )]313.2 code1
[2()]303.6 code0
[2(%$i     arg )]294 code0
[2(%$j     arg )]284.4 code0
[2(        mov     eax,[ebp + %$i] )]274.8 code0
[2(        mov     ebx,[ebp + %$j] )]265.2 code0
[2(        add     eax,[ebx] )]255.6 code0
[2()]246 code0
[2(endproc)]236.4 code2
[(This defines )2(_proc32)0( to be a procedure taking two arguments, the first \()2(i)0(\) an integer and the second \()2(j)0(\))]218.4 norm1
[(a pointer to an integer. It returns )2(i + *j)0(.)]206.4 norm2
[(Note that the )2(arg)0( macro has an )2(EQU)0( as the first line of its expansion, and since the label before the)]188.4 norm1
[(macro call gets prepended to the first line of the expanded macro, the )2(EQU)0( works, defining )2(%$i)0( to be an)]176.4 norm0
[(offset from )2(BP)0(. A context-local variable is used, local to the context pushed by the )2(proc)0( macro and)]164.4 norm0
[(popped by the )2(endproc)0( macro, so that the same argument name can be used in later procedures. Of)]152.4 norm0
[(course, you don't )1(have)0( to do that.)]140.4 norm2
[2(arg)0( can take an optional parameter, giving the size of the argument. If no size is given, 4 is assumed,)]122.4 norm1
[(since it is likely that many function parameters will be of type )2(int)0( or pointers.)]110.4 norm2
(125)pageodd
restore showpage
%%Page: 126 126
%%BeginPageSetup
save
%%EndPageSetup
/126 pa
[{/section-10.2 xa}(Writing NetBSD/FreeBSD/OpenBSD and Linux/ELF )(Shared Libraries)](10.2)703.2 head3
[2(ELF)0( replaced the older )2(a.out)0( object file format under Linux because it contains support for)]685.2 norm1
[(position-independent code \()(PIC\), which makes writing shared libraries much easier. NASM supports the)]673.2 norm0
[2(ELF)0( position-independent code features, so you can write Linux )2(ELF)0( shared libraries in NASM.)]661.2 norm2
[(NetBSD, and its close cousins )(FreeBSD and )(OpenBSD, take a different approach by hacking PIC support)]643.2 norm1
[(into the )2(a.out)0( format. NASM supports this as the )2(aoutb)0( output format, so you can write )(BSD shared)]631.2 norm0
[(libraries in NASM too.)]619.2 norm2
[(The operating system loads a PIC shared library by memory-mapping the library file at an arbitrarily)]601.2 norm1
[(chosen point in the address space of the running process. The contents of the library's code section)]589.2 norm0
[(must therefore not depend on where it is loaded in memory.)]577.2 norm2
[(Therefore, you cannot get at your variables by writing code like this:)]559.2 norm3
[2(        mov     eax,[myvar]             ; WRONG)]543.6 code3
[(Instead, the linker provides an area of memory called the )1(global offset table)0(, or )(GOT; the GOT is situated)]525.6 norm1
[(at a constant distance from your library's code, so if you can find out where your library is loaded)]513.6 norm0
[(\(which is typically done using a )2(CALL)0( and )2(POP)0( combination\), you can obtain the address of the GOT, and)]501.6 norm0
[(you can then load the addresses of your variables out of linker-generated entries in the GOT.)]489.6 norm2
[(The )1(data)0( section of a PIC shared library does not have these restrictions: since the data section is)]471.6 norm1
[(writable, it has to be copied into memory anyway rather than just paged in from the library file, so as)]459.6 norm0
[(long as it's being copied it can be relocated too. So you can put ordinary types of relocation in the data)]447.6 norm0
[(section without too much worry \(but see ){/section-10.2.4 xl}(section 10.2.4){el}( for a caveat\).)]435.6 norm2
[{/section-10.2.1 xa}(Obtaining the Address of the GOT)](10.2.1)415.2 subh3
[(Each code module in your shared library should define the GOT as an external symbol:)]397.2 norm3
[2(extern  _GLOBAL_OFFSET_TABLE_   ; in ELF )]381.6 code1
[2(extern  __GLOBAL_OFFSET_TABLE_  ; in BSD a.out)]372 code2
[(At the beginning of any function in your shared library which plans to access your data or BSS sections,)]354 norm1
[(you must first calculate the address of the GOT. This is typically done by writing the function in this)]342 norm0
[(form:)]330 norm2
[2(func:   push    ebp )]314.4 code1
[2(        mov     ebp,esp )]304.8 code0
[2(        push    ebx )]295.2 code0
[2(        call    .get_GOT )]285.6 code0
[2(.get_GOT: )]276 code0
[2(        pop     ebx )]266.4 code0
[2(        add     ebx,_GLOBAL_OFFSET_TABLE_+$$-.get_GOT wrt ..gotpc )]256.8 code0
[2()]247.2 code0
[2(        ; the function body comes here )]237.6 code0
[2()]228 code0
[2(        mov     ebx,[ebp-4] )]218.4 code0
[2(        mov     esp,ebp )]208.8 code0
[2(        pop     ebp )]199.2 code0
[2(        ret)]189.6 code2
[(\(For BSD, again, the symbol )2(_GLOBAL_OFFSET_TABLE)0( requires a second leading underscore.\))]171.6 norm3
[(The first two lines of this function are simply the standard C prologue to set up a stack frame, and the)]153.6 norm1
[(last three lines are standard C function epilogue. The third line, and the fourth to last line, save and)]141.6 norm0
[(restore the )2(EBX)0( register, because PIC shared libraries use this register to store the address of the GOT.)]129.6 norm2
[(The interesting bit is the )2(CALL)0( instruction and the following two lines. The )2(CALL)0( and )2(POP)0( combination)]111.6 norm1
[(obtains the address of the label )2(.get_GOT)0(, without having to know in advance where the program was)]99.5999999999997 norm0
[(loaded \(since the )2(CALL)0( instruction is encoded relative to the current position\). The )2(ADD)0( instruction)]87.5999999999997 norm0
[(makes use of one of the special PIC relocation types: )(GOTPC relocation. With the )2(WRT ..gotpc)0( qualifier)]75.5999999999997 norm0
(126)pageeven
restore showpage
%%Page: 127 127
%%BeginPageSetup
save
%%EndPageSetup
/127 pa
[(specified, the symbol referenced \(here )2(_GLOBAL_OFFSET_TABLE_)0(, the special symbol assigned to the)]708 norm0
[(GOT\) is given as an offset from the beginning of the section. \(Actually, )2(ELF)0( encodes it as the offset from)]696 norm0
[(the operand field of the )2(ADD)0( instruction, but NASM simplifies this deliberately, so you do things the)]684 norm0
[(same way for both )2(ELF)0( and )2(BSD)0(.\) So the instruction then )1(adds)0( the beginning of the section, to get the)]672 norm0
[(real address of the GOT, and subtracts the value of )2(.get_GOT)0( which it knows is in )2(EBX)0(. Therefore, by the)]660 norm0
[(time that instruction has finished, )2(EBX)0( contains the address of the GOT.)]648 norm2
[(If you didn't follow that, don't worry: it's never necessary to obtain the address of the GOT by any other)]630 norm1
[(means, so you can put those three instructions into a macro and safely ignore them:)]618 norm2
[2(%macro  get_GOT 0 )]602.4 code1
[2()]592.8 code0
[2(        call    %%getgot )]583.2 code0
[2(  %%getgot: )]573.6 code0
[2(        pop     ebx )]564 code0
[2(        add     ebx,_GLOBAL_OFFSET_TABLE_+$$-%%getgot wrt ..gotpc )]554.4 code0
[2()]544.8 code0
[2(%endmacro)]535.2 code2
[{/section-10.2.2 xa}(Finding Your Local Data Items)](10.2.2)514.8 subh3
[(Having got the GOT, you can then use it to obtain the addresses of your data items. Most variables will)]496.8 norm1
[(reside in the sections you have declared; they can be accessed using the )2(..gotoff)0( special )2(WRT)0( type. The)]484.8 norm0
[(way this works is like this:)]472.8 norm2
[2(        lea     eax,[ebx+myvar wrt ..gotoff])]457.2 code3
[(The expression )2(myvar wrt ..gotoff)0( is calculated, when the shared library is linked, to be the offset to)]439.2 norm1
[(the local variable )2(myvar)0( from the beginning of the GOT. Therefore, adding it to )2(EBX)0( as above will place)]427.2 norm0
[(the real address of )2(myvar)0( in )2(EAX)0(.)]415.2 norm2
[(If you declare variables as )2(GLOBAL)0( without specifying a size for them, they are shared between code)]397.2 norm1
[(modules in the library, but do not get exported from the library to the program that loaded it. They will)]385.2 norm0
[(still be in your ordinary data and BSS sections, so you can access them in the same way as local)]373.2 norm0
[(variables, using the above )2(..gotoff)0( mechanism.)]361.2 norm2
[(Note that due to a peculiarity of the way BSD )2(a.out)0( format handles this relocation type, there must be)]343.2 norm1
[(at least one non-local symbol in the same section as the address you're trying to access.)]331.2 norm2
[{/section-10.2.3 xa}(Finding External and Common Data Items)](10.2.3)310.8 subh3
[(If your library needs to get at an external variable \(external to the )1(library)0(, not just to one of the modules)]292.8 norm1
[(within it\), you must use the )2(..got)0( type to get at it. The )2(..got)0( type, instead of giving you the offset from)]280.8 norm0
[(the GOT base to the variable, gives you the offset from the GOT base to a GOT )1(entry)0( containing the)]268.8 norm0
[(address of the variable. The linker will set up this GOT entry when it builds the library, and the dynamic)]256.8 norm0
[(linker will place the correct address in it at load time. So to obtain the address of an external variable)]244.8 norm0
[2(extvar)0( in )2(EAX)0(, you would code)]232.8 norm2
[2(        mov     eax,[ebx+extvar wrt ..got])]217.2 code3
[(This loads the address of )2(extvar)0( out of an entry in the GOT. The linker, when it builds the shared library,)]199.2 norm1
[(collects together every relocation of type )2(..got)0(, and builds the GOT so as to ensure it has every)]187.2 norm0
[(necessary entry present.)]175.2 norm2
[(Common variables must also be accessed in this way.)]157.2 norm3
[{/section-10.2.4 xa}(Exporting Symbols to the Library User)](10.2.4)136.8 subh3
[(If you want to export symbols to the user of the library, you have to declare whether they are functions)]118.8 norm1
[(or data, and if they are data, you have to give the size of the data item. This is because the dynamic)]106.8 norm0
[(linker has to build )(procedure linkage table entries for any exported functions, and also moves exported)]94.8000000000001 norm0
[(data items away from the library's data section in which they were declared.)]82.8000000000001 norm2
(127)pageodd
restore showpage
%%Page: 128 128
%%BeginPageSetup
save
%%EndPageSetup
/128 pa
[(So to export a function to users of the library, you must use)]708 norm3
[2(global  func:function           ; declare it as a function )]692.4 code1
[2()]682.8 code0
[2(func:   push    ebp )]673.2 code0
[2()]663.6 code0
[2(        ; etc.)]654 code2
[(And to export a data item such as an array, you would have to code)]636 norm3
[2(global  array:data array.end-array      ; give the size too )]620.4 code1
[2()]610.8 code0
[2(array:  resd    128 )]601.2 code0
[2(.end:)]591.6 code2
[(Be careful: If you export a variable to the library user, by declaring it as )2(GLOBAL)0( and supplying a size, the)]573.6 norm1
[(variable will end up living in the data section of the main program, rather than in your library's data)]561.6 norm0
[(section, where you declared it. So you will have to access your own global variable with the )2(..got)]549.6 norm0
[(mechanism rather than )2(..gotoff)0(, as if it were external \(which, effectively, it has become\).)]537.6 norm2
[(Equally, if you need to store the address of an exported global in one of your data sections, you can't do)]519.6 norm1
[(it by means of the standard sort of code:)]507.6 norm2
[2(dataptr:        dd      global_data_item        ; WRONG)]492 code3
[(NASM will interpret this code as an ordinary relocation, in which )2(global_data_item)0( is merely an offset)]474 norm1
[(from the beginning of the )2(.data)0( section \(or whatever\); so this reference will end up pointing at your)]462 norm0
[(data section instead of at the exported global which resides elsewhere.)]450 norm2
[(Instead of the above code, then, you must write)]432 norm3
[2(dataptr:        dd      global_data_item wrt ..sym)]416.4 code3
[(which makes use of the special )2(WRT)0( type )2(..sym)0( to instruct NASM to search the symbol table for a)]398.4 norm1
[(particular symbol at that address, rather than just relocating by section base.)]386.4 norm2
[(Either method will work for functions: referring to one of your functions by means of)]368.4 norm3
[2(funcptr:        dd      my_function)]352.8 code3
[(will give the user the address of the code you wrote, whereas)]334.8 norm3
[2(funcptr:        dd      my_function wrt ..sym)]319.2 code3
[(will give the address of the procedure linkage table for the function, which is where the calling program)]301.2 norm1
[(will )1(believe)0( the function lives. Either address is a valid way to call the function.)]289.2 norm2
[{/section-10.2.5 xa}(Calling Procedures Outside the Library)](10.2.5)268.8 subh3
[(Calling procedures outside your shared library has to be done by means of a )1(procedure linkage table)0(, or)]250.8 norm1
[(PLT. The PLT is placed at a known offset from where the library is loaded, so the library code can make)]238.8 norm0
[(calls to the PLT in a position-independent way. Within the PLT there is code to jump to offsets)]226.8 norm0
[(contained in the GOT, so function calls to other shared libraries or to routines in the main program can)]214.8 norm0
[(be transparently passed off to their real destinations.)]202.8 norm2
[(To call an external routine, you must use another special PIC relocation type, )2(WRT ..plt)0(. This is much)]184.8 norm1
[(easier than the GOT-based ones: you simply replace calls such as )2(CALL printf)0( with the PLT-relative)]172.8 norm0
[(version )2(CALL printf WRT ..plt)0(.)]160.8 norm2
[{/section-10.2.6 xa}(Generating the Library File)](10.2.6)140.4 subh3
[(Having written some code modules and assembled them to )2(.o)0( files, you then generate your shared)]122.4 norm1
[(library with a command such as)]110.4 norm2
[2(ld -shared -o library.so module1.o module2.o       # for ELF )]94.8 code1
[2(ld -Bshareable -o library.so module1.o module2.o   # for BSD)]85.1999999999999 code2
(128)pageeven
restore showpage
%%Page: 129 129
%%BeginPageSetup
save
%%EndPageSetup
/129 pa
[(For ELF, if your shared library is going to reside in system directories such as )2(/usr/lib)0( or )2(/lib)0(, it is)]708 norm1
[(usually worth using the )2(-soname)0( flag to the linker, to store the final library file name, with a version)]696 norm0
[(number, into the library:)]684 norm2
[2(ld -shared -soname library.so.1 -o library.so.1.2 *.o)]668.4 code3
[(You would then copy )2(library.so.1.2)0( into the library directory, and create )2(library.so.1)0( as a symbolic)]650.4 norm1
[(link to it.)]638.4 norm2
(129)pageodd
restore showpage
%%Page: 130 130
%%BeginPageSetup
save
%%EndPageSetup
/130 pa
(130)pageeven
restore showpage
%%Page: 131 131
%%BeginPageSetup
save
%%EndPageSetup
/131 pa
[{/chapter-11 xa}(Chapter 11: Mixing 16- and 32-bit Code)]698.4 chap3
[(This chapter tries to cover some of the issues, largely related to unusual forms of addressing and jump)]662.4 norm1
[(instructions, encountered when writing operating system code such as protected-mode initialization)]650.4 norm0
[(routines, which require code that operates in mixed segment sizes, such as code in a 16-bit segment)]638.4 norm0
[(trying to modify data in a 32-bit one, or jumps between different-size segments.)]626.4 norm2
[{/section-11.1 xa}(Mixed-Size Jumps)](11.1)603.6 head3
[(The most common form of )(mixed-size instruction is the one used when writing a 32-bit OS: having done)]585.6 norm1
[(your setup in 16-bit mode, such as loading the kernel, you then have to boot it by switching into)]573.6 norm0
[(protected mode and jumping to the 32-bit kernel start address. In a fully 32-bit OS, this tends to be the)]561.6 norm0
[1(only)0( mixed-size instruction you need, since everything before it can be done in pure 16-bit code, and)]549.6 norm0
[(everything after it can be pure 32-bit.)]537.6 norm2
[(This jump must specify a 48-bit far address, since the target segment is a 32-bit one. However, it must)]519.6 norm1
[(be assembled in a 16-bit segment, so just coding, for example,)]507.6 norm2
[2(        jmp     0x1234:0x56789ABC       ; wrong!)]492 code3
[(will not work, since the offset part of the address will be truncated to )2(0x9ABC)0( and the jump will be an)]474 norm1
[(ordinary 16-bit far one.)]462 norm2
[(The Linux kernel setup code gets round the inability of )2(as86)0( to generate the required instruction by)]444 norm1
[(coding it manually, using )2(DB)0( instructions. NASM can go one better than that, by actually generating the)]432 norm0
[(right instruction itself. Here's how to do it right:)]420 norm2
[2(        jmp     dword 0x1234:0x56789ABC         ; right)]404.4 code3
[(The )2(DWORD)0( prefix \(strictly speaking, it should come )1(after)0( the colon, since it is declaring the )1(offset)0( field to)]386.4 norm1
[(be a doubleword; but NASM will accept either form, since both are unambiguous\) forces the offset part)]374.4 norm0
[(to be treated as far, in the assumption that you are deliberately writing a jump from a 16-bit segment to)]362.4 norm0
[(a 32-bit one.)]350.4 norm2
[(You can do the reverse operation, jumping from a 32-bit segment to a 16-bit one, by means of the )2(WORD)]332.4 norm1
[(prefix:)]320.4 norm2
[2(        jmp     word 0x8765:0x4321      ; 32 to 16 bit)]304.8 code3
[(If the )2(WORD)0( prefix is specified in 16-bit mode, or the )2(DWORD)0( prefix in 32-bit mode, they will be ignored,)]286.8 norm1
[(since each is explicitly forcing NASM into a mode it was in anyway.)]274.8 norm2
[{/section-11.2 xa}(Addressing Between Different-Size Segments)](11.2)252 head3
[(If your OS is mixed 16 and 32-bit, or if you are writing a DOS extender, you are likely to have to deal with)]234 norm1
[(some 16-bit segments and some 32-bit ones. At some point, you will probably end up writing code in a)]222 norm0
[(16-bit segment which has to access data in a 32-bit segment, or vice versa.)]210 norm2
[(If the data you are trying to access in a 32-bit segment lies within the first 64K of the segment, you may)]192 norm1
[(be able to get away with using an ordinary 16-bit addressing operation for the purpose; but sooner or)]180 norm0
[(later, you will want to do 32-bit addressing from 16-bit mode.)]168 norm2
[(The easiest way to do this is to make sure you use a register for the address, since any effective address)]150 norm1
[(containing a 32-bit register is forced to be a 32-bit address. So you can do)]138 norm2
[2(        mov     eax,offset_into_32_bit_segment_specified_by_fs )]122.4 code1
[2(        mov     dword [fs:eax],0x11223344)]112.8 code2
[(This is fine, but slightly cumbersome \(since it wastes an instruction and a register\) if you already know)]94.8 norm1
[(the precise offset you are aiming at. The x86 architecture does allow 32-bit effective addresses to)]82.8 norm0
(131)pageodd
restore showpage
%%Page: 132 132
%%BeginPageSetup
save
%%EndPageSetup
/132 pa
[(specify nothing but a 4-byte offset, so why shouldn't NASM be able to generate the best instruction for)]708 norm0
[(the purpose?)]696 norm2
[(It can. As in ){/section-11.1 xl}(section 11.1){el}(, you need only prefix the address with the )2(DWORD)0( keyword, and it will be forced)]678 norm1
[(to be a 32-bit address:)]666 norm2
[2(        mov     dword [fs:dword my_offset],0x11223344)]650.4 code3
[(Also as in ){/section-11.1 xl}(section 11.1){el}(, NASM is not fussy about whether the )2(DWORD)0( prefix comes before or after the)]632.4 norm1
[(segment override, so arguably a nicer-looking way to code the above instruction is)]620.4 norm2
[2(        mov     dword [dword fs:my_offset],0x11223344)]604.8 code3
[(Don't confuse the )2(DWORD)0( prefix )1(outside)0( the square brackets, which controls the size of the data stored at)]586.8 norm1
[(the address, with the one )2(inside)0( the square brackets which controls the length of the address itself.)]574.8 norm0
[(The two can quite easily be different:)]562.8 norm2
[2(        mov     word [dword 0x12345678],0x9ABC)]547.2 code3
[(This moves 16 bits of data to an address specified by a 32-bit offset.)]529.2 norm3
[(You can also specify )2(WORD)0( or )2(DWORD)0( prefixes along with the )2(FAR)0( prefix to indirect far jumps or calls. For)]511.2 norm1
[(example:)]499.2 norm2
[2(        call    dword far [fs:word 0x4321])]483.6 code3
[(This instruction contains an address specified by a 16-bit offset; it loads a 48-bit far pointer from that)]465.6 norm1
[(\(16-bit segment and 32-bit offset\), and calls that address.)]453.6 norm2
[{/section-11.3 xa}(Other Mixed-Size Instructions)](11.3)430.8 head3
[(The other way you might want to access data might be using the string instructions \()2(LODSx)0(, )2(STOSx)0( and)]412.8 norm1
[(so on\) or the )2(XLATB)0( instruction. These instructions, since they take no parameters, might seem to have)]400.8 norm0
[(no easy way to make them perform 32-bit addressing when assembled in a 16-bit segment.)]388.8 norm2
[(This is the purpose of NASM's )2(a16)0(, )2(a32)0( and )2(a64)0( prefixes. If you are coding )2(LODSB)0( in a 16-bit segment but)]370.8 norm1
[(it is supposed to be accessing a string in a 32-bit segment, you should load the desired address into )2(ESI)]358.8 norm0
[(and then code)]346.8 norm2
[2(        a32     lodsb)]331.2 code3
[(The prefix forces the addressing size to 32 bits, meaning that )2(LODSB)0( loads from )2([DS:ESI])0( instead of)]313.2 norm1
[2([DS:SI])0(. To access a string in a 16-bit segment when coding in a 32-bit one, the corresponding )2(a16)]301.2 norm0
[(prefix can be used.)]289.2 norm2
[(The )2(a16)0(, )2(a32)0( and )2(a64)0( prefixes can be applied to any instruction in NASM's instruction table, but most of)]271.2 norm1
[(them can generate all the useful forms without them. The prefixes are necessary only for instructions)]259.2 norm0
[(with implicit addressing: )2(CMPSx)0(, )2(SCASx)0(, )2(LODSx)0(, )2(STOSx)0(, )2(MOVSx)0(, )2(INSx)0(, )2(OUTSx)0(, and )2(XLATB)0(. Also, the various)]247.2 norm0
[(push and pop instructions \()2(PUSHA)0( and )2(POPF)0( as well as the more usual )2(PUSH)0( and )2(POP)0(\) can accept )2(a16)0(, )2(a32)]235.2 norm0
[(or )2(a64)0( prefixes to force a particular one of )2(SP)0(, )2(ESP)0( or )2(RSP)0( to be used as a stack pointer, in case the stack)]223.2 norm0
[(segment in use is a different size from the code segment.)]211.2 norm2
[2(PUSH)0( and )2(POP)0(, when applied to segment registers in 32-bit mode, also have the slightly odd behaviour)]193.2 norm1
[(that they push and pop 4 bytes at a time, of which the top two are ignored and the bottom two give the)]181.2 norm0
[(value of the segment register being manipulated. To force the 16-bit behaviour of segment-register)]169.2 norm0
[(push and pop instructions, you can use the operand-size prefix )2(o16)0(:)]157.2 norm2
[2(        o16 push    ss )]141.6 code1
[2(        o16 push    ds)]132 code2
[(This code saves a doubleword of stack space by fitting two segment registers into the space which)]114 norm1
[(would normally be consumed by pushing one.)]102 norm2
[(\(You can also use the )2(o32)0( prefix to force the 32-bit behaviour when in 16-bit mode, but this seems less)]84 norm1
[(useful.\))]72 norm2
(132)pageeven
restore showpage
%%Page: 133 133
%%BeginPageSetup
save
%%EndPageSetup
/133 pa
[{/chapter-12 xa}(Chapter 12: Writing 64-bit Code \(Unix, Win64\))]698.4 chap3
[(This chapter attempts to cover some of the common issues involved when writing 64-bit code, to run)]662.4 norm1
[(under )(Win64 or Unix. It covers how to write assembly code to interface with 64-bit C routines, and how)]650.4 norm0
[(to write position-independent code for shared libraries.)]638.4 norm2
[(All 64-bit code uses a flat memory model, since segmentation is not available in 64-bit mode. The one)]620.4 norm1
[(exception is the )2(FS)0( and )2(GS)0( registers, which still add their bases.)]608.4 norm2
[(Position independence in 64-bit mode is significantly simpler, since the processor supports)]590.4 norm1
[2(RIP)0(\226relative addressing directly; see the )2(REL)0( keyword \(){/section-3.3 xl}(section 3.3){el}(\). On most 64-bit platforms, it is)]578.4 norm0
[(probably desirable to make that the default, using the directive )2(DEFAULT REL)0( \(){/section-7.2 xl}(section 7.2){el}(\).)]566.4 norm2
[(64-bit programming is relatively similar to 32-bit programming, but of course pointers are 64 bits long;)]548.4 norm1
[(additionally, all existing platforms pass arguments in registers rather than on the stack. Furthermore,)]536.4 norm0
[(64-bit platforms use SSE2 by default for floating point. Please see the ABI documentation for your)]524.4 norm0
[(platform.)]512.4 norm2
[(64-bit platforms differ in the sizes of the C/C++ fundamental datatypes, not just from 32-bit platforms)]494.4 norm1
[(but from each other. If a specific size data type is desired, it is probably best to use the types defined in)]482.4 norm0
[(the standard C header )2(<inttypes.h>)0(.)]470.4 norm2
[(All known 64-bit platforms except some embedded platforms require that the stack is 16-byte aligned)]452.4 norm1
[(at the entry to a function. In order to enforce that, the stack pointer \()2(RSP)0(\) needs to be aligned on an )2(odd)]440.4 norm0
[(multiple of 8 bytes before the )2(CALL)0( instruction.)]428.4 norm2
[(In 64-bit mode, the default instruction size is still 32 bits. When loading a value into a 32-bit register)]410.4 norm1
[(\(but not an 8- or 16-bit register\), the upper 32 bits of the corresponding 64-bit register are set to zero.)]398.4 norm2
[{/section-12.1 xa}(Register Names in 64-bit Mode)](12.1)375.6 head3
[(NASM uses the following names for general-purpose registers in 64-bit mode, for 8-, 16-, 32- and 64-bit)]357.6 norm1
[(references, respectively:)]345.6 norm2
[2(     AL/AH, CL/CH, DL/DH, BL/BH, SPL, BPL, SIL, DIL, R8B-R15B )]330 code1
[2(     AX, CX, DX, BX, SP, BP, SI, DI, R8W-R15W )]320.4 code0
[2(     EAX, ECX, EDX, EBX, ESP, EBP, ESI, EDI, R8D-R15D )]310.8 code0
[2(     RAX, RCX, RDX, RBX, RSP, RBP, RSI, RDI, R8-R15)]301.2 code2
[(This is consistent with the AMD documentation and most other assemblers. The Intel documentation,)]283.2 norm1
[(however, uses the names )2(R8L-R15L)0( for 8-bit references to the higher registers. It is possible to use those)]271.2 norm0
[(names by definiting them as macros; similarly, if one wants to use numeric names for the low 8)]259.2 norm0
[(registers, define them as macros. The standard macro package )2(altreg)0( \(see ){/section-6.1 xl}(section 6.1){el}(\) can be used for)]247.2 norm0
[(this purpose.)]235.2 norm2
[{/section-12.2 xa}(Immediates and Displacements in 64-bit Mode)](12.2)212.4 head3
[(In 64-bit mode, immediates and displacements are generally only 32 bits wide. NASM will therefore)]194.4 norm1
[(truncate most displacements and immediates to 32 bits.)]182.4 norm2
[(The only instruction which takes a full )(64-bit immediate is:)]164.4 norm3
[2(     MOV reg64,imm64)]148.8 code3
[(NASM will produce this instruction whenever the programmer uses )2(MOV)0( with an immediate into a 64-bit)]130.8 norm1
[(register. If this is not desirable, simply specify the equivalent 32-bit register, which will be automatically)]118.8 norm0
[(zero-extended by the processor, or specify the immediate as )2(DWORD)0(:)]106.8 norm2
[2(     mov rax,foo             ; 64-bit immediate )]91.1999999999998 code1
[2(     mov rax,qword foo       ; \(identical\) )]81.5999999999998 code0
(133)pageodd
restore showpage
%%Page: 134 134
%%BeginPageSetup
save
%%EndPageSetup
/134 pa
[2(     mov eax,foo             ; 32-bit immediate, zero-extended )]710.4 code0
[2(     mov rax,dword foo       ; 32-bit immediate, sign-extended)]700.8 code2
[(The length of these instructions are 10, 5 and 7 bytes, respectively.)]682.8 norm3
[(If optimization is enabled and NASM can determine at assembly time that a shorter instruction will)]664.8 norm1
[(suffice, the shorter instruction will be emitted unless of course )2(STRICT QWORD)0( or )2(STRICT DWORD)0( is)]652.8 norm0
[(specified \(see ){/section-3.7 xl}(section 3.7){el}(\):)]640.8 norm2
[2(     mov rax,1               ; Assembles as "mov eax,1" \(5 bytes\) )]625.2 code1
[2(     mov rax,strict qword 1  ; Full 10-byte instruction )]615.6 code0
[2(     mov rax,strict dword 1  ; 7-byte instruction )]606 code0
[2(     mov rax,symbol          ; 10 bytes, not known at assembly time )]596.4 code0
[2(     lea rax,[rel symbol]    ; 7 bytes, usually preferred by the ABI)]586.8 code2
[(Note that )2(lea rax,[rel symbol])0( is position-independent, whereas )2(mov rax,symbol)0( is not. Most ABIs)]568.8 norm1
[(prefer or even require position-independent code in 64-bit mode. However, the )2(MOV)0( instruction is able)]556.8 norm0
[(to reference a symbol anywhere in the 64-bit address space, whereas )2(LEA)0( is only able to access a)]544.8 norm0
[(symbol within within 2 GB of the instruction itself \(see below.\))]532.8 norm2
[(The only instructions which take a full )(64-bit )1(displacement)0( is loading or storing, using )2(MOV)0(, )2(AL)0(, )2(AX)0(, )2(EAX)0( or)]514.8 norm1
[2(RAX)0( \(but no other registers\) to an absolute 64-bit address. Since this is a relatively rarely used)]502.8 norm0
[(instruction \(64-bit code generally uses relative addressing\), the programmer has to explicitly declare)]490.8 norm0
[(the displacement size as )2(ABS QWORD)0(:)]478.8 norm2
[2(     default abs )]463.2 code1
[2()]453.6 code0
[2(     mov eax,[foo]           ; 32-bit absolute disp, sign-extended )]444 code0
[2(     mov eax,[a32 foo]       ; 32-bit absolute disp, zero-extended )]434.4 code0
[2(     mov eax,[qword foo]     ; 64-bit absolute disp )]424.8 code0
[2()]415.2 code0
[2(     default rel )]405.6 code0
[2()]396 code0
[2(     mov eax,[foo]           ; 32-bit relative disp )]386.4 code0
[2(     mov eax,[a32 foo]       ; d:o, address truncated to 32 bits\(!\) )]376.8 code0
[2(     mov eax,[qword foo]     ; error )]367.2 code0
[2(     mov eax,[abs qword foo] ; 64-bit absolute disp)]357.6 code2
[(A sign-extended absolute displacement can access from \2262 GB to +2 GB; a zero-extended absolute)]339.6 norm1
[(displacement can access from 0 to 4 GB.)]327.6 norm2
[{/section-12.3 xa}(Interfacing to 64-bit C Programs \(Unix\))](12.3)304.8 head3
[(On Unix, the 64-bit ABI as well as the x32 ABI \(32-bit ABI with the CPU in 64-bit mode\) is defined by the)]286.8 norm1
[(documents at:)]274.8 norm2
[{(http://www.nasm.us/abi/unix64)wl}2(http://www.nasm.us/abi/unix64){el}]256.8 norm3
[(Although written for AT&T-syntax assembly, the concepts apply equally well for NASM-style assembly.)]238.8 norm1
[(What follows is a simplified summary.)]226.8 norm2
[(The first six integer arguments \(from the left\) are passed in )2(RDI)0(, )2(RSI)0(, )2(RDX)0(, )2(RCX)0(, )2(R8)0(, and )2(R9)0(, in that order.)]208.8 norm1
[(Additional integer arguments are passed on the stack. These registers, plus )2(RAX)0(, )2(R10)0( and )2(R11)0( are)]196.8 norm0
[(destroyed by function calls, and thus are available for use by the function without saving.)]184.8 norm2
[(Integer return values are passed in )2(RAX)0( and )2(RDX)0(, in that order.)]166.8 norm3
[(Floating point is done using SSE registers, except for )2(long double)0(, which is 80 bits \()2(TWORD)0(\) on most)]148.8 norm1
[(platforms \(Android is one exception; there )2(long double)0( is 64 bits and treated the same as )2(double)0(.\))]136.8 norm0
[(Floating-point arguments are passed in )2(XMM0)0( to )2(XMM7)0(; return is )2(XMM0)0( and )2(XMM1)0(. )2(long double)0( are passed)]124.8 norm0
[(on the stack, and returned in )2(ST0)0( and )2(ST1)0(.)]112.8 norm2
[(All SSE and x87 registers are destroyed by function calls.)]94.7999999999997 norm3
[(On 64-bit Unix, )2(long)0( is 64 bits.)]76.7999999999997 norm3
(134)pageeven
restore showpage
%%Page: 135 135
%%BeginPageSetup
save
%%EndPageSetup
/135 pa
[(Integer and SSE register arguments are counted separately, so for the case of)]708 norm3
[2(     void foo\(long a, double b, int c\))]692.4 code3
[2(a)0( is passed in )2(RDI)0(, )2(b)0( in )2(XMM0)0(, and )2(c)0( in )2(ESI)0(.)]674.4 norm3
[{/section-12.4 xa}(Interfacing to 64-bit C Programs \(Win64\))](12.4)651.6 head3
[(The Win64 ABI is described by the document at:)]633.6 norm3
[{(http://www.nasm.us/abi/win64)wl}2(http://www.nasm.us/abi/win64){el}]615.6 norm3
[(What follows is a simplified summary.)]597.6 norm3
[(The first four integer arguments are passed in )2(RCX)0(, )2(RDX)0(, )2(R8)0( and )2(R9)0(, in that order. Additional integer)]579.6 norm1
[(arguments are passed on the stack. These registers, plus )2(RAX)0(, )2(R10)0( and )2(R11)0( are destroyed by function)]567.6 norm0
[(calls, and thus are available for use by the function without saving.)]555.6 norm2
[(Integer return values are passed in )2(RAX)0( only.)]537.6 norm3
[(Floating point is done using SSE registers, except for )2(long double)0(. Floating-point arguments are)]519.6 norm1
[(passed in )2(XMM0)0( to )2(XMM3)0(; return is )2(XMM0)0( only.)]507.6 norm2
[(On Win64, )2(long)0( is 32 bits; )2(long long)0( or )2(_int64)0( is 64 bits.)]489.6 norm3
[(Integer and SSE register arguments are counted together, so for the case of)]471.6 norm3
[2(     void foo\(long long a, double b, int c\))]456 code3
[2(a)0( is passed in )2(RCX)0(, )2(b)0( in )2(XMM1)0(, and )2(c)0( in )2(R8D)0(.)]438 norm3
(135)pageodd
restore showpage
%%Page: 136 136
%%BeginPageSetup
save
%%EndPageSetup
/136 pa
(136)pageeven
restore showpage
%%Page: 137 137
%%BeginPageSetup
save
%%EndPageSetup
/137 pa
[{/chapter-13 xa}(Chapter 13: Troubleshooting)]698.4 chap3
[(This chapter describes some of the common problems that users have been known to encounter with)]662.4 norm1
[(NASM, and answers them. If you think you have found a bug in NASM, please see ){/section-E.2 xl}(section E.2){el}(.)]650.4 norm2
[{/section-13.1 xa}(Common Problems)](13.1)627.6 head3
[{/section-13.1.1 xa}(NASM Generates )(Inefficient Code)](13.1.1)607.2 subh3
[(We sometimes get `bug' reports about NASM generating inefficient, or even `wrong', code on)]589.2 norm1
[(instructions such as )2(ADD ESP,8)0(. This is a deliberate design feature, connected to predictability of)]577.2 norm0
[(output: NASM, on seeing )2(ADD ESP,8)0(, will generate the form of the instruction which leaves room for a)]565.2 norm0
[(32-bit offset. You need to code )2(ADD ESP,BYTE 8)0( if you want the space-efficient form of the instruction.)]553.2 norm0
[(This isn't a bug, it's user error: if you prefer to have NASM produce the more efficient code)]541.2 norm0
[(automatically enable optimization with the )2(-O)0( option \(see ){/section-2.1.24 xl}(section 2.1.24){el}(\).)]529.2 norm2
[{/section-13.1.2 xa}(My Jumps are Out of Range)](13.1.2)508.8 subh3
[(Similarly, people complain that when they issue )(conditional jumps \(which are )2(SHORT)0( by default\) that try)]490.8 norm1
[(to jump too far, NASM reports `short jump out of range' instead of making the jumps longer.)]478.8 norm2
[(This, again, is partly a predictability issue, but in fact has a more practical reason as well. NASM has no)]460.8 norm1
[(means of being told what type of processor the code it is generating will be run on; so it cannot decide)]448.8 norm0
[(for itself that it should generate )2(Jcc NEAR)0( type instructions, because it doesn't know that it's working)]436.8 norm0
[(for a 386 or above. Alternatively, it could replace the out-of-range short )2(JNE)0( instruction with a very)]424.8 norm0
[(short )2(JE)0( instruction that jumps over a )2(JMP NEAR)0(; this is a sensible solution for processors below a 386,)]412.8 norm0
[(but hardly efficient on processors which have good branch prediction )1(and)0( could have used )2(JNE NEAR)]400.8 norm0
[(instead. So, once again, it's up to the user, not the assembler, to decide what instructions should be)]388.8 norm0
[(generated. See ){/section-2.1.24 xl}(section 2.1.24){el}(.)]376.8 norm2
[{/section-13.1.3 xa}2(ORG)0( Doesn't Work)](13.1.3)356.4 subh3
[(People writing )(boot sector programs in the )2(bin)0( format often complain that )2(ORG)0( doesn't work the way)]338.4 norm1
[(they'd like: in order to place the )2(0xAA55)0( signature word at the end of a 512-byte boot sector, people)]326.4 norm0
[(who are used to MASM tend to code)]314.4 norm2
[2(        ORG 0 )]298.8 code1
[2()]289.2 code0
[2(        ; some boot sector code )]279.6 code0
[2()]270 code0
[2(        ORG 510 )]260.4 code0
[2(        DW 0xAA55)]250.8 code2
[(This is not the intended use of the )2(ORG)0( directive in NASM, and will not work. The correct way to solve)]232.8 norm1
[(this problem in NASM is to use the )2(TIMES)0( directive, like this:)]220.8 norm2
[2(        ORG 0 )]205.2 code1
[2()]195.6 code0
[2(        ; some boot sector code )]186 code0
[2()]176.4 code0
[2(        TIMES 510-\($-$$\) DB 0 )]166.8 code0
[2(        DW 0xAA55)]157.2 code2
[(The )2(TIMES)0( directive will insert exactly enough zero bytes into the output to move the assembly point up)]139.2 norm1
[(to 510. This method also has the advantage that if you accidentally fill your boot sector too full, NASM)]127.2 norm0
[(will catch the problem at assembly time and report it, so you won't end up with a boot sector that you)]115.2 norm0
[(have to disassemble to find out what's wrong with it.)]103.2 norm2
(137)pageodd
restore showpage
%%Page: 138 138
%%BeginPageSetup
save
%%EndPageSetup
/138 pa
[{/section-13.1.4 xa}2(TIMES)0( Doesn't Work)](13.1.4)705.6 subh3
[(The other common problem with the above code is people who write the )2(TIMES)0( line as)]687.6 norm3
[2(        TIMES 510-$ DB 0)]672 code3
[(by reasoning that )2($)0( should be a pure number, just like 510, so the difference between them is also a)]654 norm1
[(pure number and can happily be fed to )2(TIMES)0(.)]642 norm2
[(NASM is a )1(modular)0( assembler: the various component parts are designed to be easily separable for)]624 norm1
[(re-use, so they don't exchange information unnecessarily. In consequence, the )2(bin)0( output format, even)]612 norm0
[(though it has been told by the )2(ORG)0( directive that the )2(.text)0( section should start at 0, does not pass that)]600 norm0
[(information back to the expression evaluator. So from the evaluator's point of view, )2($)0( isn't a pure)]588 norm0
[(number: it's an offset from a section base. Therefore the difference between )2($)0( and 510 is also not a pure)]576 norm0
[(number, but involves a section base. Values involving section bases cannot be passed as arguments to)]564 norm0
[2(TIMES)0(.)]552 norm2
[(The solution, as in the previous section, is to code the )2(TIMES)0( line in the form)]534 norm3
[2(        TIMES 510-\($-$$\) DB 0)]518.4 code3
[(in which )2($)0( and )2($$)0( are offsets from the same section base, and so their difference is a pure number. This)]500.4 norm1
[(will solve the problem and generate sensible code.)]488.4 norm2
(138)pageeven
restore showpage
%%Page: 139 139
%%BeginPageSetup
save
%%EndPageSetup
/139 pa
[{/appendix-A xa}(Appendix A: )(Ndisasm)]698.4 appn3
[(The Netwide Disassembler, NDISASM)]656.4 norm3
[{/section-A.1 xa}(Introduction)](A.1)633.6 head3
[(The Netwide Disassembler is a small companion program to the Netwide Assembler, NASM. It seemed a)]615.6 norm1
[(shame to have an x86 assembler, complete with a full instruction table, and not make as much use of it)]603.6 norm0
[(as possible, so here's a disassembler which shares the instruction table \(and some other bits of code\))]591.6 norm0
[(with NASM.)]579.6 norm2
[(The Netwide Disassembler does nothing except to produce disassemblies of )1(binary)0( source files.)]561.6 norm1
[(NDISASM does not have any understanding of object file formats, like )2(objdump)0(, and it will not)]549.6 norm0
[(understand )2(DOS .EXE)0( files like )2(debug)0( will. It just disassembles.)]537.6 norm2
[{/section-A.2 xa}(Running NDISASM)](A.2)514.8 head3
[(To disassemble a file, you will typically use a command of the form)]496.8 norm3
[2(       ndisasm -b {16|32|64} filename)]481.2 code3
[(NDISASM can disassemble 16-, 32- or 64-bit code equally easily, provided of course that you remember)]463.2 norm1
[(to specify which it is to work with. If no )2(-b)0( switch is present, NDISASM works in 16-bit mode by default.)]451.2 norm0
[(The )2(-u)0( switch \(for USE32\) also invokes 32-bit mode.)]439.2 norm2
[(Two more command line options are )2(-r)0( which reports the version number of NDISASM you are running,)]421.2 norm1
[(and )2(-h)0( which gives a short summary of command line options.)]409.2 norm2
[{/section-A.2.1 xa}(COM Files: Specifying an Origin)](A.2.1)388.8 subh3
[(To disassemble a )2(DOS .COM)0( file correctly, a disassembler must assume that the first instruction in the)]370.8 norm1
[(file is loaded at address )2(0x100)0(, rather than at zero. NDISASM, which assumes by default that any file you)]358.8 norm0
[(give it is loaded at zero, will therefore need to be informed of this.)]346.8 norm2
[(The )2(-o)0( option allows you to declare a different origin for the file you are disassembling. Its argument)]328.8 norm1
[(may be expressed in any of the NASM numeric formats: decimal by default, if it begins with `)2($)0(' or `)2(0x)0(' or)]316.8 norm0
[(ends in `)2(H)0(' it's )2(hex)0(, if it ends in `)2(Q)0(' it's )2(octal)0(, and if it ends in `)2(B)0(' it's )2(binary)0(.)]304.8 norm2
[(Hence, to disassemble a )2(.COM)0( file:)]286.8 norm3
[2(       ndisasm -o100h filename.com)]271.2 code3
[(will do the trick.)]253.2 norm3
[{/section-A.2.2 xa}(Code Following Data: Synchronization)](A.2.2)232.8 subh3
[(Suppose you are disassembling a file which contains some data which isn't machine code, and )1(then)]214.8 norm1
[(contains some machine code. NDISASM will faithfully plough through the data section, producing)]202.8 norm0
[(machine instructions wherever it can \(although most of them will look bizarre, and some may have)]190.8 norm0
[(unusual prefixes, e.g. `)2(FS OR AX,0x240A)0('\), and generating `DB' instructions ever so often if it's totally)]178.8 norm0
[(stumped. Then it will reach the code section.)]166.8 norm2
[(Supposing NDISASM has just finished generating a strange machine instruction from part of the data)]148.8 norm1
[(section, and its file position is now one byte )1(before)0( the beginning of the code section. It's entirely)]136.8 norm0
[(possible that another spurious instruction will get generated, starting with the final byte of the data)]124.8 norm0
[(section, and then the correct first instruction in the code section will not be seen because the starting)]112.8 norm0
[(point skipped over it. This isn't really ideal.)]100.8 norm2
(139)pageodd
restore showpage
%%Page: 140 140
%%BeginPageSetup
save
%%EndPageSetup
/140 pa
[(To avoid this, you can specify a `)(synchronization' point, or indeed as many synchronization points as)]708 norm1
[(you like \(although NDISASM can only handle 2147483647 sync points internally\). The definition of a)]696 norm0
[(sync point is this: NDISASM guarantees to hit sync points exactly during disassembly. If it is thinking)]684 norm0
[(about generating an instruction which would cause it to jump over a sync point, it will discard that)]672 norm0
[(instruction and output a `)2(db)0(' instead. So it )1(will)0( start disassembly exactly from the sync point, and so you)]660 norm0
[1(will)0( see all the instructions in your code section.)]648 norm2
[(Sync points are specified using the )2(-s)0( option: they are measured in terms of the program origin, not the)]630 norm1
[(file position. So if you want to synchronize after 32 bytes of a )2(.COM)0( file, you would have to do)]618 norm2
[2(       ndisasm -o100h -s120h file.com)]602.4 code3
[(rather than)]584.4 norm3
[2(       ndisasm -o100h -s20h file.com)]568.8 code3
[(As stated above, you can specify multiple sync markers if you need to, just by repeating the )2(-s)0( option.)]550.8 norm3
[{/section-A.2.3 xa}(Mixed Code and Data: Automatic \(Intelligent\) Synchronization )](A.2.3)530.4 subh3
[(Suppose you are disassembling the boot sector of a )2(DOS)0( floppy \(maybe it has a virus, and you need to)]512.4 norm1
[(understand the virus so that you know what kinds of damage it might have done you\). Typically, this)]500.4 norm0
[(will contain a )2(JMP)0( instruction, then some data, then the rest of the code. So there is a very good chance)]488.4 norm0
[(of NDISASM being )1(misaligned)0( when the data ends and the code begins. Hence a sync point is needed.)]476.4 norm2
[(On the other hand, why should you have to specify the sync point manually? What you'd do in order to)]458.4 norm1
[(find where the sync point would be, surely, would be to read the )2(JMP)0( instruction, and then to use its)]446.4 norm0
[(target address as a sync point. So can NDISASM do that for you?)]434.4 norm2
[(The answer, of course, is yes: using either of the synonymous switches )2(-a)0( \(for automatic sync\) or )2(-i)0( \(for)]416.4 norm1
[(intelligent sync\) will enable )2(auto-sync)0( mode. Auto-sync mode automatically generates a sync point for)]404.4 norm0
[(any forward-referring PC-relative jump or call instruction that NDISASM encounters. \(Since NDISASM is)]392.4 norm0
[(one-pass, if it encounters a PC-relative jump whose target has already been processed, there isn't)]380.4 norm0
[(much it can do about it...\))]368.4 norm2
[(Only PC-relative jumps are processed, since an absolute jump is either through a register \(in which case)]350.4 norm1
[(NDISASM doesn't know what the register contains\) or involves a segment address \(in which case the)]338.4 norm0
[(target code isn't in the same segment that NDISASM is working in, and so the sync point can't be placed)]326.4 norm0
[(anywhere useful\).)]314.4 norm2
[(For some kinds of file, this mechanism will automatically put sync points in all the right places, and)]296.4 norm1
[(save you from having to place any sync points manually. However, it should be stressed that auto-sync)]284.4 norm0
[(mode is )1(not)0( guaranteed to catch all the sync points, and you may still have to place some manually.)]272.4 norm2
[(Auto-sync mode doesn't prevent you from declaring manual sync points: it just adds automatically)]254.4 norm1
[(generated ones to the ones you provide. It's perfectly feasible to specify )2(-i)0( )1(and)0( some )2(-s)0( options.)]242.4 norm2
[(Another caveat with auto-sync mode is that if, by some unpleasant fluke, something in your data)]224.4 norm1
[(section should disassemble to a PC-relative call or jump instruction, NDISASM may obediently place a)]212.4 norm0
[(sync point in a totally random place, for example in the middle of one of the instructions in your code)]200.4 norm0
[(section. So you may end up with a wrong disassembly even if you use auto-sync. Again, there isn't)]188.4 norm0
[(much I can do about this. If you have problems, you'll have to use manual sync points, or use the )2(-k)]176.4 norm0
[(option \(documented below\) to suppress disassembly of the data area.)]164.4 norm2
[{/section-A.2.4 xa}(Other Options)](A.2.4)144 subh3
[(The )2(-e)0( option skips a header on the file, by ignoring the first N bytes. This means that the header is )1(not)]126 norm1
[(counted towards the disassembly offset: if you give )2(-e10 -o10)0(, disassembly will start at byte 10 in the)]114 norm0
[(file, and this will be given offset 10, not 20.)]102 norm2
[(The )2(-k)0( option is provided with two comma-separated numeric arguments, the first of which is an)]84 norm1
[(assembly offset and the second is a number of bytes to skip. This )1(will)0( count the skipped bytes towards)]72 norm0
(140)pageeven
restore showpage
%%Page: 141 141
%%BeginPageSetup
save
%%EndPageSetup
/141 pa
[(the assembly offset: its use is to suppress disassembly of a data section which wouldn't contain)]708 norm0
[(anything you wanted to see anyway.)]696 norm2
(141)pageodd
restore showpage
%%Page: 142 142
%%BeginPageSetup
save
%%EndPageSetup
/142 pa
(142)pageeven
restore showpage
%%Page: 143 143
%%BeginPageSetup
save
%%EndPageSetup
/143 pa
[{/appendix-B xa}(Appendix B: )(Instruction List)]698.4 appn3
[{/section-B.1 xa}(Introduction)](B.1)651.6 head3
[(The following sections show the instructions which NASM currently supports. For each instruction,)]633.6 norm1
[(there is a separate entry for each supported addressing mode. The third column shows the processor)]621.6 norm0
[(type in which the instruction was introduced and, when appropriate, one or more usage flags.)]609.6 norm2
[{/section-B.1.1 xa}(Special instructions \(pseudo-ops\))](B.1.1)589.2 subh3
[2(DB                                         )]573.6 code1
[2(DW                                         )]564 code0
[2(DD                                         )]554.4 code0
[2(DQ                                         )]544.8 code0
[2(DT                                         )]535.2 code0
[2(DO                                         )]525.6 code0
[2(DY                                         )]516 code0
[2(DZ                                         )]506.4 code0
[2(RESB             imm                      8086 )]496.8 code0
[2(RESW             imm                      8086 )]487.2 code0
[2(RESD             imm                      8086 )]477.6 code0
[2(RESQ             imm                      8086 )]468 code0
[2(REST             imm                      8086 )]458.4 code0
[2(RESO             imm                      8086 )]448.8 code0
[2(RESY             imm                      8086 )]439.2 code0
[2(RESZ             imm                      8086 )]429.6 code0
[2(INCBIN                                    )]420 code2
[{/section-B.1.2 xa}(Conventional instructions)](B.1.2)399.6 subh3
[2(AAA                                       8086,NOLONG )]384 code1
[2(AAD                                       8086,NOLONG )]374.4 code0
[2(AAD              imm                      8086,NOLONG )]364.8 code0
[2(AAM                                       8086,NOLONG )]355.2 code0
[2(AAM              imm                      8086,NOLONG )]345.6 code0
[2(AAS                                       8086,NOLONG )]336 code0
[2(ADC              mem,reg8                 8086,LOCK )]326.4 code0
[2(ADC              reg8,reg8                8086 )]316.8 code0
[2(ADC              mem,reg16                8086,LOCK )]307.2 code0
[2(ADC              reg16,reg16              8086 )]297.6 code0
[2(ADC              mem,reg32                386,LOCK )]288 code0
[2(ADC              reg32,reg32              386 )]278.4 code0
[2(ADC              mem,reg64                X86_64,LONG,LOCK )]268.8 code0
[2(ADC              reg64,reg64              X86_64,LONG )]259.2 code0
[2(ADC              reg8,mem                 8086 )]249.6 code0
[2(ADC              reg8,reg8                8086 )]240 code0
[2(ADC              reg16,mem                8086 )]230.4 code0
[2(ADC              reg16,reg16              8086 )]220.8 code0
[2(ADC              reg32,mem                386 )]211.2 code0
[2(ADC              reg32,reg32              386 )]201.6 code0
[2(ADC              reg64,mem                X86_64,LONG )]192 code0
[2(ADC              reg64,reg64              X86_64,LONG )]182.4 code0
[2(ADC              rm16,imm8                8086,LOCK )]172.799999999999 code0
[2(ADC              rm32,imm8                386,LOCK )]163.199999999999 code0
[2(ADC              rm64,imm8                X86_64,LONG,LOCK )]153.599999999999 code0
[2(ADC              reg_al,imm               8086 )]143.999999999999 code0
[2(ADC              reg_ax,sbyteword         8086,ND )]134.399999999999 code0
[2(ADC              reg_ax,imm               8086 )]124.799999999999 code0
[2(ADC              reg_eax,sbytedword       386,ND )]115.199999999999 code0
[2(ADC              reg_eax,imm              386 )]105.599999999999 code0
[2(ADC              reg_rax,sbytedword       X86_64,LONG,ND )]95.9999999999993 code0
[2(ADC              reg_rax,imm              X86_64,LONG )]86.3999999999993 code0
[2(ADC              rm8,imm                  8086,LOCK )]76.7999999999993 code0
(143)pageodd
restore showpage
%%Page: 144 144
%%BeginPageSetup
save
%%EndPageSetup
/144 pa
[2(ADC              rm16,sbyteword           8086,LOCK,ND )]710.4 code0
[2(ADC              rm16,imm                 8086,LOCK )]700.8 code0
[2(ADC              rm32,sbytedword          386,LOCK,ND )]691.2 code0
[2(ADC              rm32,imm                 386,LOCK )]681.6 code0
[2(ADC              rm64,sbytedword          X86_64,LONG,LOCK,ND )]672 code0
[2(ADC              rm64,imm                 X86_64,LONG,LOCK )]662.4 code0
[2(ADC              mem,imm8                 8086,LOCK,ND )]652.8 code0
[2(ADC              mem,sbyteword16          8086,LOCK,ND )]643.2 code0
[2(ADC              mem,imm16                8086,LOCK )]633.6 code0
[2(ADC              mem,sbytedword32         386,LOCK,ND )]624 code0
[2(ADC              mem,imm32                386,LOCK )]614.4 code0
[2(ADC              rm8,imm                  8086,LOCK,ND,NOLONG )]604.8 code0
[2(ADD              mem,reg8                 8086,LOCK )]595.2 code0
[2(ADD              reg8,reg8                8086 )]585.6 code0
[2(ADD              mem,reg16                8086,LOCK )]576 code0
[2(ADD              reg16,reg16              8086 )]566.4 code0
[2(ADD              mem,reg32                386,LOCK )]556.8 code0
[2(ADD              reg32,reg32              386 )]547.2 code0
[2(ADD              mem,reg64                X86_64,LONG,LOCK )]537.6 code0
[2(ADD              reg64,reg64              X86_64,LONG )]528 code0
[2(ADD              reg8,mem                 8086 )]518.4 code0
[2(ADD              reg8,reg8                8086 )]508.8 code0
[2(ADD              reg16,mem                8086 )]499.2 code0
[2(ADD              reg16,reg16              8086 )]489.6 code0
[2(ADD              reg32,mem                386 )]480 code0
[2(ADD              reg32,reg32              386 )]470.4 code0
[2(ADD              reg64,mem                X86_64,LONG )]460.8 code0
[2(ADD              reg64,reg64              X86_64,LONG )]451.2 code0
[2(ADD              rm16,imm8                8086,LOCK )]441.6 code0
[2(ADD              rm32,imm8                386,LOCK )]432 code0
[2(ADD              rm64,imm8                X86_64,LONG,LOCK )]422.4 code0
[2(ADD              reg_al,imm               8086 )]412.8 code0
[2(ADD              reg_ax,sbyteword         8086,ND )]403.2 code0
[2(ADD              reg_ax,imm               8086 )]393.6 code0
[2(ADD              reg_eax,sbytedword       386,ND )]384 code0
[2(ADD              reg_eax,imm              386 )]374.4 code0
[2(ADD              reg_rax,sbytedword       X86_64,LONG,ND )]364.8 code0
[2(ADD              reg_rax,imm              X86_64,LONG )]355.2 code0
[2(ADD              rm8,imm                  8086,LOCK )]345.6 code0
[2(ADD              rm16,sbyteword           8086,LOCK,ND )]336 code0
[2(ADD              rm16,imm                 8086,LOCK )]326.4 code0
[2(ADD              rm32,sbytedword          386,LOCK,ND )]316.8 code0
[2(ADD              rm32,imm                 386,LOCK )]307.2 code0
[2(ADD              rm64,sbytedword          X86_64,LONG,LOCK,ND )]297.6 code0
[2(ADD              rm64,imm                 X86_64,LONG,LOCK )]288 code0
[2(ADD              mem,imm8                 8086,LOCK )]278.4 code0
[2(ADD              mem,sbyteword16          8086,LOCK,ND )]268.8 code0
[2(ADD              mem,imm16                8086,LOCK )]259.2 code0
[2(ADD              mem,sbytedword32         386,LOCK,ND )]249.6 code0
[2(ADD              mem,imm32                386,LOCK )]240 code0
[2(ADD              rm8,imm                  8086,LOCK,ND,NOLONG )]230.4 code0
[2(AND              mem,reg8                 8086,LOCK )]220.799999999999 code0
[2(AND              reg8,reg8                8086 )]211.199999999999 code0
[2(AND              mem,reg16                8086,LOCK )]201.599999999999 code0
[2(AND              reg16,reg16              8086 )]191.999999999999 code0
[2(AND              mem,reg32                386,LOCK )]182.399999999999 code0
[2(AND              reg32,reg32              386 )]172.799999999999 code0
[2(AND              mem,reg64                X86_64,LONG,LOCK )]163.199999999999 code0
[2(AND              reg64,reg64              X86_64,LONG )]153.599999999999 code0
[2(AND              reg8,mem                 8086 )]143.999999999999 code0
[2(AND              reg8,reg8                8086 )]134.399999999999 code0
[2(AND              reg16,mem                8086 )]124.799999999999 code0
[2(AND              reg16,reg16              8086 )]115.199999999999 code0
[2(AND              reg32,mem                386 )]105.599999999999 code0
[2(AND              reg32,reg32              386 )]95.9999999999992 code0
[2(AND              reg64,mem                X86_64,LONG )]86.3999999999992 code0
[2(AND              reg64,reg64              X86_64,LONG )]76.7999999999992 code0
(144)pageeven
restore showpage
%%Page: 145 145
%%BeginPageSetup
save
%%EndPageSetup
/145 pa
[2(AND              rm16,imm8                8086,LOCK )]710.4 code0
[2(AND              rm32,imm8                386,LOCK )]700.8 code0
[2(AND              rm64,imm8                X86_64,LONG,LOCK )]691.2 code0
[2(AND              reg_al,imm               8086 )]681.6 code0
[2(AND              reg_ax,sbyteword         8086,ND )]672 code0
[2(AND              reg_ax,imm               8086 )]662.4 code0
[2(AND              reg_eax,sbytedword       386,ND )]652.8 code0
[2(AND              reg_eax,imm              386 )]643.2 code0
[2(AND              reg_rax,sbytedword       X86_64,LONG,ND )]633.6 code0
[2(AND              reg_rax,imm              X86_64,LONG )]624 code0
[2(AND              rm8,imm                  8086,LOCK )]614.4 code0
[2(AND              rm16,sbyteword           8086,LOCK,ND )]604.8 code0
[2(AND              rm16,imm                 8086,LOCK )]595.2 code0
[2(AND              rm32,sbytedword          386,LOCK,ND )]585.6 code0
[2(AND              rm32,imm                 386,LOCK )]576 code0
[2(AND              rm64,sbytedword          X86_64,LONG,LOCK,ND )]566.4 code0
[2(AND              rm64,imm                 X86_64,LONG,LOCK )]556.8 code0
[2(AND              mem,imm8                 8086,LOCK )]547.2 code0
[2(AND              mem,sbyteword16          8086,LOCK,ND )]537.6 code0
[2(AND              mem,imm16                8086,LOCK )]528 code0
[2(AND              mem,sbytedword32         386,LOCK,ND )]518.4 code0
[2(AND              mem,imm32                386,LOCK )]508.8 code0
[2(AND              rm8,imm                  8086,LOCK,ND,NOLONG )]499.2 code0
[2(ARPL             mem,reg16                286,PROT,NOLONG )]489.6 code0
[2(ARPL             reg16,reg16              286,PROT,NOLONG )]480 code0
[2(BB0_RESET                                 PENT,CYRIX,ND,OBSOLETE )]470.4 code0
[2(BB1_RESET                                 PENT,CYRIX,ND,OBSOLETE )]460.8 code0
[2(BOUND            reg16,mem                186,NOLONG )]451.2 code0
[2(BOUND            reg32,mem                386,NOLONG )]441.6 code0
[2(BSF              reg16,mem                386 )]432 code0
[2(BSF              reg16,reg16              386 )]422.4 code0
[2(BSF              reg32,mem                386 )]412.8 code0
[2(BSF              reg32,reg32              386 )]403.2 code0
[2(BSF              reg64,mem                X86_64,LONG )]393.6 code0
[2(BSF              reg64,reg64              X86_64,LONG )]384 code0
[2(BSR              reg16,mem                386 )]374.4 code0
[2(BSR              reg16,reg16              386 )]364.8 code0
[2(BSR              reg32,mem                386 )]355.2 code0
[2(BSR              reg32,reg32              386 )]345.6 code0
[2(BSR              reg64,mem                X86_64,LONG )]336 code0
[2(BSR              reg64,reg64              X86_64,LONG )]326.4 code0
[2(BSWAP            reg32                    486 )]316.8 code0
[2(BSWAP            reg64                    X86_64,LONG )]307.2 code0
[2(BT               mem,reg16                386 )]297.6 code0
[2(BT               reg16,reg16              386 )]288 code0
[2(BT               mem,reg32                386 )]278.4 code0
[2(BT               reg32,reg32              386 )]268.8 code0
[2(BT               mem,reg64                X86_64,LONG )]259.2 code0
[2(BT               reg64,reg64              X86_64,LONG )]249.6 code0
[2(BT               rm16,imm8                386 )]240 code0
[2(BT               rm32,imm8                386 )]230.4 code0
[2(BT               rm64,imm8                X86_64,LONG )]220.799999999999 code0
[2(BTC              mem,reg16                386,LOCK )]211.199999999999 code0
[2(BTC              reg16,reg16              386 )]201.599999999999 code0
[2(BTC              mem,reg32                386,LOCK )]191.999999999999 code0
[2(BTC              reg32,reg32              386 )]182.399999999999 code0
[2(BTC              mem,reg64                X86_64,LONG,LOCK )]172.799999999999 code0
[2(BTC              reg64,reg64              X86_64,LONG )]163.199999999999 code0
[2(BTC              rm16,imm8                386,LOCK )]153.599999999999 code0
[2(BTC              rm32,imm8                386,LOCK )]143.999999999999 code0
[2(BTC              rm64,imm8                X86_64,LONG,LOCK )]134.399999999999 code0
[2(BTR              mem,reg16                386,LOCK )]124.799999999999 code0
[2(BTR              reg16,reg16              386 )]115.199999999999 code0
[2(BTR              mem,reg32                386,LOCK )]105.599999999999 code0
[2(BTR              reg32,reg32              386 )]95.9999999999992 code0
[2(BTR              mem,reg64                X86_64,LONG,LOCK )]86.3999999999992 code0
[2(BTR              reg64,reg64              X86_64,LONG )]76.7999999999992 code0
(145)pageodd
restore showpage
%%Page: 146 146
%%BeginPageSetup
save
%%EndPageSetup
/146 pa
[2(BTR              rm16,imm8                386,LOCK )]710.4 code0
[2(BTR              rm32,imm8                386,LOCK )]700.8 code0
[2(BTR              rm64,imm8                X86_64,LONG,LOCK )]691.2 code0
[2(BTS              mem,reg16                386,LOCK )]681.6 code0
[2(BTS              reg16,reg16              386 )]672 code0
[2(BTS              mem,reg32                386,LOCK )]662.4 code0
[2(BTS              reg32,reg32              386 )]652.8 code0
[2(BTS              mem,reg64                X86_64,LONG,LOCK )]643.2 code0
[2(BTS              reg64,reg64              X86_64,LONG )]633.6 code0
[2(BTS              rm16,imm8                386,LOCK )]624 code0
[2(BTS              rm32,imm8                386,LOCK )]614.4 code0
[2(BTS              rm64,imm8                X86_64,LONG,LOCK )]604.8 code0
[2(CALL             imm                      8086,BND )]595.2 code0
[2(CALL             imm|near                 8086,ND,BND )]585.6 code0
[2(CALL             imm|far                  8086,ND,NOLONG )]576 code0
[2(CALL             imm16                    8086,NOLONG,BND )]566.4 code0
[2(CALL             imm16|near               8086,ND,NOLONG,BND )]556.8 code0
[2(CALL             imm16|far                8086,ND,NOLONG )]547.2 code0
[2(CALL             imm32                    386,NOLONG,BND )]537.6 code0
[2(CALL             imm32|near               386,ND,NOLONG,BND )]528 code0
[2(CALL             imm32|far                386,ND,NOLONG )]518.4 code0
[2(CALL             imm64                    X86_64,LONG,BND )]508.8 code0
[2(CALL             imm64|near               X86_64,LONG,ND,BND )]499.2 code0
[2(CALL             imm:imm                  8086,NOLONG )]489.6 code0
[2(CALL             imm16:imm                8086,NOLONG )]480 code0
[2(CALL             imm:imm16                8086,NOLONG )]470.4 code0
[2(CALL             imm32:imm                386,NOLONG )]460.8 code0
[2(CALL             imm:imm32                386,NOLONG )]451.2 code0
[2(CALL             mem|far                  8086,NOLONG )]441.6 code0
[2(CALL             mem|far                  X86_64,LONG )]432 code0
[2(CALL             mem16|far                8086 )]422.4 code0
[2(CALL             mem32|far                386 )]412.8 code0
[2(CALL             mem64|far                X86_64,LONG )]403.2 code0
[2(CALL             mem|near                 8086,ND,BND )]393.6 code0
[2(CALL             rm16|near                8086,NOLONG,ND,BND )]384 code0
[2(CALL             rm32|near                386,NOLONG,ND,BND )]374.4 code0
[2(CALL             rm64|near                X86_64,LONG,ND,BND )]364.8 code0
[2(CALL             mem                      8086,BND )]355.2 code0
[2(CALL             rm16                     8086,NOLONG,BND )]345.6 code0
[2(CALL             rm32                     386,NOLONG,BND )]336 code0
[2(CALL             rm64                     X86_64,LONG,BND )]326.4 code0
[2(CBW                                       8086 )]316.8 code0
[2(CDQ                                       386 )]307.2 code0
[2(CDQE                                      X86_64,LONG )]297.6 code0
[2(CLC                                       8086 )]288 code0
[2(CLD                                       8086 )]278.4 code0
[2(CLI                                       8086 )]268.8 code0
[2(CLTS                                      286,PRIV )]259.2 code0
[2(CMC                                       8086 )]249.6 code0
[2(CMP              mem,reg8                 8086 )]240 code0
[2(CMP              reg8,reg8                8086 )]230.4 code0
[2(CMP              mem,reg16                8086 )]220.799999999999 code0
[2(CMP              reg16,reg16              8086 )]211.199999999999 code0
[2(CMP              mem,reg32                386 )]201.599999999999 code0
[2(CMP              reg32,reg32              386 )]191.999999999999 code0
[2(CMP              mem,reg64                X86_64,LONG )]182.399999999999 code0
[2(CMP              reg64,reg64              X86_64,LONG )]172.799999999999 code0
[2(CMP              reg8,mem                 8086 )]163.199999999999 code0
[2(CMP              reg8,reg8                8086 )]153.599999999999 code0
[2(CMP              reg16,mem                8086 )]143.999999999999 code0
[2(CMP              reg16,reg16              8086 )]134.399999999999 code0
[2(CMP              reg32,mem                386 )]124.799999999999 code0
[2(CMP              reg32,reg32              386 )]115.199999999999 code0
[2(CMP              reg64,mem                X86_64,LONG )]105.599999999999 code0
[2(CMP              reg64,reg64              X86_64,LONG )]95.9999999999992 code0
[2(CMP              rm16,imm8                8086 )]86.3999999999992 code0
[2(CMP              rm32,imm8                386 )]76.7999999999992 code0
(146)pageeven
restore showpage
%%Page: 147 147
%%BeginPageSetup
save
%%EndPageSetup
/147 pa
[2(CMP              rm64,imm8                X86_64,LONG )]710.4 code0
[2(CMP              reg_al,imm               8086 )]700.8 code0
[2(CMP              reg_ax,sbyteword         8086,ND )]691.2 code0
[2(CMP              reg_ax,imm               8086 )]681.6 code0
[2(CMP              reg_eax,sbytedword       386,ND )]672 code0
[2(CMP              reg_eax,imm              386 )]662.4 code0
[2(CMP              reg_rax,sbytedword       X86_64,LONG,ND )]652.8 code0
[2(CMP              reg_rax,imm              X86_64,LONG )]643.2 code0
[2(CMP              rm8,imm                  8086 )]633.6 code0
[2(CMP              rm16,sbyteword           8086,ND )]624 code0
[2(CMP              rm16,imm                 8086 )]614.4 code0
[2(CMP              rm32,sbytedword          386,ND )]604.8 code0
[2(CMP              rm32,imm                 386 )]595.2 code0
[2(CMP              rm64,sbytedword          X86_64,LONG,ND )]585.6 code0
[2(CMP              rm64,imm                 X86_64,LONG )]576 code0
[2(CMP              mem,imm8                 8086 )]566.4 code0
[2(CMP              mem,sbyteword16          8086,ND )]556.8 code0
[2(CMP              mem,imm16                8086 )]547.2 code0
[2(CMP              mem,sbytedword32         386,ND )]537.6 code0
[2(CMP              mem,imm32                386 )]528 code0
[2(CMP              rm8,imm                  8086,ND,NOLONG )]518.4 code0
[2(CMPSB                                     8086 )]508.8 code0
[2(CMPSD                                     386 )]499.2 code0
[2(CMPSQ                                     X86_64,LONG )]489.6 code0
[2(CMPSW                                     8086 )]480 code0
[2(CMPXCHG          mem,reg8                 PENT,LOCK )]470.4 code0
[2(CMPXCHG          reg8,reg8                PENT )]460.8 code0
[2(CMPXCHG          mem,reg16                PENT,LOCK )]451.2 code0
[2(CMPXCHG          reg16,reg16              PENT )]441.6 code0
[2(CMPXCHG          mem,reg32                PENT,LOCK )]432 code0
[2(CMPXCHG          reg32,reg32              PENT )]422.4 code0
[2(CMPXCHG          mem,reg64                X86_64,LONG,LOCK )]412.8 code0
[2(CMPXCHG          reg64,reg64              X86_64,LONG )]403.2 code0
[2(CMPXCHG486       mem,reg8                 486,UNDOC,ND,LOCK,OBSOLETE )]393.6 code0
[2(CMPXCHG486       reg8,reg8                486,UNDOC,ND,OBSOLETE )]384 code0
[2(CMPXCHG486       mem,reg16                486,UNDOC,ND,LOCK,OBSOLETE )]374.4 code0
[2(CMPXCHG486       reg16,reg16              486,UNDOC,ND,OBSOLETE )]364.8 code0
[2(CMPXCHG486       mem,reg32                486,UNDOC,ND,LOCK,OBSOLETE )]355.2 code0
[2(CMPXCHG486       reg32,reg32              486,UNDOC,ND,OBSOLETE )]345.6 code0
[2(CMPXCHG8B        mem64                    PENT,LOCK )]336 code0
[2(CMPXCHG16B       mem128                   X86_64,LONG,LOCK )]326.4 code0
[2(CPUID                                     PENT )]316.8 code0
[2(CPU_READ                                  PENT,CYRIX )]307.2 code0
[2(CPU_WRITE                                 PENT,CYRIX )]297.6 code0
[2(CQO                                       X86_64,LONG )]288 code0
[2(CWD                                       8086 )]278.4 code0
[2(CWDE                                      386 )]268.8 code0
[2(DAA                                       8086,NOLONG )]259.2 code0
[2(DAS                                       8086,NOLONG )]249.6 code0
[2(DEC              reg16                    8086,NOLONG )]240 code0
[2(DEC              reg32                    386,NOLONG )]230.4 code0
[2(DEC              rm8                      8086,LOCK )]220.799999999999 code0
[2(DEC              rm16                     8086,LOCK )]211.199999999999 code0
[2(DEC              rm32                     386,LOCK )]201.599999999999 code0
[2(DEC              rm64                     X86_64,LONG,LOCK )]191.999999999999 code0
[2(DIV              rm8                      8086 )]182.399999999999 code0
[2(DIV              rm16                     8086 )]172.799999999999 code0
[2(DIV              rm32                     386 )]163.199999999999 code0
[2(DIV              rm64                     X86_64,LONG )]153.599999999999 code0
[2(DMINT                                     P6,CYRIX )]143.999999999999 code0
[2(EMMS                                      PENT,MMX )]134.399999999999 code0
[2(ENTER            imm,imm                  186 )]124.799999999999 code0
[2(EQU              imm                      8086 )]115.199999999999 code0
[2(EQU              imm:imm                  8086 )]105.599999999999 code0
[2(F2XM1                                     8086,FPU )]95.9999999999992 code0
[2(FABS                                      8086,FPU )]86.3999999999992 code0
[2(FADD             mem32                    8086,FPU )]76.7999999999992 code0
(147)pageodd
restore showpage
%%Page: 148 148
%%BeginPageSetup
save
%%EndPageSetup
/148 pa
[2(FADD             mem64                    8086,FPU )]710.4 code0
[2(FADD             fpureg|to                8086,FPU )]700.8 code0
[2(FADD             fpureg                   8086,FPU )]691.2 code0
[2(FADD             fpureg,fpu0              8086,FPU )]681.6 code0
[2(FADD             fpu0,fpureg              8086,FPU )]672 code0
[2(FADD                                      8086,FPU,ND )]662.4 code0
[2(FADDP            fpureg                   8086,FPU )]652.8 code0
[2(FADDP            fpureg,fpu0              8086,FPU )]643.2 code0
[2(FADDP                                     8086,FPU,ND )]633.6 code0
[2(FBLD             mem80                    8086,FPU )]624 code0
[2(FBLD             mem                      8086,FPU )]614.4 code0
[2(FBSTP            mem80                    8086,FPU )]604.8 code0
[2(FBSTP            mem                      8086,FPU )]595.2 code0
[2(FCHS                                      8086,FPU )]585.6 code0
[2(FCLEX                                     8086,FPU )]576 code0
[2(FCMOVB           fpureg                   P6,FPU )]566.4 code0
[2(FCMOVB           fpu0,fpureg              P6,FPU )]556.8 code0
[2(FCMOVB                                    P6,FPU,ND )]547.2 code0
[2(FCMOVBE          fpureg                   P6,FPU )]537.6 code0
[2(FCMOVBE          fpu0,fpureg              P6,FPU )]528 code0
[2(FCMOVBE                                   P6,FPU,ND )]518.4 code0
[2(FCMOVE           fpureg                   P6,FPU )]508.8 code0
[2(FCMOVE           fpu0,fpureg              P6,FPU )]499.2 code0
[2(FCMOVE                                    P6,FPU,ND )]489.6 code0
[2(FCMOVNB          fpureg                   P6,FPU )]480 code0
[2(FCMOVNB          fpu0,fpureg              P6,FPU )]470.4 code0
[2(FCMOVNB                                   P6,FPU,ND )]460.8 code0
[2(FCMOVNBE         fpureg                   P6,FPU )]451.2 code0
[2(FCMOVNBE         fpu0,fpureg              P6,FPU )]441.6 code0
[2(FCMOVNBE                                  P6,FPU,ND )]432 code0
[2(FCMOVNE          fpureg                   P6,FPU )]422.4 code0
[2(FCMOVNE          fpu0,fpureg              P6,FPU )]412.8 code0
[2(FCMOVNE                                   P6,FPU,ND )]403.2 code0
[2(FCMOVNU          fpureg                   P6,FPU )]393.6 code0
[2(FCMOVNU          fpu0,fpureg              P6,FPU )]384 code0
[2(FCMOVNU                                   P6,FPU,ND )]374.4 code0
[2(FCMOVU           fpureg                   P6,FPU )]364.8 code0
[2(FCMOVU           fpu0,fpureg              P6,FPU )]355.2 code0
[2(FCMOVU                                    P6,FPU,ND )]345.6 code0
[2(FCOM             mem32                    8086,FPU )]336 code0
[2(FCOM             mem64                    8086,FPU )]326.4 code0
[2(FCOM             fpureg                   8086,FPU )]316.8 code0
[2(FCOM             fpu0,fpureg              8086,FPU )]307.2 code0
[2(FCOM                                      8086,FPU,ND )]297.6 code0
[2(FCOMI            fpureg                   P6,FPU )]288 code0
[2(FCOMI            fpu0,fpureg              P6,FPU )]278.4 code0
[2(FCOMI                                     P6,FPU,ND )]268.8 code0
[2(FCOMIP           fpureg                   P6,FPU )]259.2 code0
[2(FCOMIP           fpu0,fpureg              P6,FPU )]249.6 code0
[2(FCOMIP                                    P6,FPU,ND )]240 code0
[2(FCOMP            mem32                    8086,FPU )]230.4 code0
[2(FCOMP            mem64                    8086,FPU )]220.799999999999 code0
[2(FCOMP            fpureg                   8086,FPU )]211.199999999999 code0
[2(FCOMP            fpu0,fpureg              8086,FPU )]201.599999999999 code0
[2(FCOMP                                     8086,FPU,ND )]191.999999999999 code0
[2(FCOMPP                                    8086,FPU )]182.399999999999 code0
[2(FCOS                                      386,FPU )]172.799999999999 code0
[2(FDECSTP                                   8086,FPU )]163.199999999999 code0
[2(FDISI                                     8086,FPU )]153.599999999999 code0
[2(FDIV             mem32                    8086,FPU )]143.999999999999 code0
[2(FDIV             mem64                    8086,FPU )]134.399999999999 code0
[2(FDIV             fpureg|to                8086,FPU )]124.799999999999 code0
[2(FDIV             fpureg                   8086,FPU )]115.199999999999 code0
[2(FDIV             fpureg,fpu0              8086,FPU )]105.599999999999 code0
[2(FDIV             fpu0,fpureg              8086,FPU )]95.9999999999992 code0
[2(FDIV                                      8086,FPU,ND )]86.3999999999992 code0
[2(FDIVP            fpureg                   8086,FPU )]76.7999999999992 code0
(148)pageeven
restore showpage
%%Page: 149 149
%%BeginPageSetup
save
%%EndPageSetup
/149 pa
[2(FDIVP            fpureg,fpu0              8086,FPU )]710.4 code0
[2(FDIVP                                     8086,FPU,ND )]700.8 code0
[2(FDIVR            mem32                    8086,FPU )]691.2 code0
[2(FDIVR            mem64                    8086,FPU )]681.6 code0
[2(FDIVR            fpureg|to                8086,FPU )]672 code0
[2(FDIVR            fpureg,fpu0              8086,FPU )]662.4 code0
[2(FDIVR            fpureg                   8086,FPU )]652.8 code0
[2(FDIVR            fpu0,fpureg              8086,FPU )]643.2 code0
[2(FDIVR                                     8086,FPU,ND )]633.6 code0
[2(FDIVRP           fpureg                   8086,FPU )]624 code0
[2(FDIVRP           fpureg,fpu0              8086,FPU )]614.4 code0
[2(FDIVRP                                    8086,FPU,ND )]604.8 code0
[2(FEMMS                                     PENT,3DNOW )]595.2 code0
[2(FENI                                      8086,FPU )]585.6 code0
[2(FFREE            fpureg                   8086,FPU )]576 code0
[2(FFREE                                     8086,FPU )]566.4 code0
[2(FFREEP           fpureg                   286,FPU,UNDOC )]556.8 code0
[2(FFREEP                                    286,FPU,UNDOC )]547.2 code0
[2(FIADD            mem32                    8086,FPU )]537.6 code0
[2(FIADD            mem16                    8086,FPU )]528 code0
[2(FICOM            mem32                    8086,FPU )]518.4 code0
[2(FICOM            mem16                    8086,FPU )]508.8 code0
[2(FICOMP           mem32                    8086,FPU )]499.2 code0
[2(FICOMP           mem16                    8086,FPU )]489.6 code0
[2(FIDIV            mem32                    8086,FPU )]480 code0
[2(FIDIV            mem16                    8086,FPU )]470.4 code0
[2(FIDIVR           mem32                    8086,FPU )]460.8 code0
[2(FIDIVR           mem16                    8086,FPU )]451.2 code0
[2(FILD             mem32                    8086,FPU )]441.6 code0
[2(FILD             mem16                    8086,FPU )]432 code0
[2(FILD             mem64                    8086,FPU )]422.4 code0
[2(FIMUL            mem32                    8086,FPU )]412.8 code0
[2(FIMUL            mem16                    8086,FPU )]403.2 code0
[2(FINCSTP                                   8086,FPU )]393.6 code0
[2(FINIT                                     8086,FPU )]384 code0
[2(FIST             mem32                    8086,FPU )]374.4 code0
[2(FIST             mem16                    8086,FPU )]364.8 code0
[2(FISTP            mem32                    8086,FPU )]355.2 code0
[2(FISTP            mem16                    8086,FPU )]345.6 code0
[2(FISTP            mem64                    8086,FPU )]336 code0
[2(FISTTP           mem16                    PRESCOTT,FPU )]326.4 code0
[2(FISTTP           mem32                    PRESCOTT,FPU )]316.8 code0
[2(FISTTP           mem64                    PRESCOTT,FPU )]307.2 code0
[2(FISUB            mem32                    8086,FPU )]297.6 code0
[2(FISUB            mem16                    8086,FPU )]288 code0
[2(FISUBR           mem32                    8086,FPU )]278.4 code0
[2(FISUBR           mem16                    8086,FPU )]268.8 code0
[2(FLD              mem32                    8086,FPU )]259.2 code0
[2(FLD              mem64                    8086,FPU )]249.6 code0
[2(FLD              mem80                    8086,FPU )]240 code0
[2(FLD              fpureg                   8086,FPU )]230.4 code0
[2(FLD                                       8086,FPU,ND )]220.799999999999 code0
[2(FLD1                                      8086,FPU )]211.199999999999 code0
[2(FLDCW            mem                      8086,FPU,SW )]201.599999999999 code0
[2(FLDENV           mem                      8086,FPU )]191.999999999999 code0
[2(FLDL2E                                    8086,FPU )]182.399999999999 code0
[2(FLDL2T                                    8086,FPU )]172.799999999999 code0
[2(FLDLG2                                    8086,FPU )]163.199999999999 code0
[2(FLDLN2                                    8086,FPU )]153.599999999999 code0
[2(FLDPI                                     8086,FPU )]143.999999999999 code0
[2(FLDZ                                      8086,FPU )]134.399999999999 code0
[2(FMUL             mem32                    8086,FPU )]124.799999999999 code0
[2(FMUL             mem64                    8086,FPU )]115.199999999999 code0
[2(FMUL             fpureg|to                8086,FPU )]105.599999999999 code0
[2(FMUL             fpureg,fpu0              8086,FPU )]95.9999999999992 code0
[2(FMUL             fpureg                   8086,FPU )]86.3999999999992 code0
[2(FMUL             fpu0,fpureg              8086,FPU )]76.7999999999992 code0
(149)pageodd
restore showpage
%%Page: 150 150
%%BeginPageSetup
save
%%EndPageSetup
/150 pa
[2(FMUL                                      8086,FPU,ND )]710.4 code0
[2(FMULP            fpureg                   8086,FPU )]700.8 code0
[2(FMULP            fpureg,fpu0              8086,FPU )]691.2 code0
[2(FMULP                                     8086,FPU,ND )]681.6 code0
[2(FNCLEX                                    8086,FPU )]672 code0
[2(FNDISI                                    8086,FPU )]662.4 code0
[2(FNENI                                     8086,FPU )]652.8 code0
[2(FNINIT                                    8086,FPU )]643.2 code0
[2(FNOP                                      8086,FPU )]633.6 code0
[2(FNSAVE           mem                      8086,FPU )]624 code0
[2(FNSTCW           mem                      8086,FPU,SW )]614.4 code0
[2(FNSTENV          mem                      8086,FPU )]604.8 code0
[2(FNSTSW           mem                      8086,FPU,SW )]595.2 code0
[2(FNSTSW           reg_ax                   286,FPU )]585.6 code0
[2(FPATAN                                    8086,FPU )]576 code0
[2(FPREM                                     8086,FPU )]566.4 code0
[2(FPREM1                                    386,FPU )]556.8 code0
[2(FPTAN                                     8086,FPU )]547.2 code0
[2(FRNDINT                                   8086,FPU )]537.6 code0
[2(FRSTOR           mem                      8086,FPU )]528 code0
[2(FSAVE            mem                      8086,FPU )]518.4 code0
[2(FSCALE                                    8086,FPU )]508.8 code0
[2(FSETPM                                    286,FPU )]499.2 code0
[2(FSIN                                      386,FPU )]489.6 code0
[2(FSINCOS                                   386,FPU )]480 code0
[2(FSQRT                                     8086,FPU )]470.4 code0
[2(FST              mem32                    8086,FPU )]460.8 code0
[2(FST              mem64                    8086,FPU )]451.2 code0
[2(FST              fpureg                   8086,FPU )]441.6 code0
[2(FST                                       8086,FPU,ND )]432 code0
[2(FSTCW            mem                      8086,FPU,SW )]422.4 code0
[2(FSTENV           mem                      8086,FPU )]412.8 code0
[2(FSTP             mem32                    8086,FPU )]403.2 code0
[2(FSTP             mem64                    8086,FPU )]393.6 code0
[2(FSTP             mem80                    8086,FPU )]384 code0
[2(FSTP             fpureg                   8086,FPU )]374.4 code0
[2(FSTP                                      8086,FPU,ND )]364.8 code0
[2(FSTSW            mem                      8086,FPU,SW )]355.2 code0
[2(FSTSW            reg_ax                   286,FPU )]345.6 code0
[2(FSUB             mem32                    8086,FPU )]336 code0
[2(FSUB             mem64                    8086,FPU )]326.4 code0
[2(FSUB             fpureg|to                8086,FPU )]316.8 code0
[2(FSUB             fpureg,fpu0              8086,FPU )]307.2 code0
[2(FSUB             fpureg                   8086,FPU )]297.6 code0
[2(FSUB             fpu0,fpureg              8086,FPU )]288 code0
[2(FSUB                                      8086,FPU,ND )]278.4 code0
[2(FSUBP            fpureg                   8086,FPU )]268.8 code0
[2(FSUBP            fpureg,fpu0              8086,FPU )]259.2 code0
[2(FSUBP                                     8086,FPU,ND )]249.6 code0
[2(FSUBR            mem32                    8086,FPU )]240 code0
[2(FSUBR            mem64                    8086,FPU )]230.4 code0
[2(FSUBR            fpureg|to                8086,FPU )]220.799999999999 code0
[2(FSUBR            fpureg,fpu0              8086,FPU )]211.199999999999 code0
[2(FSUBR            fpureg                   8086,FPU )]201.599999999999 code0
[2(FSUBR            fpu0,fpureg              8086,FPU )]191.999999999999 code0
[2(FSUBR                                     8086,FPU,ND )]182.399999999999 code0
[2(FSUBRP           fpureg                   8086,FPU )]172.799999999999 code0
[2(FSUBRP           fpureg,fpu0              8086,FPU )]163.199999999999 code0
[2(FSUBRP                                    8086,FPU,ND )]153.599999999999 code0
[2(FTST                                      8086,FPU )]143.999999999999 code0
[2(FUCOM            fpureg                   386,FPU )]134.399999999999 code0
[2(FUCOM            fpu0,fpureg              386,FPU )]124.799999999999 code0
[2(FUCOM                                     386,FPU,ND )]115.199999999999 code0
[2(FUCOMI           fpureg                   P6,FPU )]105.599999999999 code0
[2(FUCOMI           fpu0,fpureg              P6,FPU )]95.9999999999992 code0
[2(FUCOMI                                    P6,FPU,ND )]86.3999999999992 code0
[2(FUCOMIP          fpureg                   P6,FPU )]76.7999999999992 code0
(150)pageeven
restore showpage
%%Page: 151 151
%%BeginPageSetup
save
%%EndPageSetup
/151 pa
[2(FUCOMIP          fpu0,fpureg              P6,FPU )]710.4 code0
[2(FUCOMIP                                   P6,FPU,ND )]700.8 code0
[2(FUCOMP           fpureg                   386,FPU )]691.2 code0
[2(FUCOMP           fpu0,fpureg              386,FPU )]681.6 code0
[2(FUCOMP                                    386,FPU,ND )]672 code0
[2(FUCOMPP                                   386,FPU )]662.4 code0
[2(FXAM                                      8086,FPU )]652.8 code0
[2(FXCH             fpureg                   8086,FPU )]643.2 code0
[2(FXCH             fpureg,fpu0              8086,FPU )]633.6 code0
[2(FXCH             fpu0,fpureg              8086,FPU )]624 code0
[2(FXCH                                      8086,FPU,ND )]614.4 code0
[2(FXTRACT                                   8086,FPU )]604.8 code0
[2(FYL2X                                     8086,FPU )]595.2 code0
[2(FYL2XP1                                   8086,FPU )]585.6 code0
[2(HLT                                       8086,PRIV )]576 code0
[2(IBTS             mem,reg16                386,SW,UNDOC,ND,OBSOLETE )]566.4 code0
[2(IBTS             reg16,reg16              386,UNDOC,ND,OBSOLETE )]556.8 code0
[2(IBTS             mem,reg32                386,SD,UNDOC,ND,OBSOLETE )]547.2 code0
[2(IBTS             reg32,reg32              386,UNDOC,ND,OBSOLETE )]537.6 code0
[2(ICEBP                                     386,ND )]528 code0
[2(IDIV             rm8                      8086 )]518.4 code0
[2(IDIV             rm16                     8086 )]508.8 code0
[2(IDIV             rm32                     386 )]499.2 code0
[2(IDIV             rm64                     X86_64,LONG )]489.6 code0
[2(IMUL             rm8                      8086 )]480 code0
[2(IMUL             rm16                     8086 )]470.4 code0
[2(IMUL             rm32                     386 )]460.8 code0
[2(IMUL             rm64                     X86_64,LONG )]451.2 code0
[2(IMUL             reg16,mem                386 )]441.6 code0
[2(IMUL             reg16,reg16              386 )]432 code0
[2(IMUL             reg32,mem                386 )]422.4 code0
[2(IMUL             reg32,reg32              386 )]412.8 code0
[2(IMUL             reg64,mem                X86_64,LONG )]403.2 code0
[2(IMUL             reg64,reg64              X86_64,LONG )]393.6 code0
[2(IMUL             reg16,mem,imm8           186 )]384 code0
[2(IMUL             reg16,mem,sbyteword      186,ND )]374.4 code0
[2(IMUL             reg16,mem,imm16          186 )]364.8 code0
[2(IMUL             reg16,mem,imm            186,ND )]355.2 code0
[2(IMUL             reg16,reg16,imm8         186 )]345.6 code0
[2(IMUL             reg16,reg16,sbyteword    186,ND )]336 code0
[2(IMUL             reg16,reg16,imm16        186 )]326.4 code0
[2(IMUL             reg16,reg16,imm          186,ND )]316.8 code0
[2(IMUL             reg32,mem,imm8           386 )]307.2 code0
[2(IMUL             reg32,mem,sbytedword     386,ND )]297.6 code0
[2(IMUL             reg32,mem,imm32          386 )]288 code0
[2(IMUL             reg32,mem,imm            386,ND )]278.4 code0
[2(IMUL             reg32,reg32,imm8         386 )]268.8 code0
[2(IMUL             reg32,reg32,sbytedword   386,ND )]259.2 code0
[2(IMUL             reg32,reg32,imm32        386 )]249.6 code0
[2(IMUL             reg32,reg32,imm          386,ND )]240 code0
[2(IMUL             reg64,mem,imm8           X86_64,LONG )]230.4 code0
[2(IMUL             reg64,mem,sbytedword     X86_64,LONG,ND )]220.799999999999 code0
[2(IMUL             reg64,mem,imm32          X86_64,LONG )]211.199999999999 code0
[2(IMUL             reg64,mem,imm            X86_64,LONG,ND )]201.599999999999 code0
[2(IMUL             reg64,reg64,imm8         X86_64,LONG )]191.999999999999 code0
[2(IMUL             reg64,reg64,sbytedword   X86_64,LONG,ND )]182.399999999999 code0
[2(IMUL             reg64,reg64,imm32        X86_64,LONG )]172.799999999999 code0
[2(IMUL             reg64,reg64,imm          X86_64,LONG,ND )]163.199999999999 code0
[2(IMUL             reg16,imm8               186 )]153.599999999999 code0
[2(IMUL             reg16,sbyteword          186,ND )]143.999999999999 code0
[2(IMUL             reg16,imm16              186 )]134.399999999999 code0
[2(IMUL             reg16,imm                186,ND )]124.799999999999 code0
[2(IMUL             reg32,imm8               386 )]115.199999999999 code0
[2(IMUL             reg32,sbytedword         386,ND )]105.599999999999 code0
[2(IMUL             reg32,imm32              386 )]95.9999999999992 code0
[2(IMUL             reg32,imm                386,ND )]86.3999999999992 code0
[2(IMUL             reg64,imm8               X86_64,LONG )]76.7999999999992 code0
(151)pageodd
restore showpage
%%Page: 152 152
%%BeginPageSetup
save
%%EndPageSetup
/152 pa
[2(IMUL             reg64,sbytedword         X86_64,LONG,ND )]710.4 code0
[2(IMUL             reg64,imm32              X86_64,LONG )]700.8 code0
[2(IMUL             reg64,imm                X86_64,LONG,ND )]691.2 code0
[2(IN               reg_al,imm               8086 )]681.6 code0
[2(IN               reg_ax,imm               8086 )]672 code0
[2(IN               reg_eax,imm              386 )]662.4 code0
[2(IN               reg_al,reg_dx            8086 )]652.8 code0
[2(IN               reg_ax,reg_dx            8086 )]643.2 code0
[2(IN               reg_eax,reg_dx           386 )]633.6 code0
[2(INC              reg16                    8086,NOLONG )]624 code0
[2(INC              reg32                    386,NOLONG )]614.4 code0
[2(INC              rm8                      8086,LOCK )]604.8 code0
[2(INC              rm16                     8086,LOCK )]595.2 code0
[2(INC              rm32                     386,LOCK )]585.6 code0
[2(INC              rm64                     X86_64,LONG,LOCK )]576 code0
[2(INSB                                      186 )]566.4 code0
[2(INSD                                      386 )]556.8 code0
[2(INSW                                      186 )]547.2 code0
[2(INT              imm                      8086 )]537.6 code0
[2(INT01                                     386,ND )]528 code0
[2(INT1                                      386 )]518.4 code0
[2(INT03                                     8086,ND )]508.8 code0
[2(INT3                                      8086 )]499.2 code0
[2(INTO                                      8086,NOLONG )]489.6 code0
[2(INVD                                      486,PRIV )]480 code0
[2(INVPCID          reg32,mem128             INVPCID,PRIV,NOLONG )]470.4 code0
[2(INVPCID          reg64,mem128             INVPCID,PRIV,LONG )]460.8 code0
[2(INVLPG           mem                      486,PRIV )]451.2 code0
[2(INVLPGA          reg_ax,reg_ecx           X86_64,AMD,NOLONG )]441.6 code0
[2(INVLPGA          reg_eax,reg_ecx          X86_64,AMD )]432 code0
[2(INVLPGA          reg_rax,reg_ecx          X86_64,LONG,AMD )]422.4 code0
[2(INVLPGA                                   X86_64,AMD )]412.8 code0
[2(IRET                                      8086 )]403.2 code0
[2(IRETD                                     386 )]393.6 code0
[2(IRETQ                                     X86_64,LONG )]384 code0
[2(IRETW                                     8086 )]374.4 code0
[2(JCXZ             imm                      8086,NOLONG )]364.8 code0
[2(JECXZ            imm                      386 )]355.2 code0
[2(JRCXZ            imm                      X86_64,LONG )]345.6 code0
[2(JMP              imm|short                8086 )]336 code0
[2(JMP              imm                      8086,ND )]326.4 code0
[2(JMP              imm                      8086,BND )]316.8 code0
[2(JMP              imm|near                 8086,ND,BND )]307.2 code0
[2(JMP              imm|far                  8086,ND,NOLONG )]297.6 code0
[2(JMP              imm16                    8086,NOLONG,BND )]288 code0
[2(JMP              imm16|near               8086,ND,NOLONG,BND )]278.4 code0
[2(JMP              imm16|far                8086,ND,NOLONG )]268.8 code0
[2(JMP              imm32                    386,NOLONG,BND )]259.2 code0
[2(JMP              imm32|near               386,ND,NOLONG,BND )]249.6 code0
[2(JMP              imm32|far                386,ND,NOLONG )]240 code0
[2(JMP              imm64                    X86_64,LONG,BND )]230.4 code0
[2(JMP              imm64|near               X86_64,LONG,ND,BND )]220.799999999999 code0
[2(JMP              imm:imm                  8086,NOLONG )]211.199999999999 code0
[2(JMP              imm16:imm                8086,NOLONG )]201.599999999999 code0
[2(JMP              imm:imm16                8086,NOLONG )]191.999999999999 code0
[2(JMP              imm32:imm                386,NOLONG )]182.399999999999 code0
[2(JMP              imm:imm32                386,NOLONG )]172.799999999999 code0
[2(JMP              mem|far                  8086,NOLONG )]163.199999999999 code0
[2(JMP              mem|far                  X86_64,LONG )]153.599999999999 code0
[2(JMP              mem16|far                8086 )]143.999999999999 code0
[2(JMP              mem32|far                386 )]134.399999999999 code0
[2(JMP              mem64|far                X86_64,LONG )]124.799999999999 code0
[2(JMP              mem|near                 8086,ND,BND )]115.199999999999 code0
[2(JMP              rm16|near                8086,NOLONG,ND,BND )]105.599999999999 code0
[2(JMP              rm32|near                386,NOLONG,ND,BND )]95.9999999999992 code0
[2(JMP              rm64|near                X86_64,LONG,ND,BND )]86.3999999999992 code0
[2(JMP              mem                      8086,BND )]76.7999999999992 code0
(152)pageeven
restore showpage
%%Page: 153 153
%%BeginPageSetup
save
%%EndPageSetup
/153 pa
[2(JMP              rm16                     8086,NOLONG,BND )]710.4 code0
[2(JMP              rm32                     386,NOLONG,BND )]700.8 code0
[2(JMP              rm64                     X86_64,LONG,BND )]691.2 code0
[2(JMPE             imm                      IA64 )]681.6 code0
[2(JMPE             imm16                    IA64 )]672 code0
[2(JMPE             imm32                    IA64 )]662.4 code0
[2(JMPE             rm16                     IA64 )]652.8 code0
[2(JMPE             rm32                     IA64 )]643.2 code0
[2(LAHF                                      8086 )]633.6 code0
[2(LAR              reg16,mem                286,PROT,SW )]624 code0
[2(LAR              reg16,reg16              286,PROT )]614.4 code0
[2(LAR              reg16,reg32              386,PROT )]604.8 code0
[2(LAR              reg16,reg64              X86_64,LONG,PROT,ND )]595.2 code0
[2(LAR              reg32,mem                386,PROT,SW )]585.6 code0
[2(LAR              reg32,reg16              386,PROT )]576 code0
[2(LAR              reg32,reg32              386,PROT )]566.4 code0
[2(LAR              reg32,reg64              X86_64,LONG,PROT,ND )]556.8 code0
[2(LAR              reg64,mem                X86_64,LONG,PROT,SW )]547.2 code0
[2(LAR              reg64,reg16              X86_64,LONG,PROT )]537.6 code0
[2(LAR              reg64,reg32              X86_64,LONG,PROT )]528 code0
[2(LAR              reg64,reg64              X86_64,LONG,PROT )]518.4 code0
[2(LDS              reg16,mem                8086,NOLONG )]508.8 code0
[2(LDS              reg32,mem                386,NOLONG )]499.2 code0
[2(LEA              reg16,mem                8086,ANYSIZE )]489.6 code0
[2(LEA              reg32,mem                386,ANYSIZE )]480 code0
[2(LEA              reg64,mem                X86_64,LONG,ANYSIZE )]470.4 code0
[2(LEA              reg16,imm                8086,ND,ANYSIZE )]460.8 code0
[2(LEA              reg32,imm                386,ND,ANYSIZE )]451.2 code0
[2(LEA              reg64,imm                X86_64,LONG,ND,ANYSIZE )]441.6 code0
[2(LEAVE                                     186 )]432 code0
[2(LES              reg16,mem                8086,NOLONG )]422.4 code0
[2(LES              reg32,mem                386,NOLONG )]412.8 code0
[2(LFENCE                                    X86_64,LONG,AMD )]403.2 code0
[2(LFS              reg16,mem                386 )]393.6 code0
[2(LFS              reg32,mem                386 )]384 code0
[2(LFS              reg64,mem                X86_64,LONG )]374.4 code0
[2(LGDT             mem                      286,PRIV )]364.8 code0
[2(LGS              reg16,mem                386 )]355.2 code0
[2(LGS              reg32,mem                386 )]345.6 code0
[2(LGS              reg64,mem                X86_64,LONG )]336 code0
[2(LIDT             mem                      286,PRIV )]326.4 code0
[2(LLDT             mem                      286,PROT,PRIV )]316.8 code0
[2(LLDT             mem16                    286,PROT,PRIV )]307.2 code0
[2(LLDT             reg16                    286,PROT,PRIV )]297.6 code0
[2(LMSW             mem                      286,PRIV )]288 code0
[2(LMSW             mem16                    286,PRIV )]278.4 code0
[2(LMSW             reg16                    286,PRIV )]268.8 code0
[2(LOADALL                                   386,UNDOC,ND,OBSOLETE )]259.2 code0
[2(LOADALL286                                286,UNDOC,ND,OBSOLETE )]249.6 code0
[2(LODSB                                     8086 )]240 code0
[2(LODSD                                     386 )]230.4 code0
[2(LODSQ                                     X86_64,LONG )]220.799999999999 code0
[2(LODSW                                     8086 )]211.199999999999 code0
[2(LOOP             imm                      8086 )]201.599999999999 code0
[2(LOOP             imm,reg_cx               8086,NOLONG )]191.999999999999 code0
[2(LOOP             imm,reg_ecx              386 )]182.399999999999 code0
[2(LOOP             imm,reg_rcx              X86_64,LONG )]172.799999999999 code0
[2(LOOPE            imm                      8086 )]163.199999999999 code0
[2(LOOPE            imm,reg_cx               8086,NOLONG )]153.599999999999 code0
[2(LOOPE            imm,reg_ecx              386 )]143.999999999999 code0
[2(LOOPE            imm,reg_rcx              X86_64,LONG )]134.399999999999 code0
[2(LOOPNE           imm                      8086 )]124.799999999999 code0
[2(LOOPNE           imm,reg_cx               8086,NOLONG )]115.199999999999 code0
[2(LOOPNE           imm,reg_ecx              386 )]105.599999999999 code0
[2(LOOPNE           imm,reg_rcx              X86_64,LONG )]95.9999999999992 code0
[2(LOOPNZ           imm                      8086 )]86.3999999999992 code0
[2(LOOPNZ           imm,reg_cx               8086,NOLONG )]76.7999999999992 code0
(153)pageodd
restore showpage
%%Page: 154 154
%%BeginPageSetup
save
%%EndPageSetup
/154 pa
[2(LOOPNZ           imm,reg_ecx              386 )]710.4 code0
[2(LOOPNZ           imm,reg_rcx              X86_64,LONG )]700.8 code0
[2(LOOPZ            imm                      8086 )]691.2 code0
[2(LOOPZ            imm,reg_cx               8086,NOLONG )]681.6 code0
[2(LOOPZ            imm,reg_ecx              386 )]672 code0
[2(LOOPZ            imm,reg_rcx              X86_64,LONG )]662.4 code0
[2(LSL              reg16,mem                286,PROT,SW )]652.8 code0
[2(LSL              reg16,reg16              286,PROT )]643.2 code0
[2(LSL              reg16,reg32              386,PROT )]633.6 code0
[2(LSL              reg16,reg64              X86_64,LONG,PROT,ND )]624 code0
[2(LSL              reg32,mem                386,PROT,SW )]614.4 code0
[2(LSL              reg32,reg16              386,PROT )]604.8 code0
[2(LSL              reg32,reg32              386,PROT )]595.2 code0
[2(LSL              reg32,reg64              X86_64,LONG,PROT,ND )]585.6 code0
[2(LSL              reg64,mem                X86_64,LONG,PROT,SW )]576 code0
[2(LSL              reg64,reg16              X86_64,LONG,PROT )]566.4 code0
[2(LSL              reg64,reg32              X86_64,LONG,PROT )]556.8 code0
[2(LSL              reg64,reg64              X86_64,LONG,PROT )]547.2 code0
[2(LSS              reg16,mem                386 )]537.6 code0
[2(LSS              reg32,mem                386 )]528 code0
[2(LSS              reg64,mem                X86_64,LONG )]518.4 code0
[2(LTR              mem                      286,PROT,PRIV )]508.8 code0
[2(LTR              mem16                    286,PROT,PRIV )]499.2 code0
[2(LTR              reg16                    286,PROT,PRIV )]489.6 code0
[2(MFENCE                                    X86_64,LONG,AMD )]480 code0
[2(MONITOR                                   PRESCOTT )]470.4 code0
[2(MONITOR          reg_eax,reg_ecx,reg_edx  PRESCOTT,NOLONG,ND )]460.8 code0
[2(MONITOR          reg_rax,reg_ecx,reg_edx  X86_64,LONG,ND )]451.2 code0
[2(MONITORX                                  AMD )]441.6 code0
[2(MONITORX         reg_rax,reg_ecx,reg_edx  X86_64,LONG,AMD,ND )]432 code0
[2(MONITORX         reg_eax,reg_ecx,reg_edx  AMD,ND )]422.4 code0
[2(MONITORX         reg_ax,reg_ecx,reg_edx   AMD,ND )]412.8 code0
[2(MOV              mem,reg_sreg             8086,SW )]403.2 code0
[2(MOV              reg16,reg_sreg           8086 )]393.6 code0
[2(MOV              reg32,reg_sreg           386 )]384 code0
[2(MOV              reg64,reg_sreg           X86_64,LONG,OPT,ND )]374.4 code0
[2(MOV              rm64,reg_sreg            X86_64,LONG )]364.8 code0
[2(MOV              reg_sreg,mem             8086,SW )]355.2 code0
[2(MOV              reg_sreg,reg16           8086,OPT,ND )]345.6 code0
[2(MOV              reg_sreg,reg32           386,OPT,ND )]336 code0
[2(MOV              reg_sreg,reg64           X86_64,LONG,OPT,ND )]326.4 code0
[2(MOV              reg_sreg,reg16           8086 )]316.8 code0
[2(MOV              reg_sreg,reg32           386 )]307.2 code0
[2(MOV              reg_sreg,rm64            X86_64,LONG )]297.6 code0
[2(MOV              reg_al,mem_offs          8086 )]288 code0
[2(MOV              reg_ax,mem_offs          8086 )]278.4 code0
[2(MOV              reg_eax,mem_offs         386 )]268.8 code0
[2(MOV              reg_rax,mem_offs         X86_64,LONG )]259.2 code0
[2(MOV              mem_offs,reg_al          8086,NOHLE )]249.6 code0
[2(MOV              mem_offs,reg_ax          8086,NOHLE )]240 code0
[2(MOV              mem_offs,reg_eax         386,NOHLE )]230.4 code0
[2(MOV              mem_offs,reg_rax         X86_64,LONG,NOHLE )]220.799999999999 code0
[2(MOV              reg32,reg_creg           386,PRIV,NOLONG )]211.199999999999 code0
[2(MOV              reg64,reg_creg           X86_64,LONG,PRIV )]201.599999999999 code0
[2(MOV              reg_creg,reg32           386,PRIV,NOLONG )]191.999999999999 code0
[2(MOV              reg_creg,reg64           X86_64,LONG,PRIV )]182.399999999999 code0
[2(MOV              reg32,reg_dreg           386,PRIV,NOLONG )]172.799999999999 code0
[2(MOV              reg64,reg_dreg           X86_64,LONG,PRIV )]163.199999999999 code0
[2(MOV              reg_dreg,reg32           386,PRIV,NOLONG )]153.599999999999 code0
[2(MOV              reg_dreg,reg64           X86_64,LONG,PRIV )]143.999999999999 code0
[2(MOV              reg32,reg_treg           386,NOLONG,ND )]134.399999999999 code0
[2(MOV              reg_treg,reg32           386,NOLONG,ND )]124.799999999999 code0
[2(MOV              mem,reg8                 8086 )]115.199999999999 code0
[2(MOV              reg8,reg8                8086 )]105.599999999999 code0
[2(MOV              mem,reg16                8086 )]95.9999999999992 code0
[2(MOV              reg16,reg16              8086 )]86.3999999999992 code0
[2(MOV              mem,reg32                386 )]76.7999999999992 code0
(154)pageeven
restore showpage
%%Page: 155 155
%%BeginPageSetup
save
%%EndPageSetup
/155 pa
[2(MOV              reg32,reg32              386 )]710.4 code0
[2(MOV              mem,reg64                X86_64,LONG )]700.8 code0
[2(MOV              reg64,reg64              X86_64,LONG )]691.2 code0
[2(MOV              reg8,mem                 8086 )]681.6 code0
[2(MOV              reg8,reg8                8086 )]672 code0
[2(MOV              reg16,mem                8086 )]662.4 code0
[2(MOV              reg16,reg16              8086 )]652.8 code0
[2(MOV              reg32,mem                386 )]643.2 code0
[2(MOV              reg32,reg32              386 )]633.6 code0
[2(MOV              reg64,mem                X86_64,LONG )]624 code0
[2(MOV              reg64,reg64              X86_64,LONG )]614.4 code0
[2(MOV              reg8,imm                 8086 )]604.8 code0
[2(MOV              reg16,imm                8086 )]595.2 code0
[2(MOV              reg32,imm                386 )]585.6 code0
[2(MOV              reg64,udword             X86_64,LONG,OPT,ND )]576 code0
[2(MOV              reg64,sdword             X86_64,LONG,OPT,ND )]566.4 code0
[2(MOV              reg64,imm                X86_64,LONG )]556.8 code0
[2(MOV              rm8,imm                  8086 )]547.2 code0
[2(MOV              rm16,imm                 8086 )]537.6 code0
[2(MOV              rm32,imm                 386 )]528 code0
[2(MOV              rm64,imm                 X86_64,LONG )]518.4 code0
[2(MOV              rm64,imm32               X86_64,LONG )]508.8 code0
[2(MOV              mem,imm8                 8086 )]499.2 code0
[2(MOV              mem,imm16                8086 )]489.6 code0
[2(MOV              mem,imm32                386 )]480 code0
[2(MOVD             mmxreg,rm32              PENT,MMX,SD )]470.4 code0
[2(MOVD             rm32,mmxreg              PENT,MMX,SD )]460.8 code0
[2(MOVD             mmxreg,rm64              X86_64,LONG,MMX,SX,ND )]451.2 code0
[2(MOVD             rm64,mmxreg              X86_64,LONG,MMX,SX,ND )]441.6 code0
[2(MOVQ             mmxreg,mmxrm             PENT,MMX )]432 code0
[2(MOVQ             mmxrm,mmxreg             PENT,MMX )]422.4 code0
[2(MOVQ             mmxreg,rm64              X86_64,LONG,MMX )]412.8 code0
[2(MOVQ             rm64,mmxreg              X86_64,LONG,MMX )]403.2 code0
[2(MOVSB                                     8086 )]393.6 code0
[2(MOVSD                                     386 )]384 code0
[2(MOVSQ                                     X86_64,LONG )]374.4 code0
[2(MOVSW                                     8086 )]364.8 code0
[2(MOVSX            reg16,mem                386 )]355.2 code0
[2(MOVSX            reg16,reg8               386 )]345.6 code0
[2(MOVSX            reg32,rm8                386 )]336 code0
[2(MOVSX            reg32,rm16               386 )]326.4 code0
[2(MOVSX            reg64,rm8                X86_64,LONG )]316.8 code0
[2(MOVSX            reg64,rm16               X86_64,LONG )]307.2 code0
[2(MOVSXD           reg64,rm32               X86_64,LONG )]297.6 code0
[2(MOVSX            reg64,rm32               X86_64,LONG,ND )]288 code0
[2(MOVZX            reg16,mem                386 )]278.4 code0
[2(MOVZX            reg16,reg8               386 )]268.8 code0
[2(MOVZX            reg32,rm8                386 )]259.2 code0
[2(MOVZX            reg32,rm16               386 )]249.6 code0
[2(MOVZX            reg64,rm8                X86_64,LONG )]240 code0
[2(MOVZX            reg64,rm16               X86_64,LONG )]230.4 code0
[2(MUL              rm8                      8086 )]220.799999999999 code0
[2(MUL              rm16                     8086 )]211.199999999999 code0
[2(MUL              rm32                     386 )]201.599999999999 code0
[2(MUL              rm64                     X86_64,LONG )]191.999999999999 code0
[2(MWAIT                                     PRESCOTT )]182.399999999999 code0
[2(MWAIT            reg_eax,reg_ecx          PRESCOTT,ND )]172.799999999999 code0
[2(MWAITX                                    AMD )]163.199999999999 code0
[2(MWAITX           reg_eax,reg_ecx          AMD,ND )]153.599999999999 code0
[2(NEG              rm8                      8086,LOCK )]143.999999999999 code0
[2(NEG              rm16                     8086,LOCK )]134.399999999999 code0
[2(NEG              rm32                     386,LOCK )]124.799999999999 code0
[2(NEG              rm64                     X86_64,LONG,LOCK )]115.199999999999 code0
[2(NOP                                       8086 )]105.599999999999 code0
[2(NOP              rm16                     P6 )]95.9999999999992 code0
[2(NOP              rm32                     P6 )]86.3999999999992 code0
[2(NOP              rm64                     X86_64,LONG )]76.7999999999992 code0
(155)pageodd
restore showpage
%%Page: 156 156
%%BeginPageSetup
save
%%EndPageSetup
/156 pa
[2(NOT              rm8                      8086,LOCK )]710.4 code0
[2(NOT              rm16                     8086,LOCK )]700.8 code0
[2(NOT              rm32                     386,LOCK )]691.2 code0
[2(NOT              rm64                     X86_64,LONG,LOCK )]681.6 code0
[2(OR               mem,reg8                 8086,LOCK )]672 code0
[2(OR               reg8,reg8                8086 )]662.4 code0
[2(OR               mem,reg16                8086,LOCK )]652.8 code0
[2(OR               reg16,reg16              8086 )]643.2 code0
[2(OR               mem,reg32                386,LOCK )]633.6 code0
[2(OR               reg32,reg32              386 )]624 code0
[2(OR               mem,reg64                X86_64,LONG,LOCK )]614.4 code0
[2(OR               reg64,reg64              X86_64,LONG )]604.8 code0
[2(OR               reg8,mem                 8086 )]595.2 code0
[2(OR               reg8,reg8                8086 )]585.6 code0
[2(OR               reg16,mem                8086 )]576 code0
[2(OR               reg16,reg16              8086 )]566.4 code0
[2(OR               reg32,mem                386 )]556.8 code0
[2(OR               reg32,reg32              386 )]547.2 code0
[2(OR               reg64,mem                X86_64,LONG )]537.6 code0
[2(OR               reg64,reg64              X86_64,LONG )]528 code0
[2(OR               rm16,imm8                8086,LOCK )]518.4 code0
[2(OR               rm32,imm8                386,LOCK )]508.8 code0
[2(OR               rm64,imm8                X86_64,LONG,LOCK )]499.2 code0
[2(OR               reg_al,imm               8086 )]489.6 code0
[2(OR               reg_ax,sbyteword         8086,ND )]480 code0
[2(OR               reg_ax,imm               8086 )]470.4 code0
[2(OR               reg_eax,sbytedword       386,ND )]460.8 code0
[2(OR               reg_eax,imm              386 )]451.2 code0
[2(OR               reg_rax,sbytedword       X86_64,LONG,ND )]441.6 code0
[2(OR               reg_rax,imm              X86_64,LONG )]432 code0
[2(OR               rm8,imm                  8086,LOCK )]422.4 code0
[2(OR               rm16,sbyteword           8086,LOCK,ND )]412.8 code0
[2(OR               rm16,imm                 8086,LOCK )]403.2 code0
[2(OR               rm32,sbytedword          386,LOCK,ND )]393.6 code0
[2(OR               rm32,imm                 386,LOCK )]384 code0
[2(OR               rm64,sbytedword          X86_64,LONG,LOCK,ND )]374.4 code0
[2(OR               rm64,imm                 X86_64,LONG,LOCK )]364.8 code0
[2(OR               mem,imm8                 8086,LOCK )]355.2 code0
[2(OR               mem,sbyteword16          8086,LOCK,ND )]345.6 code0
[2(OR               mem,imm16                8086,LOCK )]336 code0
[2(OR               mem,sbytedword32         386,LOCK,ND )]326.4 code0
[2(OR               mem,imm32                386,LOCK )]316.8 code0
[2(OR               rm8,imm                  8086,LOCK,ND,NOLONG )]307.2 code0
[2(OUT              imm,reg_al               8086 )]297.6 code0
[2(OUT              imm,reg_ax               8086 )]288 code0
[2(OUT              imm,reg_eax              386 )]278.4 code0
[2(OUT              reg_dx,reg_al            8086 )]268.8 code0
[2(OUT              reg_dx,reg_ax            8086 )]259.2 code0
[2(OUT              reg_dx,reg_eax           386 )]249.6 code0
[2(OUTSB                                     186 )]240 code0
[2(OUTSD                                     386 )]230.4 code0
[2(OUTSW                                     186 )]220.799999999999 code0
[2(PACKSSDW         mmxreg,mmxrm             PENT,MMX )]211.199999999999 code0
[2(PACKSSWB         mmxreg,mmxrm             PENT,MMX )]201.599999999999 code0
[2(PACKUSWB         mmxreg,mmxrm             PENT,MMX )]191.999999999999 code0
[2(PADDB            mmxreg,mmxrm             PENT,MMX )]182.399999999999 code0
[2(PADDD            mmxreg,mmxrm             PENT,MMX )]172.799999999999 code0
[2(PADDSB           mmxreg,mmxrm             PENT,MMX )]163.199999999999 code0
[2(PADDSIW          mmxreg,mmxrm             PENT,MMX,CYRIX )]153.599999999999 code0
[2(PADDSW           mmxreg,mmxrm             PENT,MMX )]143.999999999999 code0
[2(PADDUSB          mmxreg,mmxrm             PENT,MMX )]134.399999999999 code0
[2(PADDUSW          mmxreg,mmxrm             PENT,MMX )]124.799999999999 code0
[2(PADDW            mmxreg,mmxrm             PENT,MMX )]115.199999999999 code0
[2(PAND             mmxreg,mmxrm             PENT,MMX )]105.599999999999 code0
[2(PANDN            mmxreg,mmxrm             PENT,MMX )]95.9999999999992 code0
[2(PAUSE                                     8086 )]86.3999999999992 code0
[2(PAVEB            mmxreg,mmxrm             PENT,MMX,CYRIX )]76.7999999999992 code0
(156)pageeven
restore showpage
%%Page: 157 157
%%BeginPageSetup
save
%%EndPageSetup
/157 pa
[2(PAVGUSB          mmxreg,mmxrm             PENT,3DNOW )]710.4 code0
[2(PCMPEQB          mmxreg,mmxrm             PENT,MMX )]700.8 code0
[2(PCMPEQD          mmxreg,mmxrm             PENT,MMX )]691.2 code0
[2(PCMPEQW          mmxreg,mmxrm             PENT,MMX )]681.6 code0
[2(PCMPGTB          mmxreg,mmxrm             PENT,MMX )]672 code0
[2(PCMPGTD          mmxreg,mmxrm             PENT,MMX )]662.4 code0
[2(PCMPGTW          mmxreg,mmxrm             PENT,MMX )]652.8 code0
[2(PDISTIB          mmxreg,mem               PENT,MMX,CYRIX )]643.2 code0
[2(PF2ID            mmxreg,mmxrm             PENT,3DNOW )]633.6 code0
[2(PFACC            mmxreg,mmxrm             PENT,3DNOW )]624 code0
[2(PFADD            mmxreg,mmxrm             PENT,3DNOW )]614.4 code0
[2(PFCMPEQ          mmxreg,mmxrm             PENT,3DNOW )]604.8 code0
[2(PFCMPGE          mmxreg,mmxrm             PENT,3DNOW )]595.2 code0
[2(PFCMPGT          mmxreg,mmxrm             PENT,3DNOW )]585.6 code0
[2(PFMAX            mmxreg,mmxrm             PENT,3DNOW )]576 code0
[2(PFMIN            mmxreg,mmxrm             PENT,3DNOW )]566.4 code0
[2(PFMUL            mmxreg,mmxrm             PENT,3DNOW )]556.8 code0
[2(PFRCP            mmxreg,mmxrm             PENT,3DNOW )]547.2 code0
[2(PFRCPIT1         mmxreg,mmxrm             PENT,3DNOW )]537.6 code0
[2(PFRCPIT2         mmxreg,mmxrm             PENT,3DNOW )]528 code0
[2(PFRSQIT1         mmxreg,mmxrm             PENT,3DNOW )]518.4 code0
[2(PFRSQRT          mmxreg,mmxrm             PENT,3DNOW )]508.8 code0
[2(PFSUB            mmxreg,mmxrm             PENT,3DNOW )]499.2 code0
[2(PFSUBR           mmxreg,mmxrm             PENT,3DNOW )]489.6 code0
[2(PI2FD            mmxreg,mmxrm             PENT,3DNOW )]480 code0
[2(PMACHRIW         mmxreg,mem               PENT,MMX,CYRIX )]470.4 code0
[2(PMADDWD          mmxreg,mmxrm             PENT,MMX )]460.8 code0
[2(PMAGW            mmxreg,mmxrm             PENT,MMX,CYRIX )]451.2 code0
[2(PMULHRIW         mmxreg,mmxrm             PENT,MMX,CYRIX )]441.6 code0
[2(PMULHRWA         mmxreg,mmxrm             PENT,3DNOW )]432 code0
[2(PMULHRWC         mmxreg,mmxrm             PENT,MMX,CYRIX )]422.4 code0
[2(PMULHW           mmxreg,mmxrm             PENT,MMX )]412.8 code0
[2(PMULLW           mmxreg,mmxrm             PENT,MMX )]403.2 code0
[2(PMVGEZB          mmxreg,mem               PENT,MMX,CYRIX )]393.6 code0
[2(PMVLZB           mmxreg,mem               PENT,MMX,CYRIX )]384 code0
[2(PMVNZB           mmxreg,mem               PENT,MMX,CYRIX )]374.4 code0
[2(PMVZB            mmxreg,mem               PENT,MMX,CYRIX )]364.8 code0
[2(POP              reg16                    8086 )]355.2 code0
[2(POP              reg32                    386,NOLONG )]345.6 code0
[2(POP              reg64                    X86_64,LONG )]336 code0
[2(POP              rm16                     8086 )]326.4 code0
[2(POP              rm32                     386,NOLONG )]316.8 code0
[2(POP              rm64                     X86_64,LONG )]307.2 code0
[2(POP              reg_es                   8086,NOLONG )]297.6 code0
[2(POP              reg_cs                   8086,UNDOC,ND,OBSOLETE )]288 code0
[2(POP              reg_ss                   8086,NOLONG )]278.4 code0
[2(POP              reg_ds                   8086,NOLONG )]268.8 code0
[2(POP              reg_fs                   386 )]259.2 code0
[2(POP              reg_gs                   386 )]249.6 code0
[2(POPA                                      186,NOLONG )]240 code0
[2(POPAD                                     386,NOLONG )]230.4 code0
[2(POPAW                                     186,NOLONG )]220.799999999999 code0
[2(POPF                                      8086 )]211.199999999999 code0
[2(POPFD                                     386,NOLONG )]201.599999999999 code0
[2(POPFQ                                     X86_64,LONG )]191.999999999999 code0
[2(POPFW                                     8086 )]182.399999999999 code0
[2(POR              mmxreg,mmxrm             PENT,MMX )]172.799999999999 code0
[2(PREFETCH         mem                      PENT,3DNOW )]163.199999999999 code0
[2(PREFETCHW        mem                      PENT,3DNOW )]153.599999999999 code0
[2(PSLLD            mmxreg,mmxrm             PENT,MMX )]143.999999999999 code0
[2(PSLLD            mmxreg,imm               PENT,MMX )]134.399999999999 code0
[2(PSLLQ            mmxreg,mmxrm             PENT,MMX )]124.799999999999 code0
[2(PSLLQ            mmxreg,imm               PENT,MMX )]115.199999999999 code0
[2(PSLLW            mmxreg,mmxrm             PENT,MMX )]105.599999999999 code0
[2(PSLLW            mmxreg,imm               PENT,MMX )]95.9999999999992 code0
[2(PSRAD            mmxreg,mmxrm             PENT,MMX )]86.3999999999992 code0
[2(PSRAD            mmxreg,imm               PENT,MMX )]76.7999999999992 code0
(157)pageodd
restore showpage
%%Page: 158 158
%%BeginPageSetup
save
%%EndPageSetup
/158 pa
[2(PSRAW            mmxreg,mmxrm             PENT,MMX )]710.4 code0
[2(PSRAW            mmxreg,imm               PENT,MMX )]700.8 code0
[2(PSRLD            mmxreg,mmxrm             PENT,MMX )]691.2 code0
[2(PSRLD            mmxreg,imm               PENT,MMX )]681.6 code0
[2(PSRLQ            mmxreg,mmxrm             PENT,MMX )]672 code0
[2(PSRLQ            mmxreg,imm               PENT,MMX )]662.4 code0
[2(PSRLW            mmxreg,mmxrm             PENT,MMX )]652.8 code0
[2(PSRLW            mmxreg,imm               PENT,MMX )]643.2 code0
[2(PSUBB            mmxreg,mmxrm             PENT,MMX )]633.6 code0
[2(PSUBD            mmxreg,mmxrm             PENT,MMX )]624 code0
[2(PSUBSB           mmxreg,mmxrm             PENT,MMX )]614.4 code0
[2(PSUBSIW          mmxreg,mmxrm             PENT,MMX,CYRIX )]604.8 code0
[2(PSUBSW           mmxreg,mmxrm             PENT,MMX )]595.2 code0
[2(PSUBUSB          mmxreg,mmxrm             PENT,MMX )]585.6 code0
[2(PSUBUSW          mmxreg,mmxrm             PENT,MMX )]576 code0
[2(PSUBW            mmxreg,mmxrm             PENT,MMX )]566.4 code0
[2(PUNPCKHBW        mmxreg,mmxrm             PENT,MMX )]556.8 code0
[2(PUNPCKHDQ        mmxreg,mmxrm             PENT,MMX )]547.2 code0
[2(PUNPCKHWD        mmxreg,mmxrm             PENT,MMX )]537.6 code0
[2(PUNPCKLBW        mmxreg,mmxrm             PENT,MMX )]528 code0
[2(PUNPCKLDQ        mmxreg,mmxrm             PENT,MMX )]518.4 code0
[2(PUNPCKLWD        mmxreg,mmxrm             PENT,MMX )]508.8 code0
[2(PUSH             reg16                    8086 )]499.2 code0
[2(PUSH             reg32                    386,NOLONG )]489.6 code0
[2(PUSH             reg64                    X86_64,LONG )]480 code0
[2(PUSH             rm16                     8086 )]470.4 code0
[2(PUSH             rm32                     386,NOLONG )]460.8 code0
[2(PUSH             rm64                     X86_64,LONG )]451.2 code0
[2(PUSH             reg_es                   8086,NOLONG )]441.6 code0
[2(PUSH             reg_cs                   8086,NOLONG )]432 code0
[2(PUSH             reg_ss                   8086,NOLONG )]422.4 code0
[2(PUSH             reg_ds                   8086,NOLONG )]412.8 code0
[2(PUSH             reg_fs                   386 )]403.2 code0
[2(PUSH             reg_gs                   386 )]393.6 code0
[2(PUSH             imm8                     186 )]384 code0
[2(PUSH             sbyteword16              186,AR0,SIZE,ND )]374.4 code0
[2(PUSH             imm16                    186,AR0,SIZE )]364.8 code0
[2(PUSH             sbytedword32             386,NOLONG,AR0,SIZE,ND )]355.2 code0
[2(PUSH             imm32                    386,NOLONG,AR0,SIZE )]345.6 code0
[2(PUSH             sbytedword32             386,NOLONG,SD,ND )]336 code0
[2(PUSH             imm32                    386,NOLONG,SD )]326.4 code0
[2(PUSH             sbytedword64             X86_64,LONG,AR0,SIZE,ND )]316.8 code0
[2(PUSH             imm64                    X86_64,LONG,AR0,SIZE )]307.2 code0
[2(PUSH             sbytedword32             X86_64,LONG,AR0,SIZE,ND )]297.6 code0
[2(PUSH             imm32                    X86_64,LONG,AR0,SIZE )]288 code0
[2(PUSHA                                     186,NOLONG )]278.4 code0
[2(PUSHAD                                    386,NOLONG )]268.8 code0
[2(PUSHAW                                    186,NOLONG )]259.2 code0
[2(PUSHF                                     8086 )]249.6 code0
[2(PUSHFD                                    386,NOLONG )]240 code0
[2(PUSHFQ                                    X86_64,LONG )]230.4 code0
[2(PUSHFW                                    8086 )]220.799999999999 code0
[2(PXOR             mmxreg,mmxrm             PENT,MMX )]211.199999999999 code0
[2(RCL              rm8,unity                8086 )]201.599999999999 code0
[2(RCL              rm8,reg_cl               8086 )]191.999999999999 code0
[2(RCL              rm8,imm8                 186 )]182.399999999999 code0
[2(RCL              rm16,unity               8086 )]172.799999999999 code0
[2(RCL              rm16,reg_cl              8086 )]163.199999999999 code0
[2(RCL              rm16,imm8                186 )]153.599999999999 code0
[2(RCL              rm32,unity               386 )]143.999999999999 code0
[2(RCL              rm32,reg_cl              386 )]134.399999999999 code0
[2(RCL              rm32,imm8                386 )]124.799999999999 code0
[2(RCL              rm64,unity               X86_64,LONG )]115.199999999999 code0
[2(RCL              rm64,reg_cl              X86_64,LONG )]105.599999999999 code0
[2(RCL              rm64,imm8                X86_64,LONG )]95.9999999999992 code0
[2(RCR              rm8,unity                8086 )]86.3999999999992 code0
[2(RCR              rm8,reg_cl               8086 )]76.7999999999992 code0
(158)pageeven
restore showpage
%%Page: 159 159
%%BeginPageSetup
save
%%EndPageSetup
/159 pa
[2(RCR              rm8,imm8                 186 )]710.4 code0
[2(RCR              rm16,unity               8086 )]700.8 code0
[2(RCR              rm16,reg_cl              8086 )]691.2 code0
[2(RCR              rm16,imm8                186 )]681.6 code0
[2(RCR              rm32,unity               386 )]672 code0
[2(RCR              rm32,reg_cl              386 )]662.4 code0
[2(RCR              rm32,imm8                386 )]652.8 code0
[2(RCR              rm64,unity               X86_64,LONG )]643.2 code0
[2(RCR              rm64,reg_cl              X86_64,LONG )]633.6 code0
[2(RCR              rm64,imm8                X86_64,LONG )]624 code0
[2(RDSHR            rm32                     P6,CYRIX,SMM )]614.4 code0
[2(RDMSR                                     PENT,PRIV )]604.8 code0
[2(RDPMC                                     P6 )]595.2 code0
[2(RDTSC                                     PENT )]585.6 code0
[2(RDTSCP                                    X86_64 )]576 code0
[2(RET                                       8086,BND )]566.4 code0
[2(RET              imm                      8086,SW,BND )]556.8 code0
[2(RETF                                      8086 )]547.2 code0
[2(RETF             imm                      8086,SW )]537.6 code0
[2(RETN                                      8086,BND )]528 code0
[2(RETN             imm                      8086,SW,BND )]518.4 code0
[2(RETW                                      8086,BND )]508.8 code0
[2(RETW             imm                      8086,SW,BND )]499.2 code0
[2(RETFW                                     8086 )]489.6 code0
[2(RETFW            imm                      8086,SW )]480 code0
[2(RETNW                                     8086,BND )]470.4 code0
[2(RETNW            imm                      8086,SW,BND )]460.8 code0
[2(RETD                                      8086,BND,NOLONG )]451.2 code0
[2(RETD             imm                      8086,SW,BND,NOLONG )]441.6 code0
[2(RETFD                                     8086 )]432 code0
[2(RETFD            imm                      8086,SW )]422.4 code0
[2(RETND                                     8086,BND,NOLONG )]412.8 code0
[2(RETND            imm                      8086,SW,BND,NOLONG )]403.2 code0
[2(RETQ                                      X86_64,LONG,BND )]393.6 code0
[2(RETQ             imm                      X86_64,LONG,SW,BND )]384 code0
[2(RETFQ                                     X86_64,LONG )]374.4 code0
[2(RETFQ            imm                      X86_64,LONG,SW )]364.8 code0
[2(RETNQ                                     X86_64,LONG,BND )]355.2 code0
[2(RETNQ            imm                      X86_64,LONG,SW,BND )]345.6 code0
[2(ROL              rm8,unity                8086 )]336 code0
[2(ROL              rm8,reg_cl               8086 )]326.4 code0
[2(ROL              rm8,imm8                 186 )]316.8 code0
[2(ROL              rm16,unity               8086 )]307.2 code0
[2(ROL              rm16,reg_cl              8086 )]297.6 code0
[2(ROL              rm16,imm8                186 )]288 code0
[2(ROL              rm32,unity               386 )]278.4 code0
[2(ROL              rm32,reg_cl              386 )]268.8 code0
[2(ROL              rm32,imm8                386 )]259.2 code0
[2(ROL              rm64,unity               X86_64,LONG )]249.6 code0
[2(ROL              rm64,reg_cl              X86_64,LONG )]240 code0
[2(ROL              rm64,imm8                X86_64,LONG )]230.4 code0
[2(ROR              rm8,unity                8086 )]220.799999999999 code0
[2(ROR              rm8,reg_cl               8086 )]211.199999999999 code0
[2(ROR              rm8,imm8                 186 )]201.599999999999 code0
[2(ROR              rm16,unity               8086 )]191.999999999999 code0
[2(ROR              rm16,reg_cl              8086 )]182.399999999999 code0
[2(ROR              rm16,imm8                186 )]172.799999999999 code0
[2(ROR              rm32,unity               386 )]163.199999999999 code0
[2(ROR              rm32,reg_cl              386 )]153.599999999999 code0
[2(ROR              rm32,imm8                386 )]143.999999999999 code0
[2(ROR              rm64,unity               X86_64,LONG )]134.399999999999 code0
[2(ROR              rm64,reg_cl              X86_64,LONG )]124.799999999999 code0
[2(ROR              rm64,imm8                X86_64,LONG )]115.199999999999 code0
[2(RDM                                       P6,CYRIX,ND )]105.599999999999 code0
[2(RSDC             reg_sreg,mem80           486,CYRIX,SMM )]95.9999999999992 code0
[2(RSLDT            mem80                    486,CYRIX,SMM )]86.3999999999992 code0
[2(RSM                                       PENT,SMM )]76.7999999999992 code0
(159)pageodd
restore showpage
%%Page: 160 160
%%BeginPageSetup
save
%%EndPageSetup
/160 pa
[2(RSTS             mem80                    486,CYRIX,SMM )]710.4 code0
[2(SAHF                                      8086 )]700.8 code0
[2(SAL              rm8,unity                8086,ND )]691.2 code0
[2(SAL              rm8,reg_cl               8086,ND )]681.6 code0
[2(SAL              rm8,imm8                 186,ND )]672 code0
[2(SAL              rm16,unity               8086,ND )]662.4 code0
[2(SAL              rm16,reg_cl              8086,ND )]652.8 code0
[2(SAL              rm16,imm8                186,ND )]643.2 code0
[2(SAL              rm32,unity               386,ND )]633.6 code0
[2(SAL              rm32,reg_cl              386,ND )]624 code0
[2(SAL              rm32,imm8                386,ND )]614.4 code0
[2(SAL              rm64,unity               X86_64,LONG,ND )]604.8 code0
[2(SAL              rm64,reg_cl              X86_64,LONG,ND )]595.2 code0
[2(SAL              rm64,imm8                X86_64,LONG,ND )]585.6 code0
[2(SALC                                      8086,UNDOC )]576 code0
[2(SAR              rm8,unity                8086 )]566.4 code0
[2(SAR              rm8,reg_cl               8086 )]556.8 code0
[2(SAR              rm8,imm8                 186 )]547.2 code0
[2(SAR              rm16,unity               8086 )]537.6 code0
[2(SAR              rm16,reg_cl              8086 )]528 code0
[2(SAR              rm16,imm8                186 )]518.4 code0
[2(SAR              rm32,unity               386 )]508.8 code0
[2(SAR              rm32,reg_cl              386 )]499.2 code0
[2(SAR              rm32,imm8                386 )]489.6 code0
[2(SAR              rm64,unity               X86_64,LONG )]480 code0
[2(SAR              rm64,reg_cl              X86_64,LONG )]470.4 code0
[2(SAR              rm64,imm8                X86_64,LONG )]460.8 code0
[2(SBB              mem,reg8                 8086,LOCK )]451.2 code0
[2(SBB              reg8,reg8                8086 )]441.6 code0
[2(SBB              mem,reg16                8086,LOCK )]432 code0
[2(SBB              reg16,reg16              8086 )]422.4 code0
[2(SBB              mem,reg32                386,LOCK )]412.8 code0
[2(SBB              reg32,reg32              386 )]403.2 code0
[2(SBB              mem,reg64                X86_64,LONG,LOCK )]393.6 code0
[2(SBB              reg64,reg64              X86_64,LONG )]384 code0
[2(SBB              reg8,mem                 8086 )]374.4 code0
[2(SBB              reg8,reg8                8086 )]364.8 code0
[2(SBB              reg16,mem                8086 )]355.2 code0
[2(SBB              reg16,reg16              8086 )]345.6 code0
[2(SBB              reg32,mem                386 )]336 code0
[2(SBB              reg32,reg32              386 )]326.4 code0
[2(SBB              reg64,mem                X86_64,LONG )]316.8 code0
[2(SBB              reg64,reg64              X86_64,LONG )]307.2 code0
[2(SBB              rm16,imm8                8086,LOCK )]297.6 code0
[2(SBB              rm32,imm8                386,LOCK )]288 code0
[2(SBB              rm64,imm8                X86_64,LONG,LOCK )]278.4 code0
[2(SBB              reg_al,imm               8086 )]268.8 code0
[2(SBB              reg_ax,sbyteword         8086,ND )]259.2 code0
[2(SBB              reg_ax,imm               8086 )]249.6 code0
[2(SBB              reg_eax,sbytedword       386,ND )]240 code0
[2(SBB              reg_eax,imm              386 )]230.4 code0
[2(SBB              reg_rax,sbytedword       X86_64,LONG,ND )]220.799999999999 code0
[2(SBB              reg_rax,imm              X86_64,LONG )]211.199999999999 code0
[2(SBB              rm8,imm                  8086,LOCK )]201.599999999999 code0
[2(SBB              rm16,sbyteword           8086,LOCK,ND )]191.999999999999 code0
[2(SBB              rm16,imm                 8086,LOCK )]182.399999999999 code0
[2(SBB              rm32,sbytedword          386,LOCK,ND )]172.799999999999 code0
[2(SBB              rm32,imm                 386,LOCK )]163.199999999999 code0
[2(SBB              rm64,sbytedword          X86_64,LONG,LOCK,ND )]153.599999999999 code0
[2(SBB              rm64,imm                 X86_64,LONG,LOCK )]143.999999999999 code0
[2(SBB              mem,imm8                 8086,LOCK )]134.399999999999 code0
[2(SBB              mem,sbyteword16          8086,LOCK,ND )]124.799999999999 code0
[2(SBB              mem,imm16                8086,LOCK )]115.199999999999 code0
[2(SBB              mem,sbytedword32         386,LOCK,ND )]105.599999999999 code0
[2(SBB              mem,imm32                386,LOCK )]95.9999999999992 code0
[2(SBB              rm8,imm                  8086,LOCK,ND,NOLONG )]86.3999999999992 code0
[2(SCASB                                     8086 )]76.7999999999992 code0
(160)pageeven
restore showpage
%%Page: 161 161
%%BeginPageSetup
save
%%EndPageSetup
/161 pa
[2(SCASD                                     386 )]710.4 code0
[2(SCASQ                                     X86_64,LONG )]700.8 code0
[2(SCASW                                     8086 )]691.2 code0
[2(SFENCE                                    X86_64,LONG,AMD )]681.6 code0
[2(SGDT             mem                      286 )]672 code0
[2(SHL              rm8,unity                8086 )]662.4 code0
[2(SHL              rm8,reg_cl               8086 )]652.8 code0
[2(SHL              rm8,imm8                 186 )]643.2 code0
[2(SHL              rm16,unity               8086 )]633.6 code0
[2(SHL              rm16,reg_cl              8086 )]624 code0
[2(SHL              rm16,imm8                186 )]614.4 code0
[2(SHL              rm32,unity               386 )]604.8 code0
[2(SHL              rm32,reg_cl              386 )]595.2 code0
[2(SHL              rm32,imm8                386 )]585.6 code0
[2(SHL              rm64,unity               X86_64,LONG )]576 code0
[2(SHL              rm64,reg_cl              X86_64,LONG )]566.4 code0
[2(SHL              rm64,imm8                X86_64,LONG )]556.8 code0
[2(SHLD             mem,reg16,imm            386 )]547.2 code0
[2(SHLD             reg16,reg16,imm          386 )]537.6 code0
[2(SHLD             mem,reg32,imm            386 )]528 code0
[2(SHLD             reg32,reg32,imm          386 )]518.4 code0
[2(SHLD             mem,reg64,imm            X86_64,LONG )]508.8 code0
[2(SHLD             reg64,reg64,imm          X86_64,LONG )]499.2 code0
[2(SHLD             mem,reg16,reg_cl         386 )]489.6 code0
[2(SHLD             reg16,reg16,reg_cl       386 )]480 code0
[2(SHLD             mem,reg32,reg_cl         386 )]470.4 code0
[2(SHLD             reg32,reg32,reg_cl       386 )]460.8 code0
[2(SHLD             mem,reg64,reg_cl         X86_64,LONG )]451.2 code0
[2(SHLD             reg64,reg64,reg_cl       X86_64,LONG )]441.6 code0
[2(SHR              rm8,unity                8086 )]432 code0
[2(SHR              rm8,reg_cl               8086 )]422.4 code0
[2(SHR              rm8,imm8                 186 )]412.8 code0
[2(SHR              rm16,unity               8086 )]403.2 code0
[2(SHR              rm16,reg_cl              8086 )]393.6 code0
[2(SHR              rm16,imm8                186 )]384 code0
[2(SHR              rm32,unity               386 )]374.4 code0
[2(SHR              rm32,reg_cl              386 )]364.8 code0
[2(SHR              rm32,imm8                386 )]355.2 code0
[2(SHR              rm64,unity               X86_64,LONG )]345.6 code0
[2(SHR              rm64,reg_cl              X86_64,LONG )]336 code0
[2(SHR              rm64,imm8                X86_64,LONG )]326.4 code0
[2(SHRD             mem,reg16,imm            386 )]316.8 code0
[2(SHRD             reg16,reg16,imm          386 )]307.2 code0
[2(SHRD             mem,reg32,imm            386 )]297.6 code0
[2(SHRD             reg32,reg32,imm          386 )]288 code0
[2(SHRD             mem,reg64,imm            X86_64,LONG )]278.4 code0
[2(SHRD             reg64,reg64,imm          X86_64,LONG )]268.8 code0
[2(SHRD             mem,reg16,reg_cl         386 )]259.2 code0
[2(SHRD             reg16,reg16,reg_cl       386 )]249.6 code0
[2(SHRD             mem,reg32,reg_cl         386 )]240 code0
[2(SHRD             reg32,reg32,reg_cl       386 )]230.4 code0
[2(SHRD             mem,reg64,reg_cl         X86_64,LONG )]220.799999999999 code0
[2(SHRD             reg64,reg64,reg_cl       X86_64,LONG )]211.199999999999 code0
[2(SIDT             mem                      286 )]201.599999999999 code0
[2(SLDT             mem                      286 )]191.999999999999 code0
[2(SLDT             mem16                    286 )]182.399999999999 code0
[2(SLDT             reg16                    286 )]172.799999999999 code0
[2(SLDT             reg32                    386 )]163.199999999999 code0
[2(SLDT             reg64                    X86_64,LONG,ND )]153.599999999999 code0
[2(SLDT             reg64                    X86_64,LONG )]143.999999999999 code0
[2(SKINIT                                    X86_64,LONG )]134.399999999999 code0
[2(SMI                                       386,UNDOC )]124.799999999999 code0
[2(SMINT                                     P6,CYRIX,ND )]115.199999999999 code0
[2(SMINTOLD                                  486,CYRIX,ND,OBSOLETE )]105.599999999999 code0
[2(SMSW             mem                      286 )]95.9999999999992 code0
[2(SMSW             mem16                    286 )]86.3999999999992 code0
[2(SMSW             reg16                    286 )]76.7999999999992 code0
(161)pageodd
restore showpage
%%Page: 162 162
%%BeginPageSetup
save
%%EndPageSetup
/162 pa
[2(SMSW             reg32                    386 )]710.4 code0
[2(SMSW             reg64                    X86_64,LONG )]700.8 code0
[2(STC                                       8086 )]691.2 code0
[2(STD                                       8086 )]681.6 code0
[2(STI                                       8086 )]672 code0
[2(STOSB                                     8086 )]662.4 code0
[2(STOSD                                     386 )]652.8 code0
[2(STOSQ                                     X86_64,LONG )]643.2 code0
[2(STOSW                                     8086 )]633.6 code0
[2(STR              mem                      286,PROT )]624 code0
[2(STR              mem16                    286,PROT )]614.4 code0
[2(STR              reg16                    286,PROT )]604.8 code0
[2(STR              reg32                    386,PROT )]595.2 code0
[2(STR              reg64                    X86_64,LONG )]585.6 code0
[2(SUB              mem,reg8                 8086,LOCK )]576 code0
[2(SUB              reg8,reg8                8086 )]566.4 code0
[2(SUB              mem,reg16                8086,LOCK )]556.8 code0
[2(SUB              reg16,reg16              8086 )]547.2 code0
[2(SUB              mem,reg32                386,LOCK )]537.6 code0
[2(SUB              reg32,reg32              386 )]528 code0
[2(SUB              mem,reg64                X86_64,LONG,LOCK )]518.4 code0
[2(SUB              reg64,reg64              X86_64,LONG )]508.8 code0
[2(SUB              reg8,mem                 8086 )]499.2 code0
[2(SUB              reg8,reg8                8086 )]489.6 code0
[2(SUB              reg16,mem                8086 )]480 code0
[2(SUB              reg16,reg16              8086 )]470.4 code0
[2(SUB              reg32,mem                386 )]460.8 code0
[2(SUB              reg32,reg32              386 )]451.2 code0
[2(SUB              reg64,mem                X86_64,LONG )]441.6 code0
[2(SUB              reg64,reg64              X86_64,LONG )]432 code0
[2(SUB              rm16,imm8                8086,LOCK )]422.4 code0
[2(SUB              rm32,imm8                386,LOCK )]412.8 code0
[2(SUB              rm64,imm8                X86_64,LONG,LOCK )]403.2 code0
[2(SUB              reg_al,imm               8086 )]393.6 code0
[2(SUB              reg_ax,sbyteword         8086,ND )]384 code0
[2(SUB              reg_ax,imm               8086 )]374.4 code0
[2(SUB              reg_eax,sbytedword       386,ND )]364.8 code0
[2(SUB              reg_eax,imm              386 )]355.2 code0
[2(SUB              reg_rax,sbytedword       X86_64,LONG,ND )]345.6 code0
[2(SUB              reg_rax,imm              X86_64,LONG )]336 code0
[2(SUB              rm8,imm                  8086,LOCK )]326.4 code0
[2(SUB              rm16,sbyteword           8086,LOCK,ND )]316.8 code0
[2(SUB              rm16,imm                 8086,LOCK )]307.2 code0
[2(SUB              rm32,sbytedword          386,LOCK,ND )]297.6 code0
[2(SUB              rm32,imm                 386,LOCK )]288 code0
[2(SUB              rm64,sbytedword          X86_64,LONG,LOCK,ND )]278.4 code0
[2(SUB              rm64,imm                 X86_64,LONG,LOCK )]268.8 code0
[2(SUB              mem,imm8                 8086,LOCK )]259.2 code0
[2(SUB              mem,sbyteword16          8086,LOCK,ND )]249.6 code0
[2(SUB              mem,imm16                8086,LOCK )]240 code0
[2(SUB              mem,sbytedword32         386,LOCK,ND )]230.4 code0
[2(SUB              mem,imm32                386,LOCK )]220.799999999999 code0
[2(SUB              rm8,imm                  8086,LOCK,ND,NOLONG )]211.199999999999 code0
[2(SVDC             mem80,reg_sreg           486,CYRIX,SMM )]201.599999999999 code0
[2(SVLDT            mem80                    486,CYRIX,SMM,ND )]191.999999999999 code0
[2(SVTS             mem80                    486,CYRIX,SMM )]182.399999999999 code0
[2(SWAPGS                                    X86_64,LONG )]172.799999999999 code0
[2(SYSCALL                                   P6,AMD )]163.199999999999 code0
[2(SYSENTER                                  P6 )]153.599999999999 code0
[2(SYSEXIT                                   P6,PRIV )]143.999999999999 code0
[2(SYSRET                                    P6,PRIV,AMD )]134.399999999999 code0
[2(TEST             mem,reg8                 8086 )]124.799999999999 code0
[2(TEST             reg8,reg8                8086 )]115.199999999999 code0
[2(TEST             mem,reg16                8086 )]105.599999999999 code0
[2(TEST             reg16,reg16              8086 )]95.9999999999992 code0
[2(TEST             mem,reg32                386 )]86.3999999999992 code0
[2(TEST             reg32,reg32              386 )]76.7999999999992 code0
(162)pageeven
restore showpage
%%Page: 163 163
%%BeginPageSetup
save
%%EndPageSetup
/163 pa
[2(TEST             mem,reg64                X86_64,LONG )]710.4 code0
[2(TEST             reg64,reg64              X86_64,LONG )]700.8 code0
[2(TEST             reg8,mem                 8086 )]691.2 code0
[2(TEST             reg16,mem                8086 )]681.6 code0
[2(TEST             reg32,mem                386 )]672 code0
[2(TEST             reg64,mem                X86_64,LONG )]662.4 code0
[2(TEST             reg_al,imm               8086 )]652.8 code0
[2(TEST             reg_ax,imm               8086 )]643.2 code0
[2(TEST             reg_eax,imm              386 )]633.6 code0
[2(TEST             reg_rax,imm              X86_64,LONG )]624 code0
[2(TEST             rm8,imm                  8086 )]614.4 code0
[2(TEST             rm16,imm                 8086 )]604.8 code0
[2(TEST             rm32,imm                 386 )]595.2 code0
[2(TEST             rm64,imm                 X86_64,LONG )]585.6 code0
[2(TEST             mem,imm8                 8086 )]576 code0
[2(TEST             mem,imm16                8086 )]566.4 code0
[2(TEST             mem,imm32                386 )]556.8 code0
[2(UD0                                       186,OBSOLETE )]547.2 code0
[2(UD0              reg16,rm16               186 )]537.6 code0
[2(UD0              reg32,rm32               186 )]528 code0
[2(UD0              reg64,rm64               186 )]518.4 code0
[2(UD1              reg16,rm16               186 )]508.8 code0
[2(UD1              reg32,rm32               186 )]499.2 code0
[2(UD1              reg64,rm64               186 )]489.6 code0
[2(UD1                                       186,ND )]480 code0
[2(UD2B                                      186,ND )]470.4 code0
[2(UD2B             reg16,rm16               186,ND )]460.8 code0
[2(UD2B             reg32,rm32               186,ND )]451.2 code0
[2(UD2B             reg64,rm64               186,ND )]441.6 code0
[2(UD2                                       186 )]432 code0
[2(UD2A                                      186,ND )]422.4 code0
[2(UMOV             mem,reg8                 386,UNDOC,ND )]412.8 code0
[2(UMOV             reg8,reg8                386,UNDOC,ND )]403.2 code0
[2(UMOV             mem,reg16                386,UNDOC,ND )]393.6 code0
[2(UMOV             reg16,reg16              386,UNDOC,ND )]384 code0
[2(UMOV             mem,reg32                386,UNDOC,ND )]374.4 code0
[2(UMOV             reg32,reg32              386,UNDOC,ND )]364.8 code0
[2(UMOV             reg8,mem                 386,UNDOC,ND )]355.2 code0
[2(UMOV             reg8,reg8                386,UNDOC,ND )]345.6 code0
[2(UMOV             reg16,mem                386,UNDOC,ND )]336 code0
[2(UMOV             reg16,reg16              386,UNDOC,ND )]326.4 code0
[2(UMOV             reg32,mem                386,UNDOC,ND )]316.8 code0
[2(UMOV             reg32,reg32              386,UNDOC,ND )]307.2 code0
[2(VERR             mem                      286,PROT )]297.6 code0
[2(VERR             mem16                    286,PROT )]288 code0
[2(VERR             reg16                    286,PROT )]278.4 code0
[2(VERW             mem                      286,PROT )]268.8 code0
[2(VERW             mem16                    286,PROT )]259.2 code0
[2(VERW             reg16                    286,PROT )]249.6 code0
[2(FWAIT                                     8086 )]240 code0
[2(WBINVD                                    486,PRIV )]230.4 code0
[2(WRSHR            rm32                     P6,CYRIX,SMM )]220.799999999999 code0
[2(WRMSR                                     PENT,PRIV )]211.199999999999 code0
[2(XADD             mem,reg8                 486,LOCK )]201.599999999999 code0
[2(XADD             reg8,reg8                486 )]191.999999999999 code0
[2(XADD             mem,reg16                486,LOCK )]182.399999999999 code0
[2(XADD             reg16,reg16              486 )]172.799999999999 code0
[2(XADD             mem,reg32                486,LOCK )]163.199999999999 code0
[2(XADD             reg32,reg32              486 )]153.599999999999 code0
[2(XADD             mem,reg64                X86_64,LONG,LOCK )]143.999999999999 code0
[2(XADD             reg64,reg64              X86_64,LONG )]134.399999999999 code0
[2(XBTS             reg16,mem                386,SW,UNDOC,ND )]124.799999999999 code0
[2(XBTS             reg16,reg16              386,UNDOC,ND )]115.199999999999 code0
[2(XBTS             reg32,mem                386,SD,UNDOC,ND )]105.599999999999 code0
[2(XBTS             reg32,reg32              386,UNDOC,ND )]95.9999999999992 code0
[2(XCHG             reg_ax,reg16             8086 )]86.3999999999992 code0
[2(XCHG             reg_eax,reg32na          386 )]76.7999999999992 code0
(163)pageodd
restore showpage
%%Page: 164 164
%%BeginPageSetup
save
%%EndPageSetup
/164 pa
[2(XCHG             reg_rax,reg64            X86_64,LONG )]710.4 code0
[2(XCHG             reg16,reg_ax             8086 )]700.8 code0
[2(XCHG             reg32na,reg_eax          386 )]691.2 code0
[2(XCHG             reg64,reg_rax            X86_64,LONG )]681.6 code0
[2(XCHG             reg_eax,reg_eax          386,NOLONG )]672 code0
[2(XCHG             reg8,mem                 8086,LOCK )]662.4 code0
[2(XCHG             reg8,reg8                8086 )]652.8 code0
[2(XCHG             reg16,mem                8086,LOCK )]643.2 code0
[2(XCHG             reg16,reg16              8086 )]633.6 code0
[2(XCHG             reg32,mem                386,LOCK )]624 code0
[2(XCHG             reg32,reg32              386 )]614.4 code0
[2(XCHG             reg64,mem                X86_64,LONG,LOCK )]604.8 code0
[2(XCHG             reg64,reg64              X86_64,LONG )]595.2 code0
[2(XCHG             mem,reg8                 8086,LOCK )]585.6 code0
[2(XCHG             reg8,reg8                8086 )]576 code0
[2(XCHG             mem,reg16                8086,LOCK )]566.4 code0
[2(XCHG             reg16,reg16              8086 )]556.8 code0
[2(XCHG             mem,reg32                386,LOCK )]547.2 code0
[2(XCHG             reg32,reg32              386 )]537.6 code0
[2(XCHG             mem,reg64                X86_64,LONG,LOCK )]528 code0
[2(XCHG             reg64,reg64              X86_64,LONG )]518.4 code0
[2(XLATB                                     8086 )]508.8 code0
[2(XLAT                                      8086 )]499.2 code0
[2(XOR              mem,reg8                 8086,LOCK )]489.6 code0
[2(XOR              reg8,reg8                8086 )]480 code0
[2(XOR              mem,reg16                8086,LOCK )]470.4 code0
[2(XOR              reg16,reg16              8086 )]460.8 code0
[2(XOR              mem,reg32                386,LOCK )]451.2 code0
[2(XOR              reg32,reg32              386 )]441.6 code0
[2(XOR              mem,reg64                X86_64,LONG,LOCK )]432 code0
[2(XOR              reg64,reg64              X86_64,LONG )]422.4 code0
[2(XOR              reg8,mem                 8086 )]412.8 code0
[2(XOR              reg8,reg8                8086 )]403.2 code0
[2(XOR              reg16,mem                8086 )]393.6 code0
[2(XOR              reg16,reg16              8086 )]384 code0
[2(XOR              reg32,mem                386 )]374.4 code0
[2(XOR              reg32,reg32              386 )]364.8 code0
[2(XOR              reg64,mem                X86_64,LONG )]355.2 code0
[2(XOR              reg64,reg64              X86_64,LONG )]345.6 code0
[2(XOR              rm16,imm8                8086,LOCK )]336 code0
[2(XOR              rm32,imm8                386,LOCK )]326.4 code0
[2(XOR              rm64,imm8                X86_64,LONG,LOCK )]316.8 code0
[2(XOR              reg_al,imm               8086 )]307.2 code0
[2(XOR              reg_ax,sbyteword         8086,ND )]297.6 code0
[2(XOR              reg_ax,imm               8086 )]288 code0
[2(XOR              reg_eax,sbytedword       386,ND )]278.4 code0
[2(XOR              reg_eax,imm              386 )]268.8 code0
[2(XOR              reg_rax,sbytedword       X86_64,LONG,ND )]259.2 code0
[2(XOR              reg_rax,imm              X86_64,LONG )]249.6 code0
[2(XOR              rm8,imm                  8086,LOCK )]240 code0
[2(XOR              rm16,sbyteword           8086,LOCK,ND )]230.4 code0
[2(XOR              rm16,imm                 8086,LOCK )]220.799999999999 code0
[2(XOR              rm32,sbytedword          386,LOCK,ND )]211.199999999999 code0
[2(XOR              rm32,imm                 386,LOCK )]201.599999999999 code0
[2(XOR              rm64,sbytedword          X86_64,LONG,LOCK,ND )]191.999999999999 code0
[2(XOR              rm64,imm                 X86_64,LONG,LOCK )]182.399999999999 code0
[2(XOR              mem,imm8                 8086,LOCK )]172.799999999999 code0
[2(XOR              mem,sbyteword16          8086,LOCK,ND )]163.199999999999 code0
[2(XOR              mem,imm16                8086,LOCK )]153.599999999999 code0
[2(XOR              mem,sbytedword32         386,LOCK,ND )]143.999999999999 code0
[2(XOR              mem,imm32                386,LOCK )]134.399999999999 code0
[2(XOR              rm8,imm                  8086,LOCK,ND,NOLONG )]124.799999999999 code0
[2(CMOVcc           reg16,mem                P6 )]115.199999999999 code0
[2(CMOVcc           reg16,reg16              P6 )]105.599999999999 code0
[2(CMOVcc           reg32,mem                P6 )]95.9999999999992 code0
[2(CMOVcc           reg32,reg32              P6 )]86.3999999999992 code0
[2(CMOVcc           reg64,mem                X86_64,LONG )]76.7999999999992 code0
(164)pageeven
restore showpage
%%Page: 165 165
%%BeginPageSetup
save
%%EndPageSetup
/165 pa
[2(CMOVcc           reg64,reg64              X86_64,LONG )]710.4 code0
[2(Jcc              imm|near                 386,BND )]700.8 code0
[2(Jcc              imm16|near               386,NOLONG,BND )]691.2 code0
[2(Jcc              imm32|near               386,NOLONG,BND )]681.6 code0
[2(Jcc              imm64|near               X86_64,LONG,BND )]672 code0
[2(Jcc              imm|short                8086,ND,BND )]662.4 code0
[2(Jcc              imm                      8086,ND,BND )]652.8 code0
[2(Jcc              imm                      386,ND,BND )]643.2 code0
[2(Jcc              imm                      8086,ND,BND )]633.6 code0
[2(Jcc              imm                      8086,BND )]624 code0
[2(SETcc            mem                      386 )]614.4 code0
[2(SETcc            reg8                     386)]604.8 code2
[{/section-B.1.3 xa}(Katmai Streaming SIMD instructions \(SSE \226\226 a.k.a. KNI, XMM, MMX2\))](B.1.3)584.4 subh3
[2(ADDPS            xmmreg,xmmrm128          KATMAI,SSE )]568.8 code1
[2(ADDSS            xmmreg,xmmrm32           KATMAI,SSE )]559.2 code0
[2(ANDNPS           xmmreg,xmmrm128          KATMAI,SSE )]549.6 code0
[2(ANDPS            xmmreg,xmmrm128          KATMAI,SSE )]540 code0
[2(CMPEQPS          xmmreg,xmmrm128          KATMAI,SSE )]530.4 code0
[2(CMPEQSS          xmmreg,xmmrm32           KATMAI,SSE )]520.8 code0
[2(CMPLEPS          xmmreg,xmmrm128          KATMAI,SSE )]511.2 code0
[2(CMPLESS          xmmreg,xmmrm32           KATMAI,SSE )]501.6 code0
[2(CMPLTPS          xmmreg,xmmrm128          KATMAI,SSE )]492 code0
[2(CMPLTSS          xmmreg,xmmrm32           KATMAI,SSE )]482.4 code0
[2(CMPNEQPS         xmmreg,xmmrm128          KATMAI,SSE )]472.8 code0
[2(CMPNEQSS         xmmreg,xmmrm32           KATMAI,SSE )]463.2 code0
[2(CMPNLEPS         xmmreg,xmmrm128          KATMAI,SSE )]453.6 code0
[2(CMPNLESS         xmmreg,xmmrm32           KATMAI,SSE )]444 code0
[2(CMPNLTPS         xmmreg,xmmrm128          KATMAI,SSE )]434.4 code0
[2(CMPNLTSS         xmmreg,xmmrm32           KATMAI,SSE )]424.8 code0
[2(CMPORDPS         xmmreg,xmmrm128          KATMAI,SSE )]415.2 code0
[2(CMPORDSS         xmmreg,xmmrm32           KATMAI,SSE )]405.6 code0
[2(CMPUNORDPS       xmmreg,xmmrm128          KATMAI,SSE )]396 code0
[2(CMPUNORDSS       xmmreg,xmmrm32           KATMAI,SSE )]386.4 code0
[2(CMPPS            xmmreg,xmmrm128,imm8     KATMAI,SSE )]376.8 code0
[2(CMPSS            xmmreg,xmmrm32,imm8      KATMAI,SSE )]367.2 code0
[2(COMISS           xmmreg,xmmrm32           KATMAI,SSE )]357.6 code0
[2(CVTPI2PS         xmmreg,mmxrm64           KATMAI,SSE,MMX )]348 code0
[2(CVTPS2PI         mmxreg,xmmrm64           KATMAI,SSE,MMX )]338.4 code0
[2(CVTSI2SS         xmmreg,mem               KATMAI,SSE,SD,AR1,ND )]328.8 code0
[2(CVTSI2SS         xmmreg,rm32              KATMAI,SSE,SD,AR1 )]319.2 code0
[2(CVTSI2SS         xmmreg,rm64              X86_64,LONG,SSE,AR1 )]309.6 code0
[2(CVTSS2SI         reg32,xmmreg             KATMAI,SSE,SD,AR1 )]300 code0
[2(CVTSS2SI         reg32,mem                KATMAI,SSE,SD,AR1 )]290.4 code0
[2(CVTSS2SI         reg64,xmmreg             X86_64,LONG,SSE,SD,AR1 )]280.8 code0
[2(CVTSS2SI         reg64,mem                X86_64,LONG,SSE,SD,AR1 )]271.2 code0
[2(CVTTPS2PI        mmxreg,xmmrm             KATMAI,SSE,MMX )]261.6 code0
[2(CVTTSS2SI        reg32,xmmrm              KATMAI,SSE,SD,AR1 )]252 code0
[2(CVTTSS2SI        reg64,xmmrm              X86_64,LONG,SSE,SD,AR1 )]242.4 code0
[2(DIVPS            xmmreg,xmmrm128          KATMAI,SSE )]232.8 code0
[2(DIVSS            xmmreg,xmmrm32           KATMAI,SSE )]223.2 code0
[2(LDMXCSR          mem32                    KATMAI,SSE )]213.6 code0
[2(MAXPS            xmmreg,xmmrm128          KATMAI,SSE )]204 code0
[2(MAXSS            xmmreg,xmmrm32           KATMAI,SSE )]194.4 code0
[2(MINPS            xmmreg,xmmrm128          KATMAI,SSE )]184.799999999999 code0
[2(MINSS            xmmreg,xmmrm32           KATMAI,SSE )]175.199999999999 code0
[2(MOVAPS           xmmreg,xmmrm128          KATMAI,SSE )]165.599999999999 code0
[2(MOVAPS           xmmrm128,xmmreg          KATMAI,SSE )]155.999999999999 code0
[2(MOVHPS           xmmreg,mem64             KATMAI,SSE )]146.399999999999 code0
[2(MOVHPS           mem64,xmmreg             KATMAI,SSE )]136.799999999999 code0
[2(MOVLHPS          xmmreg,xmmreg            KATMAI,SSE )]127.199999999999 code0
[2(MOVLPS           xmmreg,mem64             KATMAI,SSE )]117.599999999999 code0
[2(MOVLPS           mem64,xmmreg             KATMAI,SSE )]107.999999999999 code0
[2(MOVHLPS          xmmreg,xmmreg            KATMAI,SSE )]98.3999999999993 code0
[2(MOVMSKPS         reg32,xmmreg             KATMAI,SSE )]88.7999999999993 code0
[2(MOVMSKPS         reg64,xmmreg             X86_64,LONG,SSE )]79.1999999999992 code0
(165)pageodd
restore showpage
%%Page: 166 166
%%BeginPageSetup
save
%%EndPageSetup
/166 pa
[2(MOVNTPS          mem128,xmmreg            KATMAI,SSE )]710.4 code0
[2(MOVSS            xmmreg,xmmrm32           KATMAI,SSE )]700.8 code0
[2(MOVSS            xmmrm32,xmmreg           KATMAI,SSE )]691.2 code0
[2(MOVUPS           xmmreg,xmmrm128          KATMAI,SSE )]681.6 code0
[2(MOVUPS           xmmrm128,xmmreg          KATMAI,SSE )]672 code0
[2(MULPS            xmmreg,xmmrm128          KATMAI,SSE )]662.4 code0
[2(MULSS            xmmreg,xmmrm32           KATMAI,SSE )]652.8 code0
[2(ORPS             xmmreg,xmmrm128          KATMAI,SSE )]643.2 code0
[2(RCPPS            xmmreg,xmmrm128          KATMAI,SSE )]633.6 code0
[2(RCPSS            xmmreg,xmmrm32           KATMAI,SSE )]624 code0
[2(RSQRTPS          xmmreg,xmmrm128          KATMAI,SSE )]614.4 code0
[2(RSQRTSS          xmmreg,xmmrm32           KATMAI,SSE )]604.8 code0
[2(SHUFPS           xmmreg,xmmrm128,imm8     KATMAI,SSE )]595.2 code0
[2(SQRTPS           xmmreg,xmmrm128          KATMAI,SSE )]585.6 code0
[2(SQRTSS           xmmreg,xmmrm32           KATMAI,SSE )]576 code0
[2(STMXCSR          mem32                    KATMAI,SSE )]566.4 code0
[2(SUBPS            xmmreg,xmmrm128          KATMAI,SSE )]556.8 code0
[2(SUBSS            xmmreg,xmmrm32           KATMAI,SSE )]547.2 code0
[2(UCOMISS          xmmreg,xmmrm32           KATMAI,SSE )]537.6 code0
[2(UNPCKHPS         xmmreg,xmmrm128          KATMAI,SSE )]528 code0
[2(UNPCKLPS         xmmreg,xmmrm128          KATMAI,SSE )]518.4 code0
[2(XORPS            xmmreg,xmmrm128          KATMAI,SSE)]508.8 code2
[{/section-B.1.4 xa}(Introduced in Deschutes but necessary for SSE support)](B.1.4)488.4 subh3
[2(FXRSTOR          mem                      P6,SSE,FPU )]472.8 code1
[2(FXRSTOR64        mem                      X86_64,LONG,SSE,FPU )]463.2 code0
[2(FXSAVE           mem                      P6,SSE,FPU )]453.6 code0
[2(FXSAVE64         mem                      X86_64,LONG,SSE,FPU)]444 code2
[{/section-B.1.5 xa}(XSAVE group \(AVX and extended state\))](B.1.5)423.6 subh3
[2(XGETBV                                    NEHALEM )]408 code1
[2(XSETBV                                    NEHALEM,PRIV )]398.4 code0
[2(XSAVE            mem                      NEHALEM )]388.8 code0
[2(XSAVE64          mem                      LONG,NEHALEM )]379.2 code0
[2(XSAVEC           mem                       )]369.6 code0
[2(XSAVEC64         mem                      LONG )]360 code0
[2(XSAVEOPT         mem                       )]350.4 code0
[2(XSAVEOPT64       mem                      LONG )]340.8 code0
[2(XSAVES           mem                       )]331.2 code0
[2(XSAVES64         mem                      LONG )]321.6 code0
[2(XRSTOR           mem                      NEHALEM )]312 code0
[2(XRSTOR64         mem                      LONG,NEHALEM )]302.4 code0
[2(XRSTORS          mem                       )]292.8 code0
[2(XRSTORS64        mem                      LONG)]283.2 code2
[{/section-B.1.6 xa}(Generic memory operations)](B.1.6)262.8 subh3
[2(PREFETCHNTA      mem8                     KATMAI )]247.2 code1
[2(PREFETCHT0       mem8                     KATMAI )]237.6 code0
[2(PREFETCHT1       mem8                     KATMAI )]228 code0
[2(PREFETCHT2       mem8                     KATMAI )]218.4 code0
[2(SFENCE                                    KATMAI)]208.8 code2
[{/section-B.1.7 xa}(New MMX instructions introduced in Katmai)](B.1.7)188.4 subh3
[2(MASKMOVQ         mmxreg,mmxreg            KATMAI,MMX )]172.8 code1
[2(MOVNTQ           mem,mmxreg               KATMAI,MMX )]163.2 code0
[2(PAVGB            mmxreg,mmxrm             KATMAI,MMX )]153.6 code0
[2(PAVGW            mmxreg,mmxrm             KATMAI,MMX )]144 code0
[2(PEXTRW           reg32,mmxreg,imm         KATMAI,MMX )]134.4 code0
[2(PINSRW           mmxreg,mem,imm           KATMAI,MMX )]124.799999999999 code0
[2(PINSRW           mmxreg,rm16,imm          KATMAI,MMX )]115.199999999999 code0
[2(PINSRW           mmxreg,reg32,imm         KATMAI,MMX )]105.599999999999 code0
[2(PMAXSW           mmxreg,mmxrm             KATMAI,MMX )]95.9999999999994 code0
[2(PMAXUB           mmxreg,mmxrm             KATMAI,MMX )]86.3999999999994 code0
[2(PMINSW           mmxreg,mmxrm             KATMAI,MMX )]76.7999999999994 code0
(166)pageeven
restore showpage
%%Page: 167 167
%%BeginPageSetup
save
%%EndPageSetup
/167 pa
[2(PMINUB           mmxreg,mmxrm             KATMAI,MMX )]710.4 code0
[2(PMOVMSKB         reg32,mmxreg             KATMAI,MMX )]700.8 code0
[2(PMULHUW          mmxreg,mmxrm             KATMAI,MMX )]691.2 code0
[2(PSADBW           mmxreg,mmxrm             KATMAI,MMX )]681.6 code0
[2(PSHUFW           mmxreg,mmxrm,imm         KATMAI,MMX)]672 code2
[{/section-B.1.8 xa}(AMD Enhanced 3DNow! \(Athlon\) instructions)](B.1.8)651.6 subh3
[2(PF2IW            mmxreg,mmxrm             PENT,3DNOW )]636 code1
[2(PFNACC           mmxreg,mmxrm             PENT,3DNOW )]626.4 code0
[2(PFPNACC          mmxreg,mmxrm             PENT,3DNOW )]616.8 code0
[2(PI2FW            mmxreg,mmxrm             PENT,3DNOW )]607.2 code0
[2(PSWAPD           mmxreg,mmxrm             PENT,3DNOW)]597.6 code2
[{/section-B.1.9 xa}(Willamette SSE2 Cacheability Instructions)](B.1.9)577.2 subh3
[2(MASKMOVDQU       xmmreg,xmmreg            WILLAMETTE,SSE2 )]561.6 code1
[2(CLFLUSH          mem                      WILLAMETTE,SSE2 )]552 code0
[2(MOVNTDQ          mem,xmmreg               WILLAMETTE,SSE2,SO )]542.4 code0
[2(MOVNTI           mem,reg32                WILLAMETTE,SD )]532.8 code0
[2(MOVNTI           mem,reg64                X86_64,LONG )]523.2 code0
[2(MOVNTPD          mem,xmmreg               WILLAMETTE,SSE2,SO )]513.6 code0
[2(LFENCE                                    WILLAMETTE,SSE2 )]504 code0
[2(MFENCE                                    WILLAMETTE,SSE2)]494.4 code2
[{/section-B.1.10 xa}(Willamette MMX instructions \(SSE2 SIMD Integer Instructions\))](B.1.10)474 subh3
[2(MOVD             mem,xmmreg               WILLAMETTE,SSE2,SD )]458.4 code1
[2(MOVD             xmmreg,mem               WILLAMETTE,SSE2,SD )]448.8 code0
[2(MOVD             xmmreg,rm32              WILLAMETTE,SSE2 )]439.2 code0
[2(MOVD             rm32,xmmreg              WILLAMETTE,SSE2 )]429.6 code0
[2(MOVDQA           xmmreg,xmmrm128          WILLAMETTE,SSE2,SO )]420 code0
[2(MOVDQA           xmmrm128,xmmreg          WILLAMETTE,SSE2,SO )]410.4 code0
[2(MOVDQU           xmmreg,xmmrm128          WILLAMETTE,SSE2,SO )]400.8 code0
[2(MOVDQU           xmmrm128,xmmreg          WILLAMETTE,SSE2,SO )]391.2 code0
[2(MOVDQ2Q          mmxreg,xmmreg            WILLAMETTE,SSE2 )]381.6 code0
[2(MOVQ             xmmreg,xmmreg            WILLAMETTE,SSE2 )]372 code0
[2(MOVQ             xmmreg,xmmreg            WILLAMETTE,SSE2 )]362.4 code0
[2(MOVQ             mem,xmmreg               WILLAMETTE,SSE2 )]352.8 code0
[2(MOVQ             xmmreg,mem               WILLAMETTE,SSE2 )]343.2 code0
[2(MOVQ             xmmreg,rm64              X86_64,LONG,SSE2 )]333.6 code0
[2(MOVQ             rm64,xmmreg              X86_64,LONG,SSE2 )]324 code0
[2(MOVQ2DQ          xmmreg,mmxreg            WILLAMETTE,SSE2 )]314.4 code0
[2(PACKSSWB         xmmreg,xmmrm             WILLAMETTE,SSE2,SO )]304.8 code0
[2(PACKSSDW         xmmreg,xmmrm             WILLAMETTE,SSE2,SO )]295.2 code0
[2(PACKUSWB         xmmreg,xmmrm             WILLAMETTE,SSE2,SO )]285.6 code0
[2(PADDB            xmmreg,xmmrm             WILLAMETTE,SSE2,SO )]276 code0
[2(PADDW            xmmreg,xmmrm             WILLAMETTE,SSE2,SO )]266.4 code0
[2(PADDD            xmmreg,xmmrm             WILLAMETTE,SSE2,SO )]256.8 code0
[2(PADDQ            mmxreg,mmxrm             WILLAMETTE,MMX )]247.2 code0
[2(PADDQ            xmmreg,xmmrm             WILLAMETTE,SSE2,SO )]237.6 code0
[2(PADDSB           xmmreg,xmmrm             WILLAMETTE,SSE2,SO )]227.999999999999 code0
[2(PADDSW           xmmreg,xmmrm             WILLAMETTE,SSE2,SO )]218.399999999999 code0
[2(PADDUSB          xmmreg,xmmrm             WILLAMETTE,SSE2,SO )]208.799999999999 code0
[2(PADDUSW          xmmreg,xmmrm             WILLAMETTE,SSE2,SO )]199.199999999999 code0
[2(PAND             xmmreg,xmmrm             WILLAMETTE,SSE2,SO )]189.599999999999 code0
[2(PANDN            xmmreg,xmmrm             WILLAMETTE,SSE2,SO )]179.999999999999 code0
[2(PAVGB            xmmreg,xmmrm             WILLAMETTE,SSE2,SO )]170.399999999999 code0
[2(PAVGW            xmmreg,xmmrm             WILLAMETTE,SSE2,SO )]160.799999999999 code0
[2(PCMPEQB          xmmreg,xmmrm             WILLAMETTE,SSE2,SO )]151.199999999999 code0
[2(PCMPEQW          xmmreg,xmmrm             WILLAMETTE,SSE2,SO )]141.599999999999 code0
[2(PCMPEQD          xmmreg,xmmrm             WILLAMETTE,SSE2,SO )]131.999999999999 code0
[2(PCMPGTB          xmmreg,xmmrm             WILLAMETTE,SSE2,SO )]122.399999999999 code0
[2(PCMPGTW          xmmreg,xmmrm             WILLAMETTE,SSE2,SO )]112.799999999999 code0
[2(PCMPGTD          xmmreg,xmmrm             WILLAMETTE,SSE2,SO )]103.199999999999 code0
[2(PEXTRW           reg32,xmmreg,imm         WILLAMETTE,SSE2 )]93.5999999999992 code0
[2(PEXTRW           reg64,xmmreg,imm         X86_64,LONG,SSE2,ND )]83.9999999999992 code0
[2(PINSRW           xmmreg,reg16,imm         WILLAMETTE,SSE2 )]74.3999999999992 code0
(167)pageodd
restore showpage
%%Page: 168 168
%%BeginPageSetup
save
%%EndPageSetup
/168 pa
[2(PINSRW           xmmreg,reg32,imm         WILLAMETTE,SSE2,ND )]710.4 code0
[2(PINSRW           xmmreg,reg64,imm         X86_64,LONG,SSE2,ND )]700.8 code0
[2(PINSRW           xmmreg,mem,imm           WILLAMETTE,SSE2 )]691.2 code0
[2(PINSRW           xmmreg,mem16,imm         WILLAMETTE,SSE2 )]681.6 code0
[2(PMADDWD          xmmreg,xmmrm             WILLAMETTE,SSE2,SO )]672 code0
[2(PMAXSW           xmmreg,xmmrm             WILLAMETTE,SSE2,SO )]662.4 code0
[2(PMAXUB           xmmreg,xmmrm             WILLAMETTE,SSE2,SO )]652.8 code0
[2(PMINSW           xmmreg,xmmrm             WILLAMETTE,SSE2,SO )]643.2 code0
[2(PMINUB           xmmreg,xmmrm             WILLAMETTE,SSE2,SO )]633.6 code0
[2(PMOVMSKB         reg32,xmmreg             WILLAMETTE,SSE2 )]624 code0
[2(PMULHUW          xmmreg,xmmrm             WILLAMETTE,SSE2,SO )]614.4 code0
[2(PMULHW           xmmreg,xmmrm             WILLAMETTE,SSE2,SO )]604.8 code0
[2(PMULLW           xmmreg,xmmrm             WILLAMETTE,SSE2,SO )]595.2 code0
[2(PMULUDQ          mmxreg,mmxrm             WILLAMETTE,SSE2,SO )]585.6 code0
[2(PMULUDQ          xmmreg,xmmrm             WILLAMETTE,SSE2,SO )]576 code0
[2(POR              xmmreg,xmmrm             WILLAMETTE,SSE2,SO )]566.4 code0
[2(PSADBW           xmmreg,xmmrm             WILLAMETTE,SSE2,SO )]556.8 code0
[2(PSHUFD           xmmreg,xmmreg,imm        WILLAMETTE,SSE2 )]547.2 code0
[2(PSHUFD           xmmreg,mem,imm           WILLAMETTE,SSE2 )]537.6 code0
[2(PSHUFHW          xmmreg,xmmreg,imm        WILLAMETTE,SSE2 )]528 code0
[2(PSHUFHW          xmmreg,mem,imm           WILLAMETTE,SSE2 )]518.4 code0
[2(PSHUFLW          xmmreg,xmmreg,imm        WILLAMETTE,SSE2 )]508.8 code0
[2(PSHUFLW          xmmreg,mem,imm           WILLAMETTE,SSE2 )]499.2 code0
[2(PSLLDQ           xmmreg,imm               WILLAMETTE,SSE2,AR1 )]489.6 code0
[2(PSLLW            xmmreg,xmmrm             WILLAMETTE,SSE2,SO )]480 code0
[2(PSLLW            xmmreg,imm               WILLAMETTE,SSE2,AR1 )]470.4 code0
[2(PSLLD            xmmreg,xmmrm             WILLAMETTE,SSE2,SO )]460.8 code0
[2(PSLLD            xmmreg,imm               WILLAMETTE,SSE2,AR1 )]451.2 code0
[2(PSLLQ            xmmreg,xmmrm             WILLAMETTE,SSE2,SO )]441.6 code0
[2(PSLLQ            xmmreg,imm               WILLAMETTE,SSE2,AR1 )]432 code0
[2(PSRAW            xmmreg,xmmrm             WILLAMETTE,SSE2,SO )]422.4 code0
[2(PSRAW            xmmreg,imm               WILLAMETTE,SSE2,AR1 )]412.8 code0
[2(PSRAD            xmmreg,xmmrm             WILLAMETTE,SSE2,SO )]403.2 code0
[2(PSRAD            xmmreg,imm               WILLAMETTE,SSE2,AR1 )]393.6 code0
[2(PSRLDQ           xmmreg,imm               WILLAMETTE,SSE2,AR1 )]384 code0
[2(PSRLW            xmmreg,xmmrm             WILLAMETTE,SSE2,SO )]374.4 code0
[2(PSRLW            xmmreg,imm               WILLAMETTE,SSE2,AR1 )]364.8 code0
[2(PSRLD            xmmreg,xmmrm             WILLAMETTE,SSE2,SO )]355.2 code0
[2(PSRLD            xmmreg,imm               WILLAMETTE,SSE2,AR1 )]345.6 code0
[2(PSRLQ            xmmreg,xmmrm             WILLAMETTE,SSE2,SO )]336 code0
[2(PSRLQ            xmmreg,imm               WILLAMETTE,SSE2,AR1 )]326.4 code0
[2(PSUBB            xmmreg,xmmrm             WILLAMETTE,SSE2,SO )]316.8 code0
[2(PSUBW            xmmreg,xmmrm             WILLAMETTE,SSE2,SO )]307.2 code0
[2(PSUBD            xmmreg,xmmrm             WILLAMETTE,SSE2,SO )]297.6 code0
[2(PSUBQ            mmxreg,mmxrm             WILLAMETTE,SSE2,SO )]288 code0
[2(PSUBQ            xmmreg,xmmrm             WILLAMETTE,SSE2,SO )]278.4 code0
[2(PSUBSB           xmmreg,xmmrm             WILLAMETTE,SSE2,SO )]268.8 code0
[2(PSUBSW           xmmreg,xmmrm             WILLAMETTE,SSE2,SO )]259.2 code0
[2(PSUBUSB          xmmreg,xmmrm             WILLAMETTE,SSE2,SO )]249.6 code0
[2(PSUBUSW          xmmreg,xmmrm             WILLAMETTE,SSE2,SO )]240 code0
[2(PUNPCKHBW        xmmreg,xmmrm             WILLAMETTE,SSE2,SO )]230.4 code0
[2(PUNPCKHWD        xmmreg,xmmrm             WILLAMETTE,SSE2,SO )]220.799999999999 code0
[2(PUNPCKHDQ        xmmreg,xmmrm             WILLAMETTE,SSE2,SO )]211.199999999999 code0
[2(PUNPCKHQDQ       xmmreg,xmmrm             WILLAMETTE,SSE2,SO )]201.599999999999 code0
[2(PUNPCKLBW        xmmreg,xmmrm             WILLAMETTE,SSE2,SO )]191.999999999999 code0
[2(PUNPCKLWD        xmmreg,xmmrm             WILLAMETTE,SSE2,SO )]182.399999999999 code0
[2(PUNPCKLDQ        xmmreg,xmmrm             WILLAMETTE,SSE2,SO )]172.799999999999 code0
[2(PUNPCKLQDQ       xmmreg,xmmrm             WILLAMETTE,SSE2,SO )]163.199999999999 code0
[2(PXOR             xmmreg,xmmrm             WILLAMETTE,SSE2,SO)]153.599999999999 code2
[{/section-B.1.11 xa}(Willamette Streaming SIMD instructions \(SSE2\))](B.1.11)133.199999999999 subh3
[2(ADDPD            xmmreg,xmmrm             WILLAMETTE,SSE2,SO )]117.599999999999 code1
[2(ADDSD            xmmreg,xmmrm             WILLAMETTE,SSE2 )]107.999999999999 code0
[2(ANDNPD           xmmreg,xmmrm             WILLAMETTE,SSE2,SO )]98.3999999999993 code0
[2(ANDPD            xmmreg,xmmrm             WILLAMETTE,SSE2,SO )]88.7999999999993 code0
[2(CMPEQPD          xmmreg,xmmrm             WILLAMETTE,SSE2,SO )]79.1999999999992 code0
(168)pageeven
restore showpage
%%Page: 169 169
%%BeginPageSetup
save
%%EndPageSetup
/169 pa
[2(CMPEQSD          xmmreg,xmmrm             WILLAMETTE,SSE2 )]710.4 code0
[2(CMPLEPD          xmmreg,xmmrm             WILLAMETTE,SSE2,SO )]700.8 code0
[2(CMPLESD          xmmreg,xmmrm             WILLAMETTE,SSE2 )]691.2 code0
[2(CMPLTPD          xmmreg,xmmrm             WILLAMETTE,SSE2,SO )]681.6 code0
[2(CMPLTSD          xmmreg,xmmrm             WILLAMETTE,SSE2 )]672 code0
[2(CMPNEQPD         xmmreg,xmmrm             WILLAMETTE,SSE2,SO )]662.4 code0
[2(CMPNEQSD         xmmreg,xmmrm             WILLAMETTE,SSE2 )]652.8 code0
[2(CMPNLEPD         xmmreg,xmmrm             WILLAMETTE,SSE2,SO )]643.2 code0
[2(CMPNLESD         xmmreg,xmmrm             WILLAMETTE,SSE2 )]633.6 code0
[2(CMPNLTPD         xmmreg,xmmrm             WILLAMETTE,SSE2,SO )]624 code0
[2(CMPNLTSD         xmmreg,xmmrm             WILLAMETTE,SSE2 )]614.4 code0
[2(CMPORDPD         xmmreg,xmmrm             WILLAMETTE,SSE2,SO )]604.8 code0
[2(CMPORDSD         xmmreg,xmmrm             WILLAMETTE,SSE2 )]595.2 code0
[2(CMPUNORDPD       xmmreg,xmmrm             WILLAMETTE,SSE2,SO )]585.6 code0
[2(CMPUNORDSD       xmmreg,xmmrm             WILLAMETTE,SSE2 )]576 code0
[2(CMPPD            xmmreg,xmmrm128,imm8     WILLAMETTE,SSE2 )]566.4 code0
[2(CMPSD            xmmreg,xmmrm128,imm8     WILLAMETTE,SSE2 )]556.8 code0
[2(COMISD           xmmreg,xmmrm64           WILLAMETTE,SSE2 )]547.2 code0
[2(CVTDQ2PD         xmmreg,xmmrm             WILLAMETTE,SSE2 )]537.6 code0
[2(CVTDQ2PS         xmmreg,xmmrm             WILLAMETTE,SSE2,SO )]528 code0
[2(CVTPD2DQ         xmmreg,xmmrm             WILLAMETTE,SSE2,SO )]518.4 code0
[2(CVTPD2PI         mmxreg,xmmrm             WILLAMETTE,SSE2,SO )]508.8 code0
[2(CVTPD2PS         xmmreg,xmmrm             WILLAMETTE,SSE2,SO )]499.2 code0
[2(CVTPI2PD         xmmreg,mmxrm             WILLAMETTE,SSE2 )]489.6 code0
[2(CVTPS2DQ         xmmreg,xmmrm             WILLAMETTE,SSE2,SO )]480 code0
[2(CVTPS2PD         xmmreg,xmmrm             WILLAMETTE,SSE2 )]470.4 code0
[2(CVTSD2SI         reg32,xmmreg             WILLAMETTE,SSE2,AR1 )]460.8 code0
[2(CVTSD2SI         reg32,mem                WILLAMETTE,SSE2,AR1 )]451.2 code0
[2(CVTSD2SI         reg64,xmmreg             X86_64,LONG,SSE2,AR1 )]441.6 code0
[2(CVTSD2SI         reg64,mem                X86_64,LONG,SSE2,AR1 )]432 code0
[2(CVTSD2SS         xmmreg,xmmrm             WILLAMETTE,SSE2 )]422.4 code0
[2(CVTSI2SD         xmmreg,mem               WILLAMETTE,SSE2,SD,AR1,ND )]412.8 code0
[2(CVTSI2SD         xmmreg,rm32              WILLAMETTE,SSE2,SD,AR1 )]403.2 code0
[2(CVTSI2SD         xmmreg,rm64              X86_64,LONG,SSE2,AR1 )]393.6 code0
[2(CVTSS2SD         xmmreg,xmmrm             WILLAMETTE,SSE2,SD )]384 code0
[2(CVTTPD2PI        mmxreg,xmmrm             WILLAMETTE,SSE2,SO )]374.4 code0
[2(CVTTPD2DQ        xmmreg,xmmrm             WILLAMETTE,SSE2,SO )]364.8 code0
[2(CVTTPS2DQ        xmmreg,xmmrm             WILLAMETTE,SSE2,SO )]355.2 code0
[2(CVTTSD2SI        reg32,xmmreg             WILLAMETTE,SSE2,AR1 )]345.6 code0
[2(CVTTSD2SI        reg32,mem                WILLAMETTE,SSE2,AR1 )]336 code0
[2(CVTTSD2SI        reg64,xmmreg             X86_64,LONG,SSE2,AR1 )]326.4 code0
[2(CVTTSD2SI        reg64,mem                X86_64,LONG,SSE2,AR1 )]316.8 code0
[2(DIVPD            xmmreg,xmmrm             WILLAMETTE,SSE2,SO )]307.2 code0
[2(DIVSD            xmmreg,xmmrm             WILLAMETTE,SSE2 )]297.6 code0
[2(MAXPD            xmmreg,xmmrm             WILLAMETTE,SSE2,SO )]288 code0
[2(MAXSD            xmmreg,xmmrm             WILLAMETTE,SSE2 )]278.4 code0
[2(MINPD            xmmreg,xmmrm             WILLAMETTE,SSE2,SO )]268.8 code0
[2(MINSD            xmmreg,xmmrm             WILLAMETTE,SSE2 )]259.2 code0
[2(MOVAPD           xmmreg,xmmrm128          WILLAMETTE,SSE2 )]249.6 code0
[2(MOVAPD           xmmrm128,xmmreg          WILLAMETTE,SSE2 )]240 code0
[2(MOVHPD           mem64,xmmreg             WILLAMETTE,SSE2 )]230.4 code0
[2(MOVHPD           xmmreg,mem64             WILLAMETTE,SSE2 )]220.799999999999 code0
[2(MOVLPD           mem64,xmmreg             WILLAMETTE,SSE2 )]211.199999999999 code0
[2(MOVLPD           xmmreg,mem64             WILLAMETTE,SSE2 )]201.599999999999 code0
[2(MOVMSKPD         reg32,xmmreg             WILLAMETTE,SSE2 )]191.999999999999 code0
[2(MOVMSKPD         reg64,xmmreg             X86_64,LONG,SSE2 )]182.399999999999 code0
[2(MOVSD            xmmreg,xmmrm64           WILLAMETTE,SSE2 )]172.799999999999 code0
[2(MOVSD            xmmrm64,xmmreg           WILLAMETTE,SSE2 )]163.199999999999 code0
[2(MOVUPD           xmmreg,xmmrm128          WILLAMETTE,SSE2 )]153.599999999999 code0
[2(MOVUPD           xmmrm128,xmmreg          WILLAMETTE,SSE2 )]143.999999999999 code0
[2(MULPD            xmmreg,xmmrm128          WILLAMETTE,SSE2,SO )]134.399999999999 code0
[2(MULSD            xmmreg,xmmrm64           WILLAMETTE,SSE2 )]124.799999999999 code0
[2(ORPD             xmmreg,xmmrm128          WILLAMETTE,SSE2,SO )]115.199999999999 code0
[2(SHUFPD           xmmreg,xmmrm128,imm8     WILLAMETTE,SSE2 )]105.599999999999 code0
[2(SQRTPD           xmmreg,xmmrm128          WILLAMETTE,SSE2,SO )]95.9999999999992 code0
[2(SQRTSD           xmmreg,xmmrm64           WILLAMETTE,SSE2 )]86.3999999999992 code0
[2(SUBPD            xmmreg,xmmrm128          WILLAMETTE,SSE2,SO )]76.7999999999992 code0
(169)pageodd
restore showpage
%%Page: 170 170
%%BeginPageSetup
save
%%EndPageSetup
/170 pa
[2(SUBSD            xmmreg,xmmrm64           WILLAMETTE,SSE2 )]710.4 code0
[2(UCOMISD          xmmreg,xmmrm64           WILLAMETTE,SSE2 )]700.8 code0
[2(UNPCKHPD         xmmreg,xmmrm128          WILLAMETTE,SSE2 )]691.2 code0
[2(UNPCKLPD         xmmreg,xmmrm128          WILLAMETTE,SSE2 )]681.6 code0
[2(XORPD            xmmreg,xmmrm128          WILLAMETTE,SSE2)]672 code2
[{/section-B.1.12 xa}(Prescott New Instructions \(SSE3\))](B.1.12)651.6 subh3
[2(ADDSUBPD         xmmreg,xmmrm128          PRESCOTT,SSE3,SO )]636 code1
[2(ADDSUBPS         xmmreg,xmmrm128          PRESCOTT,SSE3,SO )]626.4 code0
[2(HADDPD           xmmreg,xmmrm128          PRESCOTT,SSE3,SO )]616.8 code0
[2(HADDPS           xmmreg,xmmrm128          PRESCOTT,SSE3,SO )]607.2 code0
[2(HSUBPD           xmmreg,xmmrm128          PRESCOTT,SSE3,SO )]597.6 code0
[2(HSUBPS           xmmreg,xmmrm128          PRESCOTT,SSE3,SO )]588 code0
[2(LDDQU            xmmreg,mem128            PRESCOTT,SSE3,SO )]578.4 code0
[2(MOVDDUP          xmmreg,xmmrm64           PRESCOTT,SSE3 )]568.8 code0
[2(MOVSHDUP         xmmreg,xmmrm128          PRESCOTT,SSE3 )]559.2 code0
[2(MOVSLDUP         xmmreg,xmmrm128          PRESCOTT,SSE3)]549.6 code2
[{/section-B.1.13 xa}(VMX/SVM Instructions)](B.1.13)529.2 subh3
[2(CLGI                                      VMX,AMD )]513.6 code1
[2(STGI                                      VMX,AMD )]504 code0
[2(VMCALL                                    VMX )]494.4 code0
[2(VMCLEAR          mem                      VMX )]484.8 code0
[2(VMFUNC                                    VMX )]475.2 code0
[2(VMLAUNCH                                  VMX )]465.6 code0
[2(VMLOAD                                    VMX,AMD )]456 code0
[2(VMMCALL                                   VMX,AMD )]446.4 code0
[2(VMPTRLD          mem                      VMX )]436.8 code0
[2(VMPTRST          mem                      VMX )]427.2 code0
[2(VMREAD           rm32,reg32               VMX,NOLONG,SD )]417.6 code0
[2(VMREAD           rm64,reg64               X86_64,LONG,VMX )]408 code0
[2(VMRESUME                                  VMX )]398.4 code0
[2(VMRUN                                     VMX,AMD )]388.8 code0
[2(VMSAVE                                    VMX,AMD )]379.2 code0
[2(VMWRITE          reg32,rm32               VMX,NOLONG,SD )]369.6 code0
[2(VMWRITE          reg64,rm64               X86_64,LONG,VMX )]360 code0
[2(VMXOFF                                    VMX )]350.4 code0
[2(VMXON            mem                      VMX)]340.8 code2
[{/section-B.1.14 xa}(Extended Page Tables VMX instructions)](B.1.14)320.4 subh3
[2(INVEPT           reg32,mem                VMX,SO,NOLONG )]304.8 code1
[2(INVEPT           reg64,mem                VMX,SO,LONG )]295.2 code0
[2(INVVPID          reg32,mem                VMX,SO,NOLONG )]285.6 code0
[2(INVVPID          reg64,mem                VMX,SO,LONG)]276 code2
[{/section-B.1.15 xa}(Tejas New Instructions \(SSSE3\))](B.1.15)255.6 subh3
[2(PABSB            mmxreg,mmxrm             SSSE3,MMX )]240 code1
[2(PABSB            xmmreg,xmmrm128          SSSE3 )]230.4 code0
[2(PABSW            mmxreg,mmxrm             SSSE3,MMX )]220.8 code0
[2(PABSW            xmmreg,xmmrm128          SSSE3 )]211.2 code0
[2(PABSD            mmxreg,mmxrm             SSSE3,MMX )]201.6 code0
[2(PABSD            xmmreg,xmmrm128          SSSE3 )]192 code0
[2(PALIGNR          mmxreg,mmxrm,imm         SSSE3,MMX )]182.4 code0
[2(PALIGNR          xmmreg,xmmrm,imm         SSSE3 )]172.8 code0
[2(PHADDW           mmxreg,mmxrm             SSSE3,MMX )]163.2 code0
[2(PHADDW           xmmreg,xmmrm128          SSSE3 )]153.6 code0
[2(PHADDD           mmxreg,mmxrm             SSSE3,MMX )]144 code0
[2(PHADDD           xmmreg,xmmrm128          SSSE3 )]134.4 code0
[2(PHADDSW          mmxreg,mmxrm             SSSE3,MMX )]124.799999999999 code0
[2(PHADDSW          xmmreg,xmmrm128          SSSE3 )]115.199999999999 code0
[2(PHSUBW           mmxreg,mmxrm             SSSE3,MMX )]105.599999999999 code0
[2(PHSUBW           xmmreg,xmmrm128          SSSE3 )]95.9999999999994 code0
[2(PHSUBD           mmxreg,mmxrm             SSSE3,MMX )]86.3999999999994 code0
[2(PHSUBD           xmmreg,xmmrm128          SSSE3 )]76.7999999999994 code0
(170)pageeven
restore showpage
%%Page: 171 171
%%BeginPageSetup
save
%%EndPageSetup
/171 pa
[2(PHSUBSW          mmxreg,mmxrm             SSSE3,MMX )]710.4 code0
[2(PHSUBSW          xmmreg,xmmrm128          SSSE3 )]700.8 code0
[2(PMADDUBSW        mmxreg,mmxrm             SSSE3,MMX )]691.2 code0
[2(PMADDUBSW        xmmreg,xmmrm128          SSSE3 )]681.6 code0
[2(PMULHRSW         mmxreg,mmxrm             SSSE3,MMX )]672 code0
[2(PMULHRSW         xmmreg,xmmrm128          SSSE3 )]662.4 code0
[2(PSHUFB           mmxreg,mmxrm             SSSE3,MMX )]652.8 code0
[2(PSHUFB           xmmreg,xmmrm128          SSSE3 )]643.2 code0
[2(PSIGNB           mmxreg,mmxrm             SSSE3,MMX )]633.6 code0
[2(PSIGNB           xmmreg,xmmrm128          SSSE3 )]624 code0
[2(PSIGNW           mmxreg,mmxrm             SSSE3,MMX )]614.4 code0
[2(PSIGNW           xmmreg,xmmrm128          SSSE3 )]604.8 code0
[2(PSIGND           mmxreg,mmxrm             SSSE3,MMX )]595.2 code0
[2(PSIGND           xmmreg,xmmrm128          SSSE3)]585.6 code2
[{/section-B.1.16 xa}(AMD SSE4A)](B.1.16)565.2 subh3
[2(EXTRQ            xmmreg,imm,imm           SSE4A,AMD )]549.6 code1
[2(EXTRQ            xmmreg,xmmreg            SSE4A,AMD )]540 code0
[2(INSERTQ          xmmreg,xmmreg,imm,imm    SSE4A,AMD )]530.4 code0
[2(INSERTQ          xmmreg,xmmreg            SSE4A,AMD )]520.8 code0
[2(MOVNTSD          mem64,xmmreg             SSE4A,AMD )]511.2 code0
[2(MOVNTSS          mem32,xmmreg             SSE4A,AMD,SD)]501.6 code2
[{/section-B.1.17 xa}(New instructions in Barcelona)](B.1.17)481.2 subh3
[2(LZCNT            reg16,rm16               P6,AMD )]465.6 code1
[2(LZCNT            reg32,rm32               P6,AMD )]456 code0
[2(LZCNT            reg64,rm64               X86_64,LONG,AMD)]446.4 code2
[{/section-B.1.18 xa}(Penryn New Instructions \(SSE4.1\))](B.1.18)426 subh3
[2(BLENDPD          xmmreg,xmmrm128,imm8     SSE41 )]410.4 code1
[2(BLENDPS          xmmreg,xmmrm128,imm8     SSE41 )]400.8 code0
[2(BLENDVPD         xmmreg,xmmrm128,xmm0     SSE41 )]391.2 code0
[2(BLENDVPD         xmmreg,xmmrm128          SSE41 )]381.6 code0
[2(BLENDVPS         xmmreg,xmmrm128,xmm0     SSE41 )]372 code0
[2(BLENDVPS         xmmreg,xmmrm128          SSE41 )]362.4 code0
[2(DPPD             xmmreg,xmmrm128,imm8     SSE41 )]352.8 code0
[2(DPPS             xmmreg,xmmrm128,imm8     SSE41 )]343.2 code0
[2(EXTRACTPS        rm32,xmmreg,imm8         SSE41 )]333.6 code0
[2(EXTRACTPS        reg64,xmmreg,imm8        SSE41,X86_64,LONG )]324 code0
[2(INSERTPS         xmmreg,xmmrm32,imm8      SSE41 )]314.4 code0
[2(MOVNTDQA         xmmreg,mem128            SSE41 )]304.8 code0
[2(MPSADBW          xmmreg,xmmrm128,imm8     SSE41 )]295.2 code0
[2(PACKUSDW         xmmreg,xmmrm128          SSE41 )]285.6 code0
[2(PBLENDVB         xmmreg,xmmrm,xmm0        SSE41 )]276 code0
[2(PBLENDVB         xmmreg,xmmrm128          SSE41 )]266.4 code0
[2(PBLENDW          xmmreg,xmmrm128,imm8     SSE41 )]256.8 code0
[2(PCMPEQQ          xmmreg,xmmrm128          SSE41 )]247.2 code0
[2(PEXTRB           reg32,xmmreg,imm8        SSE41 )]237.6 code0
[2(PEXTRB           mem8,xmmreg,imm8         SSE41 )]228 code0
[2(PEXTRB           reg64,xmmreg,imm8        SSE41,X86_64,LONG )]218.4 code0
[2(PEXTRD           rm32,xmmreg,imm8         SSE41 )]208.8 code0
[2(PEXTRQ           rm64,xmmreg,imm8         SSE41,X86_64,LONG )]199.2 code0
[2(PEXTRW           reg32,xmmreg,imm8        SSE41 )]189.6 code0
[2(PEXTRW           mem16,xmmreg,imm8        SSE41 )]180 code0
[2(PEXTRW           reg64,xmmreg,imm8        SSE41,X86_64,LONG )]170.4 code0
[2(PHMINPOSUW       xmmreg,xmmrm128          SSE41 )]160.799999999999 code0
[2(PINSRB           xmmreg,mem,imm8          SSE41 )]151.199999999999 code0
[2(PINSRB           xmmreg,rm8,imm8          SSE41 )]141.599999999999 code0
[2(PINSRB           xmmreg,reg32,imm8        SSE41 )]131.999999999999 code0
[2(PINSRD           xmmreg,rm32,imm8         SSE41 )]122.399999999999 code0
[2(PINSRQ           xmmreg,rm64,imm8         SSE41,X86_64,LONG )]112.799999999999 code0
[2(PMAXSB           xmmreg,xmmrm128          SSE41 )]103.199999999999 code0
[2(PMAXSD           xmmreg,xmmrm128          SSE41 )]93.5999999999993 code0
[2(PMAXUD           xmmreg,xmmrm128          SSE41 )]83.9999999999993 code0
[2(PMAXUW           xmmreg,xmmrm128          SSE41 )]74.3999999999993 code0
(171)pageodd
restore showpage
%%Page: 172 172
%%BeginPageSetup
save
%%EndPageSetup
/172 pa
[2(PMINSB           xmmreg,xmmrm128          SSE41 )]710.4 code0
[2(PMINSD           xmmreg,xmmrm128          SSE41 )]700.8 code0
[2(PMINUD           xmmreg,xmmrm128          SSE41 )]691.2 code0
[2(PMINUW           xmmreg,xmmrm128          SSE41 )]681.6 code0
[2(PMOVSXBW         xmmreg,xmmrm64           SSE41 )]672 code0
[2(PMOVSXBD         xmmreg,xmmrm32           SSE41,SD )]662.4 code0
[2(PMOVSXBQ         xmmreg,xmmrm16           SSE41,SW )]652.8 code0
[2(PMOVSXWD         xmmreg,xmmrm64           SSE41 )]643.2 code0
[2(PMOVSXWQ         xmmreg,xmmrm32           SSE41,SD )]633.6 code0
[2(PMOVSXDQ         xmmreg,xmmrm64           SSE41 )]624 code0
[2(PMOVZXBW         xmmreg,xmmrm64           SSE41 )]614.4 code0
[2(PMOVZXBD         xmmreg,xmmrm32           SSE41,SD )]604.8 code0
[2(PMOVZXBQ         xmmreg,xmmrm16           SSE41,SW )]595.2 code0
[2(PMOVZXWD         xmmreg,xmmrm64           SSE41 )]585.6 code0
[2(PMOVZXWQ         xmmreg,xmmrm32           SSE41,SD )]576 code0
[2(PMOVZXDQ         xmmreg,xmmrm64           SSE41 )]566.4 code0
[2(PMULDQ           xmmreg,xmmrm128          SSE41 )]556.8 code0
[2(PMULLD           xmmreg,xmmrm128          SSE41 )]547.2 code0
[2(PTEST            xmmreg,xmmrm128          SSE41 )]537.6 code0
[2(ROUNDPD          xmmreg,xmmrm128,imm8     SSE41 )]528 code0
[2(ROUNDPS          xmmreg,xmmrm128,imm8     SSE41 )]518.4 code0
[2(ROUNDSD          xmmreg,xmmrm64,imm8      SSE41 )]508.8 code0
[2(ROUNDSS          xmmreg,xmmrm32,imm8      SSE41)]499.2 code2
[{/section-B.1.19 xa}(Nehalem New Instructions \(SSE4.2\))](B.1.19)478.8 subh3
[2(CRC32            reg32,rm8                SSE42 )]463.2 code1
[2(CRC32            reg32,rm16               SSE42 )]453.6 code0
[2(CRC32            reg32,rm32               SSE42 )]444 code0
[2(CRC32            reg64,rm8                SSE42,X86_64,LONG )]434.4 code0
[2(CRC32            reg64,rm64               SSE42,X86_64,LONG )]424.8 code0
[2(PCMPESTRI        xmmreg,xmmrm128,imm8     SSE42 )]415.2 code0
[2(PCMPESTRM        xmmreg,xmmrm128,imm8     SSE42 )]405.6 code0
[2(PCMPISTRI        xmmreg,xmmrm128,imm8     SSE42 )]396 code0
[2(PCMPISTRM        xmmreg,xmmrm128,imm8     SSE42 )]386.4 code0
[2(PCMPGTQ          xmmreg,xmmrm128          SSE42 )]376.8 code0
[2(POPCNT           reg16,rm16               NEHALEM,SW )]367.2 code0
[2(POPCNT           reg32,rm32               NEHALEM,SD )]357.6 code0
[2(POPCNT           reg64,rm64               NEHALEM,LONG)]348 code2
[{/section-B.1.20 xa}(Intel SMX)](B.1.20)327.6 subh3
[2(GETSEC                                    KATMAI)]312 code3
[{/section-B.1.21 xa}(Geode \(Cyrix\) 3DNow! additions)](B.1.21)291.6 subh3
[2(PFRCPV           mmxreg,mmxrm             PENT,3DNOW,CYRIX )]276 code1
[2(PFRSQRTV         mmxreg,mmxrm             PENT,3DNOW,CYRIX)]266.4 code2
[{/section-B.1.22 xa}(Intel new instructions in ???)](B.1.22)246 subh3
[2(MOVBE            reg16,mem16              NEHALEM )]230.4 code1
[2(MOVBE            reg32,mem32              NEHALEM )]220.8 code0
[2(MOVBE            reg64,mem64              NEHALEM )]211.2 code0
[2(MOVBE            mem16,reg16              NEHALEM )]201.6 code0
[2(MOVBE            mem32,reg32              NEHALEM )]192 code0
[2(MOVBE            mem64,reg64              NEHALEM)]182.4 code2
[{/section-B.1.23 xa}(Intel AES instructions)](B.1.23)162 subh3
[2(AESENC           xmmreg,xmmrm128          SSE,WESTMERE )]146.4 code1
[2(AESENCLAST       xmmreg,xmmrm128          SSE,WESTMERE )]136.8 code0
[2(AESDEC           xmmreg,xmmrm128          SSE,WESTMERE )]127.2 code0
[2(AESDECLAST       xmmreg,xmmrm128          SSE,WESTMERE )]117.6 code0
[2(AESIMC           xmmreg,xmmrm128          SSE,WESTMERE )]108 code0
[2(AESKEYGENASSIST  xmmreg,xmmrm128,imm8     SSE,WESTMERE)]98.3999999999995 code2
(172)pageeven
restore showpage
%%Page: 173 173
%%BeginPageSetup
save
%%EndPageSetup
/173 pa
[{/section-B.1.24 xa}(Intel AVX AES instructions)](B.1.24)705.6 subh3
[2(VAESENC          xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]690 code1
[2(VAESENCLAST      xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]680.4 code0
[2(VAESDEC          xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]670.8 code0
[2(VAESDECLAST      xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]661.2 code0
[2(VAESIMC          xmmreg,xmmrm128          AVX,SANDYBRIDGE )]651.6 code0
[2(VAESKEYGENASSIST xmmreg,xmmrm128,imm8     AVX,SANDYBRIDGE)]642 code2
[{/section-B.1.25 xa}(Intel instruction extension based on pub number 319433-030 dated October 2017)](B.1.25)621.6 subh3
[2(VAESENC          ymmreg,ymmreg*,ymmrm256  VAES )]606 code1
[2(VAESENCLAST      ymmreg,ymmreg*,ymmrm256  VAES )]596.4 code0
[2(VAESDEC          ymmreg,ymmreg*,ymmrm256  VAES )]586.8 code0
[2(VAESDECLAST      ymmreg,ymmreg*,ymmrm256  VAES )]577.2 code0
[2(VAESENC          xmmreg,xmmreg*,xmmrm128  AVX512VL,VAES )]567.6 code0
[2(VAESENC          ymmreg,ymmreg*,ymmrm256  AVX512VL,VAES )]558 code0
[2(VAESENCLAST      xmmreg,xmmreg*,xmmrm128  AVX512VL,VAES )]548.4 code0
[2(VAESENCLAST      ymmreg,ymmreg*,ymmrm256  AVX512VL,VAES )]538.8 code0
[2(VAESDEC          xmmreg,xmmreg*,xmmrm128  AVX512VL,VAES )]529.2 code0
[2(VAESDEC          ymmreg,ymmreg*,ymmrm256  AVX512VL,VAES )]519.6 code0
[2(VAESDECLAST      xmmreg,xmmreg*,xmmrm128  AVX512VL,VAES )]510 code0
[2(VAESDECLAST      ymmreg,ymmreg*,ymmrm256  AVX512VL,VAES )]500.4 code0
[2(VAESENC          zmmreg,zmmreg*,zmmrm512  AVX512,VAES )]490.8 code0
[2(VAESENCLAST      zmmreg,zmmreg*,zmmrm512  AVX512,VAES )]481.2 code0
[2(VAESDEC          zmmreg,zmmreg*,zmmrm512  AVX512,VAES )]471.6 code0
[2(VAESDECLAST      zmmreg,zmmreg*,zmmrm512  AVX512,VAES)]462 code2
[{/section-B.1.26 xa}(Intel AVX instructions)](B.1.26)441.6 subh3
[2(VADDPD           xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]426 code1
[2(VADDPD           ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]416.4 code0
[2(VADDPS           xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]406.8 code0
[2(VADDPS           ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]397.2 code0
[2(VADDSD           xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]387.6 code0
[2(VADDSS           xmmreg,xmmreg*,xmmrm32   AVX,SANDYBRIDGE )]378 code0
[2(VADDSUBPD        xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]368.4 code0
[2(VADDSUBPD        ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]358.8 code0
[2(VADDSUBPS        xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]349.2 code0
[2(VADDSUBPS        ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]339.6 code0
[2(VANDPD           xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]330 code0
[2(VANDPD           ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]320.4 code0
[2(VANDPS           xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]310.8 code0
[2(VANDPS           ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]301.2 code0
[2(VANDNPD          xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]291.6 code0
[2(VANDNPD          ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]282 code0
[2(VANDNPS          xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]272.4 code0
[2(VANDNPS          ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]262.8 code0
[2(VBLENDPD         xmmreg,xmmreg*,xmmrm128,imm8 AVX,SANDYBRIDGE )]253.2 code0
[2(VBLENDPD         ymmreg,ymmreg*,ymmrm256,imm8 AVX,SANDYBRIDGE )]243.6 code0
[2(VBLENDPS         xmmreg,xmmreg*,xmmrm128,imm8 AVX,SANDYBRIDGE )]234 code0
[2(VBLENDPS         ymmreg,ymmreg*,ymmrm256,imm8 AVX,SANDYBRIDGE )]224.4 code0
[2(VBLENDVPD        xmmreg,xmmreg*,xmmrm128,xmmreg AVX,SANDYBRIDGE )]214.8 code0
[2(VBLENDVPD        ymmreg,ymmreg*,ymmrm256,ymmreg AVX,SANDYBRIDGE )]205.2 code0
[2(VBLENDVPS        xmmreg,xmmreg*,xmmrm128,xmmreg AVX,SANDYBRIDGE )]195.6 code0
[2(VBLENDVPS        ymmreg,ymmreg*,ymmrm256,ymmreg AVX,SANDYBRIDGE )]186 code0
[2(VBROADCASTSS     xmmreg,mem32             AVX,SANDYBRIDGE )]176.4 code0
[2(VBROADCASTSS     ymmreg,mem32             AVX,SANDYBRIDGE )]166.799999999999 code0
[2(VBROADCASTSD     ymmreg,mem64             AVX,SANDYBRIDGE )]157.199999999999 code0
[2(VBROADCASTF128   ymmreg,mem128            AVX,SANDYBRIDGE )]147.599999999999 code0
[2(VCMPEQ_OSPD      xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]137.999999999999 code0
[2(VCMPEQ_OSPD      ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]128.399999999999 code0
[2(VCMPEQPD         xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]118.799999999999 code0
[2(VCMPEQPD         ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]109.199999999999 code0
[2(VCMPLT_OSPD      xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]99.5999999999993 code0
[2(VCMPLT_OSPD      ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]89.9999999999993 code0
[2(VCMPLTPD         xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]80.3999999999993 code0
(173)pageodd
restore showpage
%%Page: 174 174
%%BeginPageSetup
save
%%EndPageSetup
/174 pa
[2(VCMPLTPD         ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]710.4 code0
[2(VCMPLE_OSPD      xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]700.8 code0
[2(VCMPLE_OSPD      ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]691.2 code0
[2(VCMPLEPD         xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]681.6 code0
[2(VCMPLEPD         ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]672 code0
[2(VCMPUNORD_QPD    xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]662.4 code0
[2(VCMPUNORD_QPD    ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]652.8 code0
[2(VCMPUNORDPD      xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]643.2 code0
[2(VCMPUNORDPD      ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]633.6 code0
[2(VCMPNEQ_UQPD     xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]624 code0
[2(VCMPNEQ_UQPD     ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]614.4 code0
[2(VCMPNEQPD        xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]604.8 code0
[2(VCMPNEQPD        ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]595.2 code0
[2(VCMPNLT_USPD     xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]585.6 code0
[2(VCMPNLT_USPD     ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]576 code0
[2(VCMPNLTPD        xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]566.4 code0
[2(VCMPNLTPD        ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]556.8 code0
[2(VCMPNLE_USPD     xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]547.2 code0
[2(VCMPNLE_USPD     ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]537.6 code0
[2(VCMPNLEPD        xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]528 code0
[2(VCMPNLEPD        ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]518.4 code0
[2(VCMPORD_QPD      xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]508.8 code0
[2(VCMPORD_QPD      ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]499.2 code0
[2(VCMPORDPD        xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]489.6 code0
[2(VCMPORDPD        ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]480 code0
[2(VCMPEQ_UQPD      xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]470.4 code0
[2(VCMPEQ_UQPD      ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]460.8 code0
[2(VCMPNGE_USPD     xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]451.2 code0
[2(VCMPNGE_USPD     ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]441.6 code0
[2(VCMPNGEPD        xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]432 code0
[2(VCMPNGEPD        ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]422.4 code0
[2(VCMPNGT_USPD     xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]412.8 code0
[2(VCMPNGT_USPD     ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]403.2 code0
[2(VCMPNGTPD        xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]393.6 code0
[2(VCMPNGTPD        ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]384 code0
[2(VCMPFALSE_OQPD   xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]374.4 code0
[2(VCMPFALSE_OQPD   ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]364.8 code0
[2(VCMPFALSEPD      xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]355.2 code0
[2(VCMPFALSEPD      ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]345.6 code0
[2(VCMPNEQ_OQPD     xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]336 code0
[2(VCMPNEQ_OQPD     ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]326.4 code0
[2(VCMPGE_OSPD      xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]316.8 code0
[2(VCMPGE_OSPD      ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]307.2 code0
[2(VCMPGEPD         xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]297.6 code0
[2(VCMPGEPD         ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]288 code0
[2(VCMPGT_OSPD      xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]278.4 code0
[2(VCMPGT_OSPD      ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]268.8 code0
[2(VCMPGTPD         xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]259.2 code0
[2(VCMPGTPD         ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]249.6 code0
[2(VCMPTRUE_UQPD    xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]240 code0
[2(VCMPTRUE_UQPD    ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]230.4 code0
[2(VCMPTRUEPD       xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]220.799999999999 code0
[2(VCMPTRUEPD       ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]211.199999999999 code0
[2(VCMPEQ_OSPD      xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]201.599999999999 code0
[2(VCMPEQ_OSPD      ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]191.999999999999 code0
[2(VCMPLT_OQPD      xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]182.399999999999 code0
[2(VCMPLT_OQPD      ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]172.799999999999 code0
[2(VCMPLE_OQPD      xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]163.199999999999 code0
[2(VCMPLE_OQPD      ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]153.599999999999 code0
[2(VCMPUNORD_SPD    xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]143.999999999999 code0
[2(VCMPUNORD_SPD    ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]134.399999999999 code0
[2(VCMPNEQ_USPD     xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]124.799999999999 code0
[2(VCMPNEQ_USPD     ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]115.199999999999 code0
[2(VCMPNLT_UQPD     xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]105.599999999999 code0
[2(VCMPNLT_UQPD     ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]95.9999999999992 code0
[2(VCMPNLE_UQPD     xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]86.3999999999992 code0
[2(VCMPNLE_UQPD     ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]76.7999999999992 code0
(174)pageeven
restore showpage
%%Page: 175 175
%%BeginPageSetup
save
%%EndPageSetup
/175 pa
[2(VCMPORD_SPD      xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]710.4 code0
[2(VCMPORD_SPD      ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]700.8 code0
[2(VCMPEQ_USPD      xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]691.2 code0
[2(VCMPEQ_USPD      ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]681.6 code0
[2(VCMPNGE_UQPD     xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]672 code0
[2(VCMPNGE_UQPD     ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]662.4 code0
[2(VCMPNGT_UQPD     xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]652.8 code0
[2(VCMPNGT_UQPD     ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]643.2 code0
[2(VCMPFALSE_OSPD   xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]633.6 code0
[2(VCMPFALSE_OSPD   ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]624 code0
[2(VCMPNEQ_OSPD     xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]614.4 code0
[2(VCMPNEQ_OSPD     ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]604.8 code0
[2(VCMPGE_OQPD      xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]595.2 code0
[2(VCMPGE_OQPD      ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]585.6 code0
[2(VCMPGT_OQPD      xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]576 code0
[2(VCMPGT_OQPD      ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]566.4 code0
[2(VCMPTRUE_USPD    xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]556.8 code0
[2(VCMPTRUE_USPD    ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]547.2 code0
[2(VCMPPD           xmmreg,xmmreg*,xmmrm128,imm8 AVX,SANDYBRIDGE )]537.6 code0
[2(VCMPPD           ymmreg,ymmreg*,ymmrm256,imm8 AVX,SANDYBRIDGE )]528 code0
[2(VCMPEQ_OSPS      xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]518.4 code0
[2(VCMPEQ_OSPS      ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]508.8 code0
[2(VCMPEQPS         xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]499.2 code0
[2(VCMPEQPS         ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]489.6 code0
[2(VCMPLT_OSPS      xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]480 code0
[2(VCMPLT_OSPS      ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]470.4 code0
[2(VCMPLTPS         xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]460.8 code0
[2(VCMPLTPS         ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]451.2 code0
[2(VCMPLE_OSPS      xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]441.6 code0
[2(VCMPLE_OSPS      ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]432 code0
[2(VCMPLEPS         xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]422.4 code0
[2(VCMPLEPS         ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]412.8 code0
[2(VCMPUNORD_QPS    xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]403.2 code0
[2(VCMPUNORD_QPS    ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]393.6 code0
[2(VCMPUNORDPS      xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]384 code0
[2(VCMPUNORDPS      ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]374.4 code0
[2(VCMPNEQ_UQPS     xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]364.8 code0
[2(VCMPNEQ_UQPS     ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]355.2 code0
[2(VCMPNEQPS        xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]345.6 code0
[2(VCMPNEQPS        ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]336 code0
[2(VCMPNLT_USPS     xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]326.4 code0
[2(VCMPNLT_USPS     ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]316.8 code0
[2(VCMPNLTPS        xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]307.2 code0
[2(VCMPNLTPS        ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]297.6 code0
[2(VCMPNLE_USPS     xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]288 code0
[2(VCMPNLE_USPS     ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]278.4 code0
[2(VCMPNLEPS        xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]268.8 code0
[2(VCMPNLEPS        ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]259.2 code0
[2(VCMPORD_QPS      xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]249.6 code0
[2(VCMPORD_QPS      ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]240 code0
[2(VCMPORDPS        xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]230.4 code0
[2(VCMPORDPS        ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]220.799999999999 code0
[2(VCMPEQ_UQPS      xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]211.199999999999 code0
[2(VCMPEQ_UQPS      ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]201.599999999999 code0
[2(VCMPNGE_USPS     xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]191.999999999999 code0
[2(VCMPNGE_USPS     ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]182.399999999999 code0
[2(VCMPNGEPS        xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]172.799999999999 code0
[2(VCMPNGEPS        ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]163.199999999999 code0
[2(VCMPNGT_USPS     xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]153.599999999999 code0
[2(VCMPNGT_USPS     ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]143.999999999999 code0
[2(VCMPNGTPS        xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]134.399999999999 code0
[2(VCMPNGTPS        ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]124.799999999999 code0
[2(VCMPFALSE_OQPS   xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]115.199999999999 code0
[2(VCMPFALSE_OQPS   ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]105.599999999999 code0
[2(VCMPFALSEPS      xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]95.9999999999992 code0
[2(VCMPFALSEPS      ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]86.3999999999992 code0
[2(VCMPNEQ_OQPS     xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]76.7999999999992 code0
(175)pageodd
restore showpage
%%Page: 176 176
%%BeginPageSetup
save
%%EndPageSetup
/176 pa
[2(VCMPNEQ_OQPS     ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]710.4 code0
[2(VCMPGE_OSPS      xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]700.8 code0
[2(VCMPGE_OSPS      ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]691.2 code0
[2(VCMPGEPS         xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]681.6 code0
[2(VCMPGEPS         ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]672 code0
[2(VCMPGT_OSPS      xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]662.4 code0
[2(VCMPGT_OSPS      ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]652.8 code0
[2(VCMPGTPS         xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]643.2 code0
[2(VCMPGTPS         ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]633.6 code0
[2(VCMPTRUE_UQPS    xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]624 code0
[2(VCMPTRUE_UQPS    ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]614.4 code0
[2(VCMPTRUEPS       xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]604.8 code0
[2(VCMPTRUEPS       ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]595.2 code0
[2(VCMPEQ_OSPS      xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]585.6 code0
[2(VCMPEQ_OSPS      ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]576 code0
[2(VCMPLT_OQPS      xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]566.4 code0
[2(VCMPLT_OQPS      ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]556.8 code0
[2(VCMPLE_OQPS      xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]547.2 code0
[2(VCMPLE_OQPS      ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]537.6 code0
[2(VCMPUNORD_SPS    xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]528 code0
[2(VCMPUNORD_SPS    ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]518.4 code0
[2(VCMPNEQ_USPS     xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]508.8 code0
[2(VCMPNEQ_USPS     ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]499.2 code0
[2(VCMPNLT_UQPS     xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]489.6 code0
[2(VCMPNLT_UQPS     ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]480 code0
[2(VCMPNLE_UQPS     xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]470.4 code0
[2(VCMPNLE_UQPS     ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]460.8 code0
[2(VCMPORD_SPS      xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]451.2 code0
[2(VCMPORD_SPS      ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]441.6 code0
[2(VCMPEQ_USPS      xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]432 code0
[2(VCMPEQ_USPS      ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]422.4 code0
[2(VCMPNGE_UQPS     xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]412.8 code0
[2(VCMPNGE_UQPS     ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]403.2 code0
[2(VCMPNGT_UQPS     xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]393.6 code0
[2(VCMPNGT_UQPS     ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]384 code0
[2(VCMPFALSE_OSPS   xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]374.4 code0
[2(VCMPFALSE_OSPS   ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]364.8 code0
[2(VCMPNEQ_OSPS     xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]355.2 code0
[2(VCMPNEQ_OSPS     ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]345.6 code0
[2(VCMPGE_OQPS      xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]336 code0
[2(VCMPGE_OQPS      ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]326.4 code0
[2(VCMPGT_OQPS      xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]316.8 code0
[2(VCMPGT_OQPS      ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]307.2 code0
[2(VCMPTRUE_USPS    xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]297.6 code0
[2(VCMPTRUE_USPS    ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]288 code0
[2(VCMPPS           xmmreg,xmmreg*,xmmrm128,imm8 AVX,SANDYBRIDGE )]278.4 code0
[2(VCMPPS           ymmreg,ymmreg*,ymmrm256,imm8 AVX,SANDYBRIDGE )]268.8 code0
[2(VCMPEQ_OSSD      xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]259.2 code0
[2(VCMPEQSD         xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]249.6 code0
[2(VCMPLT_OSSD      xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]240 code0
[2(VCMPLTSD         xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]230.4 code0
[2(VCMPLE_OSSD      xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]220.799999999999 code0
[2(VCMPLESD         xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]211.199999999999 code0
[2(VCMPUNORD_QSD    xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]201.599999999999 code0
[2(VCMPUNORDSD      xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]191.999999999999 code0
[2(VCMPNEQ_UQSD     xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]182.399999999999 code0
[2(VCMPNEQSD        xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]172.799999999999 code0
[2(VCMPNLT_USSD     xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]163.199999999999 code0
[2(VCMPNLTSD        xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]153.599999999999 code0
[2(VCMPNLE_USSD     xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]143.999999999999 code0
[2(VCMPNLESD        xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]134.399999999999 code0
[2(VCMPORD_QSD      xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]124.799999999999 code0
[2(VCMPORDSD        xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]115.199999999999 code0
[2(VCMPEQ_UQSD      xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]105.599999999999 code0
[2(VCMPNGE_USSD     xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]95.9999999999992 code0
[2(VCMPNGESD        xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]86.3999999999992 code0
[2(VCMPNGT_USSD     xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]76.7999999999992 code0
(176)pageeven
restore showpage
%%Page: 177 177
%%BeginPageSetup
save
%%EndPageSetup
/177 pa
[2(VCMPNGTSD        xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]710.4 code0
[2(VCMPFALSE_OQSD   xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]700.8 code0
[2(VCMPFALSESD      xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]691.2 code0
[2(VCMPNEQ_OQSD     xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]681.6 code0
[2(VCMPGE_OSSD      xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]672 code0
[2(VCMPGESD         xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]662.4 code0
[2(VCMPGT_OSSD      xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]652.8 code0
[2(VCMPGTSD         xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]643.2 code0
[2(VCMPTRUE_UQSD    xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]633.6 code0
[2(VCMPTRUESD       xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]624 code0
[2(VCMPEQ_OSSD      xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]614.4 code0
[2(VCMPLT_OQSD      xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]604.8 code0
[2(VCMPLE_OQSD      xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]595.2 code0
[2(VCMPUNORD_SSD    xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]585.6 code0
[2(VCMPNEQ_USSD     xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]576 code0
[2(VCMPNLT_UQSD     xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]566.4 code0
[2(VCMPNLE_UQSD     xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]556.8 code0
[2(VCMPORD_SSD      xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]547.2 code0
[2(VCMPEQ_USSD      xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]537.6 code0
[2(VCMPNGE_UQSD     xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]528 code0
[2(VCMPNGT_UQSD     xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]518.4 code0
[2(VCMPFALSE_OSSD   xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]508.8 code0
[2(VCMPNEQ_OSSD     xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]499.2 code0
[2(VCMPGE_OQSD      xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]489.6 code0
[2(VCMPGT_OQSD      xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]480 code0
[2(VCMPTRUE_USSD    xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]470.4 code0
[2(VCMPSD           xmmreg,xmmreg*,xmmrm64,imm8 AVX,SANDYBRIDGE )]460.8 code0
[2(VCMPEQ_OSSS      xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]451.2 code0
[2(VCMPEQSS         xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]441.6 code0
[2(VCMPLT_OSSS      xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]432 code0
[2(VCMPLTSS         xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]422.4 code0
[2(VCMPLE_OSSS      xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]412.8 code0
[2(VCMPLESS         xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]403.2 code0
[2(VCMPUNORD_QSS    xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]393.6 code0
[2(VCMPUNORDSS      xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]384 code0
[2(VCMPNEQ_UQSS     xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]374.4 code0
[2(VCMPNEQSS        xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]364.8 code0
[2(VCMPNLT_USSS     xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]355.2 code0
[2(VCMPNLTSS        xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]345.6 code0
[2(VCMPNLE_USSS     xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]336 code0
[2(VCMPNLESS        xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]326.4 code0
[2(VCMPORD_QSS      xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]316.8 code0
[2(VCMPORDSS        xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]307.2 code0
[2(VCMPEQ_UQSS      xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]297.6 code0
[2(VCMPNGE_USSS     xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]288 code0
[2(VCMPNGESS        xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]278.4 code0
[2(VCMPNGT_USSS     xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]268.8 code0
[2(VCMPNGTSS        xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]259.2 code0
[2(VCMPFALSE_OQSS   xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]249.6 code0
[2(VCMPFALSESS      xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]240 code0
[2(VCMPNEQ_OQSS     xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]230.4 code0
[2(VCMPGE_OSSS      xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]220.799999999999 code0
[2(VCMPGESS         xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]211.199999999999 code0
[2(VCMPGT_OSSS      xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]201.599999999999 code0
[2(VCMPGTSS         xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]191.999999999999 code0
[2(VCMPTRUE_UQSS    xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]182.399999999999 code0
[2(VCMPTRUESS       xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]172.799999999999 code0
[2(VCMPEQ_OSSS      xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]163.199999999999 code0
[2(VCMPLT_OQSS      xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]153.599999999999 code0
[2(VCMPLE_OQSS      xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]143.999999999999 code0
[2(VCMPUNORD_SSS    xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]134.399999999999 code0
[2(VCMPNEQ_USSS     xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]124.799999999999 code0
[2(VCMPNLT_UQSS     xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]115.199999999999 code0
[2(VCMPNLE_UQSS     xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]105.599999999999 code0
[2(VCMPORD_SSS      xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]95.9999999999992 code0
[2(VCMPEQ_USSS      xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]86.3999999999992 code0
[2(VCMPNGE_UQSS     xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]76.7999999999992 code0
(177)pageodd
restore showpage
%%Page: 178 178
%%BeginPageSetup
save
%%EndPageSetup
/178 pa
[2(VCMPNGT_UQSS     xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]710.4 code0
[2(VCMPFALSE_OSSS   xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]700.8 code0
[2(VCMPNEQ_OSSS     xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]691.2 code0
[2(VCMPGE_OQSS      xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]681.6 code0
[2(VCMPGT_OQSS      xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]672 code0
[2(VCMPTRUE_USSS    xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]662.4 code0
[2(VCMPSS           xmmreg,xmmreg*,xmmrm64,imm8 AVX,SANDYBRIDGE )]652.8 code0
[2(VCOMISD          xmmreg,xmmrm64           AVX,SANDYBRIDGE )]643.2 code0
[2(VCOMISS          xmmreg,xmmrm32           AVX,SANDYBRIDGE )]633.6 code0
[2(VCVTDQ2PD        xmmreg,xmmrm64           AVX,SANDYBRIDGE )]624 code0
[2(VCVTDQ2PD        ymmreg,xmmrm128          AVX,SANDYBRIDGE )]614.4 code0
[2(VCVTDQ2PS        xmmreg,xmmrm128          AVX,SANDYBRIDGE )]604.8 code0
[2(VCVTDQ2PS        ymmreg,ymmrm256          AVX,SANDYBRIDGE )]595.2 code0
[2(VCVTPD2DQ        xmmreg,xmmreg            AVX,SANDYBRIDGE )]585.6 code0
[2(VCVTPD2DQ        xmmreg,mem128            AVX,SANDYBRIDGE,SO )]576 code0
[2(VCVTPD2DQ        xmmreg,ymmreg            AVX,SANDYBRIDGE )]566.4 code0
[2(VCVTPD2DQ        xmmreg,mem256            AVX,SANDYBRIDGE,SY )]556.8 code0
[2(VCVTPD2PS        xmmreg,xmmreg            AVX,SANDYBRIDGE )]547.2 code0
[2(VCVTPD2PS        xmmreg,mem128            AVX,SANDYBRIDGE,SO )]537.6 code0
[2(VCVTPD2PS        xmmreg,ymmreg            AVX,SANDYBRIDGE )]528 code0
[2(VCVTPD2PS        xmmreg,mem256            AVX,SANDYBRIDGE,SY )]518.4 code0
[2(VCVTPS2DQ        xmmreg,xmmrm128          AVX,SANDYBRIDGE )]508.8 code0
[2(VCVTPS2DQ        ymmreg,ymmrm256          AVX,SANDYBRIDGE )]499.2 code0
[2(VCVTPS2PD        xmmreg,xmmrm64           AVX,SANDYBRIDGE )]489.6 code0
[2(VCVTPS2PD        ymmreg,xmmrm128          AVX,SANDYBRIDGE )]480 code0
[2(VCVTSD2SI        reg32,xmmrm64            AVX,SANDYBRIDGE )]470.4 code0
[2(VCVTSD2SI        reg64,xmmrm64            AVX,SANDYBRIDGE,LONG )]460.8 code0
[2(VCVTSD2SS        xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]451.2 code0
[2(VCVTSI2SD        xmmreg,xmmreg*,rm32      AVX,SANDYBRIDGE,SD )]441.6 code0
[2(VCVTSI2SD        xmmreg,xmmreg*,mem32     AVX,SANDYBRIDGE,ND,SD )]432 code0
[2(VCVTSI2SD        xmmreg,xmmreg*,rm64      AVX,SANDYBRIDGE,LONG )]422.4 code0
[2(VCVTSI2SS        xmmreg,xmmreg*,rm32      AVX,SANDYBRIDGE,SD )]412.8 code0
[2(VCVTSI2SS        xmmreg,xmmreg*,mem32     AVX,SANDYBRIDGE,ND,SD )]403.2 code0
[2(VCVTSI2SS        xmmreg,xmmreg*,rm64      AVX,SANDYBRIDGE,LONG )]393.6 code0
[2(VCVTSS2SD        xmmreg,xmmreg*,xmmrm32   AVX,SANDYBRIDGE )]384 code0
[2(VCVTSS2SI        reg32,xmmrm32            AVX,SANDYBRIDGE )]374.4 code0
[2(VCVTSS2SI        reg64,xmmrm32            AVX,SANDYBRIDGE,LONG )]364.8 code0
[2(VCVTTPD2DQ       xmmreg,xmmreg            AVX,SANDYBRIDGE )]355.2 code0
[2(VCVTTPD2DQ       xmmreg,mem128            AVX,SANDYBRIDGE,SO )]345.6 code0
[2(VCVTTPD2DQ       xmmreg,ymmreg            AVX,SANDYBRIDGE )]336 code0
[2(VCVTTPD2DQ       xmmreg,mem256            AVX,SANDYBRIDGE,SY )]326.4 code0
[2(VCVTTPS2DQ       xmmreg,xmmrm128          AVX,SANDYBRIDGE )]316.8 code0
[2(VCVTTPS2DQ       ymmreg,ymmrm256          AVX,SANDYBRIDGE )]307.2 code0
[2(VCVTTSD2SI       reg32,xmmrm64            AVX,SANDYBRIDGE )]297.6 code0
[2(VCVTTSD2SI       reg64,xmmrm64            AVX,SANDYBRIDGE,LONG )]288 code0
[2(VCVTTSS2SI       reg32,xmmrm32            AVX,SANDYBRIDGE )]278.4 code0
[2(VCVTTSS2SI       reg64,xmmrm32            AVX,SANDYBRIDGE,LONG )]268.8 code0
[2(VDIVPD           xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]259.2 code0
[2(VDIVPD           ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]249.6 code0
[2(VDIVPS           xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]240 code0
[2(VDIVPS           ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]230.4 code0
[2(VDIVSD           xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]220.799999999999 code0
[2(VDIVSS           xmmreg,xmmreg*,xmmrm32   AVX,SANDYBRIDGE )]211.199999999999 code0
[2(VDPPD            xmmreg,xmmreg*,xmmrm128,imm8 AVX,SANDYBRIDGE )]201.599999999999 code0
[2(VDPPS            xmmreg,xmmreg*,xmmrm128,imm8 AVX,SANDYBRIDGE )]191.999999999999 code0
[2(VDPPS            ymmreg,ymmreg*,ymmrm256,imm8 AVX,SANDYBRIDGE )]182.399999999999 code0
[2(VEXTRACTF128     xmmrm128,ymmreg,imm8     AVX,SANDYBRIDGE )]172.799999999999 code0
[2(VEXTRACTPS       rm32,xmmreg,imm8         AVX,SANDYBRIDGE )]163.199999999999 code0
[2(VHADDPD          xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]153.599999999999 code0
[2(VHADDPD          ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]143.999999999999 code0
[2(VHADDPS          xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]134.399999999999 code0
[2(VHADDPS          ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]124.799999999999 code0
[2(VHSUBPD          xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]115.199999999999 code0
[2(VHSUBPD          ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]105.599999999999 code0
[2(VHSUBPS          xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]95.9999999999992 code0
[2(VHSUBPS          ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]86.3999999999992 code0
[2(VINSERTF128      ymmreg,ymmreg*,xmmrm128,imm8 AVX,SANDYBRIDGE )]76.7999999999992 code0
(178)pageeven
restore showpage
%%Page: 179 179
%%BeginPageSetup
save
%%EndPageSetup
/179 pa
[2(VINSERTPS        xmmreg,xmmreg*,xmmrm32,imm8 AVX,SANDYBRIDGE )]710.4 code0
[2(VLDDQU           xmmreg,mem128            AVX,SANDYBRIDGE )]700.8 code0
[2(VLDQQU           ymmreg,mem256            AVX,SANDYBRIDGE )]691.2 code0
[2(VLDDQU           ymmreg,mem256            AVX,SANDYBRIDGE )]681.6 code0
[2(VLDMXCSR         mem32                    AVX,SANDYBRIDGE )]672 code0
[2(VMASKMOVDQU      xmmreg,xmmreg            AVX,SANDYBRIDGE )]662.4 code0
[2(VMASKMOVPS       xmmreg,xmmreg,mem128     AVX,SANDYBRIDGE )]652.8 code0
[2(VMASKMOVPS       ymmreg,ymmreg,mem256     AVX,SANDYBRIDGE )]643.2 code0
[2(VMASKMOVPS       mem128,xmmreg,xmmreg     AVX,SANDYBRIDGE,SO )]633.6 code0
[2(VMASKMOVPS       mem256,ymmreg,ymmreg     AVX,SANDYBRIDGE,SY )]624 code0
[2(VMASKMOVPD       xmmreg,xmmreg,mem128     AVX,SANDYBRIDGE )]614.4 code0
[2(VMASKMOVPD       ymmreg,ymmreg,mem256     AVX,SANDYBRIDGE )]604.8 code0
[2(VMASKMOVPD       mem128,xmmreg,xmmreg     AVX,SANDYBRIDGE )]595.2 code0
[2(VMASKMOVPD       mem256,ymmreg,ymmreg     AVX,SANDYBRIDGE )]585.6 code0
[2(VMAXPD           xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]576 code0
[2(VMAXPD           ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]566.4 code0
[2(VMAXPS           xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]556.8 code0
[2(VMAXPS           ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]547.2 code0
[2(VMAXSD           xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]537.6 code0
[2(VMAXSS           xmmreg,xmmreg*,xmmrm32   AVX,SANDYBRIDGE )]528 code0
[2(VMINPD           xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]518.4 code0
[2(VMINPD           ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]508.8 code0
[2(VMINPS           xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]499.2 code0
[2(VMINPS           ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]489.6 code0
[2(VMINSD           xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]480 code0
[2(VMINSS           xmmreg,xmmreg*,xmmrm32   AVX,SANDYBRIDGE )]470.4 code0
[2(VMOVAPD          xmmreg,xmmrm128          AVX,SANDYBRIDGE )]460.8 code0
[2(VMOVAPD          xmmrm128,xmmreg          AVX,SANDYBRIDGE )]451.2 code0
[2(VMOVAPD          ymmreg,ymmrm256          AVX,SANDYBRIDGE )]441.6 code0
[2(VMOVAPD          ymmrm256,ymmreg          AVX,SANDYBRIDGE )]432 code0
[2(VMOVAPS          xmmreg,xmmrm128          AVX,SANDYBRIDGE )]422.4 code0
[2(VMOVAPS          xmmrm128,xmmreg          AVX,SANDYBRIDGE )]412.8 code0
[2(VMOVAPS          ymmreg,ymmrm256          AVX,SANDYBRIDGE )]403.2 code0
[2(VMOVAPS          ymmrm256,ymmreg          AVX,SANDYBRIDGE )]393.6 code0
[2(VMOVD            xmmreg,rm32              AVX,SANDYBRIDGE )]384 code0
[2(VMOVD            rm32,xmmreg              AVX,SANDYBRIDGE )]374.4 code0
[2(VMOVQ            xmmreg,xmmrm64           AVX,SANDYBRIDGE )]364.8 code0
[2(VMOVQ            xmmrm64,xmmreg           AVX,SANDYBRIDGE )]355.2 code0
[2(VMOVQ            xmmreg,rm64              AVX,SANDYBRIDGE,LONG )]345.6 code0
[2(VMOVQ            rm64,xmmreg              AVX,SANDYBRIDGE,LONG )]336 code0
[2(VMOVDDUP         xmmreg,xmmrm64           AVX,SANDYBRIDGE )]326.4 code0
[2(VMOVDDUP         ymmreg,ymmrm256          AVX,SANDYBRIDGE )]316.8 code0
[2(VMOVDQA          xmmreg,xmmrm128          AVX,SANDYBRIDGE )]307.2 code0
[2(VMOVDQA          xmmrm128,xmmreg          AVX,SANDYBRIDGE )]297.6 code0
[2(VMOVQQA          ymmreg,ymmrm256          AVX,SANDYBRIDGE )]288 code0
[2(VMOVQQA          ymmrm256,ymmreg          AVX,SANDYBRIDGE )]278.4 code0
[2(VMOVDQA          ymmreg,ymmrm256          AVX,SANDYBRIDGE )]268.8 code0
[2(VMOVDQA          ymmrm256,ymmreg          AVX,SANDYBRIDGE )]259.2 code0
[2(VMOVDQU          xmmreg,xmmrm128          AVX,SANDYBRIDGE )]249.6 code0
[2(VMOVDQU          xmmrm128,xmmreg          AVX,SANDYBRIDGE )]240 code0
[2(VMOVQQU          ymmreg,ymmrm256          AVX,SANDYBRIDGE )]230.4 code0
[2(VMOVQQU          ymmrm256,ymmreg          AVX,SANDYBRIDGE )]220.799999999999 code0
[2(VMOVDQU          ymmreg,ymmrm256          AVX,SANDYBRIDGE )]211.199999999999 code0
[2(VMOVDQU          ymmrm256,ymmreg          AVX,SANDYBRIDGE )]201.599999999999 code0
[2(VMOVHLPS         xmmreg,xmmreg*,xmmreg    AVX,SANDYBRIDGE )]191.999999999999 code0
[2(VMOVHPD          xmmreg,xmmreg*,mem64     AVX,SANDYBRIDGE )]182.399999999999 code0
[2(VMOVHPD          mem64,xmmreg             AVX,SANDYBRIDGE )]172.799999999999 code0
[2(VMOVHPS          xmmreg,xmmreg*,mem64     AVX,SANDYBRIDGE )]163.199999999999 code0
[2(VMOVHPS          mem64,xmmreg             AVX,SANDYBRIDGE )]153.599999999999 code0
[2(VMOVLHPS         xmmreg,xmmreg*,xmmreg    AVX,SANDYBRIDGE )]143.999999999999 code0
[2(VMOVLPD          xmmreg,xmmreg*,mem64     AVX,SANDYBRIDGE )]134.399999999999 code0
[2(VMOVLPD          mem64,xmmreg             AVX,SANDYBRIDGE )]124.799999999999 code0
[2(VMOVLPS          xmmreg,xmmreg*,mem64     AVX,SANDYBRIDGE )]115.199999999999 code0
[2(VMOVLPS          mem64,xmmreg             AVX,SANDYBRIDGE )]105.599999999999 code0
[2(VMOVMSKPD        reg64,xmmreg             AVX,SANDYBRIDGE,LONG )]95.9999999999992 code0
[2(VMOVMSKPD        reg32,xmmreg             AVX,SANDYBRIDGE )]86.3999999999992 code0
[2(VMOVMSKPD        reg64,ymmreg             AVX,SANDYBRIDGE,LONG )]76.7999999999992 code0
(179)pageodd
restore showpage
%%Page: 180 180
%%BeginPageSetup
save
%%EndPageSetup
/180 pa
[2(VMOVMSKPD        reg32,ymmreg             AVX,SANDYBRIDGE )]710.4 code0
[2(VMOVMSKPS        reg64,xmmreg             AVX,SANDYBRIDGE,LONG )]700.8 code0
[2(VMOVMSKPS        reg32,xmmreg             AVX,SANDYBRIDGE )]691.2 code0
[2(VMOVMSKPS        reg64,ymmreg             AVX,SANDYBRIDGE,LONG )]681.6 code0
[2(VMOVMSKPS        reg32,ymmreg             AVX,SANDYBRIDGE )]672 code0
[2(VMOVNTDQ         mem128,xmmreg            AVX,SANDYBRIDGE )]662.4 code0
[2(VMOVNTQQ         mem256,ymmreg            AVX,SANDYBRIDGE )]652.8 code0
[2(VMOVNTDQ         mem256,ymmreg            AVX,SANDYBRIDGE )]643.2 code0
[2(VMOVNTDQA        xmmreg,mem128            AVX,SANDYBRIDGE )]633.6 code0
[2(VMOVNTPD         mem128,xmmreg            AVX,SANDYBRIDGE )]624 code0
[2(VMOVNTPD         mem256,ymmreg            AVX,SANDYBRIDGE )]614.4 code0
[2(VMOVNTPS         mem128,xmmreg            AVX,SANDYBRIDGE )]604.8 code0
[2(VMOVNTPS         mem256,ymmreg            AVX,SANDYBRIDGE )]595.2 code0
[2(VMOVSD           xmmreg,xmmreg*,xmmreg    AVX,SANDYBRIDGE )]585.6 code0
[2(VMOVSD           xmmreg,mem64             AVX,SANDYBRIDGE )]576 code0
[2(VMOVSD           xmmreg,xmmreg*,xmmreg    AVX,SANDYBRIDGE )]566.4 code0
[2(VMOVSD           mem64,xmmreg             AVX,SANDYBRIDGE )]556.8 code0
[2(VMOVSHDUP        xmmreg,xmmrm128          AVX,SANDYBRIDGE )]547.2 code0
[2(VMOVSHDUP        ymmreg,ymmrm256          AVX,SANDYBRIDGE )]537.6 code0
[2(VMOVSLDUP        xmmreg,xmmrm128          AVX,SANDYBRIDGE )]528 code0
[2(VMOVSLDUP        ymmreg,ymmrm256          AVX,SANDYBRIDGE )]518.4 code0
[2(VMOVSS           xmmreg,xmmreg*,xmmreg    AVX,SANDYBRIDGE )]508.8 code0
[2(VMOVSS           xmmreg,mem32             AVX,SANDYBRIDGE )]499.2 code0
[2(VMOVSS           xmmreg,xmmreg*,xmmreg    AVX,SANDYBRIDGE )]489.6 code0
[2(VMOVSS           mem32,xmmreg             AVX,SANDYBRIDGE )]480 code0
[2(VMOVUPD          xmmreg,xmmrm128          AVX,SANDYBRIDGE )]470.4 code0
[2(VMOVUPD          xmmrm128,xmmreg          AVX,SANDYBRIDGE )]460.8 code0
[2(VMOVUPD          ymmreg,ymmrm256          AVX,SANDYBRIDGE )]451.2 code0
[2(VMOVUPD          ymmrm256,ymmreg          AVX,SANDYBRIDGE )]441.6 code0
[2(VMOVUPS          xmmreg,xmmrm128          AVX,SANDYBRIDGE )]432 code0
[2(VMOVUPS          xmmrm128,xmmreg          AVX,SANDYBRIDGE )]422.4 code0
[2(VMOVUPS          ymmreg,ymmrm256          AVX,SANDYBRIDGE )]412.8 code0
[2(VMOVUPS          ymmrm256,ymmreg          AVX,SANDYBRIDGE )]403.2 code0
[2(VMPSADBW         xmmreg,xmmreg*,xmmrm128,imm8 AVX,SANDYBRIDGE )]393.6 code0
[2(VMULPD           xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]384 code0
[2(VMULPD           ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]374.4 code0
[2(VMULPS           xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]364.8 code0
[2(VMULPS           ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]355.2 code0
[2(VMULSD           xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]345.6 code0
[2(VMULSS           xmmreg,xmmreg*,xmmrm32   AVX,SANDYBRIDGE )]336 code0
[2(VORPD            xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]326.4 code0
[2(VORPD            ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]316.8 code0
[2(VORPS            xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]307.2 code0
[2(VORPS            ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]297.6 code0
[2(VPABSB           xmmreg,xmmrm128          AVX,SANDYBRIDGE )]288 code0
[2(VPABSW           xmmreg,xmmrm128          AVX,SANDYBRIDGE )]278.4 code0
[2(VPABSD           xmmreg,xmmrm128          AVX,SANDYBRIDGE )]268.8 code0
[2(VPACKSSWB        xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]259.2 code0
[2(VPACKSSDW        xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]249.6 code0
[2(VPACKUSWB        xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]240 code0
[2(VPACKUSDW        xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]230.4 code0
[2(VPADDB           xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]220.799999999999 code0
[2(VPADDW           xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]211.199999999999 code0
[2(VPADDD           xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]201.599999999999 code0
[2(VPADDQ           xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]191.999999999999 code0
[2(VPADDSB          xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]182.399999999999 code0
[2(VPADDSW          xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]172.799999999999 code0
[2(VPADDUSB         xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]163.199999999999 code0
[2(VPADDUSW         xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]153.599999999999 code0
[2(VPALIGNR         xmmreg,xmmreg*,xmmrm128,imm8 AVX,SANDYBRIDGE )]143.999999999999 code0
[2(VPAND            xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]134.399999999999 code0
[2(VPANDN           xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]124.799999999999 code0
[2(VPAVGB           xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]115.199999999999 code0
[2(VPAVGW           xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]105.599999999999 code0
[2(VPBLENDVB        xmmreg,xmmreg*,xmmrm128,xmmreg AVX,SANDYBRIDGE )]95.9999999999992 code0
[2(VPBLENDW         xmmreg,xmmreg*,xmmrm128,imm8 AVX,SANDYBRIDGE )]86.3999999999992 code0
[2(VPCMPESTRI       xmmreg,xmmrm128,imm8     AVX,SANDYBRIDGE )]76.7999999999992 code0
(180)pageeven
restore showpage
%%Page: 181 181
%%BeginPageSetup
save
%%EndPageSetup
/181 pa
[2(VPCMPESTRM       xmmreg,xmmrm128,imm8     AVX,SANDYBRIDGE )]710.4 code0
[2(VPCMPISTRI       xmmreg,xmmrm128,imm8     AVX,SANDYBRIDGE )]700.8 code0
[2(VPCMPISTRM       xmmreg,xmmrm128,imm8     AVX,SANDYBRIDGE )]691.2 code0
[2(VPCMPEQB         xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]681.6 code0
[2(VPCMPEQW         xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]672 code0
[2(VPCMPEQD         xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]662.4 code0
[2(VPCMPEQQ         xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]652.8 code0
[2(VPCMPGTB         xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]643.2 code0
[2(VPCMPGTW         xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]633.6 code0
[2(VPCMPGTD         xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]624 code0
[2(VPCMPGTQ         xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]614.4 code0
[2(VPERMILPD        xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]604.8 code0
[2(VPERMILPD        ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]595.2 code0
[2(VPERMILPD        xmmreg,xmmrm128,imm8     AVX,SANDYBRIDGE )]585.6 code0
[2(VPERMILPD        ymmreg,ymmrm256,imm8     AVX,SANDYBRIDGE )]576 code0
[2(VPERMILPS        xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]566.4 code0
[2(VPERMILPS        ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]556.8 code0
[2(VPERMILPS        xmmreg,xmmrm128,imm8     AVX,SANDYBRIDGE )]547.2 code0
[2(VPERMILPS        ymmreg,ymmrm256,imm8     AVX,SANDYBRIDGE )]537.6 code0
[2(VPERM2F128       ymmreg,ymmreg*,ymmrm256,imm8 AVX,SANDYBRIDGE )]528 code0
[2(VPEXTRB          reg64,xmmreg,imm8        AVX,SANDYBRIDGE,LONG )]518.4 code0
[2(VPEXTRB          reg32,xmmreg,imm8        AVX,SANDYBRIDGE )]508.8 code0
[2(VPEXTRB          mem8,xmmreg,imm8         AVX,SANDYBRIDGE )]499.2 code0
[2(VPEXTRW          reg64,xmmreg,imm8        AVX,SANDYBRIDGE,LONG )]489.6 code0
[2(VPEXTRW          reg32,xmmreg,imm8        AVX,SANDYBRIDGE )]480 code0
[2(VPEXTRW          reg64,xmmreg,imm8        AVX,SANDYBRIDGE,LONG )]470.4 code0
[2(VPEXTRW          reg32,xmmreg,imm8        AVX,SANDYBRIDGE )]460.8 code0
[2(VPEXTRW          mem16,xmmreg,imm8        AVX,SANDYBRIDGE )]451.2 code0
[2(VPEXTRD          reg64,xmmreg,imm8        AVX,SANDYBRIDGE,LONG )]441.6 code0
[2(VPEXTRD          rm32,xmmreg,imm8         AVX,SANDYBRIDGE )]432 code0
[2(VPEXTRQ          rm64,xmmreg,imm8         AVX,SANDYBRIDGE,LONG )]422.4 code0
[2(VPHADDW          xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]412.8 code0
[2(VPHADDD          xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]403.2 code0
[2(VPHADDSW         xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]393.6 code0
[2(VPHMINPOSUW      xmmreg,xmmrm128          AVX,SANDYBRIDGE )]384 code0
[2(VPHSUBW          xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]374.4 code0
[2(VPHSUBD          xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]364.8 code0
[2(VPHSUBSW         xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]355.2 code0
[2(VPINSRB          xmmreg,xmmreg*,mem8,imm8 AVX,SANDYBRIDGE )]345.6 code0
[2(VPINSRB          xmmreg,xmmreg*,rm8,imm8  AVX,SANDYBRIDGE )]336 code0
[2(VPINSRB          xmmreg,xmmreg*,reg32,imm8 AVX,SANDYBRIDGE )]326.4 code0
[2(VPINSRW          xmmreg,xmmreg*,mem16,imm8 AVX,SANDYBRIDGE )]316.8 code0
[2(VPINSRW          xmmreg,xmmreg*,rm16,imm8 AVX,SANDYBRIDGE )]307.2 code0
[2(VPINSRW          xmmreg,xmmreg*,reg32,imm8 AVX,SANDYBRIDGE )]297.6 code0
[2(VPINSRD          xmmreg,xmmreg*,mem32,imm8 AVX,SANDYBRIDGE )]288 code0
[2(VPINSRD          xmmreg,xmmreg*,rm32,imm8 AVX,SANDYBRIDGE )]278.4 code0
[2(VPINSRQ          xmmreg,xmmreg*,mem64,imm8 AVX,SANDYBRIDGE,LONG )]268.8 code0
[2(VPINSRQ          xmmreg,xmmreg*,rm64,imm8 AVX,SANDYBRIDGE,LONG )]259.2 code0
[2(VPMADDWD         xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]249.6 code0
[2(VPMADDUBSW       xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]240 code0
[2(VPMAXSB          xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]230.4 code0
[2(VPMAXSW          xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]220.799999999999 code0
[2(VPMAXSD          xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]211.199999999999 code0
[2(VPMAXUB          xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]201.599999999999 code0
[2(VPMAXUW          xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]191.999999999999 code0
[2(VPMAXUD          xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]182.399999999999 code0
[2(VPMINSB          xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]172.799999999999 code0
[2(VPMINSW          xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]163.199999999999 code0
[2(VPMINSD          xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]153.599999999999 code0
[2(VPMINUB          xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]143.999999999999 code0
[2(VPMINUW          xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]134.399999999999 code0
[2(VPMINUD          xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]124.799999999999 code0
[2(VPMOVMSKB        reg64,xmmreg             AVX,SANDYBRIDGE,LONG )]115.199999999999 code0
[2(VPMOVMSKB        reg32,xmmreg             AVX,SANDYBRIDGE )]105.599999999999 code0
[2(VPMOVSXBW        xmmreg,xmmrm64           AVX,SANDYBRIDGE )]95.9999999999992 code0
[2(VPMOVSXBD        xmmreg,xmmrm32           AVX,SANDYBRIDGE )]86.3999999999992 code0
[2(VPMOVSXBQ        xmmreg,xmmrm16           AVX,SANDYBRIDGE )]76.7999999999992 code0
(181)pageodd
restore showpage
%%Page: 182 182
%%BeginPageSetup
save
%%EndPageSetup
/182 pa
[2(VPMOVSXWD        xmmreg,xmmrm64           AVX,SANDYBRIDGE )]710.4 code0
[2(VPMOVSXWQ        xmmreg,xmmrm32           AVX,SANDYBRIDGE )]700.8 code0
[2(VPMOVSXDQ        xmmreg,xmmrm64           AVX,SANDYBRIDGE )]691.2 code0
[2(VPMOVZXBW        xmmreg,xmmrm64           AVX,SANDYBRIDGE )]681.6 code0
[2(VPMOVZXBD        xmmreg,xmmrm32           AVX,SANDYBRIDGE )]672 code0
[2(VPMOVZXBQ        xmmreg,xmmrm16           AVX,SANDYBRIDGE )]662.4 code0
[2(VPMOVZXWD        xmmreg,xmmrm64           AVX,SANDYBRIDGE )]652.8 code0
[2(VPMOVZXWQ        xmmreg,xmmrm32           AVX,SANDYBRIDGE )]643.2 code0
[2(VPMOVZXDQ        xmmreg,xmmrm64           AVX,SANDYBRIDGE )]633.6 code0
[2(VPMULHUW         xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]624 code0
[2(VPMULHRSW        xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]614.4 code0
[2(VPMULHW          xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]604.8 code0
[2(VPMULLW          xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]595.2 code0
[2(VPMULLD          xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]585.6 code0
[2(VPMULUDQ         xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]576 code0
[2(VPMULDQ          xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]566.4 code0
[2(VPOR             xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]556.8 code0
[2(VPSADBW          xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]547.2 code0
[2(VPSHUFB          xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]537.6 code0
[2(VPSHUFD          xmmreg,xmmrm128,imm8     AVX,SANDYBRIDGE )]528 code0
[2(VPSHUFHW         xmmreg,xmmrm128,imm8     AVX,SANDYBRIDGE )]518.4 code0
[2(VPSHUFLW         xmmreg,xmmrm128,imm8     AVX,SANDYBRIDGE )]508.8 code0
[2(VPSIGNB          xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]499.2 code0
[2(VPSIGNW          xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]489.6 code0
[2(VPSIGND          xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]480 code0
[2(VPSLLDQ          xmmreg,xmmreg*,imm8      AVX,SANDYBRIDGE )]470.4 code0
[2(VPSRLDQ          xmmreg,xmmreg*,imm8      AVX,SANDYBRIDGE )]460.8 code0
[2(VPSLLW           xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]451.2 code0
[2(VPSLLW           xmmreg,xmmreg*,imm8      AVX,SANDYBRIDGE )]441.6 code0
[2(VPSLLD           xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]432 code0
[2(VPSLLD           xmmreg,xmmreg*,imm8      AVX,SANDYBRIDGE )]422.4 code0
[2(VPSLLQ           xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]412.8 code0
[2(VPSLLQ           xmmreg,xmmreg*,imm8      AVX,SANDYBRIDGE )]403.2 code0
[2(VPSRAW           xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]393.6 code0
[2(VPSRAW           xmmreg,xmmreg*,imm8      AVX,SANDYBRIDGE )]384 code0
[2(VPSRAD           xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]374.4 code0
[2(VPSRAD           xmmreg,xmmreg*,imm8      AVX,SANDYBRIDGE )]364.8 code0
[2(VPSRLW           xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]355.2 code0
[2(VPSRLW           xmmreg,xmmreg*,imm8      AVX,SANDYBRIDGE )]345.6 code0
[2(VPSRLD           xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]336 code0
[2(VPSRLD           xmmreg,xmmreg*,imm8      AVX,SANDYBRIDGE )]326.4 code0
[2(VPSRLQ           xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]316.8 code0
[2(VPSRLQ           xmmreg,xmmreg*,imm8      AVX,SANDYBRIDGE )]307.2 code0
[2(VPTEST           xmmreg,xmmrm128          AVX,SANDYBRIDGE )]297.6 code0
[2(VPTEST           ymmreg,ymmrm256          AVX,SANDYBRIDGE )]288 code0
[2(VPSUBB           xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]278.4 code0
[2(VPSUBW           xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]268.8 code0
[2(VPSUBD           xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]259.2 code0
[2(VPSUBQ           xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]249.6 code0
[2(VPSUBSB          xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]240 code0
[2(VPSUBSW          xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]230.4 code0
[2(VPSUBUSB         xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]220.799999999999 code0
[2(VPSUBUSW         xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]211.199999999999 code0
[2(VPUNPCKHBW       xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]201.599999999999 code0
[2(VPUNPCKHWD       xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]191.999999999999 code0
[2(VPUNPCKHDQ       xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]182.399999999999 code0
[2(VPUNPCKHQDQ      xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]172.799999999999 code0
[2(VPUNPCKLBW       xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]163.199999999999 code0
[2(VPUNPCKLWD       xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]153.599999999999 code0
[2(VPUNPCKLDQ       xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]143.999999999999 code0
[2(VPUNPCKLQDQ      xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]134.399999999999 code0
[2(VPXOR            xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]124.799999999999 code0
[2(VRCPPS           xmmreg,xmmrm128          AVX,SANDYBRIDGE )]115.199999999999 code0
[2(VRCPPS           ymmreg,ymmrm256          AVX,SANDYBRIDGE )]105.599999999999 code0
[2(VRCPSS           xmmreg,xmmreg*,xmmrm32   AVX,SANDYBRIDGE )]95.9999999999992 code0
[2(VRSQRTPS         xmmreg,xmmrm128          AVX,SANDYBRIDGE )]86.3999999999992 code0
[2(VRSQRTPS         ymmreg,ymmrm256          AVX,SANDYBRIDGE )]76.7999999999992 code0
(182)pageeven
restore showpage
%%Page: 183 183
%%BeginPageSetup
save
%%EndPageSetup
/183 pa
[2(VRSQRTSS         xmmreg,xmmreg*,xmmrm32   AVX,SANDYBRIDGE )]710.4 code0
[2(VROUNDPD         xmmreg,xmmrm128,imm8     AVX,SANDYBRIDGE )]700.8 code0
[2(VROUNDPD         ymmreg,ymmrm256,imm8     AVX,SANDYBRIDGE )]691.2 code0
[2(VROUNDPS         xmmreg,xmmrm128,imm8     AVX,SANDYBRIDGE )]681.6 code0
[2(VROUNDPS         ymmreg,ymmrm256,imm8     AVX,SANDYBRIDGE )]672 code0
[2(VROUNDSD         xmmreg,xmmreg*,xmmrm64,imm8 AVX,SANDYBRIDGE )]662.4 code0
[2(VROUNDSS         xmmreg,xmmreg*,xmmrm32,imm8 AVX,SANDYBRIDGE )]652.8 code0
[2(VSHUFPD          xmmreg,xmmreg*,xmmrm128,imm8 AVX,SANDYBRIDGE )]643.2 code0
[2(VSHUFPD          ymmreg,ymmreg*,ymmrm256,imm8 AVX,SANDYBRIDGE )]633.6 code0
[2(VSHUFPS          xmmreg,xmmreg*,xmmrm128,imm8 AVX,SANDYBRIDGE )]624 code0
[2(VSHUFPS          ymmreg,ymmreg*,ymmrm256,imm8 AVX,SANDYBRIDGE )]614.4 code0
[2(VSQRTPD          xmmreg,xmmrm128          AVX,SANDYBRIDGE )]604.8 code0
[2(VSQRTPD          ymmreg,ymmrm256          AVX,SANDYBRIDGE )]595.2 code0
[2(VSQRTPS          xmmreg,xmmrm128          AVX,SANDYBRIDGE )]585.6 code0
[2(VSQRTPS          ymmreg,ymmrm256          AVX,SANDYBRIDGE )]576 code0
[2(VSQRTSD          xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]566.4 code0
[2(VSQRTSS          xmmreg,xmmreg*,xmmrm32   AVX,SANDYBRIDGE )]556.8 code0
[2(VSTMXCSR         mem32                    AVX,SANDYBRIDGE )]547.2 code0
[2(VSUBPD           xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]537.6 code0
[2(VSUBPD           ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]528 code0
[2(VSUBPS           xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]518.4 code0
[2(VSUBPS           ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]508.8 code0
[2(VSUBSD           xmmreg,xmmreg*,xmmrm64   AVX,SANDYBRIDGE )]499.2 code0
[2(VSUBSS           xmmreg,xmmreg*,xmmrm32   AVX,SANDYBRIDGE )]489.6 code0
[2(VTESTPS          xmmreg,xmmrm128          AVX,SANDYBRIDGE )]480 code0
[2(VTESTPS          ymmreg,ymmrm256          AVX,SANDYBRIDGE )]470.4 code0
[2(VTESTPD          xmmreg,xmmrm128          AVX,SANDYBRIDGE )]460.8 code0
[2(VTESTPD          ymmreg,ymmrm256          AVX,SANDYBRIDGE )]451.2 code0
[2(VUCOMISD         xmmreg,xmmrm64           AVX,SANDYBRIDGE )]441.6 code0
[2(VUCOMISS         xmmreg,xmmrm32           AVX,SANDYBRIDGE )]432 code0
[2(VUNPCKHPD        xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]422.4 code0
[2(VUNPCKHPD        ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]412.8 code0
[2(VUNPCKHPS        xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]403.2 code0
[2(VUNPCKHPS        ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]393.6 code0
[2(VUNPCKLPD        xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]384 code0
[2(VUNPCKLPD        ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]374.4 code0
[2(VUNPCKLPS        xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]364.8 code0
[2(VUNPCKLPS        ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]355.2 code0
[2(VXORPD           xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]345.6 code0
[2(VXORPD           ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]336 code0
[2(VXORPS           xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]326.4 code0
[2(VXORPS           ymmreg,ymmreg*,ymmrm256  AVX,SANDYBRIDGE )]316.8 code0
[2(VZEROALL                                  AVX,SANDYBRIDGE )]307.2 code0
[2(VZEROUPPER                                AVX,SANDYBRIDGE)]297.6 code2
[{/section-B.1.27 xa}(Intel Carry-Less Multiplication instructions \(CLMUL\))](B.1.27)277.2 subh3
[2(PCLMULLQLQDQ     xmmreg,xmmrm128          SSE,WESTMERE )]261.6 code1
[2(PCLMULHQLQDQ     xmmreg,xmmrm128          SSE,WESTMERE )]252 code0
[2(PCLMULLQHQDQ     xmmreg,xmmrm128          SSE,WESTMERE )]242.4 code0
[2(PCLMULHQHQDQ     xmmreg,xmmrm128          SSE,WESTMERE )]232.8 code0
[2(PCLMULQDQ        xmmreg,xmmrm128,imm8     SSE,WESTMERE)]223.2 code2
[{/section-B.1.28 xa}(Intel AVX Carry-Less Multiplication instructions \(CLMUL\))](B.1.28)202.8 subh3
[2(VPCLMULLQLQDQ    xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]187.2 code1
[2(VPCLMULHQLQDQ    xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]177.6 code0
[2(VPCLMULLQHQDQ    xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]168 code0
[2(VPCLMULHQHQDQ    xmmreg,xmmreg*,xmmrm128  AVX,SANDYBRIDGE )]158.4 code0
[2(VPCLMULQDQ       xmmreg,xmmreg*,xmmrm128,imm8 AVX,SANDYBRIDGE )]148.799999999999 code0
[2(VPCLMULLQLQDQ    ymmreg,ymmreg*,ymmrm256  VPCLMULQDQ )]139.199999999999 code0
[2(VPCLMULHQLQDQ    ymmreg,ymmreg*,ymmrm256  VPCLMULQDQ )]129.599999999999 code0
[2(VPCLMULLQHQDQ    ymmreg,ymmreg*,ymmrm256  VPCLMULQDQ )]119.999999999999 code0
[2(VPCLMULHQHQDQ    ymmreg,ymmreg*,ymmrm256  VPCLMULQDQ )]110.399999999999 code0
[2(VPCLMULQDQ       ymmreg,ymmreg*,ymmrm256,imm8 VPCLMULQDQ )]100.799999999999 code0
[2(VPCLMULLQLQDQ    xmmreg,xmmreg*,xmmrm128  AVX512VL,VPCLMULQDQ )]91.1999999999994 code0
[2(VPCLMULHQLQDQ    xmmreg,xmmreg*,xmmrm128  AVX512VL,VPCLMULQDQ )]81.5999999999993 code0
(183)pageodd
restore showpage
%%Page: 184 184
%%BeginPageSetup
save
%%EndPageSetup
/184 pa
[2(VPCLMULLQHQDQ    xmmreg,xmmreg*,xmmrm128  AVX512VL,VPCLMULQDQ )]710.4 code0
[2(VPCLMULHQHQDQ    xmmreg,xmmreg*,xmmrm128  AVX512VL,VPCLMULQDQ )]700.8 code0
[2(VPCLMULQDQ       xmmreg,xmmreg*,xmmrm128,imm8 AVX512VL,VPCLMULQDQ )]691.2 code0
[2(VPCLMULLQLQDQ    ymmreg,ymmreg*,ymmrm256  AVX512VL,VPCLMULQDQ )]681.6 code0
[2(VPCLMULHQLQDQ    ymmreg,ymmreg*,ymmrm256  AVX512VL,VPCLMULQDQ )]672 code0
[2(VPCLMULLQHQDQ    ymmreg,ymmreg*,ymmrm256  AVX512VL,VPCLMULQDQ )]662.4 code0
[2(VPCLMULHQHQDQ    ymmreg,ymmreg*,ymmrm256  AVX512VL,VPCLMULQDQ )]652.8 code0
[2(VPCLMULQDQ       ymmreg,ymmreg*,ymmrm256,imm8 AVX512VL,VPCLMULQDQ )]643.2 code0
[2(VPCLMULLQLQDQ    zmmreg,zmmreg*,zmmrm512  AVX512,VPCLMULQDQ )]633.6 code0
[2(VPCLMULHQLQDQ    zmmreg,zmmreg*,zmmrm512  AVX512,VPCLMULQDQ )]624 code0
[2(VPCLMULLQHQDQ    zmmreg,zmmreg*,zmmrm512  AVX512,VPCLMULQDQ )]614.4 code0
[2(VPCLMULHQHQDQ    zmmreg,zmmreg*,zmmrm512  AVX512,VPCLMULQDQ )]604.8 code0
[2(VPCLMULQDQ       zmmreg,zmmreg*,zmmrm512,imm8 AVX512,VPCLMULQDQ)]595.2 code2
[{/section-B.1.29 xa}(Intel Fused Multiply-Add instructions \(FMA\))](B.1.29)574.8 subh3
[2(VFMADD132PS      xmmreg,xmmreg,xmmrm128   FMA )]559.2 code1
[2(VFMADD132PS      ymmreg,ymmreg,ymmrm256   FMA )]549.6 code0
[2(VFMADD132PD      xmmreg,xmmreg,xmmrm128   FMA )]540 code0
[2(VFMADD132PD      ymmreg,ymmreg,ymmrm256   FMA )]530.4 code0
[2(VFMADD312PS      xmmreg,xmmreg,xmmrm128   FMA )]520.8 code0
[2(VFMADD312PS      ymmreg,ymmreg,ymmrm256   FMA )]511.2 code0
[2(VFMADD312PD      xmmreg,xmmreg,xmmrm128   FMA )]501.6 code0
[2(VFMADD312PD      ymmreg,ymmreg,ymmrm256   FMA )]492 code0
[2(VFMADD213PS      xmmreg,xmmreg,xmmrm128   FMA )]482.4 code0
[2(VFMADD213PS      ymmreg,ymmreg,ymmrm256   FMA )]472.8 code0
[2(VFMADD213PD      xmmreg,xmmreg,xmmrm128   FMA )]463.2 code0
[2(VFMADD213PD      ymmreg,ymmreg,ymmrm256   FMA )]453.6 code0
[2(VFMADD123PS      xmmreg,xmmreg,xmmrm128   FMA )]444 code0
[2(VFMADD123PS      ymmreg,ymmreg,ymmrm256   FMA )]434.4 code0
[2(VFMADD123PD      xmmreg,xmmreg,xmmrm128   FMA )]424.8 code0
[2(VFMADD123PD      ymmreg,ymmreg,ymmrm256   FMA )]415.2 code0
[2(VFMADD231PS      xmmreg,xmmreg,xmmrm128   FMA )]405.6 code0
[2(VFMADD231PS      ymmreg,ymmreg,ymmrm256   FMA )]396 code0
[2(VFMADD231PD      xmmreg,xmmreg,xmmrm128   FMA )]386.4 code0
[2(VFMADD231PD      ymmreg,ymmreg,ymmrm256   FMA )]376.8 code0
[2(VFMADD321PS      xmmreg,xmmreg,xmmrm128   FMA )]367.2 code0
[2(VFMADD321PS      ymmreg,ymmreg,ymmrm256   FMA )]357.6 code0
[2(VFMADD321PD      xmmreg,xmmreg,xmmrm128   FMA )]348 code0
[2(VFMADD321PD      ymmreg,ymmreg,ymmrm256   FMA )]338.4 code0
[2(VFMADDSUB132PS   xmmreg,xmmreg,xmmrm128   FMA )]328.8 code0
[2(VFMADDSUB132PS   ymmreg,ymmreg,ymmrm256   FMA )]319.2 code0
[2(VFMADDSUB132PD   xmmreg,xmmreg,xmmrm128   FMA )]309.6 code0
[2(VFMADDSUB132PD   ymmreg,ymmreg,ymmrm256   FMA )]300 code0
[2(VFMADDSUB312PS   xmmreg,xmmreg,xmmrm128   FMA )]290.4 code0
[2(VFMADDSUB312PS   ymmreg,ymmreg,ymmrm256   FMA )]280.8 code0
[2(VFMADDSUB312PD   xmmreg,xmmreg,xmmrm128   FMA )]271.2 code0
[2(VFMADDSUB312PD   ymmreg,ymmreg,ymmrm256   FMA )]261.6 code0
[2(VFMADDSUB213PS   xmmreg,xmmreg,xmmrm128   FMA )]252 code0
[2(VFMADDSUB213PS   ymmreg,ymmreg,ymmrm256   FMA )]242.4 code0
[2(VFMADDSUB213PD   xmmreg,xmmreg,xmmrm128   FMA )]232.8 code0
[2(VFMADDSUB213PD   ymmreg,ymmreg,ymmrm256   FMA )]223.2 code0
[2(VFMADDSUB123PS   xmmreg,xmmreg,xmmrm128   FMA )]213.6 code0
[2(VFMADDSUB123PS   ymmreg,ymmreg,ymmrm256   FMA )]204 code0
[2(VFMADDSUB123PD   xmmreg,xmmreg,xmmrm128   FMA )]194.4 code0
[2(VFMADDSUB123PD   ymmreg,ymmreg,ymmrm256   FMA )]184.799999999999 code0
[2(VFMADDSUB231PS   xmmreg,xmmreg,xmmrm128   FMA )]175.199999999999 code0
[2(VFMADDSUB231PS   ymmreg,ymmreg,ymmrm256   FMA )]165.599999999999 code0
[2(VFMADDSUB231PD   xmmreg,xmmreg,xmmrm128   FMA )]155.999999999999 code0
[2(VFMADDSUB231PD   ymmreg,ymmreg,ymmrm256   FMA )]146.399999999999 code0
[2(VFMADDSUB321PS   xmmreg,xmmreg,xmmrm128   FMA )]136.799999999999 code0
[2(VFMADDSUB321PS   ymmreg,ymmreg,ymmrm256   FMA )]127.199999999999 code0
[2(VFMADDSUB321PD   xmmreg,xmmreg,xmmrm128   FMA )]117.599999999999 code0
[2(VFMADDSUB321PD   ymmreg,ymmreg,ymmrm256   FMA )]107.999999999999 code0
[2(VFMSUB132PS      xmmreg,xmmreg,xmmrm128   FMA )]98.3999999999993 code0
[2(VFMSUB132PS      ymmreg,ymmreg,ymmrm256   FMA )]88.7999999999993 code0
[2(VFMSUB132PD      xmmreg,xmmreg,xmmrm128   FMA )]79.1999999999992 code0
(184)pageeven
restore showpage
%%Page: 185 185
%%BeginPageSetup
save
%%EndPageSetup
/185 pa
[2(VFMSUB132PD      ymmreg,ymmreg,ymmrm256   FMA )]710.4 code0
[2(VFMSUB312PS      xmmreg,xmmreg,xmmrm128   FMA )]700.8 code0
[2(VFMSUB312PS      ymmreg,ymmreg,ymmrm256   FMA )]691.2 code0
[2(VFMSUB312PD      xmmreg,xmmreg,xmmrm128   FMA )]681.6 code0
[2(VFMSUB312PD      ymmreg,ymmreg,ymmrm256   FMA )]672 code0
[2(VFMSUB213PS      xmmreg,xmmreg,xmmrm128   FMA )]662.4 code0
[2(VFMSUB213PS      ymmreg,ymmreg,ymmrm256   FMA )]652.8 code0
[2(VFMSUB213PD      xmmreg,xmmreg,xmmrm128   FMA )]643.2 code0
[2(VFMSUB213PD      ymmreg,ymmreg,ymmrm256   FMA )]633.6 code0
[2(VFMSUB123PS      xmmreg,xmmreg,xmmrm128   FMA )]624 code0
[2(VFMSUB123PS      ymmreg,ymmreg,ymmrm256   FMA )]614.4 code0
[2(VFMSUB123PD      xmmreg,xmmreg,xmmrm128   FMA )]604.8 code0
[2(VFMSUB123PD      ymmreg,ymmreg,ymmrm256   FMA )]595.2 code0
[2(VFMSUB231PS      xmmreg,xmmreg,xmmrm128   FMA )]585.6 code0
[2(VFMSUB231PS      ymmreg,ymmreg,ymmrm256   FMA )]576 code0
[2(VFMSUB231PD      xmmreg,xmmreg,xmmrm128   FMA )]566.4 code0
[2(VFMSUB231PD      ymmreg,ymmreg,ymmrm256   FMA )]556.8 code0
[2(VFMSUB321PS      xmmreg,xmmreg,xmmrm128   FMA )]547.2 code0
[2(VFMSUB321PS      ymmreg,ymmreg,ymmrm256   FMA )]537.6 code0
[2(VFMSUB321PD      xmmreg,xmmreg,xmmrm128   FMA )]528 code0
[2(VFMSUB321PD      ymmreg,ymmreg,ymmrm256   FMA )]518.4 code0
[2(VFMSUBADD132PS   xmmreg,xmmreg,xmmrm128   FMA )]508.8 code0
[2(VFMSUBADD132PS   ymmreg,ymmreg,ymmrm256   FMA )]499.2 code0
[2(VFMSUBADD132PD   xmmreg,xmmreg,xmmrm128   FMA )]489.6 code0
[2(VFMSUBADD132PD   ymmreg,ymmreg,ymmrm256   FMA )]480 code0
[2(VFMSUBADD312PS   xmmreg,xmmreg,xmmrm128   FMA )]470.4 code0
[2(VFMSUBADD312PS   ymmreg,ymmreg,ymmrm256   FMA )]460.8 code0
[2(VFMSUBADD312PD   xmmreg,xmmreg,xmmrm128   FMA )]451.2 code0
[2(VFMSUBADD312PD   ymmreg,ymmreg,ymmrm256   FMA )]441.6 code0
[2(VFMSUBADD213PS   xmmreg,xmmreg,xmmrm128   FMA )]432 code0
[2(VFMSUBADD213PS   ymmreg,ymmreg,ymmrm256   FMA )]422.4 code0
[2(VFMSUBADD213PD   xmmreg,xmmreg,xmmrm128   FMA )]412.8 code0
[2(VFMSUBADD213PD   ymmreg,ymmreg,ymmrm256   FMA )]403.2 code0
[2(VFMSUBADD123PS   xmmreg,xmmreg,xmmrm128   FMA )]393.6 code0
[2(VFMSUBADD123PS   ymmreg,ymmreg,ymmrm256   FMA )]384 code0
[2(VFMSUBADD123PD   xmmreg,xmmreg,xmmrm128   FMA )]374.4 code0
[2(VFMSUBADD123PD   ymmreg,ymmreg,ymmrm256   FMA )]364.8 code0
[2(VFMSUBADD231PS   xmmreg,xmmreg,xmmrm128   FMA )]355.2 code0
[2(VFMSUBADD231PS   ymmreg,ymmreg,ymmrm256   FMA )]345.6 code0
[2(VFMSUBADD231PD   xmmreg,xmmreg,xmmrm128   FMA )]336 code0
[2(VFMSUBADD231PD   ymmreg,ymmreg,ymmrm256   FMA )]326.4 code0
[2(VFMSUBADD321PS   xmmreg,xmmreg,xmmrm128   FMA )]316.8 code0
[2(VFMSUBADD321PS   ymmreg,ymmreg,ymmrm256   FMA )]307.2 code0
[2(VFMSUBADD321PD   xmmreg,xmmreg,xmmrm128   FMA )]297.6 code0
[2(VFMSUBADD321PD   ymmreg,ymmreg,ymmrm256   FMA )]288 code0
[2(VFNMADD132PS     xmmreg,xmmreg,xmmrm128   FMA )]278.4 code0
[2(VFNMADD132PS     ymmreg,ymmreg,ymmrm256   FMA )]268.8 code0
[2(VFNMADD132PD     xmmreg,xmmreg,xmmrm128   FMA )]259.2 code0
[2(VFNMADD132PD     ymmreg,ymmreg,ymmrm256   FMA )]249.6 code0
[2(VFNMADD312PS     xmmreg,xmmreg,xmmrm128   FMA )]240 code0
[2(VFNMADD312PS     ymmreg,ymmreg,ymmrm256   FMA )]230.4 code0
[2(VFNMADD312PD     xmmreg,xmmreg,xmmrm128   FMA )]220.799999999999 code0
[2(VFNMADD312PD     ymmreg,ymmreg,ymmrm256   FMA )]211.199999999999 code0
[2(VFNMADD213PS     xmmreg,xmmreg,xmmrm128   FMA )]201.599999999999 code0
[2(VFNMADD213PS     ymmreg,ymmreg,ymmrm256   FMA )]191.999999999999 code0
[2(VFNMADD213PD     xmmreg,xmmreg,xmmrm128   FMA )]182.399999999999 code0
[2(VFNMADD213PD     ymmreg,ymmreg,ymmrm256   FMA )]172.799999999999 code0
[2(VFNMADD123PS     xmmreg,xmmreg,xmmrm128   FMA )]163.199999999999 code0
[2(VFNMADD123PS     ymmreg,ymmreg,ymmrm256   FMA )]153.599999999999 code0
[2(VFNMADD123PD     xmmreg,xmmreg,xmmrm128   FMA )]143.999999999999 code0
[2(VFNMADD123PD     ymmreg,ymmreg,ymmrm256   FMA )]134.399999999999 code0
[2(VFNMADD231PS     xmmreg,xmmreg,xmmrm128   FMA )]124.799999999999 code0
[2(VFNMADD231PS     ymmreg,ymmreg,ymmrm256   FMA )]115.199999999999 code0
[2(VFNMADD231PD     xmmreg,xmmreg,xmmrm128   FMA )]105.599999999999 code0
[2(VFNMADD231PD     ymmreg,ymmreg,ymmrm256   FMA )]95.9999999999992 code0
[2(VFNMADD321PS     xmmreg,xmmreg,xmmrm128   FMA )]86.3999999999992 code0
[2(VFNMADD321PS     ymmreg,ymmreg,ymmrm256   FMA )]76.7999999999992 code0
(185)pageodd
restore showpage
%%Page: 186 186
%%BeginPageSetup
save
%%EndPageSetup
/186 pa
[2(VFNMADD321PD     xmmreg,xmmreg,xmmrm128   FMA )]710.4 code0
[2(VFNMADD321PD     ymmreg,ymmreg,ymmrm256   FMA )]700.8 code0
[2(VFNMSUB132PS     xmmreg,xmmreg,xmmrm128   FMA )]691.2 code0
[2(VFNMSUB132PS     ymmreg,ymmreg,ymmrm256   FMA )]681.6 code0
[2(VFNMSUB132PD     xmmreg,xmmreg,xmmrm128   FMA )]672 code0
[2(VFNMSUB132PD     ymmreg,ymmreg,ymmrm256   FMA )]662.4 code0
[2(VFNMSUB312PS     xmmreg,xmmreg,xmmrm128   FMA )]652.8 code0
[2(VFNMSUB312PS     ymmreg,ymmreg,ymmrm256   FMA )]643.2 code0
[2(VFNMSUB312PD     xmmreg,xmmreg,xmmrm128   FMA )]633.6 code0
[2(VFNMSUB312PD     ymmreg,ymmreg,ymmrm256   FMA )]624 code0
[2(VFNMSUB213PS     xmmreg,xmmreg,xmmrm128   FMA )]614.4 code0
[2(VFNMSUB213PS     ymmreg,ymmreg,ymmrm256   FMA )]604.8 code0
[2(VFNMSUB213PD     xmmreg,xmmreg,xmmrm128   FMA )]595.2 code0
[2(VFNMSUB213PD     ymmreg,ymmreg,ymmrm256   FMA )]585.6 code0
[2(VFNMSUB123PS     xmmreg,xmmreg,xmmrm128   FMA )]576 code0
[2(VFNMSUB123PS     ymmreg,ymmreg,ymmrm256   FMA )]566.4 code0
[2(VFNMSUB123PD     xmmreg,xmmreg,xmmrm128   FMA )]556.8 code0
[2(VFNMSUB123PD     ymmreg,ymmreg,ymmrm256   FMA )]547.2 code0
[2(VFNMSUB231PS     xmmreg,xmmreg,xmmrm128   FMA )]537.6 code0
[2(VFNMSUB231PS     ymmreg,ymmreg,ymmrm256   FMA )]528 code0
[2(VFNMSUB231PD     xmmreg,xmmreg,xmmrm128   FMA )]518.4 code0
[2(VFNMSUB231PD     ymmreg,ymmreg,ymmrm256   FMA )]508.8 code0
[2(VFNMSUB321PS     xmmreg,xmmreg,xmmrm128   FMA )]499.2 code0
[2(VFNMSUB321PS     ymmreg,ymmreg,ymmrm256   FMA )]489.6 code0
[2(VFNMSUB321PD     xmmreg,xmmreg,xmmrm128   FMA )]480 code0
[2(VFNMSUB321PD     ymmreg,ymmreg,ymmrm256   FMA )]470.4 code0
[2(VFMADD132SS      xmmreg,xmmreg,xmmrm32    FMA )]460.8 code0
[2(VFMADD132SD      xmmreg,xmmreg,xmmrm64    FMA )]451.2 code0
[2(VFMADD312SS      xmmreg,xmmreg,xmmrm32    FMA )]441.6 code0
[2(VFMADD312SD      xmmreg,xmmreg,xmmrm64    FMA )]432 code0
[2(VFMADD213SS      xmmreg,xmmreg,xmmrm32    FMA )]422.4 code0
[2(VFMADD213SD      xmmreg,xmmreg,xmmrm64    FMA )]412.8 code0
[2(VFMADD123SS      xmmreg,xmmreg,xmmrm32    FMA )]403.2 code0
[2(VFMADD123SD      xmmreg,xmmreg,xmmrm64    FMA )]393.6 code0
[2(VFMADD231SS      xmmreg,xmmreg,xmmrm32    FMA )]384 code0
[2(VFMADD231SD      xmmreg,xmmreg,xmmrm64    FMA )]374.4 code0
[2(VFMADD321SS      xmmreg,xmmreg,xmmrm32    FMA )]364.8 code0
[2(VFMADD321SD      xmmreg,xmmreg,xmmrm64    FMA )]355.2 code0
[2(VFMSUB132SS      xmmreg,xmmreg,xmmrm32    FMA )]345.6 code0
[2(VFMSUB132SD      xmmreg,xmmreg,xmmrm64    FMA )]336 code0
[2(VFMSUB312SS      xmmreg,xmmreg,xmmrm32    FMA )]326.4 code0
[2(VFMSUB312SD      xmmreg,xmmreg,xmmrm64    FMA )]316.8 code0
[2(VFMSUB213SS      xmmreg,xmmreg,xmmrm32    FMA )]307.2 code0
[2(VFMSUB213SD      xmmreg,xmmreg,xmmrm64    FMA )]297.6 code0
[2(VFMSUB123SS      xmmreg,xmmreg,xmmrm32    FMA )]288 code0
[2(VFMSUB123SD      xmmreg,xmmreg,xmmrm64    FMA )]278.4 code0
[2(VFMSUB231SS      xmmreg,xmmreg,xmmrm32    FMA )]268.8 code0
[2(VFMSUB231SD      xmmreg,xmmreg,xmmrm64    FMA )]259.2 code0
[2(VFMSUB321SS      xmmreg,xmmreg,xmmrm32    FMA )]249.6 code0
[2(VFMSUB321SD      xmmreg,xmmreg,xmmrm64    FMA )]240 code0
[2(VFNMADD132SS     xmmreg,xmmreg,xmmrm32    FMA )]230.4 code0
[2(VFNMADD132SD     xmmreg,xmmreg,xmmrm64    FMA )]220.799999999999 code0
[2(VFNMADD312SS     xmmreg,xmmreg,xmmrm32    FMA )]211.199999999999 code0
[2(VFNMADD312SD     xmmreg,xmmreg,xmmrm64    FMA )]201.599999999999 code0
[2(VFNMADD213SS     xmmreg,xmmreg,xmmrm32    FMA )]191.999999999999 code0
[2(VFNMADD213SD     xmmreg,xmmreg,xmmrm64    FMA )]182.399999999999 code0
[2(VFNMADD123SS     xmmreg,xmmreg,xmmrm32    FMA )]172.799999999999 code0
[2(VFNMADD123SD     xmmreg,xmmreg,xmmrm64    FMA )]163.199999999999 code0
[2(VFNMADD231SS     xmmreg,xmmreg,xmmrm32    FMA )]153.599999999999 code0
[2(VFNMADD231SD     xmmreg,xmmreg,xmmrm64    FMA )]143.999999999999 code0
[2(VFNMADD321SS     xmmreg,xmmreg,xmmrm32    FMA )]134.399999999999 code0
[2(VFNMADD321SD     xmmreg,xmmreg,xmmrm64    FMA )]124.799999999999 code0
[2(VFNMSUB132SS     xmmreg,xmmreg,xmmrm32    FMA )]115.199999999999 code0
[2(VFNMSUB132SD     xmmreg,xmmreg,xmmrm64    FMA )]105.599999999999 code0
[2(VFNMSUB312SS     xmmreg,xmmreg,xmmrm32    FMA )]95.9999999999992 code0
[2(VFNMSUB312SD     xmmreg,xmmreg,xmmrm64    FMA )]86.3999999999992 code0
[2(VFNMSUB213SS     xmmreg,xmmreg,xmmrm32    FMA )]76.7999999999992 code0
(186)pageeven
restore showpage
%%Page: 187 187
%%BeginPageSetup
save
%%EndPageSetup
/187 pa
[2(VFNMSUB213SD     xmmreg,xmmreg,xmmrm64    FMA )]710.4 code0
[2(VFNMSUB123SS     xmmreg,xmmreg,xmmrm32    FMA )]700.8 code0
[2(VFNMSUB123SD     xmmreg,xmmreg,xmmrm64    FMA )]691.2 code0
[2(VFNMSUB231SS     xmmreg,xmmreg,xmmrm32    FMA )]681.6 code0
[2(VFNMSUB231SD     xmmreg,xmmreg,xmmrm64    FMA )]672 code0
[2(VFNMSUB321SS     xmmreg,xmmreg,xmmrm32    FMA )]662.4 code0
[2(VFNMSUB321SD     xmmreg,xmmreg,xmmrm64    FMA)]652.8 code2
[{/section-B.1.30 xa}(Intel post-32 nm processor instructions)](B.1.30)632.4 subh3
[2(RDFSBASE         reg32                    LONG )]616.8 code1
[2(RDFSBASE         reg64                    LONG )]607.2 code0
[2(RDGSBASE         reg32                    LONG )]597.6 code0
[2(RDGSBASE         reg64                    LONG )]588 code0
[2(RDRAND           reg16                     )]578.4 code0
[2(RDRAND           reg32                     )]568.8 code0
[2(RDRAND           reg64                    LONG )]559.2 code0
[2(WRFSBASE         reg32                    LONG )]549.6 code0
[2(WRFSBASE         reg64                    LONG )]540 code0
[2(WRGSBASE         reg32                    LONG )]530.4 code0
[2(WRGSBASE         reg64                    LONG )]520.8 code0
[2(VCVTPH2PS        ymmreg,xmmrm128          AVX )]511.2 code0
[2(VCVTPH2PS        xmmreg,xmmrm64           AVX )]501.6 code0
[2(VCVTPS2PH        xmmrm128,ymmreg,imm8     AVX )]492 code0
[2(VCVTPS2PH        xmmrm64,xmmreg,imm8      AVX )]482.4 code0
[2(ADCX             reg32,rm32                )]472.8 code0
[2(ADCX             reg64,rm64               LONG )]463.2 code0
[2(ADOX             reg32,rm32                )]453.6 code0
[2(ADOX             reg64,rm64               LONG )]444 code0
[2(RDSEED           reg16                     )]434.4 code0
[2(RDSEED           reg32                     )]424.8 code0
[2(RDSEED           reg64                    LONG )]415.2 code0
[2(CLAC                                      PRIV )]405.6 code0
[2(STAC                                      PRIV)]396 code2
[{/section-B.1.31 xa}(VIA \(Centaur\) security instructions)](B.1.31)375.6 subh3
[2(XSTORE                                    PENT,CYRIX )]360 code1
[2(XCRYPTECB                                 PENT,CYRIX )]350.4 code0
[2(XCRYPTCBC                                 PENT,CYRIX )]340.8 code0
[2(XCRYPTCTR                                 PENT,CYRIX )]331.2 code0
[2(XCRYPTCFB                                 PENT,CYRIX )]321.6 code0
[2(XCRYPTOFB                                 PENT,CYRIX )]312 code0
[2(MONTMUL                                   PENT,CYRIX )]302.4 code0
[2(XSHA1                                     PENT,CYRIX )]292.8 code0
[2(XSHA256                                   PENT,CYRIX)]283.2 code2
[{/section-B.1.32 xa}(AMD Lightweight Profiling \(LWP\) instructions)](B.1.32)262.8 subh3
[2(LLWPCB           reg32                    AMD,386 )]247.2 code1
[2(LLWPCB           reg64                    AMD,X86_64,LONG )]237.6 code0
[2(SLWPCB           reg32                    AMD,386 )]228 code0
[2(SLWPCB           reg64                    AMD,X86_64,LONG )]218.4 code0
[2(LWPVAL           reg32,rm32,imm32         AMD,386 )]208.8 code0
[2(LWPVAL           reg64,rm32,imm32         AMD,X86_64,LONG )]199.2 code0
[2(LWPINS           reg32,rm32,imm32         AMD,386 )]189.6 code0
[2(LWPINS           reg64,rm32,imm32         AMD,X86_64,LONG)]180 code2
[{/section-B.1.33 xa}(AMD XOP and FMA4 instructions \(SSE5\))](B.1.33)159.6 subh3
[2(VFMADDPD         xmmreg,xmmreg*,xmmrm128,xmmreg AMD,SSE5 )]144 code1
[2(VFMADDPD         ymmreg,ymmreg*,ymmrm256,ymmreg AMD,SSE5 )]134.4 code0
[2(VFMADDPD         xmmreg,xmmreg*,xmmreg,xmmrm128 AMD,SSE5 )]124.8 code0
[2(VFMADDPD         ymmreg,ymmreg*,ymmreg,ymmrm256 AMD,SSE5 )]115.2 code0
[2(VFMADDPS         xmmreg,xmmreg*,xmmrm128,xmmreg AMD,SSE5 )]105.6 code0
[2(VFMADDPS         ymmreg,ymmreg*,ymmrm256,ymmreg AMD,SSE5 )]95.9999999999995 code0
[2(VFMADDPS         xmmreg,xmmreg*,xmmreg,xmmrm128 AMD,SSE5 )]86.3999999999995 code0
[2(VFMADDPS         ymmreg,ymmreg*,ymmreg,ymmrm256 AMD,SSE5 )]76.7999999999995 code0
(187)pageodd
restore showpage
%%Page: 188 188
%%BeginPageSetup
save
%%EndPageSetup
/188 pa
[2(VFMADDSD         xmmreg,xmmreg*,xmmrm64,xmmreg AMD,SSE5 )]710.4 code0
[2(VFMADDSD         xmmreg,xmmreg*,xmmreg,xmmrm64 AMD,SSE5 )]700.8 code0
[2(VFMADDSS         xmmreg,xmmreg*,xmmrm32,xmmreg AMD,SSE5 )]691.2 code0
[2(VFMADDSS         xmmreg,xmmreg*,xmmreg,xmmrm32 AMD,SSE5 )]681.6 code0
[2(VFMADDSUBPD      xmmreg,xmmreg*,xmmrm128,xmmreg AMD,SSE5 )]672 code0
[2(VFMADDSUBPD      ymmreg,ymmreg*,ymmrm256,ymmreg AMD,SSE5 )]662.4 code0
[2(VFMADDSUBPD      xmmreg,xmmreg*,xmmreg,xmmrm128 AMD,SSE5 )]652.8 code0
[2(VFMADDSUBPD      ymmreg,ymmreg*,ymmreg,ymmrm256 AMD,SSE5 )]643.2 code0
[2(VFMADDSUBPS      xmmreg,xmmreg*,xmmrm128,xmmreg AMD,SSE5 )]633.6 code0
[2(VFMADDSUBPS      ymmreg,ymmreg*,ymmrm256,ymmreg AMD,SSE5 )]624 code0
[2(VFMADDSUBPS      xmmreg,xmmreg*,xmmreg,xmmrm128 AMD,SSE5 )]614.4 code0
[2(VFMADDSUBPS      ymmreg,ymmreg*,ymmreg,ymmrm256 AMD,SSE5 )]604.8 code0
[2(VFMSUBADDPD      xmmreg,xmmreg*,xmmrm128,xmmreg AMD,SSE5 )]595.2 code0
[2(VFMSUBADDPD      ymmreg,ymmreg*,ymmrm256,ymmreg AMD,SSE5 )]585.6 code0
[2(VFMSUBADDPD      xmmreg,xmmreg*,xmmreg,xmmrm128 AMD,SSE5 )]576 code0
[2(VFMSUBADDPD      ymmreg,ymmreg*,ymmreg,ymmrm256 AMD,SSE5 )]566.4 code0
[2(VFMSUBADDPS      xmmreg,xmmreg*,xmmrm128,xmmreg AMD,SSE5 )]556.8 code0
[2(VFMSUBADDPS      ymmreg,ymmreg*,ymmrm256,ymmreg AMD,SSE5 )]547.2 code0
[2(VFMSUBADDPS      xmmreg,xmmreg*,xmmreg,xmmrm128 AMD,SSE5 )]537.6 code0
[2(VFMSUBADDPS      ymmreg,ymmreg*,ymmreg,ymmrm256 AMD,SSE5 )]528 code0
[2(VFMSUBPD         xmmreg,xmmreg*,xmmrm128,xmmreg AMD,SSE5 )]518.4 code0
[2(VFMSUBPD         ymmreg,ymmreg*,ymmrm256,ymmreg AMD,SSE5 )]508.8 code0
[2(VFMSUBPD         xmmreg,xmmreg*,xmmreg,xmmrm128 AMD,SSE5 )]499.2 code0
[2(VFMSUBPD         ymmreg,ymmreg*,ymmreg,ymmrm256 AMD,SSE5 )]489.6 code0
[2(VFMSUBPS         xmmreg,xmmreg*,xmmrm128,xmmreg AMD,SSE5 )]480 code0
[2(VFMSUBPS         ymmreg,ymmreg*,ymmrm256,ymmreg AMD,SSE5 )]470.4 code0
[2(VFMSUBPS         xmmreg,xmmreg*,xmmreg,xmmrm128 AMD,SSE5 )]460.8 code0
[2(VFMSUBPS         ymmreg,ymmreg*,ymmreg,ymmrm256 AMD,SSE5 )]451.2 code0
[2(VFMSUBSD         xmmreg,xmmreg*,xmmrm64,xmmreg AMD,SSE5 )]441.6 code0
[2(VFMSUBSD         xmmreg,xmmreg*,xmmreg,xmmrm64 AMD,SSE5 )]432 code0
[2(VFMSUBSS         xmmreg,xmmreg*,xmmrm32,xmmreg AMD,SSE5 )]422.4 code0
[2(VFMSUBSS         xmmreg,xmmreg*,xmmreg,xmmrm32 AMD,SSE5 )]412.8 code0
[2(VFNMADDPD        xmmreg,xmmreg*,xmmrm128,xmmreg AMD,SSE5 )]403.2 code0
[2(VFNMADDPD        ymmreg,ymmreg*,ymmrm256,ymmreg AMD,SSE5 )]393.6 code0
[2(VFNMADDPD        xmmreg,xmmreg*,xmmreg,xmmrm128 AMD,SSE5 )]384 code0
[2(VFNMADDPD        ymmreg,ymmreg*,ymmreg,ymmrm256 AMD,SSE5 )]374.4 code0
[2(VFNMADDPS        xmmreg,xmmreg*,xmmrm128,xmmreg AMD,SSE5 )]364.8 code0
[2(VFNMADDPS        ymmreg,ymmreg*,ymmrm256,ymmreg AMD,SSE5 )]355.2 code0
[2(VFNMADDPS        xmmreg,xmmreg*,xmmreg,xmmrm128 AMD,SSE5 )]345.6 code0
[2(VFNMADDPS        ymmreg,ymmreg*,ymmreg,ymmrm256 AMD,SSE5 )]336 code0
[2(VFNMADDSD        xmmreg,xmmreg*,xmmrm64,xmmreg AMD,SSE5 )]326.4 code0
[2(VFNMADDSD        xmmreg,xmmreg*,xmmreg,xmmrm64 AMD,SSE5 )]316.8 code0
[2(VFNMADDSS        xmmreg,xmmreg*,xmmrm32,xmmreg AMD,SSE5 )]307.2 code0
[2(VFNMADDSS        xmmreg,xmmreg*,xmmreg,xmmrm32 AMD,SSE5 )]297.6 code0
[2(VFNMSUBPD        xmmreg,xmmreg*,xmmrm128,xmmreg AMD,SSE5 )]288 code0
[2(VFNMSUBPD        ymmreg,ymmreg*,ymmrm256,ymmreg AMD,SSE5 )]278.4 code0
[2(VFNMSUBPD        xmmreg,xmmreg*,xmmreg,xmmrm128 AMD,SSE5 )]268.8 code0
[2(VFNMSUBPD        ymmreg,ymmreg*,ymmreg,ymmrm256 AMD,SSE5 )]259.2 code0
[2(VFNMSUBPS        xmmreg,xmmreg*,xmmrm128,xmmreg AMD,SSE5 )]249.6 code0
[2(VFNMSUBPS        ymmreg,ymmreg*,ymmrm256,ymmreg AMD,SSE5 )]240 code0
[2(VFNMSUBPS        xmmreg,xmmreg*,xmmreg,xmmrm128 AMD,SSE5 )]230.4 code0
[2(VFNMSUBPS        ymmreg,ymmreg*,ymmreg,ymmrm256 AMD,SSE5 )]220.799999999999 code0
[2(VFNMSUBSD        xmmreg,xmmreg*,xmmrm64,xmmreg AMD,SSE5 )]211.199999999999 code0
[2(VFNMSUBSD        xmmreg,xmmreg*,xmmreg,xmmrm64 AMD,SSE5 )]201.599999999999 code0
[2(VFNMSUBSS        xmmreg,xmmreg*,xmmrm32,xmmreg AMD,SSE5 )]191.999999999999 code0
[2(VFNMSUBSS        xmmreg,xmmreg*,xmmreg,xmmrm32 AMD,SSE5 )]182.399999999999 code0
[2(VFRCZPD          xmmreg,xmmrm128*         AMD,SSE5 )]172.799999999999 code0
[2(VFRCZPD          ymmreg,ymmrm256*         AMD,SSE5 )]163.199999999999 code0
[2(VFRCZPS          xmmreg,xmmrm128*         AMD,SSE5 )]153.599999999999 code0
[2(VFRCZPS          ymmreg,ymmrm256*         AMD,SSE5 )]143.999999999999 code0
[2(VFRCZSD          xmmreg,xmmrm64*          AMD,SSE5 )]134.399999999999 code0
[2(VFRCZSS          xmmreg,xmmrm32*          AMD,SSE5 )]124.799999999999 code0
[2(VPCMOV           xmmreg,xmmreg*,xmmrm128,xmmreg AMD,SSE5 )]115.199999999999 code0
[2(VPCMOV           ymmreg,ymmreg*,ymmrm256,ymmreg AMD,SSE5 )]105.599999999999 code0
[2(VPCMOV           xmmreg,xmmreg*,xmmreg,xmmrm128 AMD,SSE5 )]95.9999999999992 code0
[2(VPCMOV           ymmreg,ymmreg*,ymmreg,ymmrm256 AMD,SSE5 )]86.3999999999992 code0
[2(VPCOMB           xmmreg,xmmreg*,xmmrm128,imm8 AMD,SSE5 )]76.7999999999992 code0
(188)pageeven
restore showpage
%%Page: 189 189
%%BeginPageSetup
save
%%EndPageSetup
/189 pa
[2(VPCOMD           xmmreg,xmmreg*,xmmrm128,imm8 AMD,SSE5 )]710.4 code0
[2(VPCOMQ           xmmreg,xmmreg*,xmmrm128,imm8 AMD,SSE5 )]700.8 code0
[2(VPCOMUB          xmmreg,xmmreg*,xmmrm128,imm8 AMD,SSE5 )]691.2 code0
[2(VPCOMUD          xmmreg,xmmreg*,xmmrm128,imm8 AMD,SSE5 )]681.6 code0
[2(VPCOMUQ          xmmreg,xmmreg*,xmmrm128,imm8 AMD,SSE5 )]672 code0
[2(VPCOMUW          xmmreg,xmmreg*,xmmrm128,imm8 AMD,SSE5 )]662.4 code0
[2(VPCOMW           xmmreg,xmmreg*,xmmrm128,imm8 AMD,SSE5 )]652.8 code0
[2(VPHADDBD         xmmreg,xmmrm128*         AMD,SSE5 )]643.2 code0
[2(VPHADDBQ         xmmreg,xmmrm128*         AMD,SSE5 )]633.6 code0
[2(VPHADDBW         xmmreg,xmmrm128*         AMD,SSE5 )]624 code0
[2(VPHADDDQ         xmmreg,xmmrm128*         AMD,SSE5 )]614.4 code0
[2(VPHADDUBD        xmmreg,xmmrm128*         AMD,SSE5 )]604.8 code0
[2(VPHADDUBQ        xmmreg,xmmrm128*         AMD,SSE5 )]595.2 code0
[2(VPHADDUBW        xmmreg,xmmrm128*         AMD,SSE5 )]585.6 code0
[2(VPHADDUDQ        xmmreg,xmmrm128*         AMD,SSE5 )]576 code0
[2(VPHADDUWD        xmmreg,xmmrm128*         AMD,SSE5 )]566.4 code0
[2(VPHADDUWQ        xmmreg,xmmrm128*         AMD,SSE5 )]556.8 code0
[2(VPHADDWD         xmmreg,xmmrm128*         AMD,SSE5 )]547.2 code0
[2(VPHADDWQ         xmmreg,xmmrm128*         AMD,SSE5 )]537.6 code0
[2(VPHSUBBW         xmmreg,xmmrm128*         AMD,SSE5 )]528 code0
[2(VPHSUBDQ         xmmreg,xmmrm128*         AMD,SSE5 )]518.4 code0
[2(VPHSUBWD         xmmreg,xmmrm128*         AMD,SSE5 )]508.8 code0
[2(VPMACSDD         xmmreg,xmmreg*,xmmrm128,xmmreg AMD,SSE5 )]499.2 code0
[2(VPMACSDQH        xmmreg,xmmreg*,xmmrm128,xmmreg AMD,SSE5 )]489.6 code0
[2(VPMACSDQL        xmmreg,xmmreg*,xmmrm128,xmmreg AMD,SSE5 )]480 code0
[2(VPMACSSDD        xmmreg,xmmreg*,xmmrm128,xmmreg AMD,SSE5 )]470.4 code0
[2(VPMACSSDQH       xmmreg,xmmreg*,xmmrm128,xmmreg AMD,SSE5 )]460.8 code0
[2(VPMACSSDQL       xmmreg,xmmreg*,xmmrm128,xmmreg AMD,SSE5 )]451.2 code0
[2(VPMACSSWD        xmmreg,xmmreg*,xmmrm128,xmmreg AMD,SSE5 )]441.6 code0
[2(VPMACSSWW        xmmreg,xmmreg*,xmmrm128,xmmreg AMD,SSE5 )]432 code0
[2(VPMACSWD         xmmreg,xmmreg*,xmmrm128,xmmreg AMD,SSE5 )]422.4 code0
[2(VPMACSWW         xmmreg,xmmreg*,xmmrm128,xmmreg AMD,SSE5 )]412.8 code0
[2(VPMADCSSWD       xmmreg,xmmreg*,xmmrm128,xmmreg AMD,SSE5 )]403.2 code0
[2(VPMADCSWD        xmmreg,xmmreg*,xmmrm128,xmmreg AMD,SSE5 )]393.6 code0
[2(VPPERM           xmmreg,xmmreg*,xmmreg,xmmrm128 AMD,SSE5 )]384 code0
[2(VPPERM           xmmreg,xmmreg*,xmmrm128,xmmreg AMD,SSE5 )]374.4 code0
[2(VPROTB           xmmreg,xmmrm128*,xmmreg  AMD,SSE5 )]364.8 code0
[2(VPROTB           xmmreg,xmmreg*,xmmrm128  AMD,SSE5 )]355.2 code0
[2(VPROTB           xmmreg,xmmrm128*,imm8    AMD,SSE5 )]345.6 code0
[2(VPROTD           xmmreg,xmmrm128*,xmmreg  AMD,SSE5 )]336 code0
[2(VPROTD           xmmreg,xmmreg*,xmmrm128  AMD,SSE5 )]326.4 code0
[2(VPROTD           xmmreg,xmmrm128*,imm8    AMD,SSE5 )]316.8 code0
[2(VPROTQ           xmmreg,xmmrm128*,xmmreg  AMD,SSE5 )]307.2 code0
[2(VPROTQ           xmmreg,xmmreg*,xmmrm128  AMD,SSE5 )]297.6 code0
[2(VPROTQ           xmmreg,xmmrm128*,imm8    AMD,SSE5 )]288 code0
[2(VPROTW           xmmreg,xmmrm128*,xmmreg  AMD,SSE5 )]278.4 code0
[2(VPROTW           xmmreg,xmmreg*,xmmrm128  AMD,SSE5 )]268.8 code0
[2(VPROTW           xmmreg,xmmrm128*,imm8    AMD,SSE5 )]259.2 code0
[2(VPSHAB           xmmreg,xmmrm128*,xmmreg  AMD,SSE5 )]249.6 code0
[2(VPSHAB           xmmreg,xmmreg*,xmmrm128  AMD,SSE5 )]240 code0
[2(VPSHAD           xmmreg,xmmrm128*,xmmreg  AMD,SSE5 )]230.4 code0
[2(VPSHAD           xmmreg,xmmreg*,xmmrm128  AMD,SSE5 )]220.799999999999 code0
[2(VPSHAQ           xmmreg,xmmrm128*,xmmreg  AMD,SSE5 )]211.199999999999 code0
[2(VPSHAQ           xmmreg,xmmreg*,xmmrm128  AMD,SSE5 )]201.599999999999 code0
[2(VPSHAW           xmmreg,xmmrm128*,xmmreg  AMD,SSE5 )]191.999999999999 code0
[2(VPSHAW           xmmreg,xmmreg*,xmmrm128  AMD,SSE5 )]182.399999999999 code0
[2(VPSHLB           xmmreg,xmmrm128*,xmmreg  AMD,SSE5 )]172.799999999999 code0
[2(VPSHLB           xmmreg,xmmreg*,xmmrm128  AMD,SSE5 )]163.199999999999 code0
[2(VPSHLD           xmmreg,xmmrm128*,xmmreg  AMD,SSE5 )]153.599999999999 code0
[2(VPSHLD           xmmreg,xmmreg*,xmmrm128  AMD,SSE5 )]143.999999999999 code0
[2(VPSHLQ           xmmreg,xmmrm128*,xmmreg  AMD,SSE5 )]134.399999999999 code0
[2(VPSHLQ           xmmreg,xmmreg*,xmmrm128  AMD,SSE5 )]124.799999999999 code0
[2(VPSHLW           xmmreg,xmmrm128*,xmmreg  AMD,SSE5 )]115.199999999999 code0
[2(VPSHLW           xmmreg,xmmreg*,xmmrm128  AMD,SSE5)]105.599999999999 code2
(189)pageodd
restore showpage
%%Page: 190 190
%%BeginPageSetup
save
%%EndPageSetup
/190 pa
[{/section-B.1.34 xa}(Intel AVX2 instructions)](B.1.34)705.6 subh3
[2(VMPSADBW         ymmreg,ymmreg*,ymmrm256,imm8 AVX2 )]690 code1
[2(VPABSB           ymmreg,ymmrm256          AVX2 )]680.4 code0
[2(VPABSW           ymmreg,ymmrm256          AVX2 )]670.8 code0
[2(VPABSD           ymmreg,ymmrm256          AVX2 )]661.2 code0
[2(VPACKSSWB        ymmreg,ymmreg*,ymmrm256  AVX2 )]651.6 code0
[2(VPACKSSDW        ymmreg,ymmreg*,ymmrm256  AVX2 )]642 code0
[2(VPACKUSDW        ymmreg,ymmreg*,ymmrm256  AVX2 )]632.4 code0
[2(VPACKUSWB        ymmreg,ymmreg*,ymmrm256  AVX2 )]622.8 code0
[2(VPADDB           ymmreg,ymmreg*,ymmrm256  AVX2 )]613.2 code0
[2(VPADDW           ymmreg,ymmreg*,ymmrm256  AVX2 )]603.6 code0
[2(VPADDD           ymmreg,ymmreg*,ymmrm256  AVX2 )]594 code0
[2(VPADDQ           ymmreg,ymmreg*,ymmrm256  AVX2 )]584.4 code0
[2(VPADDSB          ymmreg,ymmreg*,ymmrm256  AVX2 )]574.8 code0
[2(VPADDSW          ymmreg,ymmreg*,ymmrm256  AVX2 )]565.2 code0
[2(VPADDUSB         ymmreg,ymmreg*,ymmrm256  AVX2 )]555.6 code0
[2(VPADDUSW         ymmreg,ymmreg*,ymmrm256  AVX2 )]546 code0
[2(VPALIGNR         ymmreg,ymmreg*,ymmrm256,imm8 AVX2 )]536.4 code0
[2(VPAND            ymmreg,ymmreg*,ymmrm256  AVX2 )]526.8 code0
[2(VPANDN           ymmreg,ymmreg*,ymmrm256  AVX2 )]517.2 code0
[2(VPAVGB           ymmreg,ymmreg*,ymmrm256  AVX2 )]507.6 code0
[2(VPAVGW           ymmreg,ymmreg*,ymmrm256  AVX2 )]498 code0
[2(VPBLENDVB        ymmreg,ymmreg*,ymmrm256,ymmreg AVX2 )]488.4 code0
[2(VPBLENDW         ymmreg,ymmreg*,ymmrm256,imm8 AVX2 )]478.8 code0
[2(VPCMPEQB         ymmreg,ymmreg*,ymmrm256  AVX2 )]469.2 code0
[2(VPCMPEQW         ymmreg,ymmreg*,ymmrm256  AVX2 )]459.6 code0
[2(VPCMPEQD         ymmreg,ymmreg*,ymmrm256  AVX2 )]450 code0
[2(VPCMPEQQ         ymmreg,ymmreg*,ymmrm256  AVX2 )]440.4 code0
[2(VPCMPGTB         ymmreg,ymmreg*,ymmrm256  AVX2 )]430.8 code0
[2(VPCMPGTW         ymmreg,ymmreg*,ymmrm256  AVX2 )]421.2 code0
[2(VPCMPGTD         ymmreg,ymmreg*,ymmrm256  AVX2 )]411.6 code0
[2(VPCMPGTQ         ymmreg,ymmreg*,ymmrm256  AVX2 )]402 code0
[2(VPHADDW          ymmreg,ymmreg*,ymmrm256  AVX2 )]392.4 code0
[2(VPHADDD          ymmreg,ymmreg*,ymmrm256  AVX2 )]382.8 code0
[2(VPHADDSW         ymmreg,ymmreg*,ymmrm256  AVX2 )]373.2 code0
[2(VPHSUBW          ymmreg,ymmreg*,ymmrm256  AVX2 )]363.6 code0
[2(VPHSUBD          ymmreg,ymmreg*,ymmrm256  AVX2 )]354 code0
[2(VPHSUBSW         ymmreg,ymmreg*,ymmrm256  AVX2 )]344.4 code0
[2(VPMADDUBSW       ymmreg,ymmreg*,ymmrm256  AVX2 )]334.8 code0
[2(VPMADDWD         ymmreg,ymmreg*,ymmrm256  AVX2 )]325.2 code0
[2(VPMAXSB          ymmreg,ymmreg*,ymmrm256  AVX2 )]315.6 code0
[2(VPMAXSW          ymmreg,ymmreg*,ymmrm256  AVX2 )]306 code0
[2(VPMAXSD          ymmreg,ymmreg*,ymmrm256  AVX2 )]296.4 code0
[2(VPMAXUB          ymmreg,ymmreg*,ymmrm256  AVX2 )]286.8 code0
[2(VPMAXUW          ymmreg,ymmreg*,ymmrm256  AVX2 )]277.2 code0
[2(VPMAXUD          ymmreg,ymmreg*,ymmrm256  AVX2 )]267.6 code0
[2(VPMINSB          ymmreg,ymmreg*,ymmrm256  AVX2 )]258 code0
[2(VPMINSW          ymmreg,ymmreg*,ymmrm256  AVX2 )]248.4 code0
[2(VPMINSD          ymmreg,ymmreg*,ymmrm256  AVX2 )]238.8 code0
[2(VPMINUB          ymmreg,ymmreg*,ymmrm256  AVX2 )]229.2 code0
[2(VPMINUW          ymmreg,ymmreg*,ymmrm256  AVX2 )]219.6 code0
[2(VPMINUD          ymmreg,ymmreg*,ymmrm256  AVX2 )]209.999999999999 code0
[2(VPMOVMSKB        reg32,ymmreg             AVX2 )]200.4 code0
[2(VPMOVMSKB        reg64,ymmreg             AVX2 )]190.799999999999 code0
[2(VPMOVSXBW        ymmreg,xmmrm128          AVX2 )]181.199999999999 code0
[2(VPMOVSXBD        ymmreg,mem64             AVX2 )]171.599999999999 code0
[2(VPMOVSXBD        ymmreg,xmmreg            AVX2 )]161.999999999999 code0
[2(VPMOVSXBQ        ymmreg,mem32             AVX2 )]152.399999999999 code0
[2(VPMOVSXBQ        ymmreg,xmmreg            AVX2 )]142.799999999999 code0
[2(VPMOVSXWD        ymmreg,xmmrm128          AVX2 )]133.199999999999 code0
[2(VPMOVSXWQ        ymmreg,mem64             AVX2 )]123.599999999999 code0
[2(VPMOVSXWQ        ymmreg,xmmreg            AVX2 )]113.999999999999 code0
[2(VPMOVSXDQ        ymmreg,xmmrm128          AVX2 )]104.399999999999 code0
[2(VPMOVZXBW        ymmreg,xmmrm128          AVX2 )]94.7999999999993 code0
[2(VPMOVZXBD        ymmreg,mem64             AVX2 )]85.1999999999992 code0
[2(VPMOVZXBD        ymmreg,xmmreg            AVX2 )]75.5999999999992 code0
(190)pageeven
restore showpage
%%Page: 191 191
%%BeginPageSetup
save
%%EndPageSetup
/191 pa
[2(VPMOVZXBQ        ymmreg,mem32             AVX2 )]710.4 code0
[2(VPMOVZXBQ        ymmreg,xmmreg            AVX2 )]700.8 code0
[2(VPMOVZXWD        ymmreg,xmmrm128          AVX2 )]691.2 code0
[2(VPMOVZXWQ        ymmreg,mem64             AVX2 )]681.6 code0
[2(VPMOVZXWQ        ymmreg,xmmreg            AVX2 )]672 code0
[2(VPMOVZXDQ        ymmreg,xmmrm128          AVX2 )]662.4 code0
[2(VPMULDQ          ymmreg,ymmreg*,ymmrm256  AVX2 )]652.8 code0
[2(VPMULHRSW        ymmreg,ymmreg*,ymmrm256  AVX2 )]643.2 code0
[2(VPMULHUW         ymmreg,ymmreg*,ymmrm256  AVX2 )]633.6 code0
[2(VPMULHW          ymmreg,ymmreg*,ymmrm256  AVX2 )]624 code0
[2(VPMULLW          ymmreg,ymmreg*,ymmrm256  AVX2 )]614.4 code0
[2(VPMULLD          ymmreg,ymmreg*,ymmrm256  AVX2 )]604.8 code0
[2(VPMULUDQ         ymmreg,ymmreg*,ymmrm256  AVX2 )]595.2 code0
[2(VPOR             ymmreg,ymmreg*,ymmrm256  AVX2 )]585.6 code0
[2(VPSADBW          ymmreg,ymmreg*,ymmrm256  AVX2 )]576 code0
[2(VPSHUFB          ymmreg,ymmreg*,ymmrm256  AVX2 )]566.4 code0
[2(VPSHUFD          ymmreg,ymmrm256,imm8     AVX2 )]556.8 code0
[2(VPSHUFHW         ymmreg,ymmrm256,imm8     AVX2 )]547.2 code0
[2(VPSHUFLW         ymmreg,ymmrm256,imm8     AVX2 )]537.6 code0
[2(VPSIGNB          ymmreg,ymmreg*,ymmrm256  AVX2 )]528 code0
[2(VPSIGNW          ymmreg,ymmreg*,ymmrm256  AVX2 )]518.4 code0
[2(VPSIGND          ymmreg,ymmreg*,ymmrm256  AVX2 )]508.8 code0
[2(VPSLLDQ          ymmreg,ymmreg*,imm8      AVX2 )]499.2 code0
[2(VPSLLW           ymmreg,ymmreg*,xmmrm128  AVX2 )]489.6 code0
[2(VPSLLW           ymmreg,ymmreg*,imm8      AVX2 )]480 code0
[2(VPSLLD           ymmreg,ymmreg*,xmmrm128  AVX2 )]470.4 code0
[2(VPSLLD           ymmreg,ymmreg*,imm8      AVX2 )]460.8 code0
[2(VPSLLQ           ymmreg,ymmreg*,xmmrm128  AVX2 )]451.2 code0
[2(VPSLLQ           ymmreg,ymmreg*,imm8      AVX2 )]441.6 code0
[2(VPSRAW           ymmreg,ymmreg*,xmmrm128  AVX2 )]432 code0
[2(VPSRAW           ymmreg,ymmreg*,imm8      AVX2 )]422.4 code0
[2(VPSRAD           ymmreg,ymmreg*,xmmrm128  AVX2 )]412.8 code0
[2(VPSRAD           ymmreg,ymmreg*,imm8      AVX2 )]403.2 code0
[2(VPSRLDQ          ymmreg,ymmreg*,imm8      AVX2 )]393.6 code0
[2(VPSRLW           ymmreg,ymmreg*,xmmrm128  AVX2 )]384 code0
[2(VPSRLW           ymmreg,ymmreg*,imm8      AVX2 )]374.4 code0
[2(VPSRLD           ymmreg,ymmreg*,xmmrm128  AVX2 )]364.8 code0
[2(VPSRLD           ymmreg,ymmreg*,imm8      AVX2 )]355.2 code0
[2(VPSRLQ           ymmreg,ymmreg*,xmmrm128  AVX2 )]345.6 code0
[2(VPSRLQ           ymmreg,ymmreg*,imm8      AVX2 )]336 code0
[2(VPSUBB           ymmreg,ymmreg*,ymmrm256  AVX2 )]326.4 code0
[2(VPSUBW           ymmreg,ymmreg*,ymmrm256  AVX2 )]316.8 code0
[2(VPSUBD           ymmreg,ymmreg*,ymmrm256  AVX2 )]307.2 code0
[2(VPSUBQ           ymmreg,ymmreg*,ymmrm256  AVX2 )]297.6 code0
[2(VPSUBSB          ymmreg,ymmreg*,ymmrm256  AVX2 )]288 code0
[2(VPSUBSW          ymmreg,ymmreg*,ymmrm256  AVX2 )]278.4 code0
[2(VPSUBUSB         ymmreg,ymmreg*,ymmrm256  AVX2 )]268.8 code0
[2(VPSUBUSW         ymmreg,ymmreg*,ymmrm256  AVX2 )]259.2 code0
[2(VPUNPCKHBW       ymmreg,ymmreg*,ymmrm256  AVX2 )]249.6 code0
[2(VPUNPCKHWD       ymmreg,ymmreg*,ymmrm256  AVX2 )]240 code0
[2(VPUNPCKHDQ       ymmreg,ymmreg*,ymmrm256  AVX2 )]230.4 code0
[2(VPUNPCKHQDQ      ymmreg,ymmreg*,ymmrm256  AVX2 )]220.799999999999 code0
[2(VPUNPCKLBW       ymmreg,ymmreg*,ymmrm256  AVX2 )]211.199999999999 code0
[2(VPUNPCKLWD       ymmreg,ymmreg*,ymmrm256  AVX2 )]201.599999999999 code0
[2(VPUNPCKLDQ       ymmreg,ymmreg*,ymmrm256  AVX2 )]191.999999999999 code0
[2(VPUNPCKLQDQ      ymmreg,ymmreg*,ymmrm256  AVX2 )]182.399999999999 code0
[2(VPXOR            ymmreg,ymmreg*,ymmrm256  AVX2 )]172.799999999999 code0
[2(VMOVNTDQA        ymmreg,mem256            AVX2 )]163.199999999999 code0
[2(VBROADCASTSS     xmmreg,xmmreg            AVX2 )]153.599999999999 code0
[2(VBROADCASTSS     ymmreg,xmmreg            AVX2 )]143.999999999999 code0
[2(VBROADCASTSD     ymmreg,xmmreg            AVX2 )]134.399999999999 code0
[2(VBROADCASTI128   ymmreg,mem128            AVX2 )]124.799999999999 code0
[2(VPBLENDD         xmmreg,xmmreg*,xmmrm128,imm8 AVX2 )]115.199999999999 code0
[2(VPBLENDD         ymmreg,ymmreg*,ymmrm256,imm8 AVX2 )]105.599999999999 code0
[2(VPBROADCASTB     xmmreg,mem8              AVX2 )]95.9999999999992 code0
[2(VPBROADCASTB     xmmreg,xmmreg            AVX2 )]86.3999999999992 code0
[2(VPBROADCASTB     ymmreg,mem8              AVX2 )]76.7999999999992 code0
(191)pageodd
restore showpage
%%Page: 192 192
%%BeginPageSetup
save
%%EndPageSetup
/192 pa
[2(VPBROADCASTB     ymmreg,xmmreg            AVX2 )]710.4 code0
[2(VPBROADCASTW     xmmreg,mem16             AVX2 )]700.8 code0
[2(VPBROADCASTW     xmmreg,xmmreg            AVX2 )]691.2 code0
[2(VPBROADCASTW     ymmreg,mem16             AVX2 )]681.6 code0
[2(VPBROADCASTW     ymmreg,xmmreg            AVX2 )]672 code0
[2(VPBROADCASTD     xmmreg,mem32             AVX2 )]662.4 code0
[2(VPBROADCASTD     xmmreg,xmmreg            AVX2 )]652.8 code0
[2(VPBROADCASTD     ymmreg,mem32             AVX2 )]643.2 code0
[2(VPBROADCASTD     ymmreg,xmmreg            AVX2 )]633.6 code0
[2(VPBROADCASTQ     xmmreg,mem64             AVX2 )]624 code0
[2(VPBROADCASTQ     xmmreg,xmmreg            AVX2 )]614.4 code0
[2(VPBROADCASTQ     ymmreg,mem64             AVX2 )]604.8 code0
[2(VPBROADCASTQ     ymmreg,xmmreg            AVX2 )]595.2 code0
[2(VPERMD           ymmreg,ymmreg*,ymmrm256  AVX2 )]585.6 code0
[2(VPERMPD          ymmreg,ymmrm256,imm8     AVX2 )]576 code0
[2(VPERMPS          ymmreg,ymmreg*,ymmrm256  AVX2 )]566.4 code0
[2(VPERMQ           ymmreg,ymmrm256,imm8     AVX2 )]556.8 code0
[2(VPERM2I128       ymmreg,ymmreg*,ymmrm256,imm8 AVX2 )]547.2 code0
[2(VEXTRACTI128     xmmrm128,ymmreg,imm8     AVX2 )]537.6 code0
[2(VINSERTI128      ymmreg,ymmreg*,xmmrm128,imm8 AVX2 )]528 code0
[2(VPMASKMOVD       xmmreg,xmmreg*,mem128    AVX2 )]518.4 code0
[2(VPMASKMOVD       ymmreg,ymmreg*,mem256    AVX2 )]508.8 code0
[2(VPMASKMOVQ       xmmreg,xmmreg*,mem128    AVX2 )]499.2 code0
[2(VPMASKMOVQ       ymmreg,ymmreg*,mem256    AVX2 )]489.6 code0
[2(VPMASKMOVD       mem128,xmmreg*,xmmreg    AVX2 )]480 code0
[2(VPMASKMOVD       mem256,ymmreg*,ymmreg    AVX2 )]470.4 code0
[2(VPMASKMOVQ       mem128,xmmreg*,xmmreg    AVX2 )]460.8 code0
[2(VPMASKMOVQ       mem256,ymmreg*,ymmreg    AVX2 )]451.2 code0
[2(VPSLLVD          xmmreg,xmmreg*,xmmrm128  AVX2 )]441.6 code0
[2(VPSLLVQ          xmmreg,xmmreg*,xmmrm128  AVX2 )]432 code0
[2(VPSLLVD          ymmreg,ymmreg*,ymmrm256  AVX2 )]422.4 code0
[2(VPSLLVQ          ymmreg,ymmreg*,ymmrm256  AVX2 )]412.8 code0
[2(VPSRAVD          xmmreg,xmmreg*,xmmrm128  AVX2 )]403.2 code0
[2(VPSRAVD          ymmreg,ymmreg*,ymmrm256  AVX2 )]393.6 code0
[2(VPSRLVD          xmmreg,xmmreg*,xmmrm128  AVX2 )]384 code0
[2(VPSRLVQ          xmmreg,xmmreg*,xmmrm128  AVX2 )]374.4 code0
[2(VPSRLVD          ymmreg,ymmreg*,ymmrm256  AVX2 )]364.8 code0
[2(VPSRLVQ          ymmreg,ymmreg*,ymmrm256  AVX2 )]355.2 code0
[2(VGATHERDPD       xmmreg,xmem64,xmmreg     AVX2 )]345.6 code0
[2(VGATHERQPD       xmmreg,xmem64,xmmreg     AVX2 )]336 code0
[2(VGATHERDPD       ymmreg,xmem64,ymmreg     AVX2 )]326.4 code0
[2(VGATHERQPD       ymmreg,ymem64,ymmreg     AVX2 )]316.8 code0
[2(VGATHERDPS       xmmreg,xmem32,xmmreg     AVX2 )]307.2 code0
[2(VGATHERQPS       xmmreg,xmem32,xmmreg     AVX2 )]297.6 code0
[2(VGATHERDPS       ymmreg,ymem32,ymmreg     AVX2 )]288 code0
[2(VGATHERQPS       xmmreg,ymem32,xmmreg     AVX2 )]278.4 code0
[2(VPGATHERDD       xmmreg,xmem32,xmmreg     AVX2 )]268.8 code0
[2(VPGATHERQD       xmmreg,xmem32,xmmreg     AVX2 )]259.2 code0
[2(VPGATHERDD       ymmreg,ymem32,ymmreg     AVX2 )]249.6 code0
[2(VPGATHERQD       xmmreg,ymem32,xmmreg     AVX2 )]240 code0
[2(VPGATHERDQ       xmmreg,xmem64,xmmreg     AVX2 )]230.4 code0
[2(VPGATHERQQ       xmmreg,xmem64,xmmreg     AVX2 )]220.799999999999 code0
[2(VPGATHERDQ       ymmreg,xmem64,ymmreg     AVX2 )]211.199999999999 code0
[2(VPGATHERQQ       ymmreg,ymem64,ymmreg     AVX2)]201.599999999999 code2
[{/section-B.1.35 xa}(Intel Transactional Synchronization Extensions \(TSX\))](B.1.35)181.199999999999 subh3
[2(XABORT           imm                      RTM )]165.599999999999 code1
[2(XABORT           imm8                     RTM )]155.999999999999 code0
[2(XBEGIN           imm                      RTM )]146.399999999999 code0
[2(XBEGIN           imm|near                 RTM,ND )]136.799999999999 code0
[2(XBEGIN           imm16                    RTM,NOLONG )]127.199999999999 code0
[2(XBEGIN           imm16|near               RTM,NOLONG,ND )]117.599999999999 code0
[2(XBEGIN           imm32                    RTM,NOLONG )]107.999999999999 code0
[2(XBEGIN           imm32|near               RTM,NOLONG,ND )]98.3999999999993 code0
[2(XBEGIN           imm64                    RTM,LONG )]88.7999999999993 code0
[2(XBEGIN           imm64|near               RTM,LONG,ND )]79.1999999999992 code0
(192)pageeven
restore showpage
%%Page: 193 193
%%BeginPageSetup
save
%%EndPageSetup
/193 pa
[2(XEND                                      RTM )]710.4 code0
[2(XTEST                                     HLE,RTM)]700.8 code2
[{/section-B.1.36 xa}(Intel BMI1 and BMI2 instructions, AMD TBM instructions)](B.1.36)680.4 subh3
[2(ANDN             reg32,reg32,rm32         BMI1 )]664.8 code1
[2(ANDN             reg64,reg64,rm64         LONG,BMI1 )]655.2 code0
[2(BEXTR            reg32,rm32,reg32         BMI1 )]645.6 code0
[2(BEXTR            reg64,rm64,reg64         LONG,BMI1 )]636 code0
[2(BEXTR            reg32,rm32,imm32         TBM )]626.4 code0
[2(BEXTR            reg64,rm64,imm32         LONG,TBM )]616.8 code0
[2(BLCI             reg32,rm32               TBM )]607.2 code0
[2(BLCI             reg64,rm64               LONG,TBM )]597.6 code0
[2(BLCIC            reg32,rm32               TBM )]588 code0
[2(BLCIC            reg64,rm64               LONG,TBM )]578.4 code0
[2(BLSI             reg32,rm32               BMI1 )]568.8 code0
[2(BLSI             reg64,rm64               LONG,BMI1 )]559.2 code0
[2(BLSIC            reg32,rm32               TBM )]549.6 code0
[2(BLSIC            reg64,rm64               LONG,TBM )]540 code0
[2(BLCFILL          reg32,rm32               TBM )]530.4 code0
[2(BLCFILL          reg64,rm64               LONG,TBM )]520.8 code0
[2(BLSFILL          reg32,rm32               TBM )]511.2 code0
[2(BLSFILL          reg64,rm64               LONG,TBM )]501.6 code0
[2(BLCMSK           reg32,rm32               TBM )]492 code0
[2(BLCMSK           reg64,rm64               LONG,TBM )]482.4 code0
[2(BLSMSK           reg32,rm32               BMI1 )]472.8 code0
[2(BLSMSK           reg64,rm64               LONG,BMI1 )]463.2 code0
[2(BLSR             reg32,rm32               BMI1 )]453.6 code0
[2(BLSR             reg64,rm64               LONG,BMI1 )]444 code0
[2(BLCS             reg32,rm32               TBM )]434.4 code0
[2(BLCS             reg64,rm64               LONG,TBM )]424.8 code0
[2(BZHI             reg32,rm32,reg32         BMI2 )]415.2 code0
[2(BZHI             reg64,rm64,reg64         LONG,BMI2 )]405.6 code0
[2(MULX             reg32,reg32,rm32         BMI2 )]396 code0
[2(MULX             reg64,reg64,rm64         LONG,BMI2 )]386.4 code0
[2(PDEP             reg32,reg32,rm32         BMI2 )]376.8 code0
[2(PDEP             reg64,reg64,rm64         LONG,BMI2 )]367.2 code0
[2(PEXT             reg32,reg32,rm32         BMI2 )]357.6 code0
[2(PEXT             reg64,reg64,rm64         LONG,BMI2 )]348 code0
[2(RORX             reg32,rm32,imm8          BMI2 )]338.4 code0
[2(RORX             reg64,rm64,imm8          LONG,BMI2 )]328.8 code0
[2(SARX             reg32,rm32,reg32         BMI2 )]319.2 code0
[2(SARX             reg64,rm64,reg64         LONG,BMI2 )]309.6 code0
[2(SHLX             reg32,rm32,reg32         BMI2 )]300 code0
[2(SHLX             reg64,rm64,reg64         LONG,BMI2 )]290.4 code0
[2(SHRX             reg32,rm32,reg32         BMI2 )]280.8 code0
[2(SHRX             reg64,rm64,reg64         LONG,BMI2 )]271.2 code0
[2(TZCNT            reg16,rm16               BMI1 )]261.6 code0
[2(TZCNT            reg32,rm32               BMI1 )]252 code0
[2(TZCNT            reg64,rm64               LONG,BMI1 )]242.4 code0
[2(TZMSK            reg32,rm32               TBM )]232.8 code0
[2(TZMSK            reg64,rm64               LONG,TBM )]223.2 code0
[2(T1MSKC           reg32,rm32               TBM )]213.6 code0
[2(T1MSKC           reg64,rm64               LONG,TBM )]204 code0
[2(PREFETCHWT1      mem8                     PREFETCHWT1)]194.4 code2
[{/section-B.1.37 xa}(Intel Memory Protection Extensions \(MPX\))](B.1.37)174 subh3
[2(BNDMK            bndreg,mem               MPX,MIB )]158.4 code1
[2(BNDCL            bndreg,mem               MPX )]148.799999999999 code0
[2(BNDCL            bndreg,reg32             MPX,NOLONG )]139.199999999999 code0
[2(BNDCL            bndreg,reg64             MPX,LONG )]129.599999999999 code0
[2(BNDCU            bndreg,mem               MPX )]119.999999999999 code0
[2(BNDCU            bndreg,reg32             MPX,NOLONG )]110.399999999999 code0
[2(BNDCU            bndreg,reg64             MPX,LONG )]100.799999999999 code0
[2(BNDCN            bndreg,mem               MPX )]91.1999999999994 code0
[2(BNDCN            bndreg,reg32             MPX,NOLONG )]81.5999999999993 code0
(193)pageodd
restore showpage
%%Page: 194 194
%%BeginPageSetup
save
%%EndPageSetup
/194 pa
[2(BNDCN            bndreg,reg64             MPX,LONG )]710.4 code0
[2(BNDMOV           bndreg,bndreg            MPX )]700.8 code0
[2(BNDMOV           bndreg,mem               MPX )]691.2 code0
[2(BNDMOV           bndreg,bndreg            MPX )]681.6 code0
[2(BNDMOV           mem,bndreg               MPX )]672 code0
[2(BNDLDX           bndreg,mem               MPX,MIB )]662.4 code0
[2(BNDLDX           bndreg,mem,reg32         MPX,MIB,NOLONG )]652.8 code0
[2(BNDLDX           bndreg,mem,reg64         MPX,MIB,LONG )]643.2 code0
[2(BNDSTX           mem,bndreg               MPX,MIB )]633.6 code0
[2(BNDSTX           mem,reg32,bndreg         MPX,MIB,NOLONG )]624 code0
[2(BNDSTX           mem,reg64,bndreg         MPX,MIB,LONG )]614.4 code0
[2(BNDSTX           mem,bndreg,reg32         MPX,MIB,NOLONG )]604.8 code0
[2(BNDSTX           mem,bndreg,reg64         MPX,MIB,LONG)]595.2 code2
[{/section-B.1.38 xa}(Intel SHA acceleration instructions)](B.1.38)574.8 subh3
[2(SHA1MSG1         xmmreg,xmmrm128          SHA )]559.2 code1
[2(SHA1MSG2         xmmreg,xmmrm128          SHA )]549.6 code0
[2(SHA1NEXTE        xmmreg,xmmrm128          SHA )]540 code0
[2(SHA1RNDS4        xmmreg,xmmrm128,imm8     SHA )]530.4 code0
[2(SHA256MSG1       xmmreg,xmmrm128          SHA )]520.8 code0
[2(SHA256MSG2       xmmreg,xmmrm128          SHA )]511.2 code0
[2(SHA256RNDS2      xmmreg,xmmrm128,xmm0     SHA )]501.6 code0
[2(SHA256RNDS2      xmmreg,xmmrm128          SHA)]492 code2
[{/section-B.1.39 xa}(AVX-512 mask register instructions)](B.1.39)471.6 subh3
[2(KADDB            kreg,kreg,kreg            )]456 code1
[2(KADDD            kreg,kreg,kreg            )]446.4 code0
[2(KADDQ            kreg,kreg,kreg            )]436.8 code0
[2(KADDW            kreg,kreg,kreg            )]427.2 code0
[2(KANDB            kreg,kreg,kreg            )]417.6 code0
[2(KANDD            kreg,kreg,kreg            )]408 code0
[2(KANDNB           kreg,kreg,kreg            )]398.4 code0
[2(KANDND           kreg,kreg,kreg            )]388.8 code0
[2(KANDNQ           kreg,kreg,kreg            )]379.2 code0
[2(KANDNW           kreg,kreg,kreg            )]369.6 code0
[2(KANDQ            kreg,kreg,kreg            )]360 code0
[2(KANDW            kreg,kreg,kreg            )]350.4 code0
[2(KMOVB            kreg,krm8                 )]340.8 code0
[2(KMOVB            mem8,kreg                 )]331.2 code0
[2(KMOVB            kreg,reg32                )]321.6 code0
[2(KMOVB            kreg,reg8                ND )]312 code0
[2(KMOVB            reg32,kreg                )]302.4 code0
[2(KMOVD            kreg,krm32                )]292.8 code0
[2(KMOVD            mem32,kreg                )]283.2 code0
[2(KMOVD            kreg,reg32                )]273.6 code0
[2(KMOVD            reg32,kreg                )]264 code0
[2(KMOVQ            kreg,krm64                )]254.4 code0
[2(KMOVQ            mem64,kreg                )]244.8 code0
[2(KMOVQ            kreg,reg64                )]235.2 code0
[2(KMOVQ            reg64,kreg                )]225.6 code0
[2(KMOVW            kreg,krm16                )]215.999999999999 code0
[2(KMOVW            mem16,kreg                )]206.4 code0
[2(KMOVW            kreg,reg32                )]196.799999999999 code0
[2(KMOVW            kreg,reg16               ND )]187.199999999999 code0
[2(KMOVW            reg32,kreg                )]177.599999999999 code0
[2(KNOTB            kreg,kreg                 )]167.999999999999 code0
[2(KNOTD            kreg,kreg                 )]158.399999999999 code0
[2(KNOTQ            kreg,kreg                 )]148.799999999999 code0
[2(KNOTW            kreg,kreg                 )]139.199999999999 code0
[2(KORB             kreg,kreg,kreg            )]129.599999999999 code0
[2(KORD             kreg,kreg,kreg            )]119.999999999999 code0
[2(KORQ             kreg,kreg,kreg            )]110.399999999999 code0
[2(KORW             kreg,kreg,kreg            )]100.799999999999 code0
[2(KORTESTB         kreg,kreg                 )]91.1999999999992 code0
[2(KORTESTD         kreg,kreg                 )]81.5999999999992 code0
(194)pageeven
restore showpage
%%Page: 195 195
%%BeginPageSetup
save
%%EndPageSetup
/195 pa
[2(KORTESTQ         kreg,kreg                 )]710.4 code0
[2(KORTESTW         kreg,kreg                 )]700.8 code0
[2(KSHIFTLB         kreg,kreg,imm8            )]691.2 code0
[2(KSHIFTLD         kreg,kreg,imm8            )]681.6 code0
[2(KSHIFTLQ         kreg,kreg,imm8            )]672 code0
[2(KSHIFTLW         kreg,kreg,imm8            )]662.4 code0
[2(KSHIFTRB         kreg,kreg,imm8            )]652.8 code0
[2(KSHIFTRD         kreg,kreg,imm8            )]643.2 code0
[2(KSHIFTRQ         kreg,kreg,imm8            )]633.6 code0
[2(KSHIFTRW         kreg,kreg,imm8            )]624 code0
[2(KTESTB           kreg,kreg                 )]614.4 code0
[2(KTESTD           kreg,kreg                 )]604.8 code0
[2(KTESTQ           kreg,kreg                 )]595.2 code0
[2(KTESTW           kreg,kreg                 )]585.6 code0
[2(KUNPCKBW         kreg,kreg,kreg            )]576 code0
[2(KUNPCKDQ         kreg,kreg,kreg            )]566.4 code0
[2(KUNPCKWD         kreg,kreg,kreg            )]556.8 code0
[2(KXNORB           kreg,kreg,kreg            )]547.2 code0
[2(KXNORD           kreg,kreg,kreg            )]537.6 code0
[2(KXNORQ           kreg,kreg,kreg            )]528 code0
[2(KXNORW           kreg,kreg,kreg            )]518.4 code0
[2(KXORB            kreg,kreg,kreg            )]508.8 code0
[2(KXORD            kreg,kreg,kreg            )]499.2 code0
[2(KXORQ            kreg,kreg,kreg            )]489.6 code0
[2(KXORW            kreg,kreg,kreg           )]480 code2
[{/section-B.1.40 xa}(AVX-512 mask register instructions \(aliases requiring explicit size support\))](B.1.40)459.6 subh3
[2(KADD             kreg8,kreg,kreg          ND )]444 code1
[2(KADD             kreg32,kreg,kreg         ND )]434.4 code0
[2(KADD             kreg64,kreg,kreg         ND )]424.8 code0
[2(KADD             kreg16,kreg,kreg         ND )]415.2 code0
[2(KAND             kreg8,kreg,kreg          ND )]405.6 code0
[2(KAND             kreg32,kreg,kreg         ND )]396 code0
[2(KANDN            kreg64,kreg,kreg         ND )]386.4 code0
[2(KANDN            kreg16,kreg,kreg         ND )]376.8 code0
[2(KANDN            kreg8,kreg,kreg          ND )]367.2 code0
[2(KANDN            kreg32,kreg,kreg         ND )]357.6 code0
[2(KAND             kreg64,kreg,kreg         ND )]348 code0
[2(KAND             kreg16,kreg,kreg         ND )]338.4 code0
[2(KMOV             kreg8,krm8               ND )]328.8 code0
[2(KMOV             mem8,kreg8               ND )]319.2 code0
[2(KMOV             kreg8,reg32              ND,SX )]309.6 code0
[2(KMOV             kreg8,reg8               ND )]300 code0
[2(KMOV             reg32,kreg8              ND,SX )]290.4 code0
[2(KMOV             kreg32,krm32             ND )]280.8 code0
[2(KMOV             mem32,kreg32             ND )]271.2 code0
[2(KMOV             kreg32,reg32             ND )]261.6 code0
[2(KMOV             reg32,kreg32             ND )]252 code0
[2(KMOV             kreg64,krm64             ND )]242.4 code0
[2(KMOV             mem64,kreg64             ND )]232.8 code0
[2(KMOV             kreg64,reg64             ND )]223.2 code0
[2(KMOV             reg64,kreg64             ND )]213.6 code0
[2(KMOV             kreg16,krm16             ND )]204 code0
[2(KMOV             mem16,kreg16             ND )]194.4 code0
[2(KMOV             kreg16,reg32             ND,SX )]184.799999999999 code0
[2(KMOV             reg32,kreg16             ND,SX )]175.199999999999 code0
[2(KMOV             kreg16,reg32             ND,SX )]165.599999999999 code0
[2(KMOV             kreg16,reg16             ND )]155.999999999999 code0
[2(KNOT             kreg8,kreg8              ND )]146.399999999999 code0
[2(KNOT             kreg32,kreg32            ND )]136.799999999999 code0
[2(KNOT             kreg64,kreg64            ND )]127.199999999999 code0
[2(KNOT             kreg16,kreg16            ND )]117.599999999999 code0
[2(KOR              kreg8,kreg,kreg          ND )]107.999999999999 code0
[2(KOR              kreg32,kreg,kreg         ND )]98.3999999999993 code0
[2(KOR              kreg64,kreg,kreg         ND )]88.7999999999993 code0
[2(KOR              kreg16,kreg,kreg         ND )]79.1999999999992 code0
(195)pageodd
restore showpage
%%Page: 196 196
%%BeginPageSetup
save
%%EndPageSetup
/196 pa
[2(KORTEST          kreg8,kreg               ND )]710.4 code0
[2(KORTEST          kreg32,kreg              ND )]700.8 code0
[2(KORTEST          kreg64,kreg              ND )]691.2 code0
[2(KORTEST          kreg16,kreg              ND )]681.6 code0
[2(KSHIFTL          kreg8,kreg,imm8          ND )]672 code0
[2(KSHIFTL          kreg32,kreg,imm8         ND )]662.4 code0
[2(KSHIFTL          kreg64,kreg,imm8         ND )]652.8 code0
[2(KSHIFTL          kreg16,kreg,imm8         ND )]643.2 code0
[2(KSHIFTR          kreg8,kreg,imm8          ND )]633.6 code0
[2(KSHIFTR          kreg32,kreg,imm8         ND )]624 code0
[2(KSHIFTR          kreg64,kreg,imm8         ND )]614.4 code0
[2(KSHIFTR          kreg16,kreg,imm8         ND )]604.8 code0
[2(KTEST            kreg8,kreg               ND )]595.2 code0
[2(KTEST            kreg32,kreg              ND )]585.6 code0
[2(KTEST            kreg64,kreg              ND )]576 code0
[2(KTEST            kreg16,kreg              ND )]566.4 code0
[2(KUNPCK           kreg16,kreg8,kreg8       ND )]556.8 code0
[2(KUNPCK           kreg64,kreg32,kreg32     ND )]547.2 code0
[2(KUNPCK           kreg32,kreg16,kreg16     ND )]537.6 code0
[2(KXNOR            kreg8,kreg,kreg          ND )]528 code0
[2(KXNOR            kreg32,kreg,kreg         ND )]518.4 code0
[2(KXNOR            kreg64,kreg,kreg         ND )]508.8 code0
[2(KXNOR            kreg16,kreg,kreg         ND )]499.2 code0
[2(KXOR             kreg8,kreg,kreg          ND )]489.6 code0
[2(KXOR             kreg32,kreg,kreg         ND )]480 code0
[2(KXOR             kreg64,kreg,kreg         ND )]470.4 code0
[2(KXOR             kreg16,kreg,kreg         ND)]460.8 code2
[{/section-B.1.41 xa}(AVX-512 instructions)](B.1.41)440.4 subh3
[2(VADDPD           xmmreg|mask|z,xmmreg*,xmmrm128|b64 AVX512VL )]424.8 code1
[2(VADDPD           ymmreg|mask|z,ymmreg*,ymmrm256|b64 AVX512VL )]415.2 code0
[2(VADDPD           zmmreg|mask|z,zmmreg*,zmmrm512|b64|er AVX512 )]405.6 code0
[2(VADDPS           xmmreg|mask|z,xmmreg*,xmmrm128|b32 AVX512VL )]396 code0
[2(VADDPS           ymmreg|mask|z,ymmreg*,ymmrm256|b32 AVX512VL )]386.4 code0
[2(VADDPS           zmmreg|mask|z,zmmreg*,zmmrm512|b32|er AVX512 )]376.8 code0
[2(VADDSD           xmmreg|mask|z,xmmreg*,xmmrm64|er AVX512 )]367.2 code0
[2(VADDSS           xmmreg|mask|z,xmmreg*,xmmrm32|er AVX512 )]357.6 code0
[2(VALIGND          xmmreg|mask|z,xmmreg*,xmmrm128|b32,imm8 AVX512VL )]348 code0
[2(VALIGND          ymmreg|mask|z,ymmreg*,ymmrm256|b32,imm8 AVX512VL )]338.4 code0
[2(VALIGND          zmmreg|mask|z,zmmreg*,zmmrm512|b32,imm8 AVX512 )]328.8 code0
[2(VALIGNQ          xmmreg|mask|z,xmmreg*,xmmrm128|b64,imm8 AVX512VL )]319.2 code0
[2(VALIGNQ          ymmreg|mask|z,ymmreg*,ymmrm256|b64,imm8 AVX512VL )]309.6 code0
[2(VALIGNQ          zmmreg|mask|z,zmmreg*,zmmrm512|b64,imm8 AVX512 )]300 code0
[2(VANDNPD          xmmreg|mask|z,xmmreg*,xmmrm128|b64 AVX512VL/DQ )]290.4 code0
[2(VANDNPD          ymmreg|mask|z,ymmreg*,ymmrm256|b64 AVX512VL/DQ )]280.8 code0
[2(VANDNPD          zmmreg|mask|z,zmmreg*,zmmrm512|b64 AVX512DQ )]271.2 code0
[2(VANDNPS          xmmreg|mask|z,xmmreg*,xmmrm128|b32 AVX512VL/DQ )]261.6 code0
[2(VANDNPS          ymmreg|mask|z,ymmreg*,ymmrm256|b32 AVX512VL/DQ )]252 code0
[2(VANDNPS          zmmreg|mask|z,zmmreg*,zmmrm512|b32 AVX512DQ )]242.4 code0
[2(VANDPD           xmmreg|mask|z,xmmreg*,xmmrm128|b64 AVX512VL/DQ )]232.8 code0
[2(VANDPD           ymmreg|mask|z,ymmreg*,ymmrm256|b64 AVX512VL/DQ )]223.2 code0
[2(VANDPD           zmmreg|mask|z,zmmreg*,zmmrm512|b64 AVX512DQ )]213.6 code0
[2(VANDPS           xmmreg|mask|z,xmmreg*,xmmrm128|b32 AVX512VL/DQ )]204 code0
[2(VANDPS           ymmreg|mask|z,ymmreg*,ymmrm256|b32 AVX512VL/DQ )]194.4 code0
[2(VANDPS           zmmreg|mask|z,zmmreg*,zmmrm512|b32 AVX512DQ )]184.799999999999 code0
[2(VBLENDMPD        xmmreg|mask|z,xmmreg,xmmrm128|b64 AVX512VL )]175.199999999999 code0
[2(VBLENDMPD        ymmreg|mask|z,ymmreg,ymmrm256|b64 AVX512VL )]165.599999999999 code0
[2(VBLENDMPD        zmmreg|mask|z,zmmreg,zmmrm512|b64 AVX512 )]155.999999999999 code0
[2(VBLENDMPS        xmmreg|mask|z,xmmreg,xmmrm128|b32 AVX512VL )]146.399999999999 code0
[2(VBLENDMPS        ymmreg|mask|z,ymmreg,ymmrm256|b32 AVX512VL )]136.799999999999 code0
[2(VBLENDMPS        zmmreg|mask|z,zmmreg,zmmrm512|b32 AVX512 )]127.199999999999 code0
[2(VBROADCASTF32X2  ymmreg|mask|z,xmmrm64    AVX512VL/DQ )]117.599999999999 code0
[2(VBROADCASTF32X2  zmmreg|mask|z,xmmrm64    AVX512DQ )]107.999999999999 code0
[2(VBROADCASTF32X4  ymmreg|mask|z,mem128     AVX512VL )]98.3999999999993 code0
[2(VBROADCASTF32X4  zmmreg|mask|z,mem128     AVX512 )]88.7999999999993 code0
[2(VBROADCASTF32X8  zmmreg|mask|z,mem256     AVX512DQ )]79.1999999999992 code0
(196)pageeven
restore showpage
%%Page: 197 197
%%BeginPageSetup
save
%%EndPageSetup
/197 pa
[2(VBROADCASTF64X2  ymmreg|mask|z,mem128     AVX512VL/DQ )]710.4 code0
[2(VBROADCASTF64X2  zmmreg|mask|z,mem128     AVX512DQ )]700.8 code0
[2(VBROADCASTF64X4  zmmreg|mask|z,mem256     AVX512 )]691.2 code0
[2(VBROADCASTI32X2  xmmreg|mask|z,xmmrm64    AVX512VL/DQ )]681.6 code0
[2(VBROADCASTI32X2  ymmreg|mask|z,xmmrm64    AVX512VL/DQ )]672 code0
[2(VBROADCASTI32X2  zmmreg|mask|z,xmmrm64    AVX512DQ )]662.4 code0
[2(VBROADCASTI32X4  ymmreg|mask|z,mem128     AVX512VL )]652.8 code0
[2(VBROADCASTI32X4  zmmreg|mask|z,mem128     AVX512 )]643.2 code0
[2(VBROADCASTI32X8  zmmreg|mask|z,mem256     AVX512DQ )]633.6 code0
[2(VBROADCASTI64X2  ymmreg|mask|z,mem128     AVX512VL/DQ )]624 code0
[2(VBROADCASTI64X2  zmmreg|mask|z,mem128     AVX512DQ )]614.4 code0
[2(VBROADCASTI64X4  zmmreg|mask|z,mem256     AVX512 )]604.8 code0
[2(VBROADCASTSD     ymmreg|mask|z,mem64      AVX512VL )]595.2 code0
[2(VBROADCASTSD     zmmreg|mask|z,mem64      AVX512 )]585.6 code0
[2(VBROADCASTSD     ymmreg|mask|z,xmmreg     AVX512VL )]576 code0
[2(VBROADCASTSD     zmmreg|mask|z,xmmreg     AVX512 )]566.4 code0
[2(VBROADCASTSS     xmmreg|mask|z,mem32      AVX512VL )]556.8 code0
[2(VBROADCASTSS     ymmreg|mask|z,mem32      AVX512VL )]547.2 code0
[2(VBROADCASTSS     zmmreg|mask|z,mem32      AVX512 )]537.6 code0
[2(VBROADCASTSS     xmmreg|mask|z,xmmreg     AVX512VL )]528 code0
[2(VBROADCASTSS     ymmreg|mask|z,xmmreg     AVX512VL )]518.4 code0
[2(VBROADCASTSS     zmmreg|mask|z,xmmreg     AVX512 )]508.8 code0
[2(VCMPEQPD         kreg|mask,xmmreg,xmmrm128|b64 AVX512VL )]499.2 code0
[2(VCMPEQPD         kreg|mask,ymmreg,ymmrm256|b64 AVX512VL )]489.6 code0
[2(VCMPEQPD         kreg|mask,zmmreg,zmmrm512|b64|sae AVX512 )]480 code0
[2(VCMPEQPS         kreg|mask,xmmreg,xmmrm128|b32 AVX512VL )]470.4 code0
[2(VCMPEQPS         kreg|mask,ymmreg,ymmrm256|b32 AVX512VL )]460.8 code0
[2(VCMPEQPS         kreg|mask,zmmreg,zmmrm512|b32|sae AVX512 )]451.2 code0
[2(VCMPEQSD         kreg|mask,xmmreg,xmmrm64|sae AVX512 )]441.6 code0
[2(VCMPEQSS         kreg|mask,xmmreg,xmmrm32|sae AVX512 )]432 code0
[2(VCMPEQ_OQPD      kreg|mask,xmmreg,xmmrm128|b64 AVX512VL )]422.4 code0
[2(VCMPEQ_OQPD      kreg|mask,ymmreg,ymmrm256|b64 AVX512VL )]412.8 code0
[2(VCMPEQ_OQPD      kreg|mask,zmmreg,zmmrm512|b64|sae AVX512 )]403.2 code0
[2(VCMPEQ_OQPS      kreg|mask,xmmreg,xmmrm128|b32 AVX512VL )]393.6 code0
[2(VCMPEQ_OQPS      kreg|mask,ymmreg,ymmrm256|b32 AVX512VL )]384 code0
[2(VCMPEQ_OQPS      kreg|mask,zmmreg,zmmrm512|b32|sae AVX512 )]374.4 code0
[2(VCMPEQ_OQSD      kreg|mask,xmmreg,xmmrm64|sae AVX512 )]364.8 code0
[2(VCMPEQ_OQSS      kreg|mask,xmmreg,xmmrm32|sae AVX512 )]355.2 code0
[2(VCMPLTPD         kreg|mask,xmmreg,xmmrm128|b64 AVX512VL )]345.6 code0
[2(VCMPLTPD         kreg|mask,ymmreg,ymmrm256|b64 AVX512VL )]336 code0
[2(VCMPLTPD         kreg|mask,zmmreg,zmmrm512|b64|sae AVX512 )]326.4 code0
[2(VCMPLTPS         kreg|mask,xmmreg,xmmrm128|b32 AVX512VL )]316.8 code0
[2(VCMPLTPS         kreg|mask,ymmreg,ymmrm256|b32 AVX512VL )]307.2 code0
[2(VCMPLTPS         kreg|mask,zmmreg,zmmrm512|b32|sae AVX512 )]297.6 code0
[2(VCMPLTSD         kreg|mask,xmmreg,xmmrm64|sae AVX512 )]288 code0
[2(VCMPLTSS         kreg|mask,xmmreg,xmmrm32|sae AVX512 )]278.4 code0
[2(VCMPLT_OSPD      kreg|mask,xmmreg,xmmrm128|b64 AVX512VL )]268.8 code0
[2(VCMPLT_OSPD      kreg|mask,ymmreg,ymmrm256|b64 AVX512VL )]259.2 code0
[2(VCMPLT_OSPD      kreg|mask,zmmreg,zmmrm512|b64|sae AVX512 )]249.6 code0
[2(VCMPLT_OSPS      kreg|mask,xmmreg,xmmrm128|b32 AVX512VL )]240 code0
[2(VCMPLT_OSPS      kreg|mask,ymmreg,ymmrm256|b32 AVX512VL )]230.4 code0
[2(VCMPLT_OSPS      kreg|mask,zmmreg,zmmrm512|b32|sae AVX512 )]220.799999999999 code0
[2(VCMPLT_OSSD      kreg|mask,xmmreg,xmmrm64|sae AVX512 )]211.199999999999 code0
[2(VCMPLT_OSSS      kreg|mask,xmmreg,xmmrm32|sae AVX512 )]201.599999999999 code0
[2(VCMPLEPD         kreg|mask,xmmreg,xmmrm128|b64 AVX512VL )]191.999999999999 code0
[2(VCMPLEPD         kreg|mask,ymmreg,ymmrm256|b64 AVX512VL )]182.399999999999 code0
[2(VCMPLEPD         kreg|mask,zmmreg,zmmrm512|b64|sae AVX512 )]172.799999999999 code0
[2(VCMPLEPS         kreg|mask,xmmreg,xmmrm128|b32 AVX512VL )]163.199999999999 code0
[2(VCMPLEPS         kreg|mask,ymmreg,ymmrm256|b32 AVX512VL )]153.599999999999 code0
[2(VCMPLEPS         kreg|mask,zmmreg,zmmrm512|b32|sae AVX512 )]143.999999999999 code0
[2(VCMPLESD         kreg|mask,xmmreg,xmmrm64|sae AVX512 )]134.399999999999 code0
[2(VCMPLESS         kreg|mask,xmmreg,xmmrm32|sae AVX512 )]124.799999999999 code0
[2(VCMPLE_OSPD      kreg|mask,xmmreg,xmmrm128|b64 AVX512VL )]115.199999999999 code0
[2(VCMPLE_OSPD      kreg|mask,ymmreg,ymmrm256|b64 AVX512VL )]105.599999999999 code0
[2(VCMPLE_OSPD      kreg|mask,zmmreg,zmmrm512|b64|sae AVX512 )]95.9999999999992 code0
[2(VCMPLE_OSPS      kreg|mask,xmmreg,xmmrm128|b32 AVX512VL )]86.3999999999992 code0
[2(VCMPLE_OSPS      kreg|mask,ymmreg,ymmrm256|b32 AVX512VL )]76.7999999999992 code0
(197)pageodd
restore showpage
%%Page: 198 198
%%BeginPageSetup
save
%%EndPageSetup
/198 pa
[2(VCMPLE_OSPS      kreg|mask,zmmreg,zmmrm512|b32|sae AVX512 )]710.4 code0
[2(VCMPLE_OSSD      kreg|mask,xmmreg,xmmrm64|sae AVX512 )]700.8 code0
[2(VCMPLE_OSSS      kreg|mask,xmmreg,xmmrm32|sae AVX512 )]691.2 code0
[2(VCMPUNORDPD      kreg|mask,xmmreg,xmmrm128|b64 AVX512VL )]681.6 code0
[2(VCMPUNORDPD      kreg|mask,ymmreg,ymmrm256|b64 AVX512VL )]672 code0
[2(VCMPUNORDPD      kreg|mask,zmmreg,zmmrm512|b64|sae AVX512 )]662.4 code0
[2(VCMPUNORDPS      kreg|mask,xmmreg,xmmrm128|b32 AVX512VL )]652.8 code0
[2(VCMPUNORDPS      kreg|mask,ymmreg,ymmrm256|b32 AVX512VL )]643.2 code0
[2(VCMPUNORDPS      kreg|mask,zmmreg,zmmrm512|b32|sae AVX512 )]633.6 code0
[2(VCMPUNORDSD      kreg|mask,xmmreg,xmmrm64|sae AVX512 )]624 code0
[2(VCMPUNORDSS      kreg|mask,xmmreg,xmmrm32|sae AVX512 )]614.4 code0
[2(VCMPUNORD_QPD    kreg|mask,xmmreg,xmmrm128|b64 AVX512VL )]604.8 code0
[2(VCMPUNORD_QPD    kreg|mask,ymmreg,ymmrm256|b64 AVX512VL )]595.2 code0
[2(VCMPUNORD_QPD    kreg|mask,zmmreg,zmmrm512|b64|sae AVX512 )]585.6 code0
[2(VCMPUNORD_QPS    kreg|mask,xmmreg,xmmrm128|b32 AVX512VL )]576 code0
[2(VCMPUNORD_QPS    kreg|mask,ymmreg,ymmrm256|b32 AVX512VL )]566.4 code0
[2(VCMPUNORD_QPS    kreg|mask,zmmreg,zmmrm512|b32|sae AVX512 )]556.8 code0
[2(VCMPUNORD_QSD    kreg|mask,xmmreg,xmmrm64|sae AVX512 )]547.2 code0
[2(VCMPUNORD_QSS    kreg|mask,xmmreg,xmmrm32|sae AVX512 )]537.6 code0
[2(VCMPNEQPD        kreg|mask,xmmreg,xmmrm128|b64 AVX512VL )]528 code0
[2(VCMPNEQPD        kreg|mask,ymmreg,ymmrm256|b64 AVX512VL )]518.4 code0
[2(VCMPNEQPD        kreg|mask,zmmreg,zmmrm512|b64|sae AVX512 )]508.8 code0
[2(VCMPNEQPS        kreg|mask,xmmreg,xmmrm128|b32 AVX512VL )]499.2 code0
[2(VCMPNEQPS        kreg|mask,ymmreg,ymmrm256|b32 AVX512VL )]489.6 code0
[2(VCMPNEQPS        kreg|mask,zmmreg,zmmrm512|b32|sae AVX512 )]480 code0
[2(VCMPNEQSD        kreg|mask,xmmreg,xmmrm64|sae AVX512 )]470.4 code0
[2(VCMPNEQSS        kreg|mask,xmmreg,xmmrm32|sae AVX512 )]460.8 code0
[2(VCMPNEQ_UQPD     kreg|mask,xmmreg,xmmrm128|b64 AVX512VL )]451.2 code0
[2(VCMPNEQ_UQPD     kreg|mask,ymmreg,ymmrm256|b64 AVX512VL )]441.6 code0
[2(VCMPNEQ_UQPD     kreg|mask,zmmreg,zmmrm512|b64|sae AVX512 )]432 code0
[2(VCMPNEQ_UQPS     kreg|mask,xmmreg,xmmrm128|b32 AVX512VL )]422.4 code0
[2(VCMPNEQ_UQPS     kreg|mask,ymmreg,ymmrm256|b32 AVX512VL )]412.8 code0
[2(VCMPNEQ_UQPS     kreg|mask,zmmreg,zmmrm512|b32|sae AVX512 )]403.2 code0
[2(VCMPNEQ_UQSD     kreg|mask,xmmreg,xmmrm64|sae AVX512 )]393.6 code0
[2(VCMPNEQ_UQSS     kreg|mask,xmmreg,xmmrm32|sae AVX512 )]384 code0
[2(VCMPNLTPD        kreg|mask,xmmreg,xmmrm128|b64 AVX512VL )]374.4 code0
[2(VCMPNLTPD        kreg|mask,ymmreg,ymmrm256|b64 AVX512VL )]364.8 code0
[2(VCMPNLTPD        kreg|mask,zmmreg,zmmrm512|b64|sae AVX512 )]355.2 code0
[2(VCMPNLTPS        kreg|mask,xmmreg,xmmrm128|b32 AVX512VL )]345.6 code0
[2(VCMPNLTPS        kreg|mask,ymmreg,ymmrm256|b32 AVX512VL )]336 code0
[2(VCMPNLTPS        kreg|mask,zmmreg,zmmrm512|b32|sae AVX512 )]326.4 code0
[2(VCMPNLTSD        kreg|mask,xmmreg,xmmrm64|sae AVX512 )]316.8 code0
[2(VCMPNLTSS        kreg|mask,xmmreg,xmmrm32|sae AVX512 )]307.2 code0
[2(VCMPNLT_USPD     kreg|mask,xmmreg,xmmrm128|b64 AVX512VL )]297.6 code0
[2(VCMPNLT_USPD     kreg|mask,ymmreg,ymmrm256|b64 AVX512VL )]288 code0
[2(VCMPNLT_USPD     kreg|mask,zmmreg,zmmrm512|b64|sae AVX512 )]278.4 code0
[2(VCMPNLT_USPS     kreg|mask,xmmreg,xmmrm128|b32 AVX512VL )]268.8 code0
[2(VCMPNLT_USPS     kreg|mask,ymmreg,ymmrm256|b32 AVX512VL )]259.2 code0
[2(VCMPNLT_USPS     kreg|mask,zmmreg,zmmrm512|b32|sae AVX512 )]249.6 code0
[2(VCMPNLT_USSD     kreg|mask,xmmreg,xmmrm64|sae AVX512 )]240 code0
[2(VCMPNLT_USSS     kreg|mask,xmmreg,xmmrm32|sae AVX512 )]230.4 code0
[2(VCMPNLEPD        kreg|mask,xmmreg,xmmrm128|b64 AVX512VL )]220.799999999999 code0
[2(VCMPNLEPD        kreg|mask,ymmreg,ymmrm256|b64 AVX512VL )]211.199999999999 code0
[2(VCMPNLEPD        kreg|mask,zmmreg,zmmrm512|b64|sae AVX512 )]201.599999999999 code0
[2(VCMPNLEPS        kreg|mask,xmmreg,xmmrm128|b32 AVX512VL )]191.999999999999 code0
[2(VCMPNLEPS        kreg|mask,ymmreg,ymmrm256|b32 AVX512VL )]182.399999999999 code0
[2(VCMPNLEPS        kreg|mask,zmmreg,zmmrm512|b32|sae AVX512 )]172.799999999999 code0
[2(VCMPNLESD        kreg|mask,xmmreg,xmmrm64|sae AVX512 )]163.199999999999 code0
[2(VCMPNLESS        kreg|mask,xmmreg,xmmrm32|sae AVX512 )]153.599999999999 code0
[2(VCMPNLE_USPD     kreg|mask,xmmreg,xmmrm128|b64 AVX512VL )]143.999999999999 code0
[2(VCMPNLE_USPD     kreg|mask,ymmreg,ymmrm256|b64 AVX512VL )]134.399999999999 code0
[2(VCMPNLE_USPD     kreg|mask,zmmreg,zmmrm512|b64|sae AVX512 )]124.799999999999 code0
[2(VCMPNLE_USPS     kreg|mask,xmmreg,xmmrm128|b32 AVX512VL )]115.199999999999 code0
[2(VCMPNLE_USPS     kreg|mask,ymmreg,ymmrm256|b32 AVX512VL )]105.599999999999 code0
[2(VCMPNLE_USPS     kreg|mask,zmmreg,zmmrm512|b32|sae AVX512 )]95.9999999999992 code0
[2(VCMPNLE_USSD     kreg|mask,xmmreg,xmmrm64|sae AVX512 )]86.3999999999992 code0
[2(VCMPNLE_USSS     kreg|mask,xmmreg,xmmrm32|sae AVX512 )]76.7999999999992 code0
(198)pageeven
restore showpage
%%Page: 199 199
%%BeginPageSetup
save
%%EndPageSetup
/199 pa
[2(VCMPORDPD        kreg|mask,xmmreg,xmmrm128|b64 AVX512VL )]710.4 code0
[2(VCMPORDPD        kreg|mask,ymmreg,ymmrm256|b64 AVX512VL )]700.8 code0
[2(VCMPORDPD        kreg|mask,zmmreg,zmmrm512|b64|sae AVX512 )]691.2 code0
[2(VCMPORDPS        kreg|mask,xmmreg,xmmrm128|b32 AVX512VL )]681.6 code0
[2(VCMPORDPS        kreg|mask,ymmreg,ymmrm256|b32 AVX512VL )]672 code0
[2(VCMPORDPS        kreg|mask,zmmreg,zmmrm512|b32|sae AVX512 )]662.4 code0
[2(VCMPORDSD        kreg|mask,xmmreg,xmmrm64|sae AVX512 )]652.8 code0
[2(VCMPORDSS        kreg|mask,xmmreg,xmmrm32|sae AVX512 )]643.2 code0
[2(VCMPORD_QPD      kreg|mask,xmmreg,xmmrm128|b64 AVX512VL )]633.6 code0
[2(VCMPORD_QPD      kreg|mask,ymmreg,ymmrm256|b64 AVX512VL )]624 code0
[2(VCMPORD_QPD      kreg|mask,zmmreg,zmmrm512|b64|sae AVX512 )]614.4 code0
[2(VCMPORD_QPS      kreg|mask,xmmreg,xmmrm128|b32 AVX512VL )]604.8 code0
[2(VCMPORD_QPS      kreg|mask,ymmreg,ymmrm256|b32 AVX512VL )]595.2 code0
[2(VCMPORD_QPS      kreg|mask,zmmreg,zmmrm512|b32|sae AVX512 )]585.6 code0
[2(VCMPORD_QSD      kreg|mask,xmmreg,xmmrm64|sae AVX512 )]576 code0
[2(VCMPORD_QSS      kreg|mask,xmmreg,xmmrm32|sae AVX512 )]566.4 code0
[2(VCMPEQ_UQPD      kreg|mask,xmmreg,xmmrm128|b64 AVX512VL )]556.8 code0
[2(VCMPEQ_UQPD      kreg|mask,ymmreg,ymmrm256|b64 AVX512VL )]547.2 code0
[2(VCMPEQ_UQPD      kreg|mask,zmmreg,zmmrm512|b64|sae AVX512 )]537.6 code0
[2(VCMPEQ_UQPS      kreg|mask,xmmreg,xmmrm128|b32 AVX512VL )]528 code0
[2(VCMPEQ_UQPS      kreg|mask,ymmreg,ymmrm256|b32 AVX512VL )]518.4 code0
[2(VCMPEQ_UQPS      kreg|mask,zmmreg,zmmrm512|b32|sae AVX512 )]508.8 code0
[2(VCMPEQ_UQSD      kreg|mask,xmmreg,xmmrm64|sae AVX512 )]499.2 code0
[2(VCMPEQ_UQSS      kreg|mask,xmmreg,xmmrm32|sae AVX512 )]489.6 code0
[2(VCMPNGEPD        kreg|mask,xmmreg,xmmrm128|b64 AVX512VL )]480 code0
[2(VCMPNGEPD        kreg|mask,ymmreg,ymmrm256|b64 AVX512VL )]470.4 code0
[2(VCMPNGEPD        kreg|mask,zmmreg,zmmrm512|b64|sae AVX512 )]460.8 code0
[2(VCMPNGEPS        kreg|mask,xmmreg,xmmrm128|b32 AVX512VL )]451.2 code0
[2(VCMPNGEPS        kreg|mask,ymmreg,ymmrm256|b32 AVX512VL )]441.6 code0
[2(VCMPNGEPS        kreg|mask,zmmreg,zmmrm512|b32|sae AVX512 )]432 code0
[2(VCMPNGESD        kreg|mask,xmmreg,xmmrm64|sae AVX512 )]422.4 code0
[2(VCMPNGESS        kreg|mask,xmmreg,xmmrm32|sae AVX512 )]412.8 code0
[2(VCMPNGE_USPD     kreg|mask,xmmreg,xmmrm128|b64 AVX512VL )]403.2 code0
[2(VCMPNGE_USPD     kreg|mask,ymmreg,ymmrm256|b64 AVX512VL )]393.6 code0
[2(VCMPNGE_USPD     kreg|mask,zmmreg,zmmrm512|b64|sae AVX512 )]384 code0
[2(VCMPNGE_USPS     kreg|mask,xmmreg,xmmrm128|b32 AVX512VL )]374.4 code0
[2(VCMPNGE_USPS     kreg|mask,ymmreg,ymmrm256|b32 AVX512VL )]364.8 code0
[2(VCMPNGE_USPS     kreg|mask,zmmreg,zmmrm512|b32|sae AVX512 )]355.2 code0
[2(VCMPNGE_USSD     kreg|mask,xmmreg,xmmrm64|sae AVX512 )]345.6 code0
[2(VCMPNGE_USSS     kreg|mask,xmmreg,xmmrm32|sae AVX512 )]336 code0
[2(VCMPNGTPD        kreg|mask,xmmreg,xmmrm128|b64 AVX512VL )]326.4 code0
[2(VCMPNGTPD        kreg|mask,ymmreg,ymmrm256|b64 AVX512VL )]316.8 code0
[2(VCMPNGTPD        kreg|mask,zmmreg,zmmrm512|b64|sae AVX512 )]307.2 code0
[2(VCMPNGTPS        kreg|mask,xmmreg,xmmrm128|b32 AVX512VL )]297.6 code0
[2(VCMPNGTPS        kreg|mask,ymmreg,ymmrm256|b32 AVX512VL )]288 code0
[2(VCMPNGTPS        kreg|mask,zmmreg,zmmrm512|b32|sae AVX512 )]278.4 code0
[2(VCMPNGTSD        kreg|mask,xmmreg,xmmrm64|sae AVX512 )]268.8 code0
[2(VCMPNGTSS        kreg|mask,xmmreg,xmmrm32|sae AVX512 )]259.2 code0
[2(VCMPNGT_USPD     kreg|mask,xmmreg,xmmrm128|b64 AVX512VL )]249.6 code0
[2(VCMPNGT_USPD     kreg|mask,ymmreg,ymmrm256|b64 AVX512VL )]240 code0
[2(VCMPNGT_USPD     kreg|mask,zmmreg,zmmrm512|b64|sae AVX512 )]230.4 code0
[2(VCMPNGT_USPS     kreg|mask,xmmreg,xmmrm128|b32 AVX512VL )]220.799999999999 code0
[2(VCMPNGT_USPS     kreg|mask,ymmreg,ymmrm256|b32 AVX512VL )]211.199999999999 code0
[2(VCMPNGT_USPS     kreg|mask,zmmreg,zmmrm512|b32|sae AVX512 )]201.599999999999 code0
[2(VCMPNGT_USSD     kreg|mask,xmmreg,xmmrm64|sae AVX512 )]191.999999999999 code0
[2(VCMPNGT_USSS     kreg|mask,xmmreg,xmmrm32|sae AVX512 )]182.399999999999 code0
[2(VCMPFALSEPD      kreg|mask,xmmreg,xmmrm128|b64 AVX512VL )]172.799999999999 code0
[2(VCMPFALSEPD      kreg|mask,ymmreg,ymmrm256|b64 AVX512VL )]163.199999999999 code0
[2(VCMPFALSEPD      kreg|mask,zmmreg,zmmrm512|b64|sae AVX512 )]153.599999999999 code0
[2(VCMPFALSEPS      kreg|mask,xmmreg,xmmrm128|b32 AVX512VL )]143.999999999999 code0
[2(VCMPFALSEPS      kreg|mask,ymmreg,ymmrm256|b32 AVX512VL )]134.399999999999 code0
[2(VCMPFALSEPS      kreg|mask,zmmreg,zmmrm512|b32|sae AVX512 )]124.799999999999 code0
[2(VCMPFALSESD      kreg|mask,xmmreg,xmmrm64|sae AVX512 )]115.199999999999 code0
[2(VCMPFALSESS      kreg|mask,xmmreg,xmmrm32|sae AVX512 )]105.599999999999 code0
[2(VCMPFALSE_OQPD   kreg|mask,xmmreg,xmmrm128|b64 AVX512VL )]95.9999999999992 code0
[2(VCMPFALSE_OQPD   kreg|mask,ymmreg,ymmrm256|b64 AVX512VL )]86.3999999999992 code0
[2(VCMPFALSE_OQPD   kreg|mask,zmmreg,zmmrm512|b64|sae AVX512 )]76.7999999999992 code0
(199)pageodd
restore showpage
%%Page: 200 200
%%BeginPageSetup
save
%%EndPageSetup
/200 pa
[2(VCMPFALSE_OQPS   kreg|mask,xmmreg,xmmrm128|b32 AVX512VL )]710.4 code0
[2(VCMPFALSE_OQPS   kreg|mask,ymmreg,ymmrm256|b32 AVX512VL )]700.8 code0
[2(VCMPFALSE_OQPS   kreg|mask,zmmreg,zmmrm512|b32|sae AVX512 )]691.2 code0
[2(VCMPFALSE_OQSD   kreg|mask,xmmreg,xmmrm64|sae AVX512 )]681.6 code0
[2(VCMPFALSE_OQSS   kreg|mask,xmmreg,xmmrm32|sae AVX512 )]672 code0
[2(VCMPNEQ_OQPD     kreg|mask,xmmreg,xmmrm128|b64 AVX512VL )]662.4 code0
[2(VCMPNEQ_OQPD     kreg|mask,ymmreg,ymmrm256|b64 AVX512VL )]652.8 code0
[2(VCMPNEQ_OQPD     kreg|mask,zmmreg,zmmrm512|b64|sae AVX512 )]643.2 code0
[2(VCMPNEQ_OQPS     kreg|mask,xmmreg,xmmrm128|b32 AVX512VL )]633.6 code0
[2(VCMPNEQ_OQPS     kreg|mask,ymmreg,ymmrm256|b32 AVX512VL )]624 code0
[2(VCMPNEQ_OQPS     kreg|mask,zmmreg,zmmrm512|b32|sae AVX512 )]614.4 code0
[2(VCMPNEQ_OQSD     kreg|mask,xmmreg,xmmrm64|sae AVX512 )]604.8 code0
[2(VCMPNEQ_OQSS     kreg|mask,xmmreg,xmmrm32|sae AVX512 )]595.2 code0
[2(VCMPGEPD         kreg|mask,xmmreg,xmmrm128|b64 AVX512VL )]585.6 code0
[2(VCMPGEPD         kreg|mask,ymmreg,ymmrm256|b64 AVX512VL )]576 code0
[2(VCMPGEPD         kreg|mask,zmmreg,zmmrm512|b64|sae AVX512 )]566.4 code0
[2(VCMPGEPS         kreg|mask,xmmreg,xmmrm128|b32 AVX512VL )]556.8 code0
[2(VCMPGEPS         kreg|mask,ymmreg,ymmrm256|b32 AVX512VL )]547.2 code0
[2(VCMPGEPS         kreg|mask,zmmreg,zmmrm512|b32|sae AVX512 )]537.6 code0
[2(VCMPGESD         kreg|mask,xmmreg,xmmrm64|sae AVX512 )]528 code0
[2(VCMPGESS         kreg|mask,xmmreg,xmmrm32|sae AVX512 )]518.4 code0
[2(VCMPGE_OSPD      kreg|mask,xmmreg,xmmrm128|b64 AVX512VL )]508.8 code0
[2(VCMPGE_OSPD      kreg|mask,ymmreg,ymmrm256|b64 AVX512VL )]499.2 code0
[2(VCMPGE_OSPD      kreg|mask,zmmreg,zmmrm512|b64|sae AVX512 )]489.6 code0
[2(VCMPGE_OSPS      kreg|mask,xmmreg,xmmrm128|b32 AVX512VL )]480 code0
[2(VCMPGE_OSPS      kreg|mask,ymmreg,ymmrm256|b32 AVX512VL )]470.4 code0
[2(VCMPGE_OSPS      kreg|mask,zmmreg,zmmrm512|b32|sae AVX512 )]460.8 code0
[2(VCMPGE_OSSD      kreg|mask,xmmreg,xmmrm64|sae AVX512 )]451.2 code0
[2(VCMPGE_OSSS      kreg|mask,xmmreg,xmmrm32|sae AVX512 )]441.6 code0
[2(VCMPGTPD         kreg|mask,xmmreg,xmmrm128|b64 AVX512VL )]432 code0
[2(VCMPGTPD         kreg|mask,ymmreg,ymmrm256|b64 AVX512VL )]422.4 code0
[2(VCMPGTPD         kreg|mask,zmmreg,zmmrm512|b64|sae AVX512 )]412.8 code0
[2(VCMPGTPS         kreg|mask,xmmreg,xmmrm128|b32 AVX512VL )]403.2 code0
[2(VCMPGTPS         kreg|mask,ymmreg,ymmrm256|b32 AVX512VL )]393.6 code0
[2(VCMPGTPS         kreg|mask,zmmreg,zmmrm512|b32|sae AVX512 )]384 code0
[2(VCMPGTSD         kreg|mask,xmmreg,xmmrm64|sae AVX512 )]374.4 code0
[2(VCMPGTSS         kreg|mask,xmmreg,xmmrm32|sae AVX512 )]364.8 code0
[2(VCMPGT_OSPD      kreg|mask,xmmreg,xmmrm128|b64 AVX512VL )]355.2 code0
[2(VCMPGT_OSPD      kreg|mask,ymmreg,ymmrm256|b64 AVX512VL )]345.6 code0
[2(VCMPGT_OSPD      kreg|mask,zmmreg,zmmrm512|b64|sae AVX512 )]336 code0
[2(VCMPGT_OSPS      kreg|mask,xmmreg,xmmrm128|b32 AVX512VL )]326.4 code0
[2(VCMPGT_OSPS      kreg|mask,ymmreg,ymmrm256|b32 AVX512VL )]316.8 code0
[2(VCMPGT_OSPS      kreg|mask,zmmreg,zmmrm512|b32|sae AVX512 )]307.2 code0
[2(VCMPGT_OSSD      kreg|mask,xmmreg,xmmrm64|sae AVX512 )]297.6 code0
[2(VCMPGT_OSSS      kreg|mask,xmmreg,xmmrm32|sae AVX512 )]288 code0
[2(VCMPTRUEPD       kreg|mask,xmmreg,xmmrm128|b64 AVX512VL )]278.4 code0
[2(VCMPTRUEPD       kreg|mask,ymmreg,ymmrm256|b64 AVX512VL )]268.8 code0
[2(VCMPTRUEPD       kreg|mask,zmmreg,zmmrm512|b64|sae AVX512 )]259.2 code0
[2(VCMPTRUEPS       kreg|mask,xmmreg,xmmrm128|b32 AVX512VL )]249.6 code0
[2(VCMPTRUEPS       kreg|mask,ymmreg,ymmrm256|b32 AVX512VL )]240 code0
[2(VCMPTRUEPS       kreg|mask,zmmreg,zmmrm512|b32|sae AVX512 )]230.4 code0
[2(VCMPTRUESD       kreg|mask,xmmreg,xmmrm64|sae AVX512 )]220.799999999999 code0
[2(VCMPTRUESS       kreg|mask,xmmreg,xmmrm32|sae AVX512 )]211.199999999999 code0
[2(VCMPTRUE_UQPD    kreg|mask,xmmreg,xmmrm128|b64 AVX512VL )]201.599999999999 code0
[2(VCMPTRUE_UQPD    kreg|mask,ymmreg,ymmrm256|b64 AVX512VL )]191.999999999999 code0
[2(VCMPTRUE_UQPD    kreg|mask,zmmreg,zmmrm512|b64|sae AVX512 )]182.399999999999 code0
[2(VCMPTRUE_UQPS    kreg|mask,xmmreg,xmmrm128|b32 AVX512VL )]172.799999999999 code0
[2(VCMPTRUE_UQPS    kreg|mask,ymmreg,ymmrm256|b32 AVX512VL )]163.199999999999 code0
[2(VCMPTRUE_UQPS    kreg|mask,zmmreg,zmmrm512|b32|sae AVX512 )]153.599999999999 code0
[2(VCMPTRUE_UQSD    kreg|mask,xmmreg,xmmrm64|sae AVX512 )]143.999999999999 code0
[2(VCMPTRUE_UQSS    kreg|mask,xmmreg,xmmrm32|sae AVX512 )]134.399999999999 code0
[2(VCMPEQ_OSPD      kreg|mask,xmmreg,xmmrm128|b64 AVX512VL )]124.799999999999 code0
[2(VCMPEQ_OSPD      kreg|mask,ymmreg,ymmrm256|b64 AVX512VL )]115.199999999999 code0
[2(VCMPEQ_OSPD      kreg|mask,zmmreg,zmmrm512|b64|sae AVX512 )]105.599999999999 code0
[2(VCMPEQ_OSPS      kreg|mask,xmmreg,xmmrm128|b32 AVX512VL )]95.9999999999992 code0
[2(VCMPEQ_OSPS      kreg|mask,ymmreg,ymmrm256|b32 AVX512VL )]86.3999999999992 code0
[2(VCMPEQ_OSPS      kreg|mask,zmmreg,zmmrm512|b32|sae AVX512 )]76.7999999999992 code0
(200)pageeven
restore showpage
%%Page: 201 201
%%BeginPageSetup
save
%%EndPageSetup
/201 pa
[2(VCMPEQ_OSSD      kreg|mask,xmmreg,xmmrm64|sae AVX512 )]710.4 code0
[2(VCMPEQ_OSSS      kreg|mask,xmmreg,xmmrm32|sae AVX512 )]700.8 code0
[2(VCMPLT_OQPD      kreg|mask,xmmreg,xmmrm128|b64 AVX512VL )]691.2 code0
[2(VCMPLT_OQPD      kreg|mask,ymmreg,ymmrm256|b64 AVX512VL )]681.6 code0
[2(VCMPLT_OQPD      kreg|mask,zmmreg,zmmrm512|b64|sae AVX512 )]672 code0
[2(VCMPLT_OQPS      kreg|mask,xmmreg,xmmrm128|b32 AVX512VL )]662.4 code0
[2(VCMPLT_OQPS      kreg|mask,ymmreg,ymmrm256|b32 AVX512VL )]652.8 code0
[2(VCMPLT_OQPS      kreg|mask,zmmreg,zmmrm512|b32|sae AVX512 )]643.2 code0
[2(VCMPLT_OQSD      kreg|mask,xmmreg,xmmrm64|sae AVX512 )]633.6 code0
[2(VCMPLT_OQSS      kreg|mask,xmmreg,xmmrm32|sae AVX512 )]624 code0
[2(VCMPLE_OQPD      kreg|mask,xmmreg,xmmrm128|b64 AVX512VL )]614.4 code0
[2(VCMPLE_OQPD      kreg|mask,ymmreg,ymmrm256|b64 AVX512VL )]604.8 code0
[2(VCMPLE_OQPD      kreg|mask,zmmreg,zmmrm512|b64|sae AVX512 )]595.2 code0
[2(VCMPLE_OQPS      kreg|mask,xmmreg,xmmrm128|b32 AVX512VL )]585.6 code0
[2(VCMPLE_OQPS      kreg|mask,ymmreg,ymmrm256|b32 AVX512VL )]576 code0
[2(VCMPLE_OQPS      kreg|mask,zmmreg,zmmrm512|b32|sae AVX512 )]566.4 code0
[2(VCMPLE_OQSD      kreg|mask,xmmreg,xmmrm64|sae AVX512 )]556.8 code0
[2(VCMPLE_OQSS      kreg|mask,xmmreg,xmmrm32|sae AVX512 )]547.2 code0
[2(VCMPUNORD_SPD    kreg|mask,xmmreg,xmmrm128|b64 AVX512VL )]537.6 code0
[2(VCMPUNORD_SPD    kreg|mask,ymmreg,ymmrm256|b64 AVX512VL )]528 code0
[2(VCMPUNORD_SPD    kreg|mask,zmmreg,zmmrm512|b64|sae AVX512 )]518.4 code0
[2(VCMPUNORD_SPS    kreg|mask,xmmreg,xmmrm128|b32 AVX512VL )]508.8 code0
[2(VCMPUNORD_SPS    kreg|mask,ymmreg,ymmrm256|b32 AVX512VL )]499.2 code0
[2(VCMPUNORD_SPS    kreg|mask,zmmreg,zmmrm512|b32|sae AVX512 )]489.6 code0
[2(VCMPUNORD_SSD    kreg|mask,xmmreg,xmmrm64|sae AVX512 )]480 code0
[2(VCMPUNORD_SSS    kreg|mask,xmmreg,xmmrm32|sae AVX512 )]470.4 code0
[2(VCMPNEQ_USPD     kreg|mask,xmmreg,xmmrm128|b64 AVX512VL )]460.8 code0
[2(VCMPNEQ_USPD     kreg|mask,ymmreg,ymmrm256|b64 AVX512VL )]451.2 code0
[2(VCMPNEQ_USPD     kreg|mask,zmmreg,zmmrm512|b64|sae AVX512 )]441.6 code0
[2(VCMPNEQ_USPS     kreg|mask,xmmreg,xmmrm128|b32 AVX512VL )]432 code0
[2(VCMPNEQ_USPS     kreg|mask,ymmreg,ymmrm256|b32 AVX512VL )]422.4 code0
[2(VCMPNEQ_USPS     kreg|mask,zmmreg,zmmrm512|b32|sae AVX512 )]412.8 code0
[2(VCMPNEQ_USSD     kreg|mask,xmmreg,xmmrm64|sae AVX512 )]403.2 code0
[2(VCMPNEQ_USSS     kreg|mask,xmmreg,xmmrm32|sae AVX512 )]393.6 code0
[2(VCMPNLT_UQPD     kreg|mask,xmmreg,xmmrm128|b64 AVX512VL )]384 code0
[2(VCMPNLT_UQPD     kreg|mask,ymmreg,ymmrm256|b64 AVX512VL )]374.4 code0
[2(VCMPNLT_UQPD     kreg|mask,zmmreg,zmmrm512|b64|sae AVX512 )]364.8 code0
[2(VCMPNLT_UQPS     kreg|mask,xmmreg,xmmrm128|b32 AVX512VL )]355.2 code0
[2(VCMPNLT_UQPS     kreg|mask,ymmreg,ymmrm256|b32 AVX512VL )]345.6 code0
[2(VCMPNLT_UQPS     kreg|mask,zmmreg,zmmrm512|b32|sae AVX512 )]336 code0
[2(VCMPNLT_UQSD     kreg|mask,xmmreg,xmmrm64|sae AVX512 )]326.4 code0
[2(VCMPNLT_UQSS     kreg|mask,xmmreg,xmmrm32|sae AVX512 )]316.8 code0
[2(VCMPNLE_UQPD     kreg|mask,xmmreg,xmmrm128|b64 AVX512VL )]307.2 code0
[2(VCMPNLE_UQPD     kreg|mask,ymmreg,ymmrm256|b64 AVX512VL )]297.6 code0
[2(VCMPNLE_UQPD     kreg|mask,zmmreg,zmmrm512|b64|sae AVX512 )]288 code0
[2(VCMPNLE_UQPS     kreg|mask,xmmreg,xmmrm128|b32 AVX512VL )]278.4 code0
[2(VCMPNLE_UQPS     kreg|mask,ymmreg,ymmrm256|b32 AVX512VL )]268.8 code0
[2(VCMPNLE_UQPS     kreg|mask,zmmreg,zmmrm512|b32|sae AVX512 )]259.2 code0
[2(VCMPNLE_UQSD     kreg|mask,xmmreg,xmmrm64|sae AVX512 )]249.6 code0
[2(VCMPNLE_UQSS     kreg|mask,xmmreg,xmmrm32|sae AVX512 )]240 code0
[2(VCMPORD_SPD      kreg|mask,xmmreg,xmmrm128|b64 AVX512VL )]230.4 code0
[2(VCMPORD_SPD      kreg|mask,ymmreg,ymmrm256|b64 AVX512VL )]220.799999999999 code0
[2(VCMPORD_SPD      kreg|mask,zmmreg,zmmrm512|b64|sae AVX512 )]211.199999999999 code0
[2(VCMPORD_SPS      kreg|mask,xmmreg,xmmrm128|b32 AVX512VL )]201.599999999999 code0
[2(VCMPORD_SPS      kreg|mask,ymmreg,ymmrm256|b32 AVX512VL )]191.999999999999 code0
[2(VCMPORD_SPS      kreg|mask,zmmreg,zmmrm512|b32|sae AVX512 )]182.399999999999 code0
[2(VCMPORD_SSD      kreg|mask,xmmreg,xmmrm64|sae AVX512 )]172.799999999999 code0
[2(VCMPORD_SSS      kreg|mask,xmmreg,xmmrm32|sae AVX512 )]163.199999999999 code0
[2(VCMPEQ_USPD      kreg|mask,xmmreg,xmmrm128|b64 AVX512VL )]153.599999999999 code0
[2(VCMPEQ_USPD      kreg|mask,ymmreg,ymmrm256|b64 AVX512VL )]143.999999999999 code0
[2(VCMPEQ_USPD      kreg|mask,zmmreg,zmmrm512|b64|sae AVX512 )]134.399999999999 code0
[2(VCMPEQ_USPS      kreg|mask,xmmreg,xmmrm128|b32 AVX512VL )]124.799999999999 code0
[2(VCMPEQ_USPS      kreg|mask,ymmreg,ymmrm256|b32 AVX512VL )]115.199999999999 code0
[2(VCMPEQ_USPS      kreg|mask,zmmreg,zmmrm512|b32|sae AVX512 )]105.599999999999 code0
[2(VCMPEQ_USSD      kreg|mask,xmmreg,xmmrm64|sae AVX512 )]95.9999999999992 code0
[2(VCMPEQ_USSS      kreg|mask,xmmreg,xmmrm32|sae AVX512 )]86.3999999999992 code0
[2(VCMPNGE_UQPD     kreg|mask,xmmreg,xmmrm128|b64 AVX512VL )]76.7999999999992 code0
(201)pageodd
restore showpage
%%Page: 202 202
%%BeginPageSetup
save
%%EndPageSetup
/202 pa
[2(VCMPNGE_UQPD     kreg|mask,ymmreg,ymmrm256|b64 AVX512VL )]710.4 code0
[2(VCMPNGE_UQPD     kreg|mask,zmmreg,zmmrm512|b64|sae AVX512 )]700.8 code0
[2(VCMPNGE_UQPS     kreg|mask,xmmreg,xmmrm128|b32 AVX512VL )]691.2 code0
[2(VCMPNGE_UQPS     kreg|mask,ymmreg,ymmrm256|b32 AVX512VL )]681.6 code0
[2(VCMPNGE_UQPS     kreg|mask,zmmreg,zmmrm512|b32|sae AVX512 )]672 code0
[2(VCMPNGE_UQSD     kreg|mask,xmmreg,xmmrm64|sae AVX512 )]662.4 code0
[2(VCMPNGE_UQSS     kreg|mask,xmmreg,xmmrm32|sae AVX512 )]652.8 code0
[2(VCMPNGT_UQPD     kreg|mask,xmmreg,xmmrm128|b64 AVX512VL )]643.2 code0
[2(VCMPNGT_UQPD     kreg|mask,ymmreg,ymmrm256|b64 AVX512VL )]633.6 code0
[2(VCMPNGT_UQPD     kreg|mask,zmmreg,zmmrm512|b64|sae AVX512 )]624 code0
[2(VCMPNGT_UQPS     kreg|mask,xmmreg,xmmrm128|b32 AVX512VL )]614.4 code0
[2(VCMPNGT_UQPS     kreg|mask,ymmreg,ymmrm256|b32 AVX512VL )]604.8 code0
[2(VCMPNGT_UQPS     kreg|mask,zmmreg,zmmrm512|b32|sae AVX512 )]595.2 code0
[2(VCMPNGT_UQSD     kreg|mask,xmmreg,xmmrm64|sae AVX512 )]585.6 code0
[2(VCMPNGT_UQSS     kreg|mask,xmmreg,xmmrm32|sae AVX512 )]576 code0
[2(VCMPFALSE_OSPD   kreg|mask,xmmreg,xmmrm128|b64 AVX512VL )]566.4 code0
[2(VCMPFALSE_OSPD   kreg|mask,ymmreg,ymmrm256|b64 AVX512VL )]556.8 code0
[2(VCMPFALSE_OSPD   kreg|mask,zmmreg,zmmrm512|b64|sae AVX512 )]547.2 code0
[2(VCMPFALSE_OSPS   kreg|mask,xmmreg,xmmrm128|b32 AVX512VL )]537.6 code0
[2(VCMPFALSE_OSPS   kreg|mask,ymmreg,ymmrm256|b32 AVX512VL )]528 code0
[2(VCMPFALSE_OSPS   kreg|mask,zmmreg,zmmrm512|b32|sae AVX512 )]518.4 code0
[2(VCMPFALSE_OSSD   kreg|mask,xmmreg,xmmrm64|sae AVX512 )]508.8 code0
[2(VCMPFALSE_OSSS   kreg|mask,xmmreg,xmmrm32|sae AVX512 )]499.2 code0
[2(VCMPNEQ_OSPD     kreg|mask,xmmreg,xmmrm128|b64 AVX512VL )]489.6 code0
[2(VCMPNEQ_OSPD     kreg|mask,ymmreg,ymmrm256|b64 AVX512VL )]480 code0
[2(VCMPNEQ_OSPD     kreg|mask,zmmreg,zmmrm512|b64|sae AVX512 )]470.4 code0
[2(VCMPNEQ_OSPS     kreg|mask,xmmreg,xmmrm128|b32 AVX512VL )]460.8 code0
[2(VCMPNEQ_OSPS     kreg|mask,ymmreg,ymmrm256|b32 AVX512VL )]451.2 code0
[2(VCMPNEQ_OSPS     kreg|mask,zmmreg,zmmrm512|b32|sae AVX512 )]441.6 code0
[2(VCMPNEQ_OSSD     kreg|mask,xmmreg,xmmrm64|sae AVX512 )]432 code0
[2(VCMPNEQ_OSSS     kreg|mask,xmmreg,xmmrm32|sae AVX512 )]422.4 code0
[2(VCMPGE_OQPD      kreg|mask,xmmreg,xmmrm128|b64 AVX512VL )]412.8 code0
[2(VCMPGE_OQPD      kreg|mask,ymmreg,ymmrm256|b64 AVX512VL )]403.2 code0
[2(VCMPGE_OQPD      kreg|mask,zmmreg,zmmrm512|b64|sae AVX512 )]393.6 code0
[2(VCMPGE_OQPS      kreg|mask,xmmreg,xmmrm128|b32 AVX512VL )]384 code0
[2(VCMPGE_OQPS      kreg|mask,ymmreg,ymmrm256|b32 AVX512VL )]374.4 code0
[2(VCMPGE_OQPS      kreg|mask,zmmreg,zmmrm512|b32|sae AVX512 )]364.8 code0
[2(VCMPGE_OQSD      kreg|mask,xmmreg,xmmrm64|sae AVX512 )]355.2 code0
[2(VCMPGE_OQSS      kreg|mask,xmmreg,xmmrm32|sae AVX512 )]345.6 code0
[2(VCMPGT_OQPD      kreg|mask,xmmreg,xmmrm128|b64 AVX512VL )]336 code0
[2(VCMPGT_OQPD      kreg|mask,ymmreg,ymmrm256|b64 AVX512VL )]326.4 code0
[2(VCMPGT_OQPD      kreg|mask,zmmreg,zmmrm512|b64|sae AVX512 )]316.8 code0
[2(VCMPGT_OQPS      kreg|mask,xmmreg,xmmrm128|b32 AVX512VL )]307.2 code0
[2(VCMPGT_OQPS      kreg|mask,ymmreg,ymmrm256|b32 AVX512VL )]297.6 code0
[2(VCMPGT_OQPS      kreg|mask,zmmreg,zmmrm512|b32|sae AVX512 )]288 code0
[2(VCMPGT_OQSD      kreg|mask,xmmreg,xmmrm64|sae AVX512 )]278.4 code0
[2(VCMPGT_OQSS      kreg|mask,xmmreg,xmmrm32|sae AVX512 )]268.8 code0
[2(VCMPTRUE_USPD    kreg|mask,xmmreg,xmmrm128|b64 AVX512VL )]259.2 code0
[2(VCMPTRUE_USPD    kreg|mask,ymmreg,ymmrm256|b64 AVX512VL )]249.6 code0
[2(VCMPTRUE_USPD    kreg|mask,zmmreg,zmmrm512|b64|sae AVX512 )]240 code0
[2(VCMPTRUE_USPS    kreg|mask,xmmreg,xmmrm128|b32 AVX512VL )]230.4 code0
[2(VCMPTRUE_USPS    kreg|mask,ymmreg,ymmrm256|b32 AVX512VL )]220.799999999999 code0
[2(VCMPTRUE_USPS    kreg|mask,zmmreg,zmmrm512|b32|sae AVX512 )]211.199999999999 code0
[2(VCMPTRUE_USSD    kreg|mask,xmmreg,xmmrm64|sae AVX512 )]201.599999999999 code0
[2(VCMPTRUE_USSS    kreg|mask,xmmreg,xmmrm32|sae AVX512 )]191.999999999999 code0
[2(VCMPPD           kreg|mask,xmmreg,xmmrm128|b64,imm8 AVX512VL )]182.399999999999 code0
[2(VCMPPD           kreg|mask,ymmreg,ymmrm256|b64,imm8 AVX512VL )]172.799999999999 code0
[2(VCMPPD           kreg|mask,zmmreg,zmmrm512|b64|sae,imm8 AVX512 )]163.199999999999 code0
[2(VCMPPS           kreg|mask,xmmreg,xmmrm128|b32,imm8 AVX512VL )]153.599999999999 code0
[2(VCMPPS           kreg|mask,ymmreg,ymmrm256|b32,imm8 AVX512VL )]143.999999999999 code0
[2(VCMPPS           kreg|mask,zmmreg,zmmrm512|b32|sae,imm8 AVX512 )]134.399999999999 code0
[2(VCMPSD           kreg|mask,xmmreg,xmmrm64|sae,imm8 AVX512 )]124.799999999999 code0
[2(VCMPSS           kreg|mask,xmmreg,xmmrm32|sae,imm8 AVX512 )]115.199999999999 code0
[2(VCOMISD          xmmreg,xmmrm64|sae       AVX512 )]105.599999999999 code0
[2(VCOMISS          xmmreg,xmmrm32|sae       AVX512 )]95.9999999999992 code0
[2(VCOMPRESSPD      mem128|mask,xmmreg       AVX512VL )]86.3999999999992 code0
[2(VCOMPRESSPD      mem256|mask,ymmreg       AVX512VL )]76.7999999999992 code0
(202)pageeven
restore showpage
%%Page: 203 203
%%BeginPageSetup
save
%%EndPageSetup
/203 pa
[2(VCOMPRESSPD      mem512|mask,zmmreg       AVX512 )]710.4 code0
[2(VCOMPRESSPD      xmmreg|mask|z,xmmreg     AVX512VL )]700.8 code0
[2(VCOMPRESSPD      ymmreg|mask|z,ymmreg     AVX512VL )]691.2 code0
[2(VCOMPRESSPD      zmmreg|mask|z,zmmreg     AVX512 )]681.6 code0
[2(VCOMPRESSPS      mem128|mask,xmmreg       AVX512VL )]672 code0
[2(VCOMPRESSPS      mem256|mask,ymmreg       AVX512VL )]662.4 code0
[2(VCOMPRESSPS      mem512|mask,zmmreg       AVX512 )]652.8 code0
[2(VCOMPRESSPS      xmmreg|mask|z,xmmreg     AVX512VL )]643.2 code0
[2(VCOMPRESSPS      ymmreg|mask|z,ymmreg     AVX512VL )]633.6 code0
[2(VCOMPRESSPS      zmmreg|mask|z,zmmreg     AVX512 )]624 code0
[2(VCVTDQ2PD        xmmreg|mask|z,xmmrm64|b32 AVX512VL )]614.4 code0
[2(VCVTDQ2PD        ymmreg|mask|z,xmmrm128|b32 AVX512VL )]604.8 code0
[2(VCVTDQ2PD        zmmreg|mask|z,ymmrm256|b32|er AVX512 )]595.2 code0
[2(VCVTDQ2PS        xmmreg|mask|z,xmmrm128|b32 AVX512VL )]585.6 code0
[2(VCVTDQ2PS        ymmreg|mask|z,ymmrm256|b32 AVX512VL )]576 code0
[2(VCVTDQ2PS        zmmreg|mask|z,zmmrm512|b32|er AVX512 )]566.4 code0
[2(VCVTPD2DQ        xmmreg|mask|z,xmmrm128|b64 AVX512VL )]556.8 code0
[2(VCVTPD2DQ        xmmreg|mask|z,ymmrm256|b64 AVX512VL )]547.2 code0
[2(VCVTPD2DQ        ymmreg|mask|z,zmmrm512|b64|er AVX512 )]537.6 code0
[2(VCVTPD2PS        xmmreg|mask|z,xmmrm128|b64 AVX512VL )]528 code0
[2(VCVTPD2PS        xmmreg|mask|z,ymmrm256|b64 AVX512VL )]518.4 code0
[2(VCVTPD2PS        ymmreg|mask|z,zmmrm512|b64|er AVX512 )]508.8 code0
[2(VCVTPD2QQ        xmmreg|mask|z,xmmrm128|b64 AVX512VL/DQ )]499.2 code0
[2(VCVTPD2QQ        ymmreg|mask|z,ymmrm256|b64 AVX512VL/DQ )]489.6 code0
[2(VCVTPD2QQ        zmmreg|mask|z,zmmrm512|b64|er AVX512DQ )]480 code0
[2(VCVTPD2UDQ       xmmreg|mask|z,xmmrm128|b64 AVX512VL )]470.4 code0
[2(VCVTPD2UDQ       xmmreg|mask|z,ymmrm256|b64 AVX512VL )]460.8 code0
[2(VCVTPD2UDQ       ymmreg|mask|z,zmmrm512|b64|er AVX512 )]451.2 code0
[2(VCVTPD2UQQ       xmmreg|mask|z,xmmrm128|b64 AVX512VL/DQ )]441.6 code0
[2(VCVTPD2UQQ       ymmreg|mask|z,ymmrm256|b64 AVX512VL/DQ )]432 code0
[2(VCVTPD2UQQ       zmmreg|mask|z,zmmrm512|b64|er AVX512DQ )]422.4 code0
[2(VCVTPH2PS        xmmreg|mask|z,xmmrm64    AVX512VL )]412.8 code0
[2(VCVTPH2PS        ymmreg|mask|z,xmmrm128   AVX512VL )]403.2 code0
[2(VCVTPH2PS        zmmreg|mask|z,ymmrm256|sae AVX512 )]393.6 code0
[2(VCVTPS2DQ        xmmreg|mask|z,xmmrm128|b32 AVX512VL )]384 code0
[2(VCVTPS2DQ        ymmreg|mask|z,ymmrm256|b32 AVX512VL )]374.4 code0
[2(VCVTPS2DQ        zmmreg|mask|z,zmmrm512|b32|er AVX512 )]364.8 code0
[2(VCVTPS2PD        xmmreg|mask|z,xmmrm64|b32 AVX512VL )]355.2 code0
[2(VCVTPS2PD        ymmreg|mask|z,xmmrm128|b32 AVX512VL )]345.6 code0
[2(VCVTPS2PD        zmmreg|mask|z,ymmrm256|b32|sae AVX512 )]336 code0
[2(VCVTPS2PH        xmmreg|mask|z,xmmreg,imm8 AVX512VL )]326.4 code0
[2(VCVTPS2PH        xmmreg|mask|z,ymmreg,imm8 AVX512VL )]316.8 code0
[2(VCVTPS2PH        ymmreg|mask|z,zmmreg|sae,imm8 AVX512 )]307.2 code0
[2(VCVTPS2PH        mem64|mask,xmmreg,imm8   AVX512VL )]297.6 code0
[2(VCVTPS2PH        mem128|mask,ymmreg,imm8  AVX512VL )]288 code0
[2(VCVTPS2PH        mem256|mask,zmmreg|sae,imm8 AVX512 )]278.4 code0
[2(VCVTPS2QQ        xmmreg|mask|z,xmmrm64|b32 AVX512VL/DQ )]268.8 code0
[2(VCVTPS2QQ        ymmreg|mask|z,xmmrm128|b32 AVX512VL/DQ )]259.2 code0
[2(VCVTPS2QQ        zmmreg|mask|z,ymmrm256|b32|er AVX512DQ )]249.6 code0
[2(VCVTPS2UDQ       xmmreg|mask|z,xmmrm128|b32 AVX512VL )]240 code0
[2(VCVTPS2UDQ       ymmreg|mask|z,ymmrm256|b32 AVX512VL )]230.4 code0
[2(VCVTPS2UDQ       zmmreg|mask|z,zmmrm512|b32|er AVX512 )]220.799999999999 code0
[2(VCVTPS2UQQ       xmmreg|mask|z,xmmrm64|b32 AVX512VL/DQ )]211.199999999999 code0
[2(VCVTPS2UQQ       ymmreg|mask|z,xmmrm128|b32 AVX512VL/DQ )]201.599999999999 code0
[2(VCVTPS2UQQ       zmmreg|mask|z,ymmrm256|b32|er AVX512DQ )]191.999999999999 code0
[2(VCVTQQ2PD        xmmreg|mask|z,xmmrm128|b64 AVX512VL/DQ )]182.399999999999 code0
[2(VCVTQQ2PD        ymmreg|mask|z,ymmrm256|b64 AVX512VL/DQ )]172.799999999999 code0
[2(VCVTQQ2PD        zmmreg|mask|z,zmmrm512|b64|er AVX512DQ )]163.199999999999 code0
[2(VCVTQQ2PS        xmmreg|mask|z,xmmrm128|b64 AVX512VL/DQ )]153.599999999999 code0
[2(VCVTQQ2PS        xmmreg|mask|z,ymmrm256|b64 AVX512VL/DQ )]143.999999999999 code0
[2(VCVTQQ2PS        ymmreg|mask|z,zmmrm512|b64|er AVX512DQ )]134.399999999999 code0
[2(VCVTSD2SI        reg32,xmmrm64|er         AVX512 )]124.799999999999 code0
[2(VCVTSD2SI        reg64,xmmrm64|er         AVX512 )]115.199999999999 code0
[2(VCVTSD2SS        xmmreg|mask|z,xmmreg,xmmrm64|er AVX512 )]105.599999999999 code0
[2(VCVTSD2USI       reg32,xmmrm64|er         AVX512 )]95.9999999999992 code0
[2(VCVTSD2USI       reg64,xmmrm64|er         AVX512 )]86.3999999999992 code0
[2(VCVTSI2SD        xmmreg,xmmreg|er,rm32    AVX512 )]76.7999999999992 code0
(203)pageodd
restore showpage
%%Page: 204 204
%%BeginPageSetup
save
%%EndPageSetup
/204 pa
[2(VCVTSI2SD        xmmreg,xmmreg|er,rm64    AVX512 )]710.4 code0
[2(VCVTSI2SS        xmmreg,xmmreg|er,rm32    AVX512 )]700.8 code0
[2(VCVTSI2SS        xmmreg,xmmreg|er,rm64    AVX512 )]691.2 code0
[2(VCVTSS2SD        xmmreg|mask|z,xmmreg,xmmrm32|sae AVX512 )]681.6 code0
[2(VCVTSS2SI        reg32,xmmrm32|er         AVX512 )]672 code0
[2(VCVTSS2SI        reg64,xmmrm32|er         AVX512 )]662.4 code0
[2(VCVTSS2USI       reg32,xmmrm32|er         AVX512 )]652.8 code0
[2(VCVTSS2USI       reg64,xmmrm32|er         AVX512 )]643.2 code0
[2(VCVTTPD2DQ       xmmreg|mask|z,xmmrm128|b64 AVX512VL )]633.6 code0
[2(VCVTTPD2DQ       xmmreg|mask|z,ymmrm256|b64 AVX512VL )]624 code0
[2(VCVTTPD2DQ       ymmreg|mask|z,zmmrm512|b64|sae AVX512 )]614.4 code0
[2(VCVTTPD2QQ       xmmreg|mask|z,xmmrm128|b64 AVX512VL/DQ )]604.8 code0
[2(VCVTTPD2QQ       ymmreg|mask|z,ymmrm256|b64 AVX512VL/DQ )]595.2 code0
[2(VCVTTPD2QQ       zmmreg|mask|z,zmmrm512|b64|sae AVX512DQ )]585.6 code0
[2(VCVTTPD2UDQ      xmmreg|mask|z,xmmrm128|b64 AVX512VL )]576 code0
[2(VCVTTPD2UDQ      xmmreg|mask|z,ymmrm256|b64 AVX512VL )]566.4 code0
[2(VCVTTPD2UDQ      ymmreg|mask|z,zmmrm512|b64|sae AVX512 )]556.8 code0
[2(VCVTTPD2UQQ      xmmreg|mask|z,xmmrm128|b64 AVX512VL/DQ )]547.2 code0
[2(VCVTTPD2UQQ      ymmreg|mask|z,ymmrm256|b64 AVX512VL/DQ )]537.6 code0
[2(VCVTTPD2UQQ      zmmreg|mask|z,zmmrm512|b64|sae AVX512DQ )]528 code0
[2(VCVTTPS2DQ       xmmreg|mask|z,xmmrm128|b32 AVX512VL )]518.4 code0
[2(VCVTTPS2DQ       ymmreg|mask|z,ymmrm256|b32 AVX512VL )]508.8 code0
[2(VCVTTPS2DQ       zmmreg|mask|z,zmmrm512|b32|sae AVX512 )]499.2 code0
[2(VCVTTPS2QQ       xmmreg|mask|z,xmmrm64|b32 AVX512VL/DQ )]489.6 code0
[2(VCVTTPS2QQ       ymmreg|mask|z,xmmrm128|b32 AVX512VL/DQ )]480 code0
[2(VCVTTPS2QQ       zmmreg|mask|z,ymmrm256|b32|sae AVX512DQ )]470.4 code0
[2(VCVTTPS2UDQ      xmmreg|mask|z,xmmrm128|b32 AVX512VL )]460.8 code0
[2(VCVTTPS2UDQ      ymmreg|mask|z,ymmrm256|b32 AVX512VL )]451.2 code0
[2(VCVTTPS2UDQ      zmmreg|mask|z,zmmrm512|b32|sae AVX512 )]441.6 code0
[2(VCVTTPS2UQQ      xmmreg|mask|z,xmmrm64|b32 AVX512VL/DQ )]432 code0
[2(VCVTTPS2UQQ      ymmreg|mask|z,xmmrm128|b32 AVX512VL/DQ )]422.4 code0
[2(VCVTTPS2UQQ      zmmreg|mask|z,ymmrm256|b32|sae AVX512DQ )]412.8 code0
[2(VCVTTSD2SI       reg32,xmmrm64|sae        AVX512 )]403.2 code0
[2(VCVTTSD2SI       reg64,xmmrm64|sae        AVX512 )]393.6 code0
[2(VCVTTSD2USI      reg32,xmmrm64|sae        AVX512 )]384 code0
[2(VCVTTSD2USI      reg64,xmmrm64|sae        AVX512 )]374.4 code0
[2(VCVTTSS2SI       reg32,xmmrm32|sae        AVX512 )]364.8 code0
[2(VCVTTSS2SI       reg64,xmmrm32|sae        AVX512 )]355.2 code0
[2(VCVTTSS2USI      reg32,xmmrm32|sae        AVX512 )]345.6 code0
[2(VCVTTSS2USI      reg64,xmmrm32|sae        AVX512 )]336 code0
[2(VCVTUDQ2PD       xmmreg|mask|z,xmmrm64|b32 AVX512VL )]326.4 code0
[2(VCVTUDQ2PD       ymmreg|mask|z,xmmrm128|b32 AVX512VL )]316.8 code0
[2(VCVTUDQ2PD       zmmreg|mask|z,ymmrm256|b32|er AVX512 )]307.2 code0
[2(VCVTUDQ2PS       xmmreg|mask|z,xmmrm128|b32 AVX512VL )]297.6 code0
[2(VCVTUDQ2PS       ymmreg|mask|z,ymmrm256|b32 AVX512VL )]288 code0
[2(VCVTUDQ2PS       zmmreg|mask|z,zmmrm512|b32|er AVX512 )]278.4 code0
[2(VCVTUQQ2PD       xmmreg|mask|z,xmmrm128|b64 AVX512VL/DQ )]268.8 code0
[2(VCVTUQQ2PD       ymmreg|mask|z,ymmrm256|b64 AVX512VL/DQ )]259.2 code0
[2(VCVTUQQ2PD       zmmreg|mask|z,zmmrm512|b64|er AVX512DQ )]249.6 code0
[2(VCVTUQQ2PS       xmmreg|mask|z,xmmrm128|b64 AVX512VL/DQ )]240 code0
[2(VCVTUQQ2PS       xmmreg|mask|z,ymmrm256|b64 AVX512VL/DQ )]230.4 code0
[2(VCVTUQQ2PS       ymmreg|mask|z,zmmrm512|b64|er AVX512DQ )]220.799999999999 code0
[2(VCVTUSI2SD       xmmreg,xmmreg|er,rm32    AVX512 )]211.199999999999 code0
[2(VCVTUSI2SD       xmmreg,xmmreg|er,rm64    AVX512 )]201.599999999999 code0
[2(VCVTUSI2SS       xmmreg,xmmreg|er,rm32    AVX512 )]191.999999999999 code0
[2(VCVTUSI2SS       xmmreg,xmmreg|er,rm64    AVX512 )]182.399999999999 code0
[2(VDBPSADBW        xmmreg|mask|z,xmmreg*,xmmrm128,imm8 AVX512VL/BW )]172.799999999999 code0
[2(VDBPSADBW        ymmreg|mask|z,ymmreg*,ymmrm256,imm8 AVX512VL/BW )]163.199999999999 code0
[2(VDBPSADBW        zmmreg|mask|z,zmmreg*,zmmrm512,imm8 AVX512BW )]153.599999999999 code0
[2(VDIVPD           xmmreg|mask|z,xmmreg*,xmmrm128|b64 AVX512VL )]143.999999999999 code0
[2(VDIVPD           ymmreg|mask|z,ymmreg*,ymmrm256|b64 AVX512VL )]134.399999999999 code0
[2(VDIVPD           zmmreg|mask|z,zmmreg*,zmmrm512|b64|er AVX512 )]124.799999999999 code0
[2(VDIVPS           xmmreg|mask|z,xmmreg*,xmmrm128|b32 AVX512VL )]115.199999999999 code0
[2(VDIVPS           ymmreg|mask|z,ymmreg*,ymmrm256|b32 AVX512VL )]105.599999999999 code0
[2(VDIVPS           zmmreg|mask|z,zmmreg*,zmmrm512|b32|er AVX512 )]95.9999999999992 code0
[2(VDIVSD           xmmreg|mask|z,xmmreg*,xmmrm64|er AVX512 )]86.3999999999992 code0
[2(VDIVSS           xmmreg|mask|z,xmmreg*,xmmrm32|er AVX512 )]76.7999999999992 code0
(204)pageeven
restore showpage
%%Page: 205 205
%%BeginPageSetup
save
%%EndPageSetup
/205 pa
[2(VEXP2PD          zmmreg|mask|z,zmmrm512|b64|sae AVX512ER )]710.4 code0
[2(VEXP2PS          zmmreg|mask|z,zmmrm512|b32|sae AVX512ER )]700.8 code0
[2(VEXPANDPD        xmmreg|mask|z,mem128     AVX512VL )]691.2 code0
[2(VEXPANDPD        ymmreg|mask|z,mem256     AVX512VL )]681.6 code0
[2(VEXPANDPD        zmmreg|mask|z,mem512     AVX512 )]672 code0
[2(VEXPANDPD        xmmreg|mask|z,xmmreg     AVX512VL )]662.4 code0
[2(VEXPANDPD        ymmreg|mask|z,ymmreg     AVX512VL )]652.8 code0
[2(VEXPANDPD        zmmreg|mask|z,zmmreg     AVX512 )]643.2 code0
[2(VEXPANDPS        xmmreg|mask|z,mem128     AVX512VL )]633.6 code0
[2(VEXPANDPS        ymmreg|mask|z,mem256     AVX512VL )]624 code0
[2(VEXPANDPS        zmmreg|mask|z,mem512     AVX512 )]614.4 code0
[2(VEXPANDPS        xmmreg|mask|z,xmmreg     AVX512VL )]604.8 code0
[2(VEXPANDPS        ymmreg|mask|z,ymmreg     AVX512VL )]595.2 code0
[2(VEXPANDPS        zmmreg|mask|z,zmmreg     AVX512 )]585.6 code0
[2(VEXTRACTF32X4    xmmreg|mask|z,ymmreg,imm8 AVX512VL )]576 code0
[2(VEXTRACTF32X4    xmmreg|mask|z,zmmreg,imm8 AVX512 )]566.4 code0
[2(VEXTRACTF32X4    mem128|mask,ymmreg,imm8  AVX512VL )]556.8 code0
[2(VEXTRACTF32X4    mem128|mask,zmmreg,imm8  AVX512 )]547.2 code0
[2(VEXTRACTF32X8    ymmreg|mask|z,zmmreg,imm8 AVX512DQ )]537.6 code0
[2(VEXTRACTF32X8    mem256|mask,zmmreg,imm8  AVX512DQ )]528 code0
[2(VEXTRACTF64X2    xmmreg|mask|z,ymmreg,imm8 AVX512VL/DQ )]518.4 code0
[2(VEXTRACTF64X2    xmmreg|mask|z,zmmreg,imm8 AVX512DQ )]508.8 code0
[2(VEXTRACTF64X2    mem128|mask,ymmreg,imm8  AVX512VL/DQ )]499.2 code0
[2(VEXTRACTF64X2    mem128|mask,zmmreg,imm8  AVX512DQ )]489.6 code0
[2(VEXTRACTF64X4    ymmreg|mask|z,zmmreg,imm8 AVX512 )]480 code0
[2(VEXTRACTF64X4    mem256|mask,zmmreg,imm8  AVX512 )]470.4 code0
[2(VEXTRACTI32X4    xmmreg|mask|z,ymmreg,imm8 AVX512VL )]460.8 code0
[2(VEXTRACTI32X4    xmmreg|mask|z,zmmreg,imm8 AVX512 )]451.2 code0
[2(VEXTRACTI32X4    mem128|mask,ymmreg,imm8  AVX512VL )]441.6 code0
[2(VEXTRACTI32X4    mem128|mask,zmmreg,imm8  AVX512 )]432 code0
[2(VEXTRACTI32X8    ymmreg|mask|z,zmmreg,imm8 AVX512DQ )]422.4 code0
[2(VEXTRACTI32X8    mem256|mask,zmmreg,imm8  AVX512DQ )]412.8 code0
[2(VEXTRACTI64X2    xmmreg|mask|z,ymmreg,imm8 AVX512VL/DQ )]403.2 code0
[2(VEXTRACTI64X2    xmmreg|mask|z,zmmreg,imm8 AVX512DQ )]393.6 code0
[2(VEXTRACTI64X2    mem128|mask,ymmreg,imm8  AVX512VL/DQ )]384 code0
[2(VEXTRACTI64X2    mem128|mask,zmmreg,imm8  AVX512DQ )]374.4 code0
[2(VEXTRACTI64X4    ymmreg|mask|z,zmmreg,imm8 AVX512 )]364.8 code0
[2(VEXTRACTI64X4    mem256|mask,zmmreg,imm8  AVX512 )]355.2 code0
[2(VEXTRACTPS       reg32,xmmreg,imm8        AVX512 )]345.6 code0
[2(VEXTRACTPS       reg64,xmmreg,imm8        AVX512 )]336 code0
[2(VEXTRACTPS       mem32,xmmreg,imm8        AVX512 )]326.4 code0
[2(VFIXUPIMMPD      xmmreg|mask|z,xmmreg*,xmmrm128|b64,imm8 AVX512VL )]316.8 code0
[2(VFIXUPIMMPD      ymmreg|mask|z,ymmreg*,ymmrm256|b64,imm8 AVX512VL )]307.2 code0
[2(VFIXUPIMMPD      zmmreg|mask|z,zmmreg*,zmmrm512|b64|sae,imm8 AVX512 )]297.6 code0
[2(VFIXUPIMMPS      xmmreg|mask|z,xmmreg*,xmmrm128|b32,imm8 AVX512VL )]288 code0
[2(VFIXUPIMMPS      ymmreg|mask|z,ymmreg*,ymmrm256|b32,imm8 AVX512VL )]278.4 code0
[2(VFIXUPIMMPS      zmmreg|mask|z,zmmreg*,zmmrm512|b32|sae,imm8 AVX512 )]268.8 code0
[2(VFIXUPIMMSD      xmmreg|mask|z,xmmreg*,xmmrm64|sae,imm8 AVX512 )]259.2 code0
[2(VFIXUPIMMSS      xmmreg|mask|z,xmmreg*,xmmrm32|sae,imm8 AVX512 )]249.6 code0
[2(VFMADD132PD      xmmreg|mask|z,xmmreg,xmmrm128|b64 AVX512VL )]240 code0
[2(VFMADD132PD      ymmreg|mask|z,ymmreg,ymmrm256|b64 AVX512VL )]230.4 code0
[2(VFMADD132PD      zmmreg|mask|z,zmmreg,zmmrm512|b64|er AVX512 )]220.799999999999 code0
[2(VFMADD132PS      xmmreg|mask|z,xmmreg,xmmrm128|b32 AVX512VL )]211.199999999999 code0
[2(VFMADD132PS      ymmreg|mask|z,ymmreg,ymmrm256|b32 AVX512VL )]201.599999999999 code0
[2(VFMADD132PS      zmmreg|mask|z,zmmreg,zmmrm512|b32|er AVX512 )]191.999999999999 code0
[2(VFMADD132SD      xmmreg|mask|z,xmmreg,xmmrm64|er AVX512 )]182.399999999999 code0
[2(VFMADD132SS      xmmreg|mask|z,xmmreg,xmmrm32|er AVX512 )]172.799999999999 code0
[2(VFMADD213PD      xmmreg|mask|z,xmmreg,xmmrm128|b64 AVX512VL )]163.199999999999 code0
[2(VFMADD213PD      ymmreg|mask|z,ymmreg,ymmrm256|b64 AVX512VL )]153.599999999999 code0
[2(VFMADD213PD      zmmreg|mask|z,zmmreg,zmmrm512|b64|er AVX512 )]143.999999999999 code0
[2(VFMADD213PS      xmmreg|mask|z,xmmreg,xmmrm128|b32 AVX512VL )]134.399999999999 code0
[2(VFMADD213PS      ymmreg|mask|z,ymmreg,ymmrm256|b32 AVX512VL )]124.799999999999 code0
[2(VFMADD213PS      zmmreg|mask|z,zmmreg,zmmrm512|b32|er AVX512 )]115.199999999999 code0
[2(VFMADD213SD      xmmreg|mask|z,xmmreg,xmmrm64|er AVX512 )]105.599999999999 code0
[2(VFMADD213SS      xmmreg|mask|z,xmmreg,xmmrm32|er AVX512 )]95.9999999999992 code0
[2(VFMADD231PD      xmmreg|mask|z,xmmreg,xmmrm128|b64 AVX512VL )]86.3999999999992 code0
[2(VFMADD231PD      ymmreg|mask|z,ymmreg,ymmrm256|b64 AVX512VL )]76.7999999999992 code0
(205)pageodd
restore showpage
%%Page: 206 206
%%BeginPageSetup
save
%%EndPageSetup
/206 pa
[2(VFMADD231PD      zmmreg|mask|z,zmmreg,zmmrm512|b64|er AVX512 )]710.4 code0
[2(VFMADD231PS      xmmreg|mask|z,xmmreg,xmmrm128|b32 AVX512VL )]700.8 code0
[2(VFMADD231PS      ymmreg|mask|z,ymmreg,ymmrm256|b32 AVX512VL )]691.2 code0
[2(VFMADD231PS      zmmreg|mask|z,zmmreg,zmmrm512|b32|er AVX512 )]681.6 code0
[2(VFMADD231SD      xmmreg|mask|z,xmmreg,xmmrm64|er AVX512 )]672 code0
[2(VFMADD231SS      xmmreg|mask|z,xmmreg,xmmrm32|er AVX512 )]662.4 code0
[2(VFMADDSUB132PD   xmmreg|mask|z,xmmreg,xmmrm128|b64 AVX512VL )]652.8 code0
[2(VFMADDSUB132PD   ymmreg|mask|z,ymmreg,ymmrm256|b64 AVX512VL )]643.2 code0
[2(VFMADDSUB132PD   zmmreg|mask|z,zmmreg,zmmrm512|b64|er AVX512 )]633.6 code0
[2(VFMADDSUB132PS   xmmreg|mask|z,xmmreg,xmmrm128|b32 AVX512VL )]624 code0
[2(VFMADDSUB132PS   ymmreg|mask|z,ymmreg,ymmrm256|b32 AVX512VL )]614.4 code0
[2(VFMADDSUB132PS   zmmreg|mask|z,zmmreg,zmmrm512|b32|er AVX512 )]604.8 code0
[2(VFMADDSUB213PD   xmmreg|mask|z,xmmreg,xmmrm128|b64 AVX512VL )]595.2 code0
[2(VFMADDSUB213PD   ymmreg|mask|z,ymmreg,ymmrm256|b64 AVX512VL )]585.6 code0
[2(VFMADDSUB213PD   zmmreg|mask|z,zmmreg,zmmrm512|b64|er AVX512 )]576 code0
[2(VFMADDSUB213PS   xmmreg|mask|z,xmmreg,xmmrm128|b32 AVX512VL )]566.4 code0
[2(VFMADDSUB213PS   ymmreg|mask|z,ymmreg,ymmrm256|b32 AVX512VL )]556.8 code0
[2(VFMADDSUB213PS   zmmreg|mask|z,zmmreg,zmmrm512|b32|er AVX512 )]547.2 code0
[2(VFMADDSUB231PD   xmmreg|mask|z,xmmreg,xmmrm128|b64 AVX512VL )]537.6 code0
[2(VFMADDSUB231PD   ymmreg|mask|z,ymmreg,ymmrm256|b64 AVX512VL )]528 code0
[2(VFMADDSUB231PD   zmmreg|mask|z,zmmreg,zmmrm512|b64|er AVX512 )]518.4 code0
[2(VFMADDSUB231PS   xmmreg|mask|z,xmmreg,xmmrm128|b32 AVX512VL )]508.8 code0
[2(VFMADDSUB231PS   ymmreg|mask|z,ymmreg,ymmrm256|b32 AVX512VL )]499.2 code0
[2(VFMADDSUB231PS   zmmreg|mask|z,zmmreg,zmmrm512|b32|er AVX512 )]489.6 code0
[2(VFMSUB132PD      xmmreg|mask|z,xmmreg,xmmrm128|b64 AVX512VL )]480 code0
[2(VFMSUB132PD      ymmreg|mask|z,ymmreg,ymmrm256|b64 AVX512VL )]470.4 code0
[2(VFMSUB132PD      zmmreg|mask|z,zmmreg,zmmrm512|b64|er AVX512 )]460.8 code0
[2(VFMSUB132PS      xmmreg|mask|z,xmmreg,xmmrm128|b32 AVX512VL )]451.2 code0
[2(VFMSUB132PS      ymmreg|mask|z,ymmreg,ymmrm256|b32 AVX512VL )]441.6 code0
[2(VFMSUB132PS      zmmreg|mask|z,zmmreg,zmmrm512|b32|er AVX512 )]432 code0
[2(VFMSUB132SD      xmmreg|mask|z,xmmreg,xmmrm64|er AVX512 )]422.4 code0
[2(VFMSUB132SS      xmmreg|mask|z,xmmreg,xmmrm32|er AVX512 )]412.8 code0
[2(VFMSUB213PD      xmmreg|mask|z,xmmreg,xmmrm128|b64 AVX512VL )]403.2 code0
[2(VFMSUB213PD      ymmreg|mask|z,ymmreg,ymmrm256|b64 AVX512VL )]393.6 code0
[2(VFMSUB213PD      zmmreg|mask|z,zmmreg,zmmrm512|b64|er AVX512 )]384 code0
[2(VFMSUB213PS      xmmreg|mask|z,xmmreg,xmmrm128|b32 AVX512VL )]374.4 code0
[2(VFMSUB213PS      ymmreg|mask|z,ymmreg,ymmrm256|b32 AVX512VL )]364.8 code0
[2(VFMSUB213PS      zmmreg|mask|z,zmmreg,zmmrm512|b32|er AVX512 )]355.2 code0
[2(VFMSUB213SD      xmmreg|mask|z,xmmreg,xmmrm64|er AVX512 )]345.6 code0
[2(VFMSUB213SS      xmmreg|mask|z,xmmreg,xmmrm32|er AVX512 )]336 code0
[2(VFMSUB231PD      xmmreg|mask|z,xmmreg,xmmrm128|b64 AVX512VL )]326.4 code0
[2(VFMSUB231PD      ymmreg|mask|z,ymmreg,ymmrm256|b64 AVX512VL )]316.8 code0
[2(VFMSUB231PD      zmmreg|mask|z,zmmreg,zmmrm512|b64|er AVX512 )]307.2 code0
[2(VFMSUB231PS      xmmreg|mask|z,xmmreg,xmmrm128|b32 AVX512VL )]297.6 code0
[2(VFMSUB231PS      ymmreg|mask|z,ymmreg,ymmrm256|b32 AVX512VL )]288 code0
[2(VFMSUB231PS      zmmreg|mask|z,zmmreg,zmmrm512|b32|er AVX512 )]278.4 code0
[2(VFMSUB231SD      xmmreg|mask|z,xmmreg,xmmrm64|er AVX512 )]268.8 code0
[2(VFMSUB231SS      xmmreg|mask|z,xmmreg,xmmrm32|er AVX512 )]259.2 code0
[2(VFMSUBADD132PD   xmmreg|mask|z,xmmreg,xmmrm128|b64 AVX512VL )]249.6 code0
[2(VFMSUBADD132PD   ymmreg|mask|z,ymmreg,ymmrm256|b64 AVX512VL )]240 code0
[2(VFMSUBADD132PD   zmmreg|mask|z,zmmreg,zmmrm512|b64|er AVX512 )]230.4 code0
[2(VFMSUBADD132PS   xmmreg|mask|z,xmmreg,xmmrm128|b32 AVX512VL )]220.799999999999 code0
[2(VFMSUBADD132PS   ymmreg|mask|z,ymmreg,ymmrm256|b32 AVX512VL )]211.199999999999 code0
[2(VFMSUBADD132PS   zmmreg|mask|z,zmmreg,zmmrm512|b32|er AVX512 )]201.599999999999 code0
[2(VFMSUBADD213PD   xmmreg|mask|z,xmmreg,xmmrm128|b64 AVX512VL )]191.999999999999 code0
[2(VFMSUBADD213PD   ymmreg|mask|z,ymmreg,ymmrm256|b64 AVX512VL )]182.399999999999 code0
[2(VFMSUBADD213PD   zmmreg|mask|z,zmmreg,zmmrm512|b64|er AVX512 )]172.799999999999 code0
[2(VFMSUBADD213PS   xmmreg|mask|z,xmmreg,xmmrm128|b32 AVX512VL )]163.199999999999 code0
[2(VFMSUBADD213PS   ymmreg|mask|z,ymmreg,ymmrm256|b32 AVX512VL )]153.599999999999 code0
[2(VFMSUBADD213PS   zmmreg|mask|z,zmmreg,zmmrm512|b32|er AVX512 )]143.999999999999 code0
[2(VFMSUBADD231PD   xmmreg|mask|z,xmmreg,xmmrm128|b64 AVX512VL )]134.399999999999 code0
[2(VFMSUBADD231PD   ymmreg|mask|z,ymmreg,ymmrm256|b64 AVX512VL )]124.799999999999 code0
[2(VFMSUBADD231PD   zmmreg|mask|z,zmmreg,zmmrm512|b64|er AVX512 )]115.199999999999 code0
[2(VFMSUBADD231PS   xmmreg|mask|z,xmmreg,xmmrm128|b32 AVX512VL )]105.599999999999 code0
[2(VFMSUBADD231PS   ymmreg|mask|z,ymmreg,ymmrm256|b32 AVX512VL )]95.9999999999992 code0
[2(VFMSUBADD231PS   zmmreg|mask|z,zmmreg,zmmrm512|b32|er AVX512 )]86.3999999999992 code0
[2(VFNMADD132PD     xmmreg|mask|z,xmmreg,xmmrm128|b64 AVX512VL )]76.7999999999992 code0
(206)pageeven
restore showpage
%%Page: 207 207
%%BeginPageSetup
save
%%EndPageSetup
/207 pa
[2(VFNMADD132PD     ymmreg|mask|z,ymmreg,ymmrm256|b64 AVX512VL )]710.4 code0
[2(VFNMADD132PD     zmmreg|mask|z,zmmreg,zmmrm512|b64|er AVX512 )]700.8 code0
[2(VFNMADD132PS     xmmreg|mask|z,xmmreg,xmmrm128|b32 AVX512VL )]691.2 code0
[2(VFNMADD132PS     ymmreg|mask|z,ymmreg,ymmrm256|b32 AVX512VL )]681.6 code0
[2(VFNMADD132PS     zmmreg|mask|z,zmmreg,zmmrm512|b32|er AVX512 )]672 code0
[2(VFNMADD132SD     xmmreg|mask|z,xmmreg,xmmrm64|er AVX512 )]662.4 code0
[2(VFNMADD132SS     xmmreg|mask|z,xmmreg,xmmrm32|er AVX512 )]652.8 code0
[2(VFNMADD213PD     xmmreg|mask|z,xmmreg,xmmrm128|b64 AVX512VL )]643.2 code0
[2(VFNMADD213PD     ymmreg|mask|z,ymmreg,ymmrm256|b64 AVX512VL )]633.6 code0
[2(VFNMADD213PD     zmmreg|mask|z,zmmreg,zmmrm512|b64|er AVX512 )]624 code0
[2(VFNMADD213PS     xmmreg|mask|z,xmmreg,xmmrm128|b32 AVX512VL )]614.4 code0
[2(VFNMADD213PS     ymmreg|mask|z,ymmreg,ymmrm256|b32 AVX512VL )]604.8 code0
[2(VFNMADD213PS     zmmreg|mask|z,zmmreg,zmmrm512|b32|er AVX512 )]595.2 code0
[2(VFNMADD213SD     xmmreg|mask|z,xmmreg,xmmrm64|er AVX512 )]585.6 code0
[2(VFNMADD213SS     xmmreg|mask|z,xmmreg,xmmrm32|er AVX512 )]576 code0
[2(VFNMADD231PD     xmmreg|mask|z,xmmreg,xmmrm128|b64 AVX512VL )]566.4 code0
[2(VFNMADD231PD     ymmreg|mask|z,ymmreg,ymmrm256|b64 AVX512VL )]556.8 code0
[2(VFNMADD231PD     zmmreg|mask|z,zmmreg,zmmrm512|b64|er AVX512 )]547.2 code0
[2(VFNMADD231PS     xmmreg|mask|z,xmmreg,xmmrm128|b32 AVX512VL )]537.6 code0
[2(VFNMADD231PS     ymmreg|mask|z,ymmreg,ymmrm256|b32 AVX512VL )]528 code0
[2(VFNMADD231PS     zmmreg|mask|z,zmmreg,zmmrm512|b32|er AVX512 )]518.4 code0
[2(VFNMADD231SD     xmmreg|mask|z,xmmreg,xmmrm64|er AVX512 )]508.8 code0
[2(VFNMADD231SS     xmmreg|mask|z,xmmreg,xmmrm32|er AVX512 )]499.2 code0
[2(VFNMSUB132PD     xmmreg|mask|z,xmmreg,xmmrm128|b64 AVX512VL )]489.6 code0
[2(VFNMSUB132PD     ymmreg|mask|z,ymmreg,ymmrm256|b64 AVX512VL )]480 code0
[2(VFNMSUB132PD     zmmreg|mask|z,zmmreg,zmmrm512|b64|er AVX512 )]470.4 code0
[2(VFNMSUB132PS     xmmreg|mask|z,xmmreg,xmmrm128|b32 AVX512VL )]460.8 code0
[2(VFNMSUB132PS     ymmreg|mask|z,ymmreg,ymmrm256|b32 AVX512VL )]451.2 code0
[2(VFNMSUB132PS     zmmreg|mask|z,zmmreg,zmmrm512|b32|er AVX512 )]441.6 code0
[2(VFNMSUB132SD     xmmreg|mask|z,xmmreg,xmmrm64|er AVX512 )]432 code0
[2(VFNMSUB132SS     xmmreg|mask|z,xmmreg,xmmrm32|er AVX512 )]422.4 code0
[2(VFNMSUB213PD     xmmreg|mask|z,xmmreg,xmmrm128|b64 AVX512VL )]412.8 code0
[2(VFNMSUB213PD     ymmreg|mask|z,ymmreg,ymmrm256|b64 AVX512VL )]403.2 code0
[2(VFNMSUB213PD     zmmreg|mask|z,zmmreg,zmmrm512|b64|er AVX512 )]393.6 code0
[2(VFNMSUB213PS     xmmreg|mask|z,xmmreg,xmmrm128|b32 AVX512VL )]384 code0
[2(VFNMSUB213PS     ymmreg|mask|z,ymmreg,ymmrm256|b32 AVX512VL )]374.4 code0
[2(VFNMSUB213PS     zmmreg|mask|z,zmmreg,zmmrm512|b32|er AVX512 )]364.8 code0
[2(VFNMSUB213SD     xmmreg|mask|z,xmmreg,xmmrm64|er AVX512 )]355.2 code0
[2(VFNMSUB213SS     xmmreg|mask|z,xmmreg,xmmrm32|er AVX512 )]345.6 code0
[2(VFNMSUB231PD     xmmreg|mask|z,xmmreg,xmmrm128|b64 AVX512VL )]336 code0
[2(VFNMSUB231PD     ymmreg|mask|z,ymmreg,ymmrm256|b64 AVX512VL )]326.4 code0
[2(VFNMSUB231PD     zmmreg|mask|z,zmmreg,zmmrm512|b64|er AVX512 )]316.8 code0
[2(VFNMSUB231PS     xmmreg|mask|z,xmmreg,xmmrm128|b32 AVX512VL )]307.2 code0
[2(VFNMSUB231PS     ymmreg|mask|z,ymmreg,ymmrm256|b32 AVX512VL )]297.6 code0
[2(VFNMSUB231PS     zmmreg|mask|z,zmmreg,zmmrm512|b32|er AVX512 )]288 code0
[2(VFNMSUB231SD     xmmreg|mask|z,xmmreg,xmmrm64|er AVX512 )]278.4 code0
[2(VFNMSUB231SS     xmmreg|mask|z,xmmreg,xmmrm32|er AVX512 )]268.8 code0
[2(VFPCLASSPD       kreg|mask,xmmrm128|b64,imm8 AVX512VL/DQ )]259.2 code0
[2(VFPCLASSPD       kreg|mask,ymmrm256|b64,imm8 AVX512VL/DQ )]249.6 code0
[2(VFPCLASSPD       kreg|mask,zmmrm512|b64,imm8 AVX512DQ )]240 code0
[2(VFPCLASSPS       kreg|mask,xmmrm128|b32,imm8 AVX512VL/DQ )]230.4 code0
[2(VFPCLASSPS       kreg|mask,ymmrm256|b32,imm8 AVX512VL/DQ )]220.799999999999 code0
[2(VFPCLASSPS       kreg|mask,zmmrm512|b32,imm8 AVX512DQ )]211.199999999999 code0
[2(VFPCLASSSD       kreg|mask,xmmrm64,imm8   AVX512DQ )]201.599999999999 code0
[2(VFPCLASSSS       kreg|mask,xmmrm32,imm8   AVX512DQ )]191.999999999999 code0
[2(VGATHERDPD       xmmreg|mask,xmem64       AVX512VL )]182.399999999999 code0
[2(VGATHERDPD       ymmreg|mask,xmem64       AVX512VL )]172.799999999999 code0
[2(VGATHERDPD       zmmreg|mask,ymem64       AVX512 )]163.199999999999 code0
[2(VGATHERDPS       xmmreg|mask,xmem32       AVX512VL )]153.599999999999 code0
[2(VGATHERDPS       ymmreg|mask,ymem32       AVX512VL )]143.999999999999 code0
[2(VGATHERDPS       zmmreg|mask,zmem32       AVX512 )]134.399999999999 code0
[2(VGATHERPF0DPD    ymem64|mask              AVX512PF )]124.799999999999 code0
[2(VGATHERPF0DPS    zmem32|mask              AVX512PF )]115.199999999999 code0
[2(VGATHERPF0QPD    zmem64|mask              AVX512PF )]105.599999999999 code0
[2(VGATHERPF0QPS    zmem32|mask              AVX512PF )]95.9999999999992 code0
[2(VGATHERPF1DPD    ymem64|mask              AVX512PF )]86.3999999999992 code0
[2(VGATHERPF1DPS    zmem32|mask              AVX512PF )]76.7999999999992 code0
(207)pageodd
restore showpage
%%Page: 208 208
%%BeginPageSetup
save
%%EndPageSetup
/208 pa
[2(VGATHERPF1QPD    zmem64|mask              AVX512PF )]710.4 code0
[2(VGATHERPF1QPS    zmem32|mask              AVX512PF )]700.8 code0
[2(VGATHERQPD       xmmreg|mask,xmem64       AVX512VL )]691.2 code0
[2(VGATHERQPD       ymmreg|mask,ymem64       AVX512VL )]681.6 code0
[2(VGATHERQPD       zmmreg|mask,zmem64       AVX512 )]672 code0
[2(VGATHERQPS       xmmreg|mask,xmem32       AVX512VL )]662.4 code0
[2(VGATHERQPS       xmmreg|mask,ymem32       AVX512VL )]652.8 code0
[2(VGATHERQPS       ymmreg|mask,zmem32       AVX512 )]643.2 code0
[2(VGETEXPPD        xmmreg|mask|z,xmmrm128|b64 AVX512VL )]633.6 code0
[2(VGETEXPPD        ymmreg|mask|z,ymmrm256|b64 AVX512VL )]624 code0
[2(VGETEXPPD        zmmreg|mask|z,zmmrm512|b64|sae AVX512 )]614.4 code0
[2(VGETEXPPS        xmmreg|mask|z,xmmrm128|b32 AVX512VL )]604.8 code0
[2(VGETEXPPS        ymmreg|mask|z,ymmrm256|b32 AVX512VL )]595.2 code0
[2(VGETEXPPS        zmmreg|mask|z,zmmrm512|b32|sae AVX512 )]585.6 code0
[2(VGETEXPSD        xmmreg|mask|z,xmmreg,xmmrm64|sae AVX512 )]576 code0
[2(VGETEXPSS        xmmreg|mask|z,xmmreg,xmmrm32|sae AVX512 )]566.4 code0
[2(VGETMANTPD       xmmreg|mask|z,xmmrm128|b64,imm8 AVX512VL )]556.8 code0
[2(VGETMANTPD       ymmreg|mask|z,ymmrm256|b64,imm8 AVX512VL )]547.2 code0
[2(VGETMANTPD       zmmreg|mask|z,zmmrm512|b64|sae,imm8 AVX512 )]537.6 code0
[2(VGETMANTPS       xmmreg|mask|z,xmmrm128|b32,imm8 AVX512VL )]528 code0
[2(VGETMANTPS       ymmreg|mask|z,ymmrm256|b32,imm8 AVX512VL )]518.4 code0
[2(VGETMANTPS       zmmreg|mask|z,zmmrm512|b32|sae,imm8 AVX512 )]508.8 code0
[2(VGETMANTSD       xmmreg|mask|z,xmmreg,xmmrm64|sae,imm8 AVX512 )]499.2 code0
[2(VGETMANTSS       xmmreg|mask|z,xmmreg,xmmrm32|sae,imm8 AVX512 )]489.6 code0
[2(VINSERTF32X4     ymmreg|mask|z,ymmreg*,xmmrm128,imm8 AVX512VL )]480 code0
[2(VINSERTF32X4     zmmreg|mask|z,zmmreg*,xmmrm128,imm8 AVX512 )]470.4 code0
[2(VINSERTF32X8     zmmreg|mask|z,zmmreg*,ymmrm256,imm8 AVX512DQ )]460.8 code0
[2(VINSERTF64X2     ymmreg|mask|z,ymmreg*,xmmrm128,imm8 AVX512VL/DQ )]451.2 code0
[2(VINSERTF64X2     zmmreg|mask|z,zmmreg*,xmmrm128,imm8 AVX512DQ )]441.6 code0
[2(VINSERTF64X4     zmmreg|mask|z,zmmreg*,ymmrm256,imm8 AVX512 )]432 code0
[2(VINSERTI32X4     ymmreg|mask|z,ymmreg*,xmmrm128,imm8 AVX512VL )]422.4 code0
[2(VINSERTI32X4     zmmreg|mask|z,zmmreg*,xmmrm128,imm8 AVX512 )]412.8 code0
[2(VINSERTI32X8     zmmreg|mask|z,zmmreg*,ymmrm256,imm8 AVX512DQ )]403.2 code0
[2(VINSERTI64X2     ymmreg|mask|z,ymmreg*,xmmrm128,imm8 AVX512VL/DQ )]393.6 code0
[2(VINSERTI64X2     zmmreg|mask|z,zmmreg*,xmmrm128,imm8 AVX512DQ )]384 code0
[2(VINSERTI64X4     zmmreg|mask|z,zmmreg*,ymmrm256,imm8 AVX512 )]374.4 code0
[2(VINSERTPS        xmmreg,xmmreg*,xmmrm32,imm8 AVX512 )]364.8 code0
[2(VMAXPD           xmmreg|mask|z,xmmreg*,xmmrm128|b64 AVX512VL )]355.2 code0
[2(VMAXPD           ymmreg|mask|z,ymmreg*,ymmrm256|b64 AVX512VL )]345.6 code0
[2(VMAXPD           zmmreg|mask|z,zmmreg*,zmmrm512|b64|sae AVX512 )]336 code0
[2(VMAXPS           xmmreg|mask|z,xmmreg*,xmmrm128|b32 AVX512VL )]326.4 code0
[2(VMAXPS           ymmreg|mask|z,ymmreg*,ymmrm256|b32 AVX512VL )]316.8 code0
[2(VMAXPS           zmmreg|mask|z,zmmreg*,zmmrm512|b32|sae AVX512 )]307.2 code0
[2(VMAXSD           xmmreg|mask|z,xmmreg*,xmmrm64|sae AVX512 )]297.6 code0
[2(VMAXSS           xmmreg|mask|z,xmmreg*,xmmrm32|sae AVX512 )]288 code0
[2(VMINPD           xmmreg|mask|z,xmmreg*,xmmrm128|b64 AVX512VL )]278.4 code0
[2(VMINPD           ymmreg|mask|z,ymmreg*,ymmrm256|b64 AVX512VL )]268.8 code0
[2(VMINPD           zmmreg|mask|z,zmmreg*,zmmrm512|b64|sae AVX512 )]259.2 code0
[2(VMINPS           xmmreg|mask|z,xmmreg*,xmmrm128|b32 AVX512VL )]249.6 code0
[2(VMINPS           ymmreg|mask|z,ymmreg*,ymmrm256|b32 AVX512VL )]240 code0
[2(VMINPS           zmmreg|mask|z,zmmreg*,zmmrm512|b32|sae AVX512 )]230.4 code0
[2(VMINSD           xmmreg|mask|z,xmmreg*,xmmrm64|sae AVX512 )]220.799999999999 code0
[2(VMINSS           xmmreg|mask|z,xmmreg*,xmmrm32|sae AVX512 )]211.199999999999 code0
[2(VMOVAPD          xmmreg|mask|z,xmmrm128   AVX512VL )]201.599999999999 code0
[2(VMOVAPD          ymmreg|mask|z,ymmrm256   AVX512VL )]191.999999999999 code0
[2(VMOVAPD          zmmreg|mask|z,zmmrm512   AVX512 )]182.399999999999 code0
[2(VMOVAPD          xmmreg|mask|z,xmmreg     AVX512VL )]172.799999999999 code0
[2(VMOVAPD          ymmreg|mask|z,ymmreg     AVX512VL )]163.199999999999 code0
[2(VMOVAPD          zmmreg|mask|z,zmmreg     AVX512 )]153.599999999999 code0
[2(VMOVAPD          mem128|mask,xmmreg       AVX512VL )]143.999999999999 code0
[2(VMOVAPD          mem256|mask,ymmreg       AVX512VL )]134.399999999999 code0
[2(VMOVAPD          mem512|mask,zmmreg       AVX512 )]124.799999999999 code0
[2(VMOVAPS          xmmreg|mask|z,xmmrm128   AVX512VL )]115.199999999999 code0
[2(VMOVAPS          ymmreg|mask|z,ymmrm256   AVX512VL )]105.599999999999 code0
[2(VMOVAPS          zmmreg|mask|z,zmmrm512   AVX512 )]95.9999999999992 code0
[2(VMOVAPS          xmmreg|mask|z,xmmreg     AVX512VL )]86.3999999999992 code0
[2(VMOVAPS          ymmreg|mask|z,ymmreg     AVX512VL )]76.7999999999992 code0
(208)pageeven
restore showpage
%%Page: 209 209
%%BeginPageSetup
save
%%EndPageSetup
/209 pa
[2(VMOVAPS          zmmreg|mask|z,zmmreg     AVX512 )]710.4 code0
[2(VMOVAPS          mem128|mask,xmmreg       AVX512VL )]700.8 code0
[2(VMOVAPS          mem256|mask,ymmreg       AVX512VL )]691.2 code0
[2(VMOVAPS          mem512|mask,zmmreg       AVX512 )]681.6 code0
[2(VMOVD            xmmreg,rm32              AVX512 )]672 code0
[2(VMOVD            rm32,xmmreg              AVX512 )]662.4 code0
[2(VMOVDDUP         xmmreg|mask|z,xmmrm64    AVX512VL )]652.8 code0
[2(VMOVDDUP         ymmreg|mask|z,ymmrm256   AVX512VL )]643.2 code0
[2(VMOVDDUP         zmmreg|mask|z,zmmrm512   AVX512 )]633.6 code0
[2(VMOVDQA32        xmmreg|mask|z,xmmrm128   AVX512VL )]624 code0
[2(VMOVDQA32        ymmreg|mask|z,ymmrm256   AVX512VL )]614.4 code0
[2(VMOVDQA32        zmmreg|mask|z,zmmrm512   AVX512 )]604.8 code0
[2(VMOVDQA32        xmmrm128|mask|z,xmmreg   AVX512VL )]595.2 code0
[2(VMOVDQA32        ymmrm256|mask|z,ymmreg   AVX512VL )]585.6 code0
[2(VMOVDQA32        zmmrm512|mask|z,zmmreg   AVX512 )]576 code0
[2(VMOVDQA64        xmmreg|mask|z,xmmrm128   AVX512VL )]566.4 code0
[2(VMOVDQA64        ymmreg|mask|z,ymmrm256   AVX512VL )]556.8 code0
[2(VMOVDQA64        zmmreg|mask|z,zmmrm512   AVX512 )]547.2 code0
[2(VMOVDQA64        xmmrm128|mask|z,xmmreg   AVX512VL )]537.6 code0
[2(VMOVDQA64        ymmrm256|mask|z,ymmreg   AVX512VL )]528 code0
[2(VMOVDQA64        zmmrm512|mask|z,zmmreg   AVX512 )]518.4 code0
[2(VMOVDQU16        xmmreg|mask|z,xmmrm128   AVX512VL/BW )]508.8 code0
[2(VMOVDQU16        ymmreg|mask|z,ymmrm256   AVX512VL/BW )]499.2 code0
[2(VMOVDQU16        zmmreg|mask|z,zmmrm512   AVX512BW )]489.6 code0
[2(VMOVDQU16        xmmrm128|mask|z,xmmreg   AVX512VL/BW )]480 code0
[2(VMOVDQU16        ymmrm256|mask|z,ymmreg   AVX512VL/BW )]470.4 code0
[2(VMOVDQU16        zmmrm512|mask|z,zmmreg   AVX512BW )]460.8 code0
[2(VMOVDQU32        xmmreg|mask|z,xmmrm128   AVX512VL )]451.2 code0
[2(VMOVDQU32        ymmreg|mask|z,ymmrm256   AVX512VL )]441.6 code0
[2(VMOVDQU32        zmmreg|mask|z,zmmrm512   AVX512 )]432 code0
[2(VMOVDQU32        xmmrm128|mask|z,xmmreg   AVX512VL )]422.4 code0
[2(VMOVDQU32        ymmrm256|mask|z,ymmreg   AVX512VL )]412.8 code0
[2(VMOVDQU32        zmmrm512|mask|z,zmmreg   AVX512 )]403.2 code0
[2(VMOVDQU64        xmmreg|mask|z,xmmrm128   AVX512VL )]393.6 code0
[2(VMOVDQU64        ymmreg|mask|z,ymmrm256   AVX512VL )]384 code0
[2(VMOVDQU64        zmmreg|mask|z,zmmrm512   AVX512 )]374.4 code0
[2(VMOVDQU64        xmmrm128|mask|z,xmmreg   AVX512VL )]364.8 code0
[2(VMOVDQU64        ymmrm256|mask|z,ymmreg   AVX512VL )]355.2 code0
[2(VMOVDQU64        zmmrm512|mask|z,zmmreg   AVX512 )]345.6 code0
[2(VMOVDQU8         xmmreg|mask|z,xmmrm128   AVX512VL/BW )]336 code0
[2(VMOVDQU8         ymmreg|mask|z,ymmrm256   AVX512VL/BW )]326.4 code0
[2(VMOVDQU8         zmmreg|mask|z,zmmrm512   AVX512BW )]316.8 code0
[2(VMOVDQU8         xmmrm128|mask|z,xmmreg   AVX512VL/BW )]307.2 code0
[2(VMOVDQU8         ymmrm256|mask|z,ymmreg   AVX512VL/BW )]297.6 code0
[2(VMOVDQU8         zmmrm512|mask|z,zmmreg   AVX512BW )]288 code0
[2(VMOVHLPS         xmmreg,xmmreg*,xmmreg    AVX512 )]278.4 code0
[2(VMOVHPD          xmmreg,xmmreg*,mem64     AVX512 )]268.8 code0
[2(VMOVHPD          mem64,xmmreg             AVX512 )]259.2 code0
[2(VMOVHPS          xmmreg,xmmreg*,mem64     AVX512 )]249.6 code0
[2(VMOVHPS          mem64,xmmreg             AVX512 )]240 code0
[2(VMOVLHPS         xmmreg,xmmreg*,xmmreg    AVX512 )]230.4 code0
[2(VMOVLPD          xmmreg,xmmreg*,mem64     AVX512 )]220.799999999999 code0
[2(VMOVLPD          mem64,xmmreg             AVX512 )]211.199999999999 code0
[2(VMOVLPS          xmmreg,xmmreg*,mem64     AVX512 )]201.599999999999 code0
[2(VMOVLPS          mem64,xmmreg             AVX512 )]191.999999999999 code0
[2(VMOVNTDQ         mem128,xmmreg            AVX512VL )]182.399999999999 code0
[2(VMOVNTDQ         mem256,ymmreg            AVX512VL )]172.799999999999 code0
[2(VMOVNTDQ         mem512,zmmreg            AVX512 )]163.199999999999 code0
[2(VMOVNTDQA        xmmreg,mem128            AVX512VL )]153.599999999999 code0
[2(VMOVNTDQA        ymmreg,mem256            AVX512VL )]143.999999999999 code0
[2(VMOVNTDQA        zmmreg,mem512            AVX512 )]134.399999999999 code0
[2(VMOVNTPD         mem128,xmmreg            AVX512VL )]124.799999999999 code0
[2(VMOVNTPD         mem256,ymmreg            AVX512VL )]115.199999999999 code0
[2(VMOVNTPD         mem512,zmmreg            AVX512 )]105.599999999999 code0
[2(VMOVNTPS         mem128,xmmreg            AVX512VL )]95.9999999999992 code0
[2(VMOVNTPS         mem256,ymmreg            AVX512VL )]86.3999999999992 code0
[2(VMOVNTPS         mem512,zmmreg            AVX512 )]76.7999999999992 code0
(209)pageodd
restore showpage
%%Page: 210 210
%%BeginPageSetup
save
%%EndPageSetup
/210 pa
[2(VMOVQ            xmmreg,rm64              AVX512 )]710.4 code0
[2(VMOVQ            rm64,xmmreg              AVX512 )]700.8 code0
[2(VMOVQ            xmmreg,xmmrm64           AVX512 )]691.2 code0
[2(VMOVQ            xmmrm64,xmmreg           AVX512 )]681.6 code0
[2(VMOVSD           xmmreg|mask|z,mem64      AVX512 )]672 code0
[2(VMOVSD           mem64|mask,xmmreg        AVX512 )]662.4 code0
[2(VMOVSD           xmmreg|mask|z,xmmreg*,xmmreg AVX512 )]652.8 code0
[2(VMOVSD           xmmreg|mask|z,xmmreg*,xmmreg AVX512 )]643.2 code0
[2(VMOVSHDUP        xmmreg|mask|z,xmmrm128   AVX512VL )]633.6 code0
[2(VMOVSHDUP        ymmreg|mask|z,ymmrm256   AVX512VL )]624 code0
[2(VMOVSHDUP        zmmreg|mask|z,zmmrm512   AVX512 )]614.4 code0
[2(VMOVSLDUP        xmmreg|mask|z,xmmrm128   AVX512VL )]604.8 code0
[2(VMOVSLDUP        ymmreg|mask|z,ymmrm256   AVX512VL )]595.2 code0
[2(VMOVSLDUP        zmmreg|mask|z,zmmrm512   AVX512 )]585.6 code0
[2(VMOVSS           xmmreg|mask|z,mem32      AVX512 )]576 code0
[2(VMOVSS           mem32|mask,xmmreg        AVX512 )]566.4 code0
[2(VMOVSS           xmmreg|mask|z,xmmreg*,xmmreg AVX512 )]556.8 code0
[2(VMOVSS           xmmreg|mask|z,xmmreg*,xmmreg AVX512 )]547.2 code0
[2(VMOVUPD          xmmreg|mask|z,xmmrm128   AVX512VL )]537.6 code0
[2(VMOVUPD          ymmreg|mask|z,ymmrm256   AVX512VL )]528 code0
[2(VMOVUPD          zmmreg|mask|z,zmmrm512   AVX512 )]518.4 code0
[2(VMOVUPD          xmmreg|mask|z,xmmreg     AVX512VL )]508.8 code0
[2(VMOVUPD          ymmreg|mask|z,ymmreg     AVX512VL )]499.2 code0
[2(VMOVUPD          zmmreg|mask|z,zmmreg     AVX512 )]489.6 code0
[2(VMOVUPD          mem128|mask,xmmreg       AVX512VL )]480 code0
[2(VMOVUPD          mem256|mask,ymmreg       AVX512VL )]470.4 code0
[2(VMOVUPD          mem512|mask,zmmreg       AVX512 )]460.8 code0
[2(VMOVUPS          xmmreg|mask|z,xmmrm128   AVX512VL )]451.2 code0
[2(VMOVUPS          ymmreg|mask|z,ymmrm256   AVX512VL )]441.6 code0
[2(VMOVUPS          zmmreg|mask|z,zmmrm512   AVX512 )]432 code0
[2(VMOVUPS          xmmreg|mask|z,xmmreg     AVX512VL )]422.4 code0
[2(VMOVUPS          ymmreg|mask|z,ymmreg     AVX512VL )]412.8 code0
[2(VMOVUPS          zmmreg|mask|z,zmmreg     AVX512 )]403.2 code0
[2(VMOVUPS          mem128|mask,xmmreg       AVX512VL )]393.6 code0
[2(VMOVUPS          mem256|mask,ymmreg       AVX512VL )]384 code0
[2(VMOVUPS          mem512|mask,zmmreg       AVX512 )]374.4 code0
[2(VMULPD           xmmreg|mask|z,xmmreg*,xmmrm128|b64 AVX512VL )]364.8 code0
[2(VMULPD           ymmreg|mask|z,ymmreg*,ymmrm256|b64 AVX512VL )]355.2 code0
[2(VMULPD           zmmreg|mask|z,zmmreg*,zmmrm512|b64|er AVX512 )]345.6 code0
[2(VMULPS           xmmreg|mask|z,xmmreg*,xmmrm128|b32 AVX512VL )]336 code0
[2(VMULPS           ymmreg|mask|z,ymmreg*,ymmrm256|b32 AVX512VL )]326.4 code0
[2(VMULPS           zmmreg|mask|z,zmmreg*,zmmrm512|b32|er AVX512 )]316.8 code0
[2(VMULSD           xmmreg|mask|z,xmmreg*,xmmrm64|er AVX512 )]307.2 code0
[2(VMULSS           xmmreg|mask|z,xmmreg*,xmmrm32|er AVX512 )]297.6 code0
[2(VORPD            xmmreg|mask|z,xmmreg*,xmmrm128|b64 AVX512VL/DQ )]288 code0
[2(VORPD            ymmreg|mask|z,ymmreg*,ymmrm256|b64 AVX512VL/DQ )]278.4 code0
[2(VORPD            zmmreg|mask|z,zmmreg*,zmmrm512|b64 AVX512DQ )]268.8 code0
[2(VORPS            xmmreg|mask|z,xmmreg*,xmmrm128|b32 AVX512VL/DQ )]259.2 code0
[2(VORPS            ymmreg|mask|z,ymmreg*,ymmrm256|b32 AVX512VL/DQ )]249.6 code0
[2(VORPS            zmmreg|mask|z,zmmreg*,zmmrm512|b32 AVX512DQ )]240 code0
[2(VPABSB           xmmreg|mask|z,xmmrm128   AVX512VL/BW )]230.4 code0
[2(VPABSB           ymmreg|mask|z,ymmrm256   AVX512VL/BW )]220.799999999999 code0
[2(VPABSB           zmmreg|mask|z,zmmrm512   AVX512BW )]211.199999999999 code0
[2(VPABSD           xmmreg|mask|z,xmmrm128|b32 AVX512VL )]201.599999999999 code0
[2(VPABSD           ymmreg|mask|z,ymmrm256|b32 AVX512VL )]191.999999999999 code0
[2(VPABSD           zmmreg|mask|z,zmmrm512|b32 AVX512 )]182.399999999999 code0
[2(VPABSQ           xmmreg|mask|z,xmmrm128|b64 AVX512VL )]172.799999999999 code0
[2(VPABSQ           ymmreg|mask|z,ymmrm256|b64 AVX512VL )]163.199999999999 code0
[2(VPABSQ           zmmreg|mask|z,zmmrm512|b64 AVX512 )]153.599999999999 code0
[2(VPABSW           xmmreg|mask|z,xmmrm128   AVX512VL/BW )]143.999999999999 code0
[2(VPABSW           ymmreg|mask|z,ymmrm256   AVX512VL/BW )]134.399999999999 code0
[2(VPABSW           zmmreg|mask|z,zmmrm512   AVX512BW )]124.799999999999 code0
[2(VPACKSSDW        xmmreg|mask|z,xmmreg*,xmmrm128|b32 AVX512VL/BW )]115.199999999999 code0
[2(VPACKSSDW        ymmreg|mask|z,ymmreg*,ymmrm256|b32 AVX512VL/BW )]105.599999999999 code0
[2(VPACKSSDW        zmmreg|mask|z,zmmreg*,zmmrm512|b32 AVX512BW )]95.9999999999992 code0
[2(VPACKSSWB        xmmreg|mask|z,xmmreg*,xmmrm128 AVX512VL/BW )]86.3999999999992 code0
[2(VPACKSSWB        ymmreg|mask|z,ymmreg*,ymmrm256 AVX512VL/BW )]76.7999999999992 code0
(210)pageeven
restore showpage
%%Page: 211 211
%%BeginPageSetup
save
%%EndPageSetup
/211 pa
[2(VPACKSSWB        zmmreg|mask|z,zmmreg*,zmmrm512 AVX512BW )]710.4 code0
[2(VPACKUSDW        xmmreg|mask|z,xmmreg*,xmmrm128|b32 AVX512VL/BW )]700.8 code0
[2(VPACKUSDW        ymmreg|mask|z,ymmreg*,ymmrm256|b32 AVX512VL/BW )]691.2 code0
[2(VPACKUSDW        zmmreg|mask|z,zmmreg*,zmmrm512|b32 AVX512BW )]681.6 code0
[2(VPACKUSWB        xmmreg|mask|z,xmmreg*,xmmrm128 AVX512VL/BW )]672 code0
[2(VPACKUSWB        ymmreg|mask|z,ymmreg*,ymmrm256 AVX512VL/BW )]662.4 code0
[2(VPACKUSWB        zmmreg|mask|z,zmmreg*,zmmrm512 AVX512BW )]652.8 code0
[2(VPADDB           xmmreg|mask|z,xmmreg*,xmmrm128 AVX512VL/BW )]643.2 code0
[2(VPADDB           ymmreg|mask|z,ymmreg*,ymmrm256 AVX512VL/BW )]633.6 code0
[2(VPADDB           zmmreg|mask|z,zmmreg*,zmmrm512 AVX512BW )]624 code0
[2(VPADDD           xmmreg|mask|z,xmmreg*,xmmrm128|b32 AVX512VL )]614.4 code0
[2(VPADDD           ymmreg|mask|z,ymmreg*,ymmrm256|b32 AVX512VL )]604.8 code0
[2(VPADDD           zmmreg|mask|z,zmmreg*,zmmrm512|b32 AVX512 )]595.2 code0
[2(VPADDQ           xmmreg|mask|z,xmmreg*,xmmrm128|b64 AVX512VL )]585.6 code0
[2(VPADDQ           ymmreg|mask|z,ymmreg*,ymmrm256|b64 AVX512VL )]576 code0
[2(VPADDQ           zmmreg|mask|z,zmmreg*,zmmrm512|b64 AVX512 )]566.4 code0
[2(VPADDSB          xmmreg|mask|z,xmmreg*,xmmrm128 AVX512VL/BW )]556.8 code0
[2(VPADDSB          ymmreg|mask|z,ymmreg*,ymmrm256 AVX512VL/BW )]547.2 code0
[2(VPADDSB          zmmreg|mask|z,zmmreg*,zmmrm512 AVX512BW )]537.6 code0
[2(VPADDSW          xmmreg|mask|z,xmmreg*,xmmrm128 AVX512VL/BW )]528 code0
[2(VPADDSW          ymmreg|mask|z,ymmreg*,ymmrm256 AVX512VL/BW )]518.4 code0
[2(VPADDSW          zmmreg|mask|z,zmmreg*,zmmrm512 AVX512BW )]508.8 code0
[2(VPADDUSB         xmmreg|mask|z,xmmreg*,xmmrm128 AVX512VL/BW )]499.2 code0
[2(VPADDUSB         ymmreg|mask|z,ymmreg*,ymmrm256 AVX512VL/BW )]489.6 code0
[2(VPADDUSB         zmmreg|mask|z,zmmreg*,zmmrm512 AVX512BW )]480 code0
[2(VPADDUSW         xmmreg|mask|z,xmmreg*,xmmrm128 AVX512VL/BW )]470.4 code0
[2(VPADDUSW         ymmreg|mask|z,ymmreg*,ymmrm256 AVX512VL/BW )]460.8 code0
[2(VPADDUSW         zmmreg|mask|z,zmmreg*,zmmrm512 AVX512BW )]451.2 code0
[2(VPADDW           xmmreg|mask|z,xmmreg*,xmmrm128 AVX512VL/BW )]441.6 code0
[2(VPADDW           ymmreg|mask|z,ymmreg*,ymmrm256 AVX512VL/BW )]432 code0
[2(VPADDW           zmmreg|mask|z,zmmreg*,zmmrm512 AVX512BW )]422.4 code0
[2(VPALIGNR         xmmreg|mask|z,xmmreg*,xmmrm128,imm8 AVX512VL/BW )]412.8 code0
[2(VPALIGNR         ymmreg|mask|z,ymmreg*,ymmrm256,imm8 AVX512VL/BW )]403.2 code0
[2(VPALIGNR         zmmreg|mask|z,zmmreg*,zmmrm512,imm8 AVX512BW )]393.6 code0
[2(VPANDD           xmmreg|mask|z,xmmreg*,xmmrm128|b32 AVX512VL )]384 code0
[2(VPANDD           ymmreg|mask|z,ymmreg*,ymmrm256|b32 AVX512VL )]374.4 code0
[2(VPANDD           zmmreg|mask|z,zmmreg*,zmmrm512|b32 AVX512 )]364.8 code0
[2(VPANDND          xmmreg|mask|z,xmmreg*,xmmrm128|b32 AVX512VL )]355.2 code0
[2(VPANDND          ymmreg|mask|z,ymmreg*,ymmrm256|b32 AVX512VL )]345.6 code0
[2(VPANDND          zmmreg|mask|z,zmmreg*,zmmrm512|b32 AVX512 )]336 code0
[2(VPANDNQ          xmmreg|mask|z,xmmreg*,xmmrm128|b64 AVX512VL )]326.4 code0
[2(VPANDNQ          ymmreg|mask|z,ymmreg*,ymmrm256|b64 AVX512VL )]316.8 code0
[2(VPANDNQ          zmmreg|mask|z,zmmreg*,zmmrm512|b64 AVX512 )]307.2 code0
[2(VPANDQ           xmmreg|mask|z,xmmreg*,xmmrm128|b64 AVX512VL )]297.6 code0
[2(VPANDQ           ymmreg|mask|z,ymmreg*,ymmrm256|b64 AVX512VL )]288 code0
[2(VPANDQ           zmmreg|mask|z,zmmreg*,zmmrm512|b64 AVX512 )]278.4 code0
[2(VPAVGB           xmmreg|mask|z,xmmreg*,xmmrm128 AVX512VL/BW )]268.8 code0
[2(VPAVGB           ymmreg|mask|z,ymmreg*,ymmrm256 AVX512VL/BW )]259.2 code0
[2(VPAVGB           zmmreg|mask|z,zmmreg*,zmmrm512 AVX512BW )]249.6 code0
[2(VPAVGW           xmmreg|mask|z,xmmreg*,xmmrm128 AVX512VL/BW )]240 code0
[2(VPAVGW           ymmreg|mask|z,ymmreg*,ymmrm256 AVX512VL/BW )]230.4 code0
[2(VPAVGW           zmmreg|mask|z,zmmreg*,zmmrm512 AVX512BW )]220.799999999999 code0
[2(VPBLENDMB        xmmreg|mask|z,xmmreg,xmmrm128 AVX512VL/BW )]211.199999999999 code0
[2(VPBLENDMB        ymmreg|mask|z,ymmreg,ymmrm256 AVX512VL/BW )]201.599999999999 code0
[2(VPBLENDMB        zmmreg|mask|z,zmmreg,zmmrm512 AVX512BW )]191.999999999999 code0
[2(VPBLENDMD        xmmreg|mask|z,xmmreg,xmmrm128|b32 AVX512VL )]182.399999999999 code0
[2(VPBLENDMD        ymmreg|mask|z,ymmreg,ymmrm256|b32 AVX512VL )]172.799999999999 code0
[2(VPBLENDMD        zmmreg|mask|z,zmmreg,zmmrm512|b32 AVX512 )]163.199999999999 code0
[2(VPBLENDMQ        xmmreg|mask|z,xmmreg,xmmrm128|b64 AVX512VL )]153.599999999999 code0
[2(VPBLENDMQ        ymmreg|mask|z,ymmreg,ymmrm256|b64 AVX512VL )]143.999999999999 code0
[2(VPBLENDMQ        zmmreg|mask|z,zmmreg,zmmrm512|b64 AVX512 )]134.399999999999 code0
[2(VPBLENDMW        xmmreg|mask|z,xmmreg,xmmrm128 AVX512VL/BW )]124.799999999999 code0
[2(VPBLENDMW        ymmreg|mask|z,ymmreg,ymmrm256 AVX512VL/BW )]115.199999999999 code0
[2(VPBLENDMW        zmmreg|mask|z,zmmreg,zmmrm512 AVX512BW )]105.599999999999 code0
[2(VPBROADCASTB     xmmreg|mask|z,xmmrm8     AVX512VL/BW )]95.9999999999992 code0
[2(VPBROADCASTB     ymmreg|mask|z,xmmrm8     AVX512VL/BW )]86.3999999999992 code0
[2(VPBROADCASTB     zmmreg|mask|z,xmmrm8     AVX512BW )]76.7999999999992 code0
(211)pageodd
restore showpage
%%Page: 212 212
%%BeginPageSetup
save
%%EndPageSetup
/212 pa
[2(VPBROADCASTB     xmmreg|mask|z,reg8       AVX512VL/BW )]710.4 code0
[2(VPBROADCASTB     xmmreg|mask|z,reg16      AVX512VL/BW )]700.8 code0
[2(VPBROADCASTB     xmmreg|mask|z,reg32      AVX512VL/BW )]691.2 code0
[2(VPBROADCASTB     xmmreg|mask|z,reg64      AVX512VL/BW )]681.6 code0
[2(VPBROADCASTB     ymmreg|mask|z,reg8       AVX512VL/BW )]672 code0
[2(VPBROADCASTB     ymmreg|mask|z,reg16      AVX512VL/BW )]662.4 code0
[2(VPBROADCASTB     ymmreg|mask|z,reg32      AVX512VL/BW )]652.8 code0
[2(VPBROADCASTB     ymmreg|mask|z,reg64      AVX512VL/BW )]643.2 code0
[2(VPBROADCASTB     zmmreg|mask|z,reg8       AVX512BW )]633.6 code0
[2(VPBROADCASTB     zmmreg|mask|z,reg16      AVX512BW )]624 code0
[2(VPBROADCASTB     zmmreg|mask|z,reg32      AVX512BW )]614.4 code0
[2(VPBROADCASTB     zmmreg|mask|z,reg64      AVX512BW )]604.8 code0
[2(VPBROADCASTD     xmmreg|mask|z,mem32      AVX512VL )]595.2 code0
[2(VPBROADCASTD     ymmreg|mask|z,mem32      AVX512VL )]585.6 code0
[2(VPBROADCASTD     zmmreg|mask|z,mem32      AVX512 )]576 code0
[2(VPBROADCASTD     xmmreg|mask|z,xmmreg     AVX512VL )]566.4 code0
[2(VPBROADCASTD     ymmreg|mask|z,xmmreg     AVX512VL )]556.8 code0
[2(VPBROADCASTD     zmmreg|mask|z,xmmreg     AVX512 )]547.2 code0
[2(VPBROADCASTD     xmmreg|mask|z,reg32      AVX512VL )]537.6 code0
[2(VPBROADCASTD     ymmreg|mask|z,reg32      AVX512VL )]528 code0
[2(VPBROADCASTD     zmmreg|mask|z,reg32      AVX512 )]518.4 code0
[2(VPBROADCASTMB2Q  xmmreg,kreg              AVX512VL/CD )]508.8 code0
[2(VPBROADCASTMB2Q  ymmreg,kreg              AVX512VL/CD )]499.2 code0
[2(VPBROADCASTMB2Q  zmmreg,kreg              AVX512CD )]489.6 code0
[2(VPBROADCASTMW2D  xmmreg,kreg              AVX512VL/CD )]480 code0
[2(VPBROADCASTMW2D  ymmreg,kreg              AVX512VL/CD )]470.4 code0
[2(VPBROADCASTMW2D  zmmreg,kreg              AVX512CD )]460.8 code0
[2(VPBROADCASTQ     xmmreg|mask|z,mem64      AVX512VL )]451.2 code0
[2(VPBROADCASTQ     ymmreg|mask|z,mem64      AVX512VL )]441.6 code0
[2(VPBROADCASTQ     zmmreg|mask|z,mem64      AVX512 )]432 code0
[2(VPBROADCASTQ     xmmreg|mask|z,xmmreg     AVX512VL )]422.4 code0
[2(VPBROADCASTQ     ymmreg|mask|z,xmmreg     AVX512VL )]412.8 code0
[2(VPBROADCASTQ     zmmreg|mask|z,xmmreg     AVX512 )]403.2 code0
[2(VPBROADCASTQ     xmmreg|mask|z,reg64      AVX512VL )]393.6 code0
[2(VPBROADCASTQ     ymmreg|mask|z,reg64      AVX512VL )]384 code0
[2(VPBROADCASTQ     zmmreg|mask|z,reg64      AVX512 )]374.4 code0
[2(VPBROADCASTW     xmmreg|mask|z,xmmrm16    AVX512VL/BW )]364.8 code0
[2(VPBROADCASTW     ymmreg|mask|z,xmmrm16    AVX512VL/BW )]355.2 code0
[2(VPBROADCASTW     zmmreg|mask|z,xmmrm16    AVX512BW )]345.6 code0
[2(VPBROADCASTW     xmmreg|mask|z,reg16      AVX512VL/BW )]336 code0
[2(VPBROADCASTW     xmmreg|mask|z,reg32      AVX512VL/BW )]326.4 code0
[2(VPBROADCASTW     xmmreg|mask|z,reg64      AVX512VL/BW )]316.8 code0
[2(VPBROADCASTW     ymmreg|mask|z,reg16      AVX512VL/BW )]307.2 code0
[2(VPBROADCASTW     ymmreg|mask|z,reg32      AVX512VL/BW )]297.6 code0
[2(VPBROADCASTW     ymmreg|mask|z,reg64      AVX512VL/BW )]288 code0
[2(VPBROADCASTW     zmmreg|mask|z,reg16      AVX512BW )]278.4 code0
[2(VPBROADCASTW     zmmreg|mask|z,reg32      AVX512BW )]268.8 code0
[2(VPBROADCASTW     zmmreg|mask|z,reg64      AVX512BW )]259.2 code0
[2(VPCMPEQB         kreg|mask,xmmreg,xmmrm128 AVX512VL/BW )]249.6 code0
[2(VPCMPEQB         kreg|mask,ymmreg,ymmrm256 AVX512VL/BW )]240 code0
[2(VPCMPEQB         kreg|mask,zmmreg,zmmrm512 AVX512BW )]230.4 code0
[2(VPCMPEQD         kreg|mask,xmmreg,xmmrm128|b32 AVX512VL )]220.799999999999 code0
[2(VPCMPEQD         kreg|mask,ymmreg,ymmrm256|b32 AVX512VL )]211.199999999999 code0
[2(VPCMPEQD         kreg|mask,zmmreg,zmmrm512|b32 AVX512 )]201.599999999999 code0
[2(VPCMPEQQ         kreg|mask,xmmreg,xmmrm128|b64 AVX512VL )]191.999999999999 code0
[2(VPCMPEQQ         kreg|mask,ymmreg,ymmrm256|b64 AVX512VL )]182.399999999999 code0
[2(VPCMPEQQ         kreg|mask,zmmreg,zmmrm512|b64 AVX512 )]172.799999999999 code0
[2(VPCMPEQW         kreg|mask,xmmreg,xmmrm128 AVX512VL/BW )]163.199999999999 code0
[2(VPCMPEQW         kreg|mask,ymmreg,ymmrm256 AVX512VL/BW )]153.599999999999 code0
[2(VPCMPEQW         kreg|mask,zmmreg,zmmrm512 AVX512BW )]143.999999999999 code0
[2(VPCMPGTB         kreg|mask,xmmreg,xmmrm128 AVX512VL/BW )]134.399999999999 code0
[2(VPCMPGTB         kreg|mask,ymmreg,ymmrm256 AVX512VL/BW )]124.799999999999 code0
[2(VPCMPGTB         kreg|mask,zmmreg,zmmrm512 AVX512BW )]115.199999999999 code0
[2(VPCMPGTD         kreg|mask,xmmreg,xmmrm128|b32 AVX512VL )]105.599999999999 code0
[2(VPCMPGTD         kreg|mask,ymmreg,ymmrm256|b32 AVX512VL )]95.9999999999992 code0
[2(VPCMPGTD         kreg|mask,zmmreg,zmmrm512|b32 AVX512 )]86.3999999999992 code0
[2(VPCMPGTQ         kreg|mask,xmmreg,xmmrm128|b64 AVX512VL )]76.7999999999992 code0
(212)pageeven
restore showpage
%%Page: 213 213
%%BeginPageSetup
save
%%EndPageSetup
/213 pa
[2(VPCMPGTQ         kreg|mask,ymmreg,ymmrm256|b64 AVX512VL )]710.4 code0
[2(VPCMPGTQ         kreg|mask,zmmreg,zmmrm512|b64 AVX512 )]700.8 code0
[2(VPCMPGTW         kreg|mask,xmmreg,xmmrm128 AVX512VL/BW )]691.2 code0
[2(VPCMPGTW         kreg|mask,ymmreg,ymmrm256 AVX512VL/BW )]681.6 code0
[2(VPCMPGTW         kreg|mask,zmmreg,zmmrm512 AVX512BW )]672 code0
[2(VPCMPEQB         kreg|mask,xmmreg,xmmrm128 AVX512VL/BW )]662.4 code0
[2(VPCMPEQB         kreg|mask,ymmreg,ymmrm256 AVX512VL/BW )]652.8 code0
[2(VPCMPEQB         kreg|mask,zmmreg,zmmrm512 AVX512BW )]643.2 code0
[2(VPCMPEQD         kreg|mask,xmmreg,xmmrm128|b32 AVX512VL )]633.6 code0
[2(VPCMPEQD         kreg|mask,ymmreg,ymmrm256|b32 AVX512VL )]624 code0
[2(VPCMPEQD         kreg|mask,zmmreg,zmmrm512|b32 AVX512 )]614.4 code0
[2(VPCMPEQQ         kreg|mask,xmmreg,xmmrm128|b64 AVX512VL )]604.8 code0
[2(VPCMPEQQ         kreg|mask,ymmreg,ymmrm256|b64 AVX512VL )]595.2 code0
[2(VPCMPEQQ         kreg|mask,zmmreg,zmmrm512|b64 AVX512 )]585.6 code0
[2(VPCMPEQUB        kreg|mask,xmmreg,xmmrm128 AVX512VL/BW )]576 code0
[2(VPCMPEQUB        kreg|mask,ymmreg,ymmrm256 AVX512VL/BW )]566.4 code0
[2(VPCMPEQUB        kreg|mask,zmmreg,zmmrm512 AVX512BW )]556.8 code0
[2(VPCMPEQUD        kreg|mask,xmmreg,xmmrm128|b32 AVX512VL )]547.2 code0
[2(VPCMPEQUD        kreg|mask,ymmreg,ymmrm256|b32 AVX512VL )]537.6 code0
[2(VPCMPEQUD        kreg|mask,zmmreg,zmmrm512|b32 AVX512 )]528 code0
[2(VPCMPEQUQ        kreg|mask,xmmreg,xmmrm128|b64 AVX512VL )]518.4 code0
[2(VPCMPEQUQ        kreg|mask,ymmreg,ymmrm256|b64 AVX512VL )]508.8 code0
[2(VPCMPEQUQ        kreg|mask,zmmreg,zmmrm512|b64 AVX512 )]499.2 code0
[2(VPCMPEQUW        kreg|mask,xmmreg,xmmrm128 AVX512VL/BW )]489.6 code0
[2(VPCMPEQUW        kreg|mask,ymmreg,ymmrm256 AVX512VL/BW )]480 code0
[2(VPCMPEQUW        kreg|mask,zmmreg,zmmrm512 AVX512BW )]470.4 code0
[2(VPCMPEQW         kreg|mask,xmmreg,xmmrm128 AVX512VL/BW )]460.8 code0
[2(VPCMPEQW         kreg|mask,ymmreg,ymmrm256 AVX512VL/BW )]451.2 code0
[2(VPCMPEQW         kreg|mask,zmmreg,zmmrm512 AVX512BW )]441.6 code0
[2(VPCMPGEB         kreg|mask,xmmreg,xmmrm128 AVX512VL/BW )]432 code0
[2(VPCMPGEB         kreg|mask,ymmreg,ymmrm256 AVX512VL/BW )]422.4 code0
[2(VPCMPGEB         kreg|mask,zmmreg,zmmrm512 AVX512BW )]412.8 code0
[2(VPCMPGED         kreg|mask,xmmreg,xmmrm128|b32 AVX512VL )]403.2 code0
[2(VPCMPGED         kreg|mask,ymmreg,ymmrm256|b32 AVX512VL )]393.6 code0
[2(VPCMPGED         kreg|mask,zmmreg,zmmrm512|b32 AVX512 )]384 code0
[2(VPCMPGEQ         kreg|mask,xmmreg,xmmrm128|b64 AVX512VL )]374.4 code0
[2(VPCMPGEQ         kreg|mask,ymmreg,ymmrm256|b64 AVX512VL )]364.8 code0
[2(VPCMPGEQ         kreg|mask,zmmreg,zmmrm512|b64 AVX512 )]355.2 code0
[2(VPCMPGEUB        kreg|mask,xmmreg,xmmrm128 AVX512VL/BW )]345.6 code0
[2(VPCMPGEUB        kreg|mask,ymmreg,ymmrm256 AVX512VL/BW )]336 code0
[2(VPCMPGEUB        kreg|mask,zmmreg,zmmrm512 AVX512BW )]326.4 code0
[2(VPCMPGEUD        kreg|mask,xmmreg,xmmrm128|b32 AVX512VL )]316.8 code0
[2(VPCMPGEUD        kreg|mask,ymmreg,ymmrm256|b32 AVX512VL )]307.2 code0
[2(VPCMPGEUD        kreg|mask,zmmreg,zmmrm512|b32 AVX512 )]297.6 code0
[2(VPCMPGEUQ        kreg|mask,xmmreg,xmmrm128|b64 AVX512VL )]288 code0
[2(VPCMPGEUQ        kreg|mask,ymmreg,ymmrm256|b64 AVX512VL )]278.4 code0
[2(VPCMPGEUQ        kreg|mask,zmmreg,zmmrm512|b64 AVX512 )]268.8 code0
[2(VPCMPGEUW        kreg|mask,xmmreg,xmmrm128 AVX512VL/BW )]259.2 code0
[2(VPCMPGEUW        kreg|mask,ymmreg,ymmrm256 AVX512VL/BW )]249.6 code0
[2(VPCMPGEUW        kreg|mask,zmmreg,zmmrm512 AVX512BW )]240 code0
[2(VPCMPGEW         kreg|mask,xmmreg,xmmrm128 AVX512VL/BW )]230.4 code0
[2(VPCMPGEW         kreg|mask,ymmreg,ymmrm256 AVX512VL/BW )]220.799999999999 code0
[2(VPCMPGEW         kreg|mask,zmmreg,zmmrm512 AVX512BW )]211.199999999999 code0
[2(VPCMPGTB         kreg|mask,xmmreg,xmmrm128 AVX512VL/BW )]201.599999999999 code0
[2(VPCMPGTB         kreg|mask,ymmreg,ymmrm256 AVX512VL/BW )]191.999999999999 code0
[2(VPCMPGTB         kreg|mask,zmmreg,zmmrm512 AVX512BW )]182.399999999999 code0
[2(VPCMPGTD         kreg|mask,xmmreg,xmmrm128|b32 AVX512VL )]172.799999999999 code0
[2(VPCMPGTD         kreg|mask,ymmreg,ymmrm256|b32 AVX512VL )]163.199999999999 code0
[2(VPCMPGTD         kreg|mask,zmmreg,zmmrm512|b32 AVX512 )]153.599999999999 code0
[2(VPCMPGTQ         kreg|mask,xmmreg,xmmrm128|b64 AVX512VL )]143.999999999999 code0
[2(VPCMPGTQ         kreg|mask,ymmreg,ymmrm256|b64 AVX512VL )]134.399999999999 code0
[2(VPCMPGTQ         kreg|mask,zmmreg,zmmrm512|b64 AVX512 )]124.799999999999 code0
[2(VPCMPGTUB        kreg|mask,xmmreg,xmmrm128 AVX512VL/BW )]115.199999999999 code0
[2(VPCMPGTUB        kreg|mask,ymmreg,ymmrm256 AVX512VL/BW )]105.599999999999 code0
[2(VPCMPGTUB        kreg|mask,zmmreg,zmmrm512 AVX512BW )]95.9999999999992 code0
[2(VPCMPGTUD        kreg|mask,xmmreg,xmmrm128|b32 AVX512VL )]86.3999999999992 code0
[2(VPCMPGTUD        kreg|mask,ymmreg,ymmrm256|b32 AVX512VL )]76.7999999999992 code0
(213)pageodd
restore showpage
%%Page: 214 214
%%BeginPageSetup
save
%%EndPageSetup
/214 pa
[2(VPCMPGTUD        kreg|mask,zmmreg,zmmrm512|b32 AVX512 )]710.4 code0
[2(VPCMPGTUQ        kreg|mask,xmmreg,xmmrm128|b64 AVX512VL )]700.8 code0
[2(VPCMPGTUQ        kreg|mask,ymmreg,ymmrm256|b64 AVX512VL )]691.2 code0
[2(VPCMPGTUQ        kreg|mask,zmmreg,zmmrm512|b64 AVX512 )]681.6 code0
[2(VPCMPGTUW        kreg|mask,xmmreg,xmmrm128 AVX512VL/BW )]672 code0
[2(VPCMPGTUW        kreg|mask,ymmreg,ymmrm256 AVX512VL/BW )]662.4 code0
[2(VPCMPGTUW        kreg|mask,zmmreg,zmmrm512 AVX512BW )]652.8 code0
[2(VPCMPGTW         kreg|mask,xmmreg,xmmrm128 AVX512VL/BW )]643.2 code0
[2(VPCMPGTW         kreg|mask,ymmreg,ymmrm256 AVX512VL/BW )]633.6 code0
[2(VPCMPGTW         kreg|mask,zmmreg,zmmrm512 AVX512BW )]624 code0
[2(VPCMPLEB         kreg|mask,xmmreg,xmmrm128 AVX512VL/BW )]614.4 code0
[2(VPCMPLEB         kreg|mask,ymmreg,ymmrm256 AVX512VL/BW )]604.8 code0
[2(VPCMPLEB         kreg|mask,zmmreg,zmmrm512 AVX512BW )]595.2 code0
[2(VPCMPLED         kreg|mask,xmmreg,xmmrm128|b32 AVX512VL )]585.6 code0
[2(VPCMPLED         kreg|mask,ymmreg,ymmrm256|b32 AVX512VL )]576 code0
[2(VPCMPLED         kreg|mask,zmmreg,zmmrm512|b32 AVX512 )]566.4 code0
[2(VPCMPLEQ         kreg|mask,xmmreg,xmmrm128|b64 AVX512VL )]556.8 code0
[2(VPCMPLEQ         kreg|mask,ymmreg,ymmrm256|b64 AVX512VL )]547.2 code0
[2(VPCMPLEQ         kreg|mask,zmmreg,zmmrm512|b64 AVX512 )]537.6 code0
[2(VPCMPLEUB        kreg|mask,xmmreg,xmmrm128 AVX512VL/BW )]528 code0
[2(VPCMPLEUB        kreg|mask,ymmreg,ymmrm256 AVX512VL/BW )]518.4 code0
[2(VPCMPLEUB        kreg|mask,zmmreg,zmmrm512 AVX512BW )]508.8 code0
[2(VPCMPLEUD        kreg|mask,xmmreg,xmmrm128|b32 AVX512VL )]499.2 code0
[2(VPCMPLEUD        kreg|mask,ymmreg,ymmrm256|b32 AVX512VL )]489.6 code0
[2(VPCMPLEUD        kreg|mask,zmmreg,zmmrm512|b32 AVX512 )]480 code0
[2(VPCMPLEUQ        kreg|mask,xmmreg,xmmrm128|b64 AVX512VL )]470.4 code0
[2(VPCMPLEUQ        kreg|mask,ymmreg,ymmrm256|b64 AVX512VL )]460.8 code0
[2(VPCMPLEUQ        kreg|mask,zmmreg,zmmrm512|b64 AVX512 )]451.2 code0
[2(VPCMPLEUW        kreg|mask,xmmreg,xmmrm128 AVX512VL/BW )]441.6 code0
[2(VPCMPLEUW        kreg|mask,ymmreg,ymmrm256 AVX512VL/BW )]432 code0
[2(VPCMPLEUW        kreg|mask,zmmreg,zmmrm512 AVX512BW )]422.4 code0
[2(VPCMPLEW         kreg|mask,xmmreg,xmmrm128 AVX512VL/BW )]412.8 code0
[2(VPCMPLEW         kreg|mask,ymmreg,ymmrm256 AVX512VL/BW )]403.2 code0
[2(VPCMPLEW         kreg|mask,zmmreg,zmmrm512 AVX512BW )]393.6 code0
[2(VPCMPLTB         kreg|mask,xmmreg,xmmrm128 AVX512VL/BW )]384 code0
[2(VPCMPLTB         kreg|mask,ymmreg,ymmrm256 AVX512VL/BW )]374.4 code0
[2(VPCMPLTB         kreg|mask,zmmreg,zmmrm512 AVX512BW )]364.8 code0
[2(VPCMPLTD         kreg|mask,xmmreg,xmmrm128|b32 AVX512VL )]355.2 code0
[2(VPCMPLTD         kreg|mask,ymmreg,ymmrm256|b32 AVX512VL )]345.6 code0
[2(VPCMPLTD         kreg|mask,zmmreg,zmmrm512|b32 AVX512 )]336 code0
[2(VPCMPLTQ         kreg|mask,xmmreg,xmmrm128|b64 AVX512VL )]326.4 code0
[2(VPCMPLTQ         kreg|mask,ymmreg,ymmrm256|b64 AVX512VL )]316.8 code0
[2(VPCMPLTQ         kreg|mask,zmmreg,zmmrm512|b64 AVX512 )]307.2 code0
[2(VPCMPLTUB        kreg|mask,xmmreg,xmmrm128 AVX512VL/BW )]297.6 code0
[2(VPCMPLTUB        kreg|mask,ymmreg,ymmrm256 AVX512VL/BW )]288 code0
[2(VPCMPLTUB        kreg|mask,zmmreg,zmmrm512 AVX512BW )]278.4 code0
[2(VPCMPLTUD        kreg|mask,xmmreg,xmmrm128|b32 AVX512VL )]268.8 code0
[2(VPCMPLTUD        kreg|mask,ymmreg,ymmrm256|b32 AVX512VL )]259.2 code0
[2(VPCMPLTUD        kreg|mask,zmmreg,zmmrm512|b32 AVX512 )]249.6 code0
[2(VPCMPLTUQ        kreg|mask,xmmreg,xmmrm128|b64 AVX512VL )]240 code0
[2(VPCMPLTUQ        kreg|mask,ymmreg,ymmrm256|b64 AVX512VL )]230.4 code0
[2(VPCMPLTUQ        kreg|mask,zmmreg,zmmrm512|b64 AVX512 )]220.799999999999 code0
[2(VPCMPLTUW        kreg|mask,xmmreg,xmmrm128 AVX512VL/BW )]211.199999999999 code0
[2(VPCMPLTUW        kreg|mask,ymmreg,ymmrm256 AVX512VL/BW )]201.599999999999 code0
[2(VPCMPLTUW        kreg|mask,zmmreg,zmmrm512 AVX512BW )]191.999999999999 code0
[2(VPCMPLTW         kreg|mask,xmmreg,xmmrm128 AVX512VL/BW )]182.399999999999 code0
[2(VPCMPLTW         kreg|mask,ymmreg,ymmrm256 AVX512VL/BW )]172.799999999999 code0
[2(VPCMPLTW         kreg|mask,zmmreg,zmmrm512 AVX512BW )]163.199999999999 code0
[2(VPCMPNEQB        kreg|mask,xmmreg,xmmrm128 AVX512VL/BW )]153.599999999999 code0
[2(VPCMPNEQB        kreg|mask,ymmreg,ymmrm256 AVX512VL/BW )]143.999999999999 code0
[2(VPCMPNEQB        kreg|mask,zmmreg,zmmrm512 AVX512BW )]134.399999999999 code0
[2(VPCMPNEQD        kreg|mask,xmmreg,xmmrm128|b32 AVX512VL )]124.799999999999 code0
[2(VPCMPNEQD        kreg|mask,ymmreg,ymmrm256|b32 AVX512VL )]115.199999999999 code0
[2(VPCMPNEQD        kreg|mask,zmmreg,zmmrm512|b32 AVX512 )]105.599999999999 code0
[2(VPCMPNEQQ        kreg|mask,xmmreg,xmmrm128|b64 AVX512VL )]95.9999999999992 code0
[2(VPCMPNEQQ        kreg|mask,ymmreg,ymmrm256|b64 AVX512VL )]86.3999999999992 code0
[2(VPCMPNEQQ        kreg|mask,zmmreg,zmmrm512|b64 AVX512 )]76.7999999999992 code0
(214)pageeven
restore showpage
%%Page: 215 215
%%BeginPageSetup
save
%%EndPageSetup
/215 pa
[2(VPCMPNEQUB       kreg|mask,xmmreg,xmmrm128 AVX512VL/BW )]710.4 code0
[2(VPCMPNEQUB       kreg|mask,ymmreg,ymmrm256 AVX512VL/BW )]700.8 code0
[2(VPCMPNEQUB       kreg|mask,zmmreg,zmmrm512 AVX512BW )]691.2 code0
[2(VPCMPNEQUD       kreg|mask,xmmreg,xmmrm128|b32 AVX512VL )]681.6 code0
[2(VPCMPNEQUD       kreg|mask,ymmreg,ymmrm256|b32 AVX512VL )]672 code0
[2(VPCMPNEQUD       kreg|mask,zmmreg,zmmrm512|b32 AVX512 )]662.4 code0
[2(VPCMPNEQUQ       kreg|mask,xmmreg,xmmrm128|b64 AVX512VL )]652.8 code0
[2(VPCMPNEQUQ       kreg|mask,ymmreg,ymmrm256|b64 AVX512VL )]643.2 code0
[2(VPCMPNEQUQ       kreg|mask,zmmreg,zmmrm512|b64 AVX512 )]633.6 code0
[2(VPCMPNEQUW       kreg|mask,xmmreg,xmmrm128 AVX512VL/BW )]624 code0
[2(VPCMPNEQUW       kreg|mask,ymmreg,ymmrm256 AVX512VL/BW )]614.4 code0
[2(VPCMPNEQUW       kreg|mask,zmmreg,zmmrm512 AVX512BW )]604.8 code0
[2(VPCMPNEQW        kreg|mask,xmmreg,xmmrm128 AVX512VL/BW )]595.2 code0
[2(VPCMPNEQW        kreg|mask,ymmreg,ymmrm256 AVX512VL/BW )]585.6 code0
[2(VPCMPNEQW        kreg|mask,zmmreg,zmmrm512 AVX512BW )]576 code0
[2(VPCMPNGTB        kreg|mask,xmmreg,xmmrm128 AVX512VL/BW )]566.4 code0
[2(VPCMPNGTB        kreg|mask,ymmreg,ymmrm256 AVX512VL/BW )]556.8 code0
[2(VPCMPNGTB        kreg|mask,zmmreg,zmmrm512 AVX512BW )]547.2 code0
[2(VPCMPNGTD        kreg|mask,xmmreg,xmmrm128|b32 AVX512VL )]537.6 code0
[2(VPCMPNGTD        kreg|mask,ymmreg,ymmrm256|b32 AVX512VL )]528 code0
[2(VPCMPNGTD        kreg|mask,zmmreg,zmmrm512|b32 AVX512 )]518.4 code0
[2(VPCMPNGTQ        kreg|mask,xmmreg,xmmrm128|b64 AVX512VL )]508.8 code0
[2(VPCMPNGTQ        kreg|mask,ymmreg,ymmrm256|b64 AVX512VL )]499.2 code0
[2(VPCMPNGTQ        kreg|mask,zmmreg,zmmrm512|b64 AVX512 )]489.6 code0
[2(VPCMPNGTUB       kreg|mask,xmmreg,xmmrm128 AVX512VL/BW )]480 code0
[2(VPCMPNGTUB       kreg|mask,ymmreg,ymmrm256 AVX512VL/BW )]470.4 code0
[2(VPCMPNGTUB       kreg|mask,zmmreg,zmmrm512 AVX512BW )]460.8 code0
[2(VPCMPNGTUD       kreg|mask,xmmreg,xmmrm128|b32 AVX512VL )]451.2 code0
[2(VPCMPNGTUD       kreg|mask,ymmreg,ymmrm256|b32 AVX512VL )]441.6 code0
[2(VPCMPNGTUD       kreg|mask,zmmreg,zmmrm512|b32 AVX512 )]432 code0
[2(VPCMPNGTUQ       kreg|mask,xmmreg,xmmrm128|b64 AVX512VL )]422.4 code0
[2(VPCMPNGTUQ       kreg|mask,ymmreg,ymmrm256|b64 AVX512VL )]412.8 code0
[2(VPCMPNGTUQ       kreg|mask,zmmreg,zmmrm512|b64 AVX512 )]403.2 code0
[2(VPCMPNGTUW       kreg|mask,xmmreg,xmmrm128 AVX512VL/BW )]393.6 code0
[2(VPCMPNGTUW       kreg|mask,ymmreg,ymmrm256 AVX512VL/BW )]384 code0
[2(VPCMPNGTUW       kreg|mask,zmmreg,zmmrm512 AVX512BW )]374.4 code0
[2(VPCMPNGTW        kreg|mask,xmmreg,xmmrm128 AVX512VL/BW )]364.8 code0
[2(VPCMPNGTW        kreg|mask,ymmreg,ymmrm256 AVX512VL/BW )]355.2 code0
[2(VPCMPNGTW        kreg|mask,zmmreg,zmmrm512 AVX512BW )]345.6 code0
[2(VPCMPNLEB        kreg|mask,xmmreg,xmmrm128 AVX512VL/BW )]336 code0
[2(VPCMPNLEB        kreg|mask,ymmreg,ymmrm256 AVX512VL/BW )]326.4 code0
[2(VPCMPNLEB        kreg|mask,zmmreg,zmmrm512 AVX512BW )]316.8 code0
[2(VPCMPNLED        kreg|mask,xmmreg,xmmrm128|b32 AVX512VL )]307.2 code0
[2(VPCMPNLED        kreg|mask,ymmreg,ymmrm256|b32 AVX512VL )]297.6 code0
[2(VPCMPNLED        kreg|mask,zmmreg,zmmrm512|b32 AVX512 )]288 code0
[2(VPCMPNLEQ        kreg|mask,xmmreg,xmmrm128|b64 AVX512VL )]278.4 code0
[2(VPCMPNLEQ        kreg|mask,ymmreg,ymmrm256|b64 AVX512VL )]268.8 code0
[2(VPCMPNLEQ        kreg|mask,zmmreg,zmmrm512|b64 AVX512 )]259.2 code0
[2(VPCMPNLEUB       kreg|mask,xmmreg,xmmrm128 AVX512VL/BW )]249.6 code0
[2(VPCMPNLEUB       kreg|mask,ymmreg,ymmrm256 AVX512VL/BW )]240 code0
[2(VPCMPNLEUB       kreg|mask,zmmreg,zmmrm512 AVX512BW )]230.4 code0
[2(VPCMPNLEUD       kreg|mask,xmmreg,xmmrm128|b32 AVX512VL )]220.799999999999 code0
[2(VPCMPNLEUD       kreg|mask,ymmreg,ymmrm256|b32 AVX512VL )]211.199999999999 code0
[2(VPCMPNLEUD       kreg|mask,zmmreg,zmmrm512|b32 AVX512 )]201.599999999999 code0
[2(VPCMPNLEUQ       kreg|mask,xmmreg,xmmrm128|b64 AVX512VL )]191.999999999999 code0
[2(VPCMPNLEUQ       kreg|mask,ymmreg,ymmrm256|b64 AVX512VL )]182.399999999999 code0
[2(VPCMPNLEUQ       kreg|mask,zmmreg,zmmrm512|b64 AVX512 )]172.799999999999 code0
[2(VPCMPNLEUW       kreg|mask,xmmreg,xmmrm128 AVX512VL/BW )]163.199999999999 code0
[2(VPCMPNLEUW       kreg|mask,ymmreg,ymmrm256 AVX512VL/BW )]153.599999999999 code0
[2(VPCMPNLEUW       kreg|mask,zmmreg,zmmrm512 AVX512BW )]143.999999999999 code0
[2(VPCMPNLEW        kreg|mask,xmmreg,xmmrm128 AVX512VL/BW )]134.399999999999 code0
[2(VPCMPNLEW        kreg|mask,ymmreg,ymmrm256 AVX512VL/BW )]124.799999999999 code0
[2(VPCMPNLEW        kreg|mask,zmmreg,zmmrm512 AVX512BW )]115.199999999999 code0
[2(VPCMPNLTB        kreg|mask,xmmreg,xmmrm128 AVX512VL/BW )]105.599999999999 code0
[2(VPCMPNLTB        kreg|mask,ymmreg,ymmrm256 AVX512VL/BW )]95.9999999999992 code0
[2(VPCMPNLTB        kreg|mask,zmmreg,zmmrm512 AVX512BW )]86.3999999999992 code0
[2(VPCMPNLTD        kreg|mask,xmmreg,xmmrm128|b32 AVX512VL )]76.7999999999992 code0
(215)pageodd
restore showpage
%%Page: 216 216
%%BeginPageSetup
save
%%EndPageSetup
/216 pa
[2(VPCMPNLTD        kreg|mask,ymmreg,ymmrm256|b32 AVX512VL )]710.4 code0
[2(VPCMPNLTD        kreg|mask,zmmreg,zmmrm512|b32 AVX512 )]700.8 code0
[2(VPCMPNLTQ        kreg|mask,xmmreg,xmmrm128|b64 AVX512VL )]691.2 code0
[2(VPCMPNLTQ        kreg|mask,ymmreg,ymmrm256|b64 AVX512VL )]681.6 code0
[2(VPCMPNLTQ        kreg|mask,zmmreg,zmmrm512|b64 AVX512 )]672 code0
[2(VPCMPNLTUB       kreg|mask,xmmreg,xmmrm128 AVX512VL/BW )]662.4 code0
[2(VPCMPNLTUB       kreg|mask,ymmreg,ymmrm256 AVX512VL/BW )]652.8 code0
[2(VPCMPNLTUB       kreg|mask,zmmreg,zmmrm512 AVX512BW )]643.2 code0
[2(VPCMPNLTUD       kreg|mask,xmmreg,xmmrm128|b32 AVX512VL )]633.6 code0
[2(VPCMPNLTUD       kreg|mask,ymmreg,ymmrm256|b32 AVX512VL )]624 code0
[2(VPCMPNLTUD       kreg|mask,zmmreg,zmmrm512|b32 AVX512 )]614.4 code0
[2(VPCMPNLTUQ       kreg|mask,xmmreg,xmmrm128|b64 AVX512VL )]604.8 code0
[2(VPCMPNLTUQ       kreg|mask,ymmreg,ymmrm256|b64 AVX512VL )]595.2 code0
[2(VPCMPNLTUQ       kreg|mask,zmmreg,zmmrm512|b64 AVX512 )]585.6 code0
[2(VPCMPNLTUW       kreg|mask,xmmreg,xmmrm128 AVX512VL/BW )]576 code0
[2(VPCMPNLTUW       kreg|mask,ymmreg,ymmrm256 AVX512VL/BW )]566.4 code0
[2(VPCMPNLTUW       kreg|mask,zmmreg,zmmrm512 AVX512BW )]556.8 code0
[2(VPCMPNLTW        kreg|mask,xmmreg,xmmrm128 AVX512VL/BW )]547.2 code0
[2(VPCMPNLTW        kreg|mask,ymmreg,ymmrm256 AVX512VL/BW )]537.6 code0
[2(VPCMPNLTW        kreg|mask,zmmreg,zmmrm512 AVX512BW )]528 code0
[2(VPCMPB           kreg|mask,xmmreg,xmmrm128,imm8 AVX512VL/BW )]518.4 code0
[2(VPCMPB           kreg|mask,ymmreg,ymmrm256,imm8 AVX512VL/BW )]508.8 code0
[2(VPCMPB           kreg|mask,zmmreg,zmmrm512,imm8 AVX512BW )]499.2 code0
[2(VPCMPD           kreg|mask,xmmreg,xmmrm128|b32,imm8 AVX512VL )]489.6 code0
[2(VPCMPD           kreg|mask,ymmreg,ymmrm256|b32,imm8 AVX512VL )]480 code0
[2(VPCMPD           kreg|mask,zmmreg,zmmrm512|b32,imm8 AVX512 )]470.4 code0
[2(VPCMPQ           kreg|mask,xmmreg,xmmrm128|b64,imm8 AVX512VL )]460.8 code0
[2(VPCMPQ           kreg|mask,ymmreg,ymmrm256|b64,imm8 AVX512VL )]451.2 code0
[2(VPCMPQ           kreg|mask,zmmreg,zmmrm512|b64,imm8 AVX512 )]441.6 code0
[2(VPCMPUB          kreg|mask,xmmreg,xmmrm128,imm8 AVX512VL/BW )]432 code0
[2(VPCMPUB          kreg|mask,ymmreg,ymmrm256,imm8 AVX512VL/BW )]422.4 code0
[2(VPCMPUB          kreg|mask,zmmreg,zmmrm512,imm8 AVX512BW )]412.8 code0
[2(VPCMPUD          kreg|mask,xmmreg,xmmrm128|b32,imm8 AVX512VL )]403.2 code0
[2(VPCMPUD          kreg|mask,ymmreg,ymmrm256|b32,imm8 AVX512VL )]393.6 code0
[2(VPCMPUD          kreg|mask,zmmreg,zmmrm512|b32,imm8 AVX512 )]384 code0
[2(VPCMPUQ          kreg|mask,xmmreg,xmmrm128|b64,imm8 AVX512VL )]374.4 code0
[2(VPCMPUQ          kreg|mask,ymmreg,ymmrm256|b64,imm8 AVX512VL )]364.8 code0
[2(VPCMPUQ          kreg|mask,zmmreg,zmmrm512|b64,imm8 AVX512 )]355.2 code0
[2(VPCMPUW          kreg|mask,xmmreg,xmmrm128,imm8 AVX512VL/BW )]345.6 code0
[2(VPCMPUW          kreg|mask,ymmreg,ymmrm256,imm8 AVX512VL/BW )]336 code0
[2(VPCMPUW          kreg|mask,zmmreg,zmmrm512,imm8 AVX512BW )]326.4 code0
[2(VPCMPW           kreg|mask,xmmreg,xmmrm128,imm8 AVX512VL/BW )]316.8 code0
[2(VPCMPW           kreg|mask,ymmreg,ymmrm256,imm8 AVX512VL/BW )]307.2 code0
[2(VPCMPW           kreg|mask,zmmreg,zmmrm512,imm8 AVX512BW )]297.6 code0
[2(VPCOMPRESSD      mem128|mask,xmmreg       AVX512VL )]288 code0
[2(VPCOMPRESSD      mem256|mask,ymmreg       AVX512VL )]278.4 code0
[2(VPCOMPRESSD      mem512|mask,zmmreg       AVX512 )]268.8 code0
[2(VPCOMPRESSD      xmmreg|mask|z,xmmreg     AVX512VL )]259.2 code0
[2(VPCOMPRESSD      ymmreg|mask|z,ymmreg     AVX512VL )]249.6 code0
[2(VPCOMPRESSD      zmmreg|mask|z,zmmreg     AVX512 )]240 code0
[2(VPCOMPRESSQ      mem128|mask,xmmreg       AVX512VL )]230.4 code0
[2(VPCOMPRESSQ      mem256|mask,ymmreg       AVX512VL )]220.799999999999 code0
[2(VPCOMPRESSQ      mem512|mask,zmmreg       AVX512 )]211.199999999999 code0
[2(VPCOMPRESSQ      xmmreg|mask|z,xmmreg     AVX512VL )]201.599999999999 code0
[2(VPCOMPRESSQ      ymmreg|mask|z,ymmreg     AVX512VL )]191.999999999999 code0
[2(VPCOMPRESSQ      zmmreg|mask|z,zmmreg     AVX512 )]182.399999999999 code0
[2(VPCONFLICTD      xmmreg|mask|z,xmmrm128|b32 AVX512VL/CD )]172.799999999999 code0
[2(VPCONFLICTD      ymmreg|mask|z,ymmrm256|b32 AVX512VL/CD )]163.199999999999 code0
[2(VPCONFLICTD      zmmreg|mask|z,zmmrm512|b32 AVX512CD )]153.599999999999 code0
[2(VPCONFLICTQ      xmmreg|mask|z,xmmrm128|b64 AVX512VL/CD )]143.999999999999 code0
[2(VPCONFLICTQ      ymmreg|mask|z,ymmrm256|b64 AVX512VL/CD )]134.399999999999 code0
[2(VPCONFLICTQ      zmmreg|mask|z,zmmrm512|b64 AVX512CD )]124.799999999999 code0
[2(VPERMB           xmmreg|mask|z,xmmreg*,xmmrm128 AVX512VL/VBMI )]115.199999999999 code0
[2(VPERMB           ymmreg|mask|z,ymmreg*,ymmrm256 AVX512VL/VBMI )]105.599999999999 code0
[2(VPERMB           zmmreg|mask|z,zmmreg*,zmmrm512 AVX512VBMI )]95.9999999999992 code0
[2(VPERMD           ymmreg|mask|z,ymmreg*,ymmrm256|b32 AVX512VL )]86.3999999999992 code0
[2(VPERMD           zmmreg|mask|z,zmmreg*,zmmrm512|b32 AVX512 )]76.7999999999992 code0
(216)pageeven
restore showpage
%%Page: 217 217
%%BeginPageSetup
save
%%EndPageSetup
/217 pa
[2(VPERMI2B         xmmreg|mask|z,xmmreg,xmmrm128 AVX512VL/VBMI )]710.4 code0
[2(VPERMI2B         ymmreg|mask|z,ymmreg,ymmrm256 AVX512VL/VBMI )]700.8 code0
[2(VPERMI2B         zmmreg|mask|z,zmmreg,zmmrm512 AVX512VBMI )]691.2 code0
[2(VPERMI2D         xmmreg|mask|z,xmmreg,xmmrm128|b32 AVX512VL )]681.6 code0
[2(VPERMI2D         ymmreg|mask|z,ymmreg,ymmrm256|b32 AVX512VL )]672 code0
[2(VPERMI2D         zmmreg|mask|z,zmmreg,zmmrm512|b32 AVX512 )]662.4 code0
[2(VPERMI2PD        xmmreg|mask|z,xmmreg,xmmrm128|b64 AVX512VL )]652.8 code0
[2(VPERMI2PD        ymmreg|mask|z,ymmreg,ymmrm256|b64 AVX512VL )]643.2 code0
[2(VPERMI2PD        zmmreg|mask|z,zmmreg,zmmrm512|b64 AVX512 )]633.6 code0
[2(VPERMI2PS        xmmreg|mask|z,xmmreg,xmmrm128|b32 AVX512VL )]624 code0
[2(VPERMI2PS        ymmreg|mask|z,ymmreg,ymmrm256|b32 AVX512VL )]614.4 code0
[2(VPERMI2PS        zmmreg|mask|z,zmmreg,zmmrm512|b32 AVX512 )]604.8 code0
[2(VPERMI2Q         xmmreg|mask|z,xmmreg,xmmrm128|b64 AVX512VL )]595.2 code0
[2(VPERMI2Q         ymmreg|mask|z,ymmreg,ymmrm256|b64 AVX512VL )]585.6 code0
[2(VPERMI2Q         zmmreg|mask|z,zmmreg,zmmrm512|b64 AVX512 )]576 code0
[2(VPERMI2W         xmmreg|mask|z,xmmreg,xmmrm128 AVX512VL/BW )]566.4 code0
[2(VPERMI2W         ymmreg|mask|z,ymmreg,ymmrm256 AVX512VL/BW )]556.8 code0
[2(VPERMI2W         zmmreg|mask|z,zmmreg,zmmrm512 AVX512BW )]547.2 code0
[2(VPERMILPD        xmmreg|mask|z,xmmrm128|b64,imm8 AVX512VL )]537.6 code0
[2(VPERMILPD        ymmreg|mask|z,ymmrm256|b64,imm8 AVX512VL )]528 code0
[2(VPERMILPD        zmmreg|mask|z,zmmrm512|b64,imm8 AVX512 )]518.4 code0
[2(VPERMILPD        xmmreg|mask|z,xmmreg*,xmmrm128|b64 AVX512VL )]508.8 code0
[2(VPERMILPD        ymmreg|mask|z,ymmreg*,ymmrm256|b64 AVX512VL )]499.2 code0
[2(VPERMILPD        zmmreg|mask|z,zmmreg*,zmmrm512|b64 AVX512 )]489.6 code0
[2(VPERMILPS        xmmreg|mask|z,xmmrm128|b32,imm8 AVX512VL )]480 code0
[2(VPERMILPS        ymmreg|mask|z,ymmrm256|b32,imm8 AVX512VL )]470.4 code0
[2(VPERMILPS        zmmreg|mask|z,zmmrm512|b32,imm8 AVX512 )]460.8 code0
[2(VPERMILPS        xmmreg|mask|z,xmmreg*,xmmrm128|b32 AVX512VL )]451.2 code0
[2(VPERMILPS        ymmreg|mask|z,ymmreg*,ymmrm256|b32 AVX512VL )]441.6 code0
[2(VPERMILPS        zmmreg|mask|z,zmmreg*,zmmrm512|b32 AVX512 )]432 code0
[2(VPERMPD          ymmreg|mask|z,ymmrm256|b64,imm8 AVX512VL )]422.4 code0
[2(VPERMPD          zmmreg|mask|z,zmmrm512|b64,imm8 AVX512 )]412.8 code0
[2(VPERMPD          ymmreg|mask|z,ymmreg*,ymmrm256|b64 AVX512VL )]403.2 code0
[2(VPERMPD          zmmreg|mask|z,zmmreg*,zmmrm512|b64 AVX512 )]393.6 code0
[2(VPERMPS          ymmreg|mask|z,ymmreg*,ymmrm256|b32 AVX512VL )]384 code0
[2(VPERMPS          zmmreg|mask|z,zmmreg*,zmmrm512|b32 AVX512 )]374.4 code0
[2(VPERMQ           ymmreg|mask|z,ymmrm256|b64,imm8 AVX512VL )]364.8 code0
[2(VPERMQ           zmmreg|mask|z,zmmrm512|b64,imm8 AVX512 )]355.2 code0
[2(VPERMQ           ymmreg|mask|z,ymmreg*,ymmrm256|b64 AVX512VL )]345.6 code0
[2(VPERMQ           zmmreg|mask|z,zmmreg*,zmmrm512|b64 AVX512 )]336 code0
[2(VPERMT2B         xmmreg|mask|z,xmmreg,xmmrm128 AVX512VL/VBMI )]326.4 code0
[2(VPERMT2B         ymmreg|mask|z,ymmreg,ymmrm256 AVX512VL/VBMI )]316.8 code0
[2(VPERMT2B         zmmreg|mask|z,zmmreg,zmmrm512 AVX512VBMI )]307.2 code0
[2(VPERMT2D         xmmreg|mask|z,xmmreg,xmmrm128|b32 AVX512VL )]297.6 code0
[2(VPERMT2D         ymmreg|mask|z,ymmreg,ymmrm256|b32 AVX512VL )]288 code0
[2(VPERMT2D         zmmreg|mask|z,zmmreg,zmmrm512|b32 AVX512 )]278.4 code0
[2(VPERMT2PD        xmmreg|mask|z,xmmreg,xmmrm128|b64 AVX512VL )]268.8 code0
[2(VPERMT2PD        ymmreg|mask|z,ymmreg,ymmrm256|b64 AVX512VL )]259.2 code0
[2(VPERMT2PD        zmmreg|mask|z,zmmreg,zmmrm512|b64 AVX512 )]249.6 code0
[2(VPERMT2PS        xmmreg|mask|z,xmmreg,xmmrm128|b32 AVX512VL )]240 code0
[2(VPERMT2PS        ymmreg|mask|z,ymmreg,ymmrm256|b32 AVX512VL )]230.4 code0
[2(VPERMT2PS        zmmreg|mask|z,zmmreg,zmmrm512|b32 AVX512 )]220.799999999999 code0
[2(VPERMT2Q         xmmreg|mask|z,xmmreg,xmmrm128|b64 AVX512VL )]211.199999999999 code0
[2(VPERMT2Q         ymmreg|mask|z,ymmreg,ymmrm256|b64 AVX512VL )]201.599999999999 code0
[2(VPERMT2Q         zmmreg|mask|z,zmmreg,zmmrm512|b64 AVX512 )]191.999999999999 code0
[2(VPERMT2W         xmmreg|mask|z,xmmreg,xmmrm128 AVX512VL/BW )]182.399999999999 code0
[2(VPERMT2W         ymmreg|mask|z,ymmreg,ymmrm256 AVX512VL/BW )]172.799999999999 code0
[2(VPERMT2W         zmmreg|mask|z,zmmreg,zmmrm512 AVX512BW )]163.199999999999 code0
[2(VPERMW           xmmreg|mask|z,xmmreg*,xmmrm128 AVX512VL/BW )]153.599999999999 code0
[2(VPERMW           ymmreg|mask|z,ymmreg*,ymmrm256 AVX512VL/BW )]143.999999999999 code0
[2(VPERMW           zmmreg|mask|z,zmmreg*,zmmrm512 AVX512BW )]134.399999999999 code0
[2(VPEXPANDD        xmmreg|mask|z,mem128     AVX512VL )]124.799999999999 code0
[2(VPEXPANDD        ymmreg|mask|z,mem256     AVX512VL )]115.199999999999 code0
[2(VPEXPANDD        zmmreg|mask|z,mem512     AVX512 )]105.599999999999 code0
[2(VPEXPANDD        xmmreg|mask|z,xmmreg     AVX512VL )]95.9999999999992 code0
[2(VPEXPANDD        ymmreg|mask|z,ymmreg     AVX512VL )]86.3999999999992 code0
[2(VPEXPANDD        zmmreg|mask|z,zmmreg     AVX512 )]76.7999999999992 code0
(217)pageodd
restore showpage
%%Page: 218 218
%%BeginPageSetup
save
%%EndPageSetup
/218 pa
[2(VPEXPANDQ        xmmreg|mask|z,mem128     AVX512VL )]710.4 code0
[2(VPEXPANDQ        ymmreg|mask|z,mem256     AVX512VL )]700.8 code0
[2(VPEXPANDQ        zmmreg|mask|z,mem512     AVX512 )]691.2 code0
[2(VPEXPANDQ        xmmreg|mask|z,xmmreg     AVX512VL )]681.6 code0
[2(VPEXPANDQ        ymmreg|mask|z,ymmreg     AVX512VL )]672 code0
[2(VPEXPANDQ        zmmreg|mask|z,zmmreg     AVX512 )]662.4 code0
[2(VPEXTRB          reg8,xmmreg,imm8         AVX512BW )]652.8 code0
[2(VPEXTRB          reg16,xmmreg,imm8        AVX512BW )]643.2 code0
[2(VPEXTRB          reg32,xmmreg,imm8        AVX512BW )]633.6 code0
[2(VPEXTRB          reg64,xmmreg,imm8        AVX512BW )]624 code0
[2(VPEXTRB          mem8,xmmreg,imm8         AVX512BW )]614.4 code0
[2(VPEXTRD          rm32,xmmreg,imm8         AVX512DQ )]604.8 code0
[2(VPEXTRQ          rm64,xmmreg,imm8         AVX512DQ )]595.2 code0
[2(VPEXTRW          reg16,xmmreg,imm8        AVX512BW )]585.6 code0
[2(VPEXTRW          reg32,xmmreg,imm8        AVX512BW )]576 code0
[2(VPEXTRW          reg64,xmmreg,imm8        AVX512BW )]566.4 code0
[2(VPEXTRW          mem16,xmmreg,imm8        AVX512BW )]556.8 code0
[2(VPEXTRW          reg16,xmmreg,imm8        AVX512BW )]547.2 code0
[2(VPEXTRW          reg32,xmmreg,imm8        AVX512BW )]537.6 code0
[2(VPEXTRW          reg64,xmmreg,imm8        AVX512BW )]528 code0
[2(VPGATHERDD       xmmreg|mask,xmem32       AVX512VL )]518.4 code0
[2(VPGATHERDD       ymmreg|mask,ymem32       AVX512VL )]508.8 code0
[2(VPGATHERDD       zmmreg|mask,zmem32       AVX512 )]499.2 code0
[2(VPGATHERDQ       xmmreg|mask,xmem64       AVX512VL )]489.6 code0
[2(VPGATHERDQ       ymmreg|mask,xmem64       AVX512VL )]480 code0
[2(VPGATHERDQ       zmmreg|mask,ymem64       AVX512 )]470.4 code0
[2(VPGATHERQD       xmmreg|mask,xmem32       AVX512VL )]460.8 code0
[2(VPGATHERQD       xmmreg|mask,ymem32       AVX512VL )]451.2 code0
[2(VPGATHERQD       ymmreg|mask,zmem32       AVX512 )]441.6 code0
[2(VPGATHERQQ       xmmreg|mask,xmem64       AVX512VL )]432 code0
[2(VPGATHERQQ       ymmreg|mask,ymem64       AVX512VL )]422.4 code0
[2(VPGATHERQQ       zmmreg|mask,zmem64       AVX512 )]412.8 code0
[2(VPINSRB          xmmreg,xmmreg*,reg32,imm8 AVX512BW )]403.2 code0
[2(VPINSRB          xmmreg,xmmreg*,mem8,imm8 AVX512BW )]393.6 code0
[2(VPINSRD          xmmreg,xmmreg*,rm32,imm8 AVX512DQ )]384 code0
[2(VPINSRQ          xmmreg,xmmreg*,rm64,imm8 AVX512DQ )]374.4 code0
[2(VPINSRW          xmmreg,xmmreg*,reg32,imm8 AVX512BW )]364.8 code0
[2(VPINSRW          xmmreg,xmmreg*,mem16,imm8 AVX512BW )]355.2 code0
[2(VPLZCNTD         xmmreg|mask|z,xmmrm128|b32 AVX512VL/CD )]345.6 code0
[2(VPLZCNTD         ymmreg|mask|z,ymmrm256|b32 AVX512VL/CD )]336 code0
[2(VPLZCNTD         zmmreg|mask|z,zmmrm512|b32 AVX512CD )]326.4 code0
[2(VPLZCNTQ         xmmreg|mask|z,xmmrm128|b64 AVX512VL/CD )]316.8 code0
[2(VPLZCNTQ         ymmreg|mask|z,ymmrm256|b64 AVX512VL/CD )]307.2 code0
[2(VPLZCNTQ         zmmreg|mask|z,zmmrm512|b64 AVX512CD )]297.6 code0
[2(VPMADD52HUQ      xmmreg|mask|z,xmmreg,xmmrm128|b64 AVX512VL/IFMA )]288 code0
[2(VPMADD52HUQ      ymmreg|mask|z,ymmreg,ymmrm256|b64 AVX512VL/IFMA )]278.4 code0
[2(VPMADD52HUQ      zmmreg|mask|z,zmmreg,zmmrm512|b64 AVX512IFMA )]268.8 code0
[2(VPMADD52LUQ      xmmreg|mask|z,xmmreg,xmmrm128|b64 AVX512VL/IFMA )]259.2 code0
[2(VPMADD52LUQ      ymmreg|mask|z,ymmreg,ymmrm256|b64 AVX512VL/IFMA )]249.6 code0
[2(VPMADD52LUQ      zmmreg|mask|z,zmmreg,zmmrm512|b64 AVX512IFMA )]240 code0
[2(VPMADDUBSW       xmmreg|mask|z,xmmreg*,xmmrm128 AVX512VL/BW )]230.4 code0
[2(VPMADDUBSW       ymmreg|mask|z,ymmreg*,ymmrm256 AVX512VL/BW )]220.799999999999 code0
[2(VPMADDUBSW       zmmreg|mask|z,zmmreg*,zmmrm512 AVX512BW )]211.199999999999 code0
[2(VPMADDWD         xmmreg|mask|z,xmmreg*,xmmrm128 AVX512VL/BW )]201.599999999999 code0
[2(VPMADDWD         ymmreg|mask|z,ymmreg*,ymmrm256 AVX512VL/BW )]191.999999999999 code0
[2(VPMADDWD         zmmreg|mask|z,zmmreg*,zmmrm512 AVX512BW )]182.399999999999 code0
[2(VPMAXSB          xmmreg|mask|z,xmmreg*,xmmrm128 AVX512VL/BW )]172.799999999999 code0
[2(VPMAXSB          ymmreg|mask|z,ymmreg*,ymmrm256 AVX512VL/BW )]163.199999999999 code0
[2(VPMAXSB          zmmreg|mask|z,zmmreg*,zmmrm512 AVX512BW )]153.599999999999 code0
[2(VPMAXSD          xmmreg|mask|z,xmmreg*,xmmrm128|b32 AVX512VL )]143.999999999999 code0
[2(VPMAXSD          ymmreg|mask|z,ymmreg*,ymmrm256|b32 AVX512VL )]134.399999999999 code0
[2(VPMAXSD          zmmreg|mask|z,zmmreg*,zmmrm512|b32 AVX512 )]124.799999999999 code0
[2(VPMAXSQ          xmmreg|mask|z,xmmreg*,xmmrm128|b64 AVX512VL )]115.199999999999 code0
[2(VPMAXSQ          ymmreg|mask|z,ymmreg*,ymmrm256|b64 AVX512VL )]105.599999999999 code0
[2(VPMAXSQ          zmmreg|mask|z,zmmreg*,zmmrm512|b64 AVX512 )]95.9999999999992 code0
[2(VPMAXSW          xmmreg|mask|z,xmmreg*,xmmrm128 AVX512VL/BW )]86.3999999999992 code0
[2(VPMAXSW          ymmreg|mask|z,ymmreg*,ymmrm256 AVX512VL/BW )]76.7999999999992 code0
(218)pageeven
restore showpage
%%Page: 219 219
%%BeginPageSetup
save
%%EndPageSetup
/219 pa
[2(VPMAXSW          zmmreg|mask|z,zmmreg*,zmmrm512 AVX512BW )]710.4 code0
[2(VPMAXUB          xmmreg|mask|z,xmmreg*,xmmrm128 AVX512VL/BW )]700.8 code0
[2(VPMAXUB          ymmreg|mask|z,ymmreg*,ymmrm256 AVX512VL/BW )]691.2 code0
[2(VPMAXUB          zmmreg|mask|z,zmmreg*,zmmrm512 AVX512BW )]681.6 code0
[2(VPMAXUD          xmmreg|mask|z,xmmreg*,xmmrm128|b32 AVX512VL )]672 code0
[2(VPMAXUD          ymmreg|mask|z,ymmreg*,ymmrm256|b32 AVX512VL )]662.4 code0
[2(VPMAXUD          zmmreg|mask|z,zmmreg*,zmmrm512|b32 AVX512 )]652.8 code0
[2(VPMAXUQ          xmmreg|mask|z,xmmreg*,xmmrm128|b64 AVX512VL )]643.2 code0
[2(VPMAXUQ          ymmreg|mask|z,ymmreg*,ymmrm256|b64 AVX512VL )]633.6 code0
[2(VPMAXUQ          zmmreg|mask|z,zmmreg*,zmmrm512|b64 AVX512 )]624 code0
[2(VPMAXUW          xmmreg|mask|z,xmmreg*,xmmrm128 AVX512VL/BW )]614.4 code0
[2(VPMAXUW          ymmreg|mask|z,ymmreg*,ymmrm256 AVX512VL/BW )]604.8 code0
[2(VPMAXUW          zmmreg|mask|z,zmmreg*,zmmrm512 AVX512BW )]595.2 code0
[2(VPMINSB          xmmreg|mask|z,xmmreg*,xmmrm128 AVX512VL/BW )]585.6 code0
[2(VPMINSB          ymmreg|mask|z,ymmreg*,ymmrm256 AVX512VL/BW )]576 code0
[2(VPMINSB          zmmreg|mask|z,zmmreg*,zmmrm512 AVX512BW )]566.4 code0
[2(VPMINSD          xmmreg|mask|z,xmmreg*,xmmrm128|b32 AVX512VL )]556.8 code0
[2(VPMINSD          ymmreg|mask|z,ymmreg*,ymmrm256|b32 AVX512VL )]547.2 code0
[2(VPMINSD          zmmreg|mask|z,zmmreg*,zmmrm512|b32 AVX512 )]537.6 code0
[2(VPMINSQ          xmmreg|mask|z,xmmreg*,xmmrm128|b64 AVX512VL )]528 code0
[2(VPMINSQ          ymmreg|mask|z,ymmreg*,ymmrm256|b64 AVX512VL )]518.4 code0
[2(VPMINSQ          zmmreg|mask|z,zmmreg*,zmmrm512|b64 AVX512 )]508.8 code0
[2(VPMINSW          xmmreg|mask|z,xmmreg*,xmmrm128 AVX512VL/BW )]499.2 code0
[2(VPMINSW          ymmreg|mask|z,ymmreg*,ymmrm256 AVX512VL/BW )]489.6 code0
[2(VPMINSW          zmmreg|mask|z,zmmreg*,zmmrm512 AVX512BW )]480 code0
[2(VPMINUB          xmmreg|mask|z,xmmreg*,xmmrm128 AVX512VL/BW )]470.4 code0
[2(VPMINUB          ymmreg|mask|z,ymmreg*,ymmrm256 AVX512VL/BW )]460.8 code0
[2(VPMINUB          zmmreg|mask|z,zmmreg*,zmmrm512 AVX512BW )]451.2 code0
[2(VPMINUD          xmmreg|mask|z,xmmreg*,xmmrm128|b32 AVX512VL )]441.6 code0
[2(VPMINUD          ymmreg|mask|z,ymmreg*,ymmrm256|b32 AVX512VL )]432 code0
[2(VPMINUD          zmmreg|mask|z,zmmreg*,zmmrm512|b32 AVX512 )]422.4 code0
[2(VPMINUQ          xmmreg|mask|z,xmmreg*,xmmrm128|b64 AVX512VL )]412.8 code0
[2(VPMINUQ          ymmreg|mask|z,ymmreg*,ymmrm256|b64 AVX512VL )]403.2 code0
[2(VPMINUQ          zmmreg|mask|z,zmmreg*,zmmrm512|b64 AVX512 )]393.6 code0
[2(VPMINUW          xmmreg|mask|z,xmmreg*,xmmrm128 AVX512VL/BW )]384 code0
[2(VPMINUW          ymmreg|mask|z,ymmreg*,ymmrm256 AVX512VL/BW )]374.4 code0
[2(VPMINUW          zmmreg|mask|z,zmmreg*,zmmrm512 AVX512BW )]364.8 code0
[2(VPMOVB2M         kreg,xmmreg              AVX512VL/BW )]355.2 code0
[2(VPMOVB2M         kreg,ymmreg              AVX512VL/BW )]345.6 code0
[2(VPMOVB2M         kreg,zmmreg              AVX512BW )]336 code0
[2(VPMOVD2M         kreg,xmmreg              AVX512VL/DQ )]326.4 code0
[2(VPMOVD2M         kreg,ymmreg              AVX512VL/DQ )]316.8 code0
[2(VPMOVD2M         kreg,zmmreg              AVX512DQ )]307.2 code0
[2(VPMOVDB          xmmreg|mask|z,xmmreg     AVX512VL )]297.6 code0
[2(VPMOVDB          xmmreg|mask|z,ymmreg     AVX512VL )]288 code0
[2(VPMOVDB          xmmreg|mask|z,zmmreg     AVX512 )]278.4 code0
[2(VPMOVDB          mem32|mask,xmmreg        AVX512VL )]268.8 code0
[2(VPMOVDB          mem64|mask,ymmreg        AVX512VL )]259.2 code0
[2(VPMOVDB          mem128|mask,zmmreg       AVX512 )]249.6 code0
[2(VPMOVDW          xmmreg|mask|z,xmmreg     AVX512VL )]240 code0
[2(VPMOVDW          xmmreg|mask|z,ymmreg     AVX512VL )]230.4 code0
[2(VPMOVDW          ymmreg|mask|z,zmmreg     AVX512 )]220.799999999999 code0
[2(VPMOVDW          mem64|mask,xmmreg        AVX512VL )]211.199999999999 code0
[2(VPMOVDW          mem128|mask,ymmreg       AVX512VL )]201.599999999999 code0
[2(VPMOVDW          mem256|mask,zmmreg       AVX512 )]191.999999999999 code0
[2(VPMOVM2B         xmmreg,kreg              AVX512VL/BW )]182.399999999999 code0
[2(VPMOVM2B         ymmreg,kreg              AVX512VL/BW )]172.799999999999 code0
[2(VPMOVM2B         zmmreg,kreg              AVX512BW )]163.199999999999 code0
[2(VPMOVM2D         xmmreg,kreg              AVX512VL/DQ )]153.599999999999 code0
[2(VPMOVM2D         ymmreg,kreg              AVX512VL/DQ )]143.999999999999 code0
[2(VPMOVM2D         zmmreg,kreg              AVX512DQ )]134.399999999999 code0
[2(VPMOVM2Q         xmmreg,kreg              AVX512VL/DQ )]124.799999999999 code0
[2(VPMOVM2Q         ymmreg,kreg              AVX512VL/DQ )]115.199999999999 code0
[2(VPMOVM2Q         zmmreg,kreg              AVX512DQ )]105.599999999999 code0
[2(VPMOVM2W         xmmreg,kreg              AVX512VL/BW )]95.9999999999992 code0
[2(VPMOVM2W         ymmreg,kreg              AVX512VL/BW )]86.3999999999992 code0
[2(VPMOVM2W         zmmreg,kreg              AVX512BW )]76.7999999999992 code0
(219)pageodd
restore showpage
%%Page: 220 220
%%BeginPageSetup
save
%%EndPageSetup
/220 pa
[2(VPMOVQ2M         kreg,xmmreg              AVX512VL/DQ )]710.4 code0
[2(VPMOVQ2M         kreg,ymmreg              AVX512VL/DQ )]700.8 code0
[2(VPMOVQ2M         kreg,zmmreg              AVX512DQ )]691.2 code0
[2(VPMOVQB          xmmreg|mask|z,xmmreg     AVX512VL )]681.6 code0
[2(VPMOVQB          xmmreg|mask|z,ymmreg     AVX512VL )]672 code0
[2(VPMOVQB          xmmreg|mask|z,zmmreg     AVX512 )]662.4 code0
[2(VPMOVQB          mem16|mask,xmmreg        AVX512VL )]652.8 code0
[2(VPMOVQB          mem32|mask,ymmreg        AVX512VL )]643.2 code0
[2(VPMOVQB          mem64|mask,zmmreg        AVX512 )]633.6 code0
[2(VPMOVQD          xmmreg|mask|z,xmmreg     AVX512VL )]624 code0
[2(VPMOVQD          xmmreg|mask|z,ymmreg     AVX512VL )]614.4 code0
[2(VPMOVQD          ymmreg|mask|z,zmmreg     AVX512 )]604.8 code0
[2(VPMOVQD          mem64|mask,xmmreg        AVX512VL )]595.2 code0
[2(VPMOVQD          mem128|mask,ymmreg       AVX512VL )]585.6 code0
[2(VPMOVQD          mem256|mask,zmmreg       AVX512 )]576 code0
[2(VPMOVQW          xmmreg|mask|z,xmmreg     AVX512VL )]566.4 code0
[2(VPMOVQW          xmmreg|mask|z,ymmreg     AVX512VL )]556.8 code0
[2(VPMOVQW          xmmreg|mask|z,zmmreg     AVX512 )]547.2 code0
[2(VPMOVQW          mem32|mask,xmmreg        AVX512VL )]537.6 code0
[2(VPMOVQW          mem64|mask,ymmreg        AVX512VL )]528 code0
[2(VPMOVQW          mem128|mask,zmmreg       AVX512 )]518.4 code0
[2(VPMOVSDB         xmmreg|mask|z,xmmreg     AVX512VL )]508.8 code0
[2(VPMOVSDB         xmmreg|mask|z,ymmreg     AVX512VL )]499.2 code0
[2(VPMOVSDB         xmmreg|mask|z,zmmreg     AVX512 )]489.6 code0
[2(VPMOVSDB         mem32|mask,xmmreg        AVX512VL )]480 code0
[2(VPMOVSDB         mem64|mask,ymmreg        AVX512VL )]470.4 code0
[2(VPMOVSDB         mem128|mask,zmmreg       AVX512 )]460.8 code0
[2(VPMOVSDW         xmmreg|mask|z,xmmreg     AVX512VL )]451.2 code0
[2(VPMOVSDW         xmmreg|mask|z,ymmreg     AVX512VL )]441.6 code0
[2(VPMOVSDW         ymmreg|mask|z,zmmreg     AVX512 )]432 code0
[2(VPMOVSDW         mem64|mask,xmmreg        AVX512VL )]422.4 code0
[2(VPMOVSDW         mem128|mask,ymmreg       AVX512VL )]412.8 code0
[2(VPMOVSDW         mem256|mask,zmmreg       AVX512 )]403.2 code0
[2(VPMOVSQB         xmmreg|mask|z,xmmreg     AVX512VL )]393.6 code0
[2(VPMOVSQB         xmmreg|mask|z,ymmreg     AVX512VL )]384 code0
[2(VPMOVSQB         xmmreg|mask|z,zmmreg     AVX512 )]374.4 code0
[2(VPMOVSQB         mem16|mask,xmmreg        AVX512VL )]364.8 code0
[2(VPMOVSQB         mem32|mask,ymmreg        AVX512VL )]355.2 code0
[2(VPMOVSQB         mem64|mask,zmmreg        AVX512 )]345.6 code0
[2(VPMOVSQD         xmmreg|mask|z,xmmreg     AVX512VL )]336 code0
[2(VPMOVSQD         xmmreg|mask|z,ymmreg     AVX512VL )]326.4 code0
[2(VPMOVSQD         ymmreg|mask|z,zmmreg     AVX512 )]316.8 code0
[2(VPMOVSQD         mem64|mask,xmmreg        AVX512VL )]307.2 code0
[2(VPMOVSQD         mem128|mask,ymmreg       AVX512VL )]297.6 code0
[2(VPMOVSQD         mem256|mask,zmmreg       AVX512 )]288 code0
[2(VPMOVSQW         xmmreg|mask|z,xmmreg     AVX512VL )]278.4 code0
[2(VPMOVSQW         xmmreg|mask|z,ymmreg     AVX512VL )]268.8 code0
[2(VPMOVSQW         xmmreg|mask|z,zmmreg     AVX512 )]259.2 code0
[2(VPMOVSQW         mem32|mask,xmmreg        AVX512VL )]249.6 code0
[2(VPMOVSQW         mem64|mask,ymmreg        AVX512VL )]240 code0
[2(VPMOVSQW         mem128|mask,zmmreg       AVX512 )]230.4 code0
[2(VPMOVSWB         xmmreg|mask|z,xmmreg     AVX512VL/BW )]220.799999999999 code0
[2(VPMOVSWB         xmmreg|mask|z,ymmreg     AVX512VL/BW )]211.199999999999 code0
[2(VPMOVSWB         ymmreg|mask|z,zmmreg     AVX512BW )]201.599999999999 code0
[2(VPMOVSWB         mem64|mask,xmmreg        AVX512VL/BW )]191.999999999999 code0
[2(VPMOVSWB         mem128|mask,ymmreg       AVX512VL/BW )]182.399999999999 code0
[2(VPMOVSWB         mem256|mask,zmmreg       AVX512BW )]172.799999999999 code0
[2(VPMOVSXBD        xmmreg|mask|z,xmmrm32    AVX512VL )]163.199999999999 code0
[2(VPMOVSXBD        ymmreg|mask|z,xmmrm64    AVX512VL )]153.599999999999 code0
[2(VPMOVSXBD        zmmreg|mask|z,xmmrm128   AVX512 )]143.999999999999 code0
[2(VPMOVSXBQ        xmmreg|mask|z,xmmrm16    AVX512VL )]134.399999999999 code0
[2(VPMOVSXBQ        ymmreg|mask|z,xmmrm32    AVX512VL )]124.799999999999 code0
[2(VPMOVSXBQ        zmmreg|mask|z,xmmrm64    AVX512 )]115.199999999999 code0
[2(VPMOVSXBW        xmmreg|mask|z,xmmrm64    AVX512VL/BW )]105.599999999999 code0
[2(VPMOVSXBW        ymmreg|mask|z,xmmrm128   AVX512VL/BW )]95.9999999999992 code0
[2(VPMOVSXBW        zmmreg|mask|z,ymmrm256   AVX512BW )]86.3999999999992 code0
[2(VPMOVSXDQ        xmmreg|mask|z,xmmrm64    AVX512VL )]76.7999999999992 code0
(220)pageeven
restore showpage
%%Page: 221 221
%%BeginPageSetup
save
%%EndPageSetup
/221 pa
[2(VPMOVSXDQ        ymmreg|mask|z,xmmrm128   AVX512VL )]710.4 code0
[2(VPMOVSXDQ        zmmreg|mask|z,ymmrm256   AVX512 )]700.8 code0
[2(VPMOVSXWD        xmmreg|mask|z,xmmrm64    AVX512VL )]691.2 code0
[2(VPMOVSXWD        ymmreg|mask|z,xmmrm128   AVX512VL )]681.6 code0
[2(VPMOVSXWD        zmmreg|mask|z,ymmrm256   AVX512 )]672 code0
[2(VPMOVSXWQ        xmmreg|mask|z,xmmrm32    AVX512VL )]662.4 code0
[2(VPMOVSXWQ        ymmreg|mask|z,xmmrm64    AVX512VL )]652.8 code0
[2(VPMOVSXWQ        zmmreg|mask|z,xmmrm128   AVX512 )]643.2 code0
[2(VPMOVUSDB        xmmreg|mask|z,xmmreg     AVX512VL )]633.6 code0
[2(VPMOVUSDB        xmmreg|mask|z,ymmreg     AVX512VL )]624 code0
[2(VPMOVUSDB        xmmreg|mask|z,zmmreg     AVX512 )]614.4 code0
[2(VPMOVUSDB        mem32|mask,xmmreg        AVX512VL )]604.8 code0
[2(VPMOVUSDB        mem64|mask,ymmreg        AVX512VL )]595.2 code0
[2(VPMOVUSDB        mem128|mask,zmmreg       AVX512 )]585.6 code0
[2(VPMOVUSDW        xmmreg|mask|z,xmmreg     AVX512VL )]576 code0
[2(VPMOVUSDW        xmmreg|mask|z,ymmreg     AVX512VL )]566.4 code0
[2(VPMOVUSDW        ymmreg|mask|z,zmmreg     AVX512 )]556.8 code0
[2(VPMOVUSDW        mem64|mask,xmmreg        AVX512VL )]547.2 code0
[2(VPMOVUSDW        mem128|mask,ymmreg       AVX512VL )]537.6 code0
[2(VPMOVUSDW        mem256|mask,zmmreg       AVX512 )]528 code0
[2(VPMOVUSQB        xmmreg|mask|z,xmmreg     AVX512VL )]518.4 code0
[2(VPMOVUSQB        xmmreg|mask|z,ymmreg     AVX512VL )]508.8 code0
[2(VPMOVUSQB        xmmreg|mask|z,zmmreg     AVX512 )]499.2 code0
[2(VPMOVUSQB        mem16|mask,xmmreg        AVX512VL )]489.6 code0
[2(VPMOVUSQB        mem32|mask,ymmreg        AVX512VL )]480 code0
[2(VPMOVUSQB        mem64|mask,zmmreg        AVX512 )]470.4 code0
[2(VPMOVUSQD        xmmreg|mask|z,xmmreg     AVX512VL )]460.8 code0
[2(VPMOVUSQD        xmmreg|mask|z,ymmreg     AVX512VL )]451.2 code0
[2(VPMOVUSQD        ymmreg|mask|z,zmmreg     AVX512 )]441.6 code0
[2(VPMOVUSQD        mem64|mask,xmmreg        AVX512VL )]432 code0
[2(VPMOVUSQD        mem128|mask,ymmreg       AVX512VL )]422.4 code0
[2(VPMOVUSQD        mem256|mask,zmmreg       AVX512 )]412.8 code0
[2(VPMOVUSQW        xmmreg|mask|z,xmmreg     AVX512VL )]403.2 code0
[2(VPMOVUSQW        xmmreg|mask|z,ymmreg     AVX512VL )]393.6 code0
[2(VPMOVUSQW        xmmreg|mask|z,zmmreg     AVX512 )]384 code0
[2(VPMOVUSQW        mem32|mask,xmmreg        AVX512VL )]374.4 code0
[2(VPMOVUSQW        mem64|mask,ymmreg        AVX512VL )]364.8 code0
[2(VPMOVUSQW        mem128|mask,zmmreg       AVX512 )]355.2 code0
[2(VPMOVUSWB        xmmreg|mask|z,xmmreg     AVX512VL/BW )]345.6 code0
[2(VPMOVUSWB        xmmreg|mask|z,ymmreg     AVX512VL/BW )]336 code0
[2(VPMOVUSWB        ymmreg|mask|z,zmmreg     AVX512BW )]326.4 code0
[2(VPMOVUSWB        mem64|mask,xmmreg        AVX512VL/BW )]316.8 code0
[2(VPMOVUSWB        mem128|mask,ymmreg       AVX512VL/BW )]307.2 code0
[2(VPMOVUSWB        mem256|mask,zmmreg       AVX512BW )]297.6 code0
[2(VPMOVW2M         kreg,xmmreg              AVX512VL/BW )]288 code0
[2(VPMOVW2M         kreg,ymmreg              AVX512VL/BW )]278.4 code0
[2(VPMOVW2M         kreg,zmmreg              AVX512BW )]268.8 code0
[2(VPMOVWB          xmmreg|mask|z,xmmreg     AVX512VL/BW )]259.2 code0
[2(VPMOVWB          xmmreg|mask|z,ymmreg     AVX512VL/BW )]249.6 code0
[2(VPMOVWB          ymmreg|mask|z,zmmreg     AVX512BW )]240 code0
[2(VPMOVWB          mem64|mask,xmmreg        AVX512VL/BW )]230.4 code0
[2(VPMOVWB          mem128|mask,ymmreg       AVX512VL/BW )]220.799999999999 code0
[2(VPMOVWB          mem256|mask,zmmreg       AVX512BW )]211.199999999999 code0
[2(VPMOVZXBD        xmmreg|mask|z,xmmrm32    AVX512VL )]201.599999999999 code0
[2(VPMOVZXBD        ymmreg|mask|z,xmmrm64    AVX512VL )]191.999999999999 code0
[2(VPMOVZXBD        zmmreg|mask|z,xmmrm128   AVX512 )]182.399999999999 code0
[2(VPMOVZXBQ        xmmreg|mask|z,xmmrm16    AVX512VL )]172.799999999999 code0
[2(VPMOVZXBQ        ymmreg|mask|z,xmmrm32    AVX512VL )]163.199999999999 code0
[2(VPMOVZXBQ        zmmreg|mask|z,xmmrm64    AVX512 )]153.599999999999 code0
[2(VPMOVZXBW        xmmreg|mask|z,xmmrm64    AVX512VL/BW )]143.999999999999 code0
[2(VPMOVZXBW        ymmreg|mask|z,xmmrm128   AVX512VL/BW )]134.399999999999 code0
[2(VPMOVZXBW        zmmreg|mask|z,ymmrm256   AVX512BW )]124.799999999999 code0
[2(VPMOVZXDQ        xmmreg|mask|z,xmmrm64    AVX512VL )]115.199999999999 code0
[2(VPMOVZXDQ        ymmreg|mask|z,xmmrm128   AVX512VL )]105.599999999999 code0
[2(VPMOVZXDQ        zmmreg|mask|z,ymmrm256   AVX512 )]95.9999999999992 code0
[2(VPMOVZXWD        xmmreg|mask|z,xmmrm64    AVX512VL )]86.3999999999992 code0
[2(VPMOVZXWD        ymmreg|mask|z,xmmrm128   AVX512VL )]76.7999999999992 code0
(221)pageodd
restore showpage
%%Page: 222 222
%%BeginPageSetup
save
%%EndPageSetup
/222 pa
[2(VPMOVZXWD        zmmreg|mask|z,ymmrm256   AVX512 )]710.4 code0
[2(VPMOVZXWQ        xmmreg|mask|z,xmmrm32    AVX512VL )]700.8 code0
[2(VPMOVZXWQ        ymmreg|mask|z,xmmrm64    AVX512VL )]691.2 code0
[2(VPMOVZXWQ        zmmreg|mask|z,xmmrm128   AVX512 )]681.6 code0
[2(VPMULDQ          xmmreg|mask|z,xmmreg*,xmmrm128|b64 AVX512VL )]672 code0
[2(VPMULDQ          ymmreg|mask|z,ymmreg*,ymmrm256|b64 AVX512VL )]662.4 code0
[2(VPMULDQ          zmmreg|mask|z,zmmreg*,zmmrm512|b64 AVX512 )]652.8 code0
[2(VPMULHRSW        xmmreg|mask|z,xmmreg*,xmmrm128 AVX512VL/BW )]643.2 code0
[2(VPMULHRSW        ymmreg|mask|z,ymmreg*,ymmrm256 AVX512VL/BW )]633.6 code0
[2(VPMULHRSW        zmmreg|mask|z,zmmreg*,zmmrm512 AVX512BW )]624 code0
[2(VPMULHUW         xmmreg|mask|z,xmmreg*,xmmrm128 AVX512VL/BW )]614.4 code0
[2(VPMULHUW         ymmreg|mask|z,ymmreg*,ymmrm256 AVX512VL/BW )]604.8 code0
[2(VPMULHUW         zmmreg|mask|z,zmmreg*,zmmrm512 AVX512BW )]595.2 code0
[2(VPMULHW          xmmreg|mask|z,xmmreg*,xmmrm128 AVX512VL/BW )]585.6 code0
[2(VPMULHW          ymmreg|mask|z,ymmreg*,ymmrm256 AVX512VL/BW )]576 code0
[2(VPMULHW          zmmreg|mask|z,zmmreg*,zmmrm512 AVX512BW )]566.4 code0
[2(VPMULLD          xmmreg|mask|z,xmmreg*,xmmrm128|b32 AVX512VL )]556.8 code0
[2(VPMULLD          ymmreg|mask|z,ymmreg*,ymmrm256|b32 AVX512VL )]547.2 code0
[2(VPMULLD          zmmreg|mask|z,zmmreg*,zmmrm512|b32 AVX512 )]537.6 code0
[2(VPMULLQ          xmmreg|mask|z,xmmreg*,xmmrm128|b64 AVX512VL/DQ )]528 code0
[2(VPMULLQ          ymmreg|mask|z,ymmreg*,ymmrm256|b64 AVX512VL/DQ )]518.4 code0
[2(VPMULLQ          zmmreg|mask|z,zmmreg*,zmmrm512|b64 AVX512DQ )]508.8 code0
[2(VPMULLW          xmmreg|mask|z,xmmreg*,xmmrm128 AVX512VL/BW )]499.2 code0
[2(VPMULLW          ymmreg|mask|z,ymmreg*,ymmrm256 AVX512VL/BW )]489.6 code0
[2(VPMULLW          zmmreg|mask|z,zmmreg*,zmmrm512 AVX512BW )]480 code0
[2(VPMULTISHIFTQB   xmmreg|mask|z,xmmreg*,xmmrm128|b64 AVX512VL/VBMI )]470.4 code0
[2(VPMULTISHIFTQB   ymmreg|mask|z,ymmreg*,ymmrm256|b64 AVX512VL/VBMI )]460.8 code0
[2(VPMULTISHIFTQB   zmmreg|mask|z,zmmreg*,zmmrm512|b64 AVX512VBMI )]451.2 code0
[2(VPMULUDQ         xmmreg|mask|z,xmmreg*,xmmrm128|b64 AVX512VL )]441.6 code0
[2(VPMULUDQ         ymmreg|mask|z,ymmreg*,ymmrm256|b64 AVX512VL )]432 code0
[2(VPMULUDQ         zmmreg|mask|z,zmmreg*,zmmrm512|b64 AVX512 )]422.4 code0
[2(VPORD            xmmreg|mask|z,xmmreg*,xmmrm128|b32 AVX512VL )]412.8 code0
[2(VPORD            ymmreg|mask|z,ymmreg*,ymmrm256|b32 AVX512VL )]403.2 code0
[2(VPORD            zmmreg|mask|z,zmmreg*,zmmrm512|b32 AVX512 )]393.6 code0
[2(VPORQ            xmmreg|mask|z,xmmreg*,xmmrm128|b64 AVX512VL )]384 code0
[2(VPORQ            ymmreg|mask|z,ymmreg*,ymmrm256|b64 AVX512VL )]374.4 code0
[2(VPORQ            zmmreg|mask|z,zmmreg*,zmmrm512|b64 AVX512 )]364.8 code0
[2(VPROLD           xmmreg|mask|z,xmmrm128|b32*,imm8 AVX512VL )]355.2 code0
[2(VPROLD           ymmreg|mask|z,ymmrm256|b32*,imm8 AVX512VL )]345.6 code0
[2(VPROLD           zmmreg|mask|z,zmmrm512|b32*,imm8 AVX512 )]336 code0
[2(VPROLQ           xmmreg|mask|z,xmmrm128|b64*,imm8 AVX512VL )]326.4 code0
[2(VPROLQ           ymmreg|mask|z,ymmrm256|b64*,imm8 AVX512VL )]316.8 code0
[2(VPROLQ           zmmreg|mask|z,zmmrm512|b64*,imm8 AVX512 )]307.2 code0
[2(VPROLVD          xmmreg|mask|z,xmmreg*,xmmrm128|b32 AVX512VL )]297.6 code0
[2(VPROLVD          ymmreg|mask|z,ymmreg*,ymmrm256|b32 AVX512VL )]288 code0
[2(VPROLVD          zmmreg|mask|z,zmmreg*,zmmrm512|b32 AVX512 )]278.4 code0
[2(VPROLVQ          xmmreg|mask|z,xmmreg*,xmmrm128|b64 AVX512VL )]268.8 code0
[2(VPROLVQ          ymmreg|mask|z,ymmreg*,ymmrm256|b64 AVX512VL )]259.2 code0
[2(VPROLVQ          zmmreg|mask|z,zmmreg*,zmmrm512|b64 AVX512 )]249.6 code0
[2(VPRORD           xmmreg|mask|z,xmmrm128|b32*,imm8 AVX512VL )]240 code0
[2(VPRORD           ymmreg|mask|z,ymmrm256|b32*,imm8 AVX512VL )]230.4 code0
[2(VPRORD           zmmreg|mask|z,zmmrm512|b32*,imm8 AVX512 )]220.799999999999 code0
[2(VPRORQ           xmmreg|mask|z,xmmrm128|b64*,imm8 AVX512VL )]211.199999999999 code0
[2(VPRORQ           ymmreg|mask|z,ymmrm256|b64*,imm8 AVX512VL )]201.599999999999 code0
[2(VPRORQ           zmmreg|mask|z,zmmrm512|b64*,imm8 AVX512 )]191.999999999999 code0
[2(VPRORVD          xmmreg|mask|z,xmmreg*,xmmrm128|b32 AVX512VL )]182.399999999999 code0
[2(VPRORVD          ymmreg|mask|z,ymmreg*,ymmrm256|b32 AVX512VL )]172.799999999999 code0
[2(VPRORVD          zmmreg|mask|z,zmmreg*,zmmrm512|b32 AVX512 )]163.199999999999 code0
[2(VPRORVQ          xmmreg|mask|z,xmmreg*,xmmrm128|b64 AVX512VL )]153.599999999999 code0
[2(VPRORVQ          ymmreg|mask|z,ymmreg*,ymmrm256|b64 AVX512VL )]143.999999999999 code0
[2(VPRORVQ          zmmreg|mask|z,zmmreg*,zmmrm512|b64 AVX512 )]134.399999999999 code0
[2(VPSADBW          xmmreg,xmmreg*,xmmrm128  AVX512VL/BW )]124.799999999999 code0
[2(VPSADBW          ymmreg,ymmreg*,ymmrm256  AVX512VL/BW )]115.199999999999 code0
[2(VPSADBW          zmmreg,zmmreg*,zmmrm512  AVX512BW )]105.599999999999 code0
[2(VPSCATTERDD      xmem32|mask,xmmreg       AVX512VL )]95.9999999999992 code0
[2(VPSCATTERDD      ymem32|mask,ymmreg       AVX512VL )]86.3999999999992 code0
[2(VPSCATTERDD      zmem32|mask,zmmreg       AVX512 )]76.7999999999992 code0
(222)pageeven
restore showpage
%%Page: 223 223
%%BeginPageSetup
save
%%EndPageSetup
/223 pa
[2(VPSCATTERDQ      xmem64|mask,xmmreg       AVX512VL )]710.4 code0
[2(VPSCATTERDQ      xmem64|mask,ymmreg       AVX512VL )]700.8 code0
[2(VPSCATTERDQ      ymem64|mask,zmmreg       AVX512 )]691.2 code0
[2(VPSCATTERQD      xmem32|mask,xmmreg       AVX512VL )]681.6 code0
[2(VPSCATTERQD      ymem32|mask,xmmreg       AVX512VL )]672 code0
[2(VPSCATTERQD      zmem32|mask,ymmreg       AVX512 )]662.4 code0
[2(VPSCATTERQQ      xmem64|mask,xmmreg       AVX512VL )]652.8 code0
[2(VPSCATTERQQ      ymem64|mask,ymmreg       AVX512VL )]643.2 code0
[2(VPSCATTERQQ      zmem64|mask,zmmreg       AVX512 )]633.6 code0
[2(VPSHUFB          xmmreg|mask|z,xmmreg*,xmmrm128 AVX512VL/BW )]624 code0
[2(VPSHUFB          ymmreg|mask|z,ymmreg*,ymmrm256 AVX512VL/BW )]614.4 code0
[2(VPSHUFB          zmmreg|mask|z,zmmreg*,zmmrm512 AVX512BW )]604.8 code0
[2(VPSHUFD          xmmreg|mask|z,xmmrm128|b32,imm8 AVX512VL )]595.2 code0
[2(VPSHUFD          ymmreg|mask|z,ymmrm256|b32,imm8 AVX512VL )]585.6 code0
[2(VPSHUFD          zmmreg|mask|z,zmmrm512|b32,imm8 AVX512 )]576 code0
[2(VPSHUFHW         xmmreg|mask|z,xmmrm128,imm8 AVX512VL/BW )]566.4 code0
[2(VPSHUFHW         ymmreg|mask|z,ymmrm256,imm8 AVX512VL/BW )]556.8 code0
[2(VPSHUFHW         zmmreg|mask|z,zmmrm512,imm8 AVX512BW )]547.2 code0
[2(VPSHUFLW         xmmreg|mask|z,xmmrm128,imm8 AVX512VL/BW )]537.6 code0
[2(VPSHUFLW         ymmreg|mask|z,ymmrm256,imm8 AVX512VL/BW )]528 code0
[2(VPSHUFLW         zmmreg|mask|z,zmmrm512,imm8 AVX512BW )]518.4 code0
[2(VPSLLD           xmmreg|mask|z,xmmreg*,xmmrm128 AVX512VL )]508.8 code0
[2(VPSLLD           ymmreg|mask|z,ymmreg*,xmmrm128 AVX512VL )]499.2 code0
[2(VPSLLD           zmmreg|mask|z,zmmreg*,xmmrm128 AVX512 )]489.6 code0
[2(VPSLLD           xmmreg|mask|z,xmmrm128|b32*,imm8 AVX512VL )]480 code0
[2(VPSLLD           ymmreg|mask|z,ymmrm256|b32*,imm8 AVX512VL )]470.4 code0
[2(VPSLLD           zmmreg|mask|z,zmmrm512|b32*,imm8 AVX512 )]460.8 code0
[2(VPSLLDQ          xmmreg,xmmrm128*,imm8    AVX512VL/BW )]451.2 code0
[2(VPSLLDQ          ymmreg,ymmrm256*,imm8    AVX512VL/BW )]441.6 code0
[2(VPSLLDQ          zmmreg,zmmrm512*,imm8    AVX512BW )]432 code0
[2(VPSLLQ           xmmreg|mask|z,xmmreg*,xmmrm128 AVX512VL )]422.4 code0
[2(VPSLLQ           ymmreg|mask|z,ymmreg*,xmmrm128 AVX512VL )]412.8 code0
[2(VPSLLQ           zmmreg|mask|z,zmmreg*,xmmrm128 AVX512 )]403.2 code0
[2(VPSLLQ           xmmreg|mask|z,xmmrm128|b64*,imm8 AVX512VL )]393.6 code0
[2(VPSLLQ           ymmreg|mask|z,ymmrm256|b64*,imm8 AVX512VL )]384 code0
[2(VPSLLQ           zmmreg|mask|z,zmmrm512|b64*,imm8 AVX512 )]374.4 code0
[2(VPSLLVD          xmmreg|mask|z,xmmreg*,xmmrm128|b32 AVX512VL )]364.8 code0
[2(VPSLLVD          ymmreg|mask|z,ymmreg*,ymmrm256|b32 AVX512VL )]355.2 code0
[2(VPSLLVD          zmmreg|mask|z,zmmreg*,zmmrm512|b32 AVX512 )]345.6 code0
[2(VPSLLVQ          xmmreg|mask|z,xmmreg*,xmmrm128|b64 AVX512VL )]336 code0
[2(VPSLLVQ          ymmreg|mask|z,ymmreg*,ymmrm256|b64 AVX512VL )]326.4 code0
[2(VPSLLVQ          zmmreg|mask|z,zmmreg*,zmmrm512|b64 AVX512 )]316.8 code0
[2(VPSLLVW          xmmreg|mask|z,xmmreg*,xmmrm128 AVX512VL/BW )]307.2 code0
[2(VPSLLVW          ymmreg|mask|z,ymmreg*,ymmrm256 AVX512VL/BW )]297.6 code0
[2(VPSLLVW          zmmreg|mask|z,zmmreg*,zmmrm512 AVX512BW )]288 code0
[2(VPSLLW           xmmreg|mask|z,xmmreg*,xmmrm128 AVX512VL/BW )]278.4 code0
[2(VPSLLW           ymmreg|mask|z,ymmreg*,xmmrm128 AVX512VL/BW )]268.8 code0
[2(VPSLLW           zmmreg|mask|z,zmmreg*,xmmrm128 AVX512BW )]259.2 code0
[2(VPSLLW           xmmreg|mask|z,xmmrm128*,imm8 AVX512VL/BW )]249.6 code0
[2(VPSLLW           ymmreg|mask|z,ymmrm256*,imm8 AVX512VL/BW )]240 code0
[2(VPSLLW           zmmreg|mask|z,zmmrm512*,imm8 AVX512BW )]230.4 code0
[2(VPSRAD           xmmreg|mask|z,xmmreg*,xmmrm128 AVX512VL )]220.799999999999 code0
[2(VPSRAD           ymmreg|mask|z,ymmreg*,xmmrm128 AVX512VL )]211.199999999999 code0
[2(VPSRAD           zmmreg|mask|z,zmmreg*,xmmrm128 AVX512 )]201.599999999999 code0
[2(VPSRAD           xmmreg|mask|z,xmmrm128|b32*,imm8 AVX512VL )]191.999999999999 code0
[2(VPSRAD           ymmreg|mask|z,ymmrm256|b32*,imm8 AVX512VL )]182.399999999999 code0
[2(VPSRAD           zmmreg|mask|z,zmmrm512|b32*,imm8 AVX512 )]172.799999999999 code0
[2(VPSRAQ           xmmreg|mask|z,xmmreg*,xmmrm128 AVX512VL )]163.199999999999 code0
[2(VPSRAQ           ymmreg|mask|z,ymmreg*,xmmrm128 AVX512VL )]153.599999999999 code0
[2(VPSRAQ           zmmreg|mask|z,zmmreg*,xmmrm128 AVX512 )]143.999999999999 code0
[2(VPSRAQ           xmmreg|mask|z,xmmrm128|b64*,imm8 AVX512VL )]134.399999999999 code0
[2(VPSRAQ           ymmreg|mask|z,ymmrm256|b64*,imm8 AVX512VL )]124.799999999999 code0
[2(VPSRAQ           zmmreg|mask|z,zmmrm512|b64*,imm8 AVX512 )]115.199999999999 code0
[2(VPSRAVD          xmmreg|mask|z,xmmreg*,xmmrm128|b32 AVX512VL )]105.599999999999 code0
[2(VPSRAVD          ymmreg|mask|z,ymmreg*,ymmrm256|b32 AVX512VL )]95.9999999999992 code0
[2(VPSRAVD          zmmreg|mask|z,zmmreg*,zmmrm512|b32 AVX512 )]86.3999999999992 code0
[2(VPSRAVQ          xmmreg|mask|z,xmmreg*,xmmrm128|b64 AVX512VL )]76.7999999999992 code0
(223)pageodd
restore showpage
%%Page: 224 224
%%BeginPageSetup
save
%%EndPageSetup
/224 pa
[2(VPSRAVQ          ymmreg|mask|z,ymmreg*,ymmrm256|b64 AVX512VL )]710.4 code0
[2(VPSRAVQ          zmmreg|mask|z,zmmreg*,zmmrm512|b64 AVX512 )]700.8 code0
[2(VPSRAVW          xmmreg|mask|z,xmmreg*,xmmrm128 AVX512VL/BW )]691.2 code0
[2(VPSRAVW          ymmreg|mask|z,ymmreg*,ymmrm256 AVX512VL/BW )]681.6 code0
[2(VPSRAVW          zmmreg|mask|z,zmmreg*,zmmrm512 AVX512BW )]672 code0
[2(VPSRAW           xmmreg|mask|z,xmmreg*,xmmrm128 AVX512VL/BW )]662.4 code0
[2(VPSRAW           ymmreg|mask|z,ymmreg*,xmmrm128 AVX512VL/BW )]652.8 code0
[2(VPSRAW           zmmreg|mask|z,zmmreg*,xmmrm128 AVX512BW )]643.2 code0
[2(VPSRAW           xmmreg|mask|z,xmmrm128*,imm8 AVX512VL/BW )]633.6 code0
[2(VPSRAW           ymmreg|mask|z,ymmrm256*,imm8 AVX512VL/BW )]624 code0
[2(VPSRAW           zmmreg|mask|z,zmmrm512*,imm8 AVX512BW )]614.4 code0
[2(VPSRLD           xmmreg|mask|z,xmmreg*,xmmrm128 AVX512VL )]604.8 code0
[2(VPSRLD           ymmreg|mask|z,ymmreg*,xmmrm128 AVX512VL )]595.2 code0
[2(VPSRLD           zmmreg|mask|z,zmmreg*,xmmrm128 AVX512 )]585.6 code0
[2(VPSRLD           xmmreg|mask|z,xmmrm128|b32*,imm8 AVX512VL )]576 code0
[2(VPSRLD           ymmreg|mask|z,ymmrm256|b32*,imm8 AVX512VL )]566.4 code0
[2(VPSRLD           zmmreg|mask|z,zmmrm512|b32*,imm8 AVX512 )]556.8 code0
[2(VPSRLDQ          xmmreg,xmmrm128*,imm8    AVX512VL/BW )]547.2 code0
[2(VPSRLDQ          ymmreg,ymmrm256*,imm8    AVX512VL/BW )]537.6 code0
[2(VPSRLDQ          zmmreg,zmmrm512*,imm8    AVX512BW )]528 code0
[2(VPSRLQ           xmmreg|mask|z,xmmreg*,xmmrm128 AVX512VL )]518.4 code0
[2(VPSRLQ           ymmreg|mask|z,ymmreg*,xmmrm128 AVX512VL )]508.8 code0
[2(VPSRLQ           zmmreg|mask|z,zmmreg*,xmmrm128 AVX512 )]499.2 code0
[2(VPSRLQ           xmmreg|mask|z,xmmrm128|b64*,imm8 AVX512VL )]489.6 code0
[2(VPSRLQ           ymmreg|mask|z,ymmrm256|b64*,imm8 AVX512VL )]480 code0
[2(VPSRLQ           zmmreg|mask|z,zmmrm512|b64*,imm8 AVX512 )]470.4 code0
[2(VPSRLVD          xmmreg|mask|z,xmmreg*,xmmrm128|b32 AVX512VL )]460.8 code0
[2(VPSRLVD          ymmreg|mask|z,ymmreg*,ymmrm256|b32 AVX512VL )]451.2 code0
[2(VPSRLVD          zmmreg|mask|z,zmmreg*,zmmrm512|b32 AVX512 )]441.6 code0
[2(VPSRLVQ          xmmreg|mask|z,xmmreg*,xmmrm128|b64 AVX512VL )]432 code0
[2(VPSRLVQ          ymmreg|mask|z,ymmreg*,ymmrm256|b64 AVX512VL )]422.4 code0
[2(VPSRLVQ          zmmreg|mask|z,zmmreg*,zmmrm512|b64 AVX512 )]412.8 code0
[2(VPSRLVW          xmmreg|mask|z,xmmreg*,xmmrm128 AVX512VL/BW )]403.2 code0
[2(VPSRLVW          ymmreg|mask|z,ymmreg*,ymmrm256 AVX512VL/BW )]393.6 code0
[2(VPSRLVW          zmmreg|mask|z,zmmreg*,zmmrm512 AVX512BW )]384 code0
[2(VPSRLW           xmmreg|mask|z,xmmreg*,xmmrm128 AVX512VL/BW )]374.4 code0
[2(VPSRLW           ymmreg|mask|z,ymmreg*,xmmrm128 AVX512VL/BW )]364.8 code0
[2(VPSRLW           zmmreg|mask|z,zmmreg*,xmmrm128 AVX512BW )]355.2 code0
[2(VPSRLW           xmmreg|mask|z,xmmrm128*,imm8 AVX512VL/BW )]345.6 code0
[2(VPSRLW           ymmreg|mask|z,ymmrm256*,imm8 AVX512VL/BW )]336 code0
[2(VPSRLW           zmmreg|mask|z,zmmrm512*,imm8 AVX512BW )]326.4 code0
[2(VPSUBB           xmmreg|mask|z,xmmreg*,xmmrm128 AVX512VL/BW )]316.8 code0
[2(VPSUBB           ymmreg|mask|z,ymmreg*,ymmrm256 AVX512VL/BW )]307.2 code0
[2(VPSUBB           zmmreg|mask|z,zmmreg*,zmmrm512 AVX512BW )]297.6 code0
[2(VPSUBD           xmmreg|mask|z,xmmreg*,xmmrm128|b32 AVX512VL )]288 code0
[2(VPSUBD           ymmreg|mask|z,ymmreg*,ymmrm256|b32 AVX512VL )]278.4 code0
[2(VPSUBD           zmmreg|mask|z,zmmreg*,zmmrm512|b32 AVX512 )]268.8 code0
[2(VPSUBQ           xmmreg|mask|z,xmmreg*,xmmrm128|b64 AVX512VL )]259.2 code0
[2(VPSUBQ           ymmreg|mask|z,ymmreg*,ymmrm256|b64 AVX512VL )]249.6 code0
[2(VPSUBQ           zmmreg|mask|z,zmmreg*,zmmrm512|b64 AVX512 )]240 code0
[2(VPSUBSB          xmmreg|mask|z,xmmreg*,xmmrm128 AVX512VL/BW )]230.4 code0
[2(VPSUBSB          ymmreg|mask|z,ymmreg*,ymmrm256 AVX512VL/BW )]220.799999999999 code0
[2(VPSUBSB          zmmreg|mask|z,zmmreg*,zmmrm512 AVX512BW )]211.199999999999 code0
[2(VPSUBSW          xmmreg|mask|z,xmmreg*,xmmrm128 AVX512VL/BW )]201.599999999999 code0
[2(VPSUBSW          ymmreg|mask|z,ymmreg*,ymmrm256 AVX512VL/BW )]191.999999999999 code0
[2(VPSUBSW          zmmreg|mask|z,zmmreg*,zmmrm512 AVX512BW )]182.399999999999 code0
[2(VPSUBUSB         xmmreg|mask|z,xmmreg*,xmmrm128 AVX512VL/BW )]172.799999999999 code0
[2(VPSUBUSB         ymmreg|mask|z,ymmreg*,ymmrm256 AVX512VL/BW )]163.199999999999 code0
[2(VPSUBUSB         zmmreg|mask|z,zmmreg*,zmmrm512 AVX512BW )]153.599999999999 code0
[2(VPSUBUSW         xmmreg|mask|z,xmmreg*,xmmrm128 AVX512VL/BW )]143.999999999999 code0
[2(VPSUBUSW         ymmreg|mask|z,ymmreg*,ymmrm256 AVX512VL/BW )]134.399999999999 code0
[2(VPSUBUSW         zmmreg|mask|z,zmmreg*,zmmrm512 AVX512BW )]124.799999999999 code0
[2(VPSUBW           xmmreg|mask|z,xmmreg*,xmmrm128 AVX512VL/BW )]115.199999999999 code0
[2(VPSUBW           ymmreg|mask|z,ymmreg*,ymmrm256 AVX512VL/BW )]105.599999999999 code0
[2(VPSUBW           zmmreg|mask|z,zmmreg*,zmmrm512 AVX512BW )]95.9999999999992 code0
[2(VPTERNLOGD       xmmreg|mask|z,xmmreg,xmmrm128|b32,imm8 AVX512VL )]86.3999999999992 code0
[2(VPTERNLOGD       ymmreg|mask|z,ymmreg,ymmrm256|b32,imm8 AVX512VL )]76.7999999999992 code0
(224)pageeven
restore showpage
%%Page: 225 225
%%BeginPageSetup
save
%%EndPageSetup
/225 pa
[2(VPTERNLOGD       zmmreg|mask|z,zmmreg,zmmrm512|b32,imm8 AVX512 )]710.4 code0
[2(VPTERNLOGQ       xmmreg|mask|z,xmmreg,xmmrm128|b64,imm8 AVX512VL )]700.8 code0
[2(VPTERNLOGQ       ymmreg|mask|z,ymmreg,ymmrm256|b64,imm8 AVX512VL )]691.2 code0
[2(VPTERNLOGQ       zmmreg|mask|z,zmmreg,zmmrm512|b64,imm8 AVX512 )]681.6 code0
[2(VPTESTMB         kreg|mask,xmmreg,xmmrm128 AVX512VL/BW )]672 code0
[2(VPTESTMB         kreg|mask,ymmreg,ymmrm256 AVX512VL/BW )]662.4 code0
[2(VPTESTMB         kreg|mask,zmmreg,zmmrm512 AVX512BW )]652.8 code0
[2(VPTESTMD         kreg|mask,xmmreg,xmmrm128|b32 AVX512VL )]643.2 code0
[2(VPTESTMD         kreg|mask,ymmreg,ymmrm256|b32 AVX512VL )]633.6 code0
[2(VPTESTMD         kreg|mask,zmmreg,zmmrm512|b32 AVX512 )]624 code0
[2(VPTESTMQ         kreg|mask,xmmreg,xmmrm128|b64 AVX512VL )]614.4 code0
[2(VPTESTMQ         kreg|mask,ymmreg,ymmrm256|b64 AVX512VL )]604.8 code0
[2(VPTESTMQ         kreg|mask,zmmreg,zmmrm512|b64 AVX512 )]595.2 code0
[2(VPTESTMW         kreg|mask,xmmreg,xmmrm128 AVX512VL/BW )]585.6 code0
[2(VPTESTMW         kreg|mask,ymmreg,ymmrm256 AVX512VL/BW )]576 code0
[2(VPTESTMW         kreg|mask,zmmreg,zmmrm512 AVX512BW )]566.4 code0
[2(VPTESTNMB        kreg|mask,xmmreg,xmmrm128 AVX512VL/BW )]556.8 code0
[2(VPTESTNMB        kreg|mask,ymmreg,ymmrm256 AVX512VL/BW )]547.2 code0
[2(VPTESTNMB        kreg|mask,zmmreg,zmmrm512 AVX512BW )]537.6 code0
[2(VPTESTNMD        kreg|mask,xmmreg,xmmrm128|b32 AVX512VL )]528 code0
[2(VPTESTNMD        kreg|mask,ymmreg,ymmrm256|b32 AVX512VL )]518.4 code0
[2(VPTESTNMD        kreg|mask,zmmreg,zmmrm512|b32 AVX512 )]508.8 code0
[2(VPTESTNMQ        kreg|mask,xmmreg,xmmrm128|b64 AVX512VL )]499.2 code0
[2(VPTESTNMQ        kreg|mask,ymmreg,ymmrm256|b64 AVX512VL )]489.6 code0
[2(VPTESTNMQ        kreg|mask,zmmreg,zmmrm512|b64 AVX512 )]480 code0
[2(VPTESTNMW        kreg|mask,xmmreg,xmmrm128 AVX512VL/BW )]470.4 code0
[2(VPTESTNMW        kreg|mask,ymmreg,ymmrm256 AVX512VL/BW )]460.8 code0
[2(VPTESTNMW        kreg|mask,zmmreg,zmmrm512 AVX512BW )]451.2 code0
[2(VPUNPCKHBW       xmmreg|mask|z,xmmreg*,xmmrm128 AVX512VL/BW )]441.6 code0
[2(VPUNPCKHBW       ymmreg|mask|z,ymmreg*,ymmrm256 AVX512VL/BW )]432 code0
[2(VPUNPCKHBW       zmmreg|mask|z,zmmreg*,zmmrm512 AVX512BW )]422.4 code0
[2(VPUNPCKHDQ       xmmreg|mask|z,xmmreg*,xmmrm128|b32 AVX512VL )]412.8 code0
[2(VPUNPCKHDQ       ymmreg|mask|z,ymmreg*,ymmrm256|b32 AVX512VL )]403.2 code0
[2(VPUNPCKHDQ       zmmreg|mask|z,zmmreg*,zmmrm512|b32 AVX512 )]393.6 code0
[2(VPUNPCKHQDQ      xmmreg|mask|z,xmmreg*,xmmrm128|b64 AVX512VL )]384 code0
[2(VPUNPCKHQDQ      ymmreg|mask|z,ymmreg*,ymmrm256|b64 AVX512VL )]374.4 code0
[2(VPUNPCKHQDQ      zmmreg|mask|z,zmmreg*,zmmrm512|b64 AVX512 )]364.8 code0
[2(VPUNPCKHWD       xmmreg|mask|z,xmmreg*,xmmrm128 AVX512VL/BW )]355.2 code0
[2(VPUNPCKHWD       ymmreg|mask|z,ymmreg*,ymmrm256 AVX512VL/BW )]345.6 code0
[2(VPUNPCKHWD       zmmreg|mask|z,zmmreg*,zmmrm512 AVX512BW )]336 code0
[2(VPUNPCKLBW       xmmreg|mask|z,xmmreg*,xmmrm128 AVX512VL/BW )]326.4 code0
[2(VPUNPCKLBW       ymmreg|mask|z,ymmreg*,ymmrm256 AVX512VL/BW )]316.8 code0
[2(VPUNPCKLBW       zmmreg|mask|z,zmmreg*,zmmrm512 AVX512BW )]307.2 code0
[2(VPUNPCKLDQ       xmmreg|mask|z,xmmreg*,xmmrm128|b32 AVX512VL )]297.6 code0
[2(VPUNPCKLDQ       ymmreg|mask|z,ymmreg*,ymmrm256|b32 AVX512VL )]288 code0
[2(VPUNPCKLDQ       zmmreg|mask|z,zmmreg*,zmmrm512|b32 AVX512 )]278.4 code0
[2(VPUNPCKLQDQ      xmmreg|mask|z,xmmreg*,xmmrm128|b64 AVX512VL )]268.8 code0
[2(VPUNPCKLQDQ      ymmreg|mask|z,ymmreg*,ymmrm256|b64 AVX512VL )]259.2 code0
[2(VPUNPCKLQDQ      zmmreg|mask|z,zmmreg*,zmmrm512|b64 AVX512 )]249.6 code0
[2(VPUNPCKLWD       xmmreg|mask|z,xmmreg*,xmmrm128 AVX512VL/BW )]240 code0
[2(VPUNPCKLWD       ymmreg|mask|z,ymmreg*,ymmrm256 AVX512VL/BW )]230.4 code0
[2(VPUNPCKLWD       zmmreg|mask|z,zmmreg*,zmmrm512 AVX512BW )]220.799999999999 code0
[2(VPXORD           xmmreg|mask|z,xmmreg*,xmmrm128|b32 AVX512VL )]211.199999999999 code0
[2(VPXORD           ymmreg|mask|z,ymmreg*,ymmrm256|b32 AVX512VL )]201.599999999999 code0
[2(VPXORD           zmmreg|mask|z,zmmreg*,zmmrm512|b32 AVX512 )]191.999999999999 code0
[2(VPXORQ           xmmreg|mask|z,xmmreg*,xmmrm128|b64 AVX512VL )]182.399999999999 code0
[2(VPXORQ           ymmreg|mask|z,ymmreg*,ymmrm256|b64 AVX512VL )]172.799999999999 code0
[2(VPXORQ           zmmreg|mask|z,zmmreg*,zmmrm512|b64 AVX512 )]163.199999999999 code0
[2(VRANGEPD         xmmreg|mask|z,xmmreg*,xmmrm128|b64,imm8 AVX512VL/DQ )]153.599999999999 code0
[2(VRANGEPD         ymmreg|mask|z,ymmreg*,ymmrm256|b64,imm8 AVX512VL/DQ )]143.999999999999 code0
[2(VRANGEPD         zmmreg|mask|z,zmmreg*,zmmrm512|b64|sae,imm8 AVX512DQ )]134.399999999999 code0
[2(VRANGEPS         xmmreg|mask|z,xmmreg*,xmmrm128|b32,imm8 AVX512VL/DQ )]124.799999999999 code0
[2(VRANGEPS         ymmreg|mask|z,ymmreg*,ymmrm256|b32,imm8 AVX512VL/DQ )]115.199999999999 code0
[2(VRANGEPS         zmmreg|mask|z,zmmreg*,zmmrm512|b32|sae,imm8 AVX512DQ )]105.599999999999 code0
[2(VRANGESD         xmmreg|mask|z,xmmreg*,xmmrm64|sae,imm8 AVX512DQ )]95.9999999999992 code0
[2(VRANGESS         xmmreg|mask|z,xmmreg*,xmmrm32|sae,imm8 AVX512DQ )]86.3999999999992 code0
[2(VRCP14PD         xmmreg|mask|z,xmmrm128|b64 AVX512VL )]76.7999999999992 code0
(225)pageodd
restore showpage
%%Page: 226 226
%%BeginPageSetup
save
%%EndPageSetup
/226 pa
[2(VRCP14PD         ymmreg|mask|z,ymmrm256|b64 AVX512VL )]710.4 code0
[2(VRCP14PD         zmmreg|mask|z,zmmrm512|b64 AVX512 )]700.8 code0
[2(VRCP14PS         xmmreg|mask|z,xmmrm128|b32 AVX512VL )]691.2 code0
[2(VRCP14PS         ymmreg|mask|z,ymmrm256|b32 AVX512VL )]681.6 code0
[2(VRCP14PS         zmmreg|mask|z,zmmrm512|b32 AVX512 )]672 code0
[2(VRCP14SD         xmmreg|mask|z,xmmreg*,xmmrm64 AVX512 )]662.4 code0
[2(VRCP14SS         xmmreg|mask|z,xmmreg*,xmmrm32 AVX512 )]652.8 code0
[2(VRCP28PD         zmmreg|mask|z,zmmrm512|b64|sae AVX512ER )]643.2 code0
[2(VRCP28PS         zmmreg|mask|z,zmmrm512|b32|sae AVX512ER )]633.6 code0
[2(VRCP28SD         xmmreg|mask|z,xmmreg*,xmmrm64|sae AVX512ER )]624 code0
[2(VRCP28SS         xmmreg|mask|z,xmmreg*,xmmrm32|sae AVX512ER )]614.4 code0
[2(VREDUCEPD        xmmreg|mask|z,xmmrm128|b64,imm8 AVX512VL/DQ )]604.8 code0
[2(VREDUCEPD        ymmreg|mask|z,ymmrm256|b64,imm8 AVX512VL/DQ )]595.2 code0
[2(VREDUCEPD        zmmreg|mask|z,zmmrm512|b64|sae,imm8 AVX512DQ )]585.6 code0
[2(VREDUCEPS        xmmreg|mask|z,xmmrm128|b32,imm8 AVX512VL/DQ )]576 code0
[2(VREDUCEPS        ymmreg|mask|z,ymmrm256|b32,imm8 AVX512VL/DQ )]566.4 code0
[2(VREDUCEPS        zmmreg|mask|z,zmmrm512|b32|sae,imm8 AVX512DQ )]556.8 code0
[2(VREDUCESD        xmmreg|mask|z,xmmreg*,xmmrm64|sae,imm8 AVX512DQ )]547.2 code0
[2(VREDUCESS        xmmreg|mask|z,xmmreg*,xmmrm32|sae,imm8 AVX512DQ )]537.6 code0
[2(VRNDSCALEPD      xmmreg|mask|z,xmmrm128|b64,imm8 AVX512VL )]528 code0
[2(VRNDSCALEPD      ymmreg|mask|z,ymmrm256|b64,imm8 AVX512VL )]518.4 code0
[2(VRNDSCALEPD      zmmreg|mask|z,zmmrm512|b64|sae,imm8 AVX512 )]508.8 code0
[2(VRNDSCALEPS      xmmreg|mask|z,xmmrm128|b32,imm8 AVX512VL )]499.2 code0
[2(VRNDSCALEPS      ymmreg|mask|z,ymmrm256|b32,imm8 AVX512VL )]489.6 code0
[2(VRNDSCALEPS      zmmreg|mask|z,zmmrm512|b32|sae,imm8 AVX512 )]480 code0
[2(VRNDSCALESD      xmmreg|mask|z,xmmreg*,xmmrm64|sae,imm8 AVX512 )]470.4 code0
[2(VRNDSCALESS      xmmreg|mask|z,xmmreg*,xmmrm32|sae,imm8 AVX512 )]460.8 code0
[2(VRSQRT14PD       xmmreg|mask|z,xmmrm128|b64 AVX512VL )]451.2 code0
[2(VRSQRT14PD       ymmreg|mask|z,ymmrm256|b64 AVX512VL )]441.6 code0
[2(VRSQRT14PD       zmmreg|mask|z,zmmrm512|b64 AVX512 )]432 code0
[2(VRSQRT14PS       xmmreg|mask|z,xmmrm128|b32 AVX512VL )]422.4 code0
[2(VRSQRT14PS       ymmreg|mask|z,ymmrm256|b32 AVX512VL )]412.8 code0
[2(VRSQRT14PS       zmmreg|mask|z,zmmrm512|b32 AVX512 )]403.2 code0
[2(VRSQRT14SD       xmmreg|mask|z,xmmreg*,xmmrm64 AVX512 )]393.6 code0
[2(VRSQRT14SS       xmmreg|mask|z,xmmreg*,xmmrm32 AVX512 )]384 code0
[2(VRSQRT28PD       zmmreg|mask|z,zmmrm512|b64|sae AVX512ER )]374.4 code0
[2(VRSQRT28PS       zmmreg|mask|z,zmmrm512|b32|sae AVX512ER )]364.8 code0
[2(VRSQRT28SD       xmmreg|mask|z,xmmreg*,xmmrm64|sae AVX512ER )]355.2 code0
[2(VRSQRT28SS       xmmreg|mask|z,xmmreg*,xmmrm32|sae AVX512ER )]345.6 code0
[2(VSCALEFPD        xmmreg|mask|z,xmmreg*,xmmrm128|b64 AVX512VL )]336 code0
[2(VSCALEFPD        ymmreg|mask|z,ymmreg*,ymmrm256|b64 AVX512VL )]326.4 code0
[2(VSCALEFPD        zmmreg|mask|z,zmmreg*,zmmrm512|b64|er AVX512 )]316.8 code0
[2(VSCALEFPS        xmmreg|mask|z,xmmreg*,xmmrm128|b32 AVX512VL )]307.2 code0
[2(VSCALEFPS        ymmreg|mask|z,ymmreg*,ymmrm256|b32 AVX512VL )]297.6 code0
[2(VSCALEFPS        zmmreg|mask|z,zmmreg*,zmmrm512|b32|er AVX512 )]288 code0
[2(VSCALEFSD        xmmreg|mask|z,xmmreg*,xmmrm64|er AVX512 )]278.4 code0
[2(VSCALEFSS        xmmreg|mask|z,xmmreg*,xmmrm32|er AVX512 )]268.8 code0
[2(VSCATTERDPD      xmem64|mask,xmmreg       AVX512VL )]259.2 code0
[2(VSCATTERDPD      xmem64|mask,ymmreg       AVX512VL )]249.6 code0
[2(VSCATTERDPD      ymem64|mask,zmmreg       AVX512 )]240 code0
[2(VSCATTERDPS      xmem32|mask,xmmreg       AVX512VL )]230.4 code0
[2(VSCATTERDPS      ymem32|mask,ymmreg       AVX512VL )]220.799999999999 code0
[2(VSCATTERDPS      zmem32|mask,zmmreg       AVX512 )]211.199999999999 code0
[2(VSCATTERPF0DPD   ymem64|mask              AVX512PF )]201.599999999999 code0
[2(VSCATTERPF0DPS   zmem32|mask              AVX512PF )]191.999999999999 code0
[2(VSCATTERPF0QPD   zmem64|mask              AVX512PF )]182.399999999999 code0
[2(VSCATTERPF0QPS   zmem32|mask              AVX512PF )]172.799999999999 code0
[2(VSCATTERPF1DPD   ymem64|mask              AVX512PF )]163.199999999999 code0
[2(VSCATTERPF1DPS   zmem32|mask              AVX512PF )]153.599999999999 code0
[2(VSCATTERPF1QPD   zmem64|mask              AVX512PF )]143.999999999999 code0
[2(VSCATTERPF1QPS   zmem32|mask              AVX512PF )]134.399999999999 code0
[2(VSCATTERQPD      xmem64|mask,xmmreg       AVX512VL )]124.799999999999 code0
[2(VSCATTERQPD      ymem64|mask,ymmreg       AVX512VL )]115.199999999999 code0
[2(VSCATTERQPD      zmem64|mask,zmmreg       AVX512 )]105.599999999999 code0
[2(VSCATTERQPS      xmem32|mask,xmmreg       AVX512VL )]95.9999999999992 code0
[2(VSCATTERQPS      ymem32|mask,xmmreg       AVX512VL )]86.3999999999992 code0
[2(VSCATTERQPS      zmem32|mask,ymmreg       AVX512 )]76.7999999999992 code0
(226)pageeven
restore showpage
%%Page: 227 227
%%BeginPageSetup
save
%%EndPageSetup
/227 pa
[2(VSHUFF32X4       ymmreg|mask|z,ymmreg*,ymmrm256|b32,imm8 AVX512VL )]710.4 code0
[2(VSHUFF32X4       zmmreg|mask|z,zmmreg*,zmmrm512|b32,imm8 AVX512 )]700.8 code0
[2(VSHUFF64X2       ymmreg|mask|z,ymmreg*,ymmrm256|b64,imm8 AVX512VL )]691.2 code0
[2(VSHUFF64X2       zmmreg|mask|z,zmmreg*,zmmrm512|b64,imm8 AVX512 )]681.6 code0
[2(VSHUFI32X4       ymmreg|mask|z,ymmreg*,ymmrm256|b32,imm8 AVX512VL )]672 code0
[2(VSHUFI32X4       zmmreg|mask|z,zmmreg*,zmmrm512|b32,imm8 AVX512 )]662.4 code0
[2(VSHUFI64X2       ymmreg|mask|z,ymmreg*,ymmrm256|b64,imm8 AVX512VL )]652.8 code0
[2(VSHUFI64X2       zmmreg|mask|z,zmmreg*,zmmrm512|b64,imm8 AVX512 )]643.2 code0
[2(VSHUFPD          xmmreg|mask|z,xmmreg*,xmmrm128|b64,imm8 AVX512VL )]633.6 code0
[2(VSHUFPD          ymmreg|mask|z,ymmreg*,ymmrm256|b64,imm8 AVX512VL )]624 code0
[2(VSHUFPD          zmmreg|mask|z,zmmreg*,zmmrm512|b64,imm8 AVX512 )]614.4 code0
[2(VSHUFPS          xmmreg|mask|z,xmmreg*,xmmrm128|b32,imm8 AVX512VL )]604.8 code0
[2(VSHUFPS          ymmreg|mask|z,ymmreg*,ymmrm256|b32,imm8 AVX512VL )]595.2 code0
[2(VSHUFPS          zmmreg|mask|z,zmmreg*,zmmrm512|b32,imm8 AVX512 )]585.6 code0
[2(VSQRTPD          xmmreg|mask|z,xmmrm128|b64 AVX512VL )]576 code0
[2(VSQRTPD          ymmreg|mask|z,ymmrm256|b64 AVX512VL )]566.4 code0
[2(VSQRTPD          zmmreg|mask|z,zmmrm512|b64|er AVX512 )]556.8 code0
[2(VSQRTPS          xmmreg|mask|z,xmmrm128|b32 AVX512VL )]547.2 code0
[2(VSQRTPS          ymmreg|mask|z,ymmrm256|b32 AVX512VL )]537.6 code0
[2(VSQRTPS          zmmreg|mask|z,zmmrm512|b32|er AVX512 )]528 code0
[2(VSQRTSD          xmmreg|mask|z,xmmreg*,xmmrm64|er AVX512 )]518.4 code0
[2(VSQRTSS          xmmreg|mask|z,xmmreg*,xmmrm32|er AVX512 )]508.8 code0
[2(VSUBPD           xmmreg|mask|z,xmmreg*,xmmrm128|b64 AVX512VL )]499.2 code0
[2(VSUBPD           ymmreg|mask|z,ymmreg*,ymmrm256|b64 AVX512VL )]489.6 code0
[2(VSUBPD           zmmreg|mask|z,zmmreg*,zmmrm512|b64|er AVX512 )]480 code0
[2(VSUBPS           xmmreg|mask|z,xmmreg*,xmmrm128|b32 AVX512VL )]470.4 code0
[2(VSUBPS           ymmreg|mask|z,ymmreg*,ymmrm256|b32 AVX512VL )]460.8 code0
[2(VSUBPS           zmmreg|mask|z,zmmreg*,zmmrm512|b32|er AVX512 )]451.2 code0
[2(VSUBSD           xmmreg|mask|z,xmmreg*,xmmrm64|er AVX512 )]441.6 code0
[2(VSUBSS           xmmreg|mask|z,xmmreg*,xmmrm32|er AVX512 )]432 code0
[2(VUCOMISD         xmmreg,xmmrm64|sae       AVX512 )]422.4 code0
[2(VUCOMISS         xmmreg,xmmrm32|sae       AVX512 )]412.8 code0
[2(VUNPCKHPD        xmmreg|mask|z,xmmreg*,xmmrm128|b64 AVX512VL )]403.2 code0
[2(VUNPCKHPD        ymmreg|mask|z,ymmreg*,ymmrm256|b64 AVX512VL )]393.6 code0
[2(VUNPCKHPD        zmmreg|mask|z,zmmreg*,zmmrm512|b64 AVX512 )]384 code0
[2(VUNPCKHPS        xmmreg|mask|z,xmmreg*,xmmrm128|b32 AVX512VL )]374.4 code0
[2(VUNPCKHPS        ymmreg|mask|z,ymmreg*,ymmrm256|b32 AVX512VL )]364.8 code0
[2(VUNPCKHPS        zmmreg|mask|z,zmmreg*,zmmrm512|b32 AVX512 )]355.2 code0
[2(VUNPCKLPD        xmmreg|mask|z,xmmreg*,xmmrm128|b64 AVX512VL )]345.6 code0
[2(VUNPCKLPD        ymmreg|mask|z,ymmreg*,ymmrm256|b64 AVX512VL )]336 code0
[2(VUNPCKLPD        zmmreg|mask|z,zmmreg*,zmmrm512|b64 AVX512 )]326.4 code0
[2(VUNPCKLPS        xmmreg|mask|z,xmmreg*,xmmrm128|b32 AVX512VL )]316.8 code0
[2(VUNPCKLPS        ymmreg|mask|z,ymmreg*,ymmrm256|b32 AVX512VL )]307.2 code0
[2(VUNPCKLPS        zmmreg|mask|z,zmmreg*,zmmrm512|b32 AVX512 )]297.6 code0
[2(VXORPD           xmmreg|mask|z,xmmreg*,xmmrm128|b64 AVX512VL/DQ )]288 code0
[2(VXORPD           ymmreg|mask|z,ymmreg*,ymmrm256|b64 AVX512VL/DQ )]278.4 code0
[2(VXORPD           zmmreg|mask|z,zmmreg*,zmmrm512|b64 AVX512DQ )]268.8 code0
[2(VXORPS           xmmreg|mask|z,xmmreg*,xmmrm128|b32 AVX512VL/DQ )]259.2 code0
[2(VXORPS           ymmreg|mask|z,ymmreg*,ymmrm256|b32 AVX512VL/DQ )]249.6 code0
[2(VXORPS           zmmreg|mask|z,zmmreg*,zmmrm512|b32 AVX512DQ)]240 code2
[{/section-B.1.42 xa}(Intel memory protection keys for userspace \(PKU aka PKEYs\))](B.1.42)219.6 subh3
[2(RDPKRU                                    LONG )]204 code1
[2(WRPKRU                                    LONG)]194.4 code2
[{/section-B.1.43 xa}(Read Processor ID)](B.1.43)174 subh3
[2(RDPID            reg32                    NOLONG )]158.4 code1
[2(RDPID            reg64                    LONG )]148.799999999999 code0
[2(RDPID            reg32                    LONG,UNDOC)]139.199999999999 code2
[{/section-B.1.44 xa}(New memory instructions)](B.1.44)118.799999999999 subh3
[2(CLFLUSHOPT       mem                       )]103.199999999999 code1
[2(CLWB             mem                       )]93.5999999999995 code0
[2(PCOMMIT                                   NEVER,NOP )]83.9999999999994 code0
[2(CLZERO                                    AMD )]74.3999999999994 code0
(227)pageodd
restore showpage
%%Page: 228 228
%%BeginPageSetup
save
%%EndPageSetup
/228 pa
[2(CLZERO           reg_ax                   AMD,ND,NOLONG )]710.4 code0
[2(CLZERO           reg_eax                  AMD,ND )]700.8 code0
[2(CLZERO           reg_rax                  AMD,ND,LONG)]691.2 code2
[{/section-B.1.45 xa}(Processor trace write)](B.1.45)670.8 subh3
[2(PTWRITE          rm32                      )]655.2 code1
[2(PTWRITE          rm64                     LONG)]645.6 code2
[{/section-B.1.46 xa}(Instructions from the Intel Instruction Set Extensions,)](B.1.46)625.2 subh3
[{/section-B.1.47 xa}(doc 319433-034 May 2018)](B.1.47)604.8 subh3
[2(CLDEMOTE         mem                       )]589.2 code1
[2(MOVDIRI          mem32,reg32              SD )]579.6 code0
[2(MOVDIRI          mem64,reg64              LONG )]570 code0
[2(MOVDIR64B        reg16,mem512             NOLONG )]560.4 code0
[2(MOVDIR64B        reg32,mem512              )]550.8 code0
[2(MOVDIR64B        reg64,mem512             LONG )]541.2 code0
[2(PCONFIG                                    )]531.6 code0
[2(TPAUSE           reg32                     )]522 code0
[2(TPAUSE           reg32,reg_edx,reg_eax    ND )]512.4 code0
[2(UMONITOR         reg16                    NOLONG )]502.8 code0
[2(UMONITOR         reg32                     )]493.2 code0
[2(UMONITOR         reg64                    LONG )]483.6 code0
[2(UMWAIT           reg32                     )]474 code0
[2(UMWAIT           reg32,reg_edx,reg_eax    ND )]464.4 code0
[2(WBNOINVD                                  )]454.8 code2
[{/section-B.1.48 xa}(Galois field operations \(GFNI\))](B.1.48)434.4 subh3
[2(GF2P8AFFINEINVQB xmmreg,xmmrm128,imm8     GFNI,SSE )]418.8 code1
[2(VGF2P8AFFINEINVQB xmmreg,xmmreg*,xmmrm128,imm8 GFNI,AVX )]409.2 code0
[2(VGF2P8AFFINEINVQB ymmreg,ymmreg*,ymmrm256,imm8 GFNI,AVX )]399.6 code0
[2(VGF2P8AFFINEINVQB xmmreg|mask|z,xmmreg*,xmmrm128|b64,imm8 AVX512VL,GFNI )]390 code0
[2(VGF2P8AFFINEINVQB ymmreg|mask|z,ymmreg*,ymmrm256|b64,imm8 AVX512VL,GFNI )]380.4 code0
[2(VGF2P8AFFINEINVQB zmmreg|mask|z,zmmreg*,zmmrm512|b64,imm8 AVX512,GFNI )]370.8 code0
[2(GF2P8AFFINEQB    xmmreg,xmmrm128,imm8     GFNI,SSE )]361.2 code0
[2(VGF2P8AFFINEQB   xmmreg,xmmreg*,xmmrm128,imm8 GFNI,AVX )]351.6 code0
[2(VGF2P8AFFINEQB   ymmreg,ymmreg*,ymmrm256,imm8 GFNI,AVX )]342 code0
[2(VGF2P8AFFINEQB   xmmreg|mask|z,xmmreg*,xmmrm128|b64,imm8 AVX512VL,GFNI )]332.4 code0
[2(VGF2P8AFFINEQB   ymmreg|mask|z,ymmreg*,ymmrm256|b64,imm8 AVX512VL,GFNI )]322.8 code0
[2(VGF2P8AFFINEQB   zmmreg|mask|z,zmmreg*,zmmrm512|b64,imm8 AVX512,GFNI )]313.2 code0
[2(GF2P8MULB        xmmreg,xmmrm128          GFNI,SSE )]303.6 code0
[2(VGF2P8MULB       xmmreg,xmmreg*,xmmrm128  GFNI,AVX )]294 code0
[2(VGF2P8MULB       ymmreg,ymmreg*,ymmrm256  GFNI,AVX )]284.4 code0
[2(VGF2P8MULB       xmmreg|mask|z,xmmreg*,xmmrm128 AVX512VL,GFNI )]274.8 code0
[2(VGF2P8MULB       ymmreg|mask|z,ymmreg*,ymmrm256 AVX512VL,GFNI )]265.2 code0
[2(VGF2P8MULB       zmmreg|mask|z,zmmreg*,zmmrm512 AVX512,GFNI)]255.6 code2
[{/section-B.1.49 xa}(AVX512 Vector Bit Manipulation Instructions 2)](B.1.49)235.2 subh3
[2(VPCOMPRESSB      mem128|mask,xmmreg       AVX512VBMI2/VL )]219.6 code1
[2(VPCOMPRESSB      mem256|mask,ymmreg       AVX512VBMI2/VL )]210 code0
[2(VPCOMPRESSB      mem512|mask,zmmreg       AVX512VBMI2 )]200.4 code0
[2(VPCOMPRESSB      xmmreg|mask|z,xmmreg     AVX512VBMI2/VL )]190.8 code0
[2(VPCOMPRESSB      ymmreg|mask|z,ymmreg     AVX512VBMI2/VL )]181.2 code0
[2(VPCOMPRESSB      zmmreg|mask|z,zmmreg     AVX512VBMI2 )]171.6 code0
[2(VPCOMPRESSW      mem128|mask,xmmreg       AVX512VBMI2/VL )]162 code0
[2(VPCOMPRESSW      mem256|mask,ymmreg       AVX512VBMI2/VL )]152.4 code0
[2(VPCOMPRESSW      mem512|mask,zmmreg       AVX512VBMI2 )]142.799999999999 code0
[2(VPCOMPRESSW      xmmreg|mask|z,xmmreg     AVX512VBMI2/VL )]133.199999999999 code0
[2(VPCOMPRESSW      ymmreg|mask|z,ymmreg     AVX512VBMI2/VL )]123.599999999999 code0
[2(VPCOMPRESSW      zmmreg|mask|z,zmmreg     AVX512VBMI2 )]113.999999999999 code0
[2(VPEXPANDB        mem128|mask,xmmreg       AVX512VBMI2/VL )]104.399999999999 code0
[2(VPEXPANDB        mem256|mask,ymmreg       AVX512VBMI2/VL )]94.7999999999994 code0
[2(VPEXPANDB        mem512|mask,zmmreg       AVX512VBMI2 )]85.1999999999994 code0
[2(VPEXPANDB        xmmreg|mask|z,xmmreg     AVX512VBMI2/VL )]75.5999999999993 code0
(228)pageeven
restore showpage
%%Page: 229 229
%%BeginPageSetup
save
%%EndPageSetup
/229 pa
[2(VPEXPANDB        ymmreg|mask|z,ymmreg     AVX512VBMI2/VL )]710.4 code0
[2(VPEXPANDB        zmmreg|mask|z,zmmreg     AVX512VBMI2 )]700.8 code0
[2(VPEXPANDW        mem128|mask,xmmreg       AVX512VBMI2/VL )]691.2 code0
[2(VPEXPANDW        mem256|mask,ymmreg       AVX512VBMI2/VL )]681.6 code0
[2(VPEXPANDW        mem512|mask,zmmreg       AVX512VBMI2 )]672 code0
[2(VPEXPANDW        xmmreg|mask|z,xmmreg     AVX512VBMI2/VL )]662.4 code0
[2(VPEXPANDW        ymmreg|mask|z,ymmreg     AVX512VBMI2/VL )]652.8 code0
[2(VPEXPANDW        zmmreg|mask|z,zmmreg     AVX512VBMI2 )]643.2 code0
[2(VPSHLDW          xmmreg|mask|z,xmmreg*,xmmrm128,imm8 AVX512VBMI2/VL )]633.6 code0
[2(VPSHLDW          ymmreg|mask|z,ymmreg*,ymmrm256,imm8 AVX512VBMI2/VL )]624 code0
[2(VPSHLDW          zmmreg|mask|z,zmmreg*,zmmrm512,imm8 AVX512VBMI2 )]614.4 code0
[2(VPSHLDD          xmmreg|mask|z,xmmreg*,xmmrm128|b32,imm8 AVX512VBMI2/VL )]604.8 code0
[2(VPSHLDD          ymmreg|mask|z,ymmreg*,ymmrm256|b32,imm8 AVX512VBMI2/VL )]595.2 code0
[2(VPSHLDD          zmmreg|mask|z,zmmreg*,zmmrm512|b32,imm8 AVX512VBMI2 )]585.6 code0
[2(VPSHLDQ          xmmreg|mask|z,xmmreg*,xmmrm128|b64,imm8 AVX512VBMI2/VL )]576 code0
[2(VPSHLDQ          ymmreg|mask|z,ymmreg*,ymmrm256|b64,imm8 AVX512VBMI2/VL )]566.4 code0
[2(VPSHLDQ          zmmreg|mask|z,zmmreg*,zmmrm512|b64,imm8 AVX512VBMI2 )]556.8 code0
[2(VPSHLDVW         xmmreg|mask|z,xmmreg*,xmmrm128 AVX512VBMI2/VL )]547.2 code0
[2(VPSHLDVW         ymmreg|mask|z,ymmreg*,ymmrm256 AVX512VBMI2/VL )]537.6 code0
[2(VPSHLDVW         zmmreg|mask|z,zmmreg*,zmmrm512 AVX512VBMI2 )]528 code0
[2(VPSHLDVD         xmmreg|mask|z,xmmreg*,xmmrm128|b32 AVX512VBMI2/VL )]518.4 code0
[2(VPSHLDVD         ymmreg|mask|z,ymmreg*,ymmrm256|b32 AVX512VBMI2/VL )]508.8 code0
[2(VPSHLDVD         zmmreg|mask|z,zmmreg*,zmmrm512|b32 AVX512VBMI2 )]499.2 code0
[2(VPSHLDVQ         xmmreg|mask|z,xmmreg*,xmmrm128|b64 AVX512VBMI2/VL )]489.6 code0
[2(VPSHLDVQ         ymmreg|mask|z,ymmreg*,ymmrm256|b64 AVX512VBMI2/VL )]480 code0
[2(VPSHLDVQ         zmmreg|mask|z,zmmreg*,zmmrm512|b64 AVX512VBMI2 )]470.4 code0
[2(VPSHRDW          xmmreg|mask|z,xmmreg*,xmmrm128,imm8 AVX512VBMI2/VL )]460.8 code0
[2(VPSHRDW          ymmreg|mask|z,ymmreg*,ymmrm256,imm8 AVX512VBMI2/VL )]451.2 code0
[2(VPSHRDW          zmmreg|mask|z,zmmreg*,zmmrm512,imm8 AVX512VBMI2 )]441.6 code0
[2(VPSHRDD          xmmreg|mask|z,xmmreg*,xmmrm128|b32,imm8 AVX512VBMI2/VL )]432 code0
[2(VPSHRDD          ymmreg|mask|z,ymmreg*,ymmrm256|b32,imm8 AVX512VBMI2/VL )]422.4 code0
[2(VPSHRDD          zmmreg|mask|z,zmmreg*,zmmrm512|b32,imm8 AVX512VBMI2 )]412.8 code0
[2(VPSHRDQ          xmmreg|mask|z,xmmreg*,xmmrm128|b64,imm8 AVX512VBMI2/VL )]403.2 code0
[2(VPSHRDQ          ymmreg|mask|z,ymmreg*,ymmrm256|b64,imm8 AVX512VBMI2/VL )]393.6 code0
[2(VPSHRDQ          zmmreg|mask|z,zmmreg*,zmmrm512|b64,imm8 AVX512VBMI2 )]384 code0
[2(VPSHRDVW         xmmreg|mask|z,xmmreg*,xmmrm128 AVX512VBMI2/VL )]374.4 code0
[2(VPSHRDVW         ymmreg|mask|z,ymmreg*,ymmrm256 AVX512VBMI2/VL )]364.8 code0
[2(VPSHRDVW         zmmreg|mask|z,zmmreg*,zmmrm512 AVX512VBMI2 )]355.2 code0
[2(VPSHRDVD         xmmreg|mask|z,xmmreg*,xmmrm128|b32 AVX512VBMI2/VL )]345.6 code0
[2(VPSHRDVD         ymmreg|mask|z,ymmreg*,ymmrm256|b32 AVX512VBMI2/VL )]336 code0
[2(VPSHRDVD         zmmreg|mask|z,zmmreg*,zmmrm512|b32 AVX512VBMI2 )]326.4 code0
[2(VPSHRDVQ         xmmreg|mask|z,xmmreg*,xmmrm128|b64 AVX512VBMI2/VL )]316.8 code0
[2(VPSHRDVQ         ymmreg|mask|z,ymmreg*,ymmrm256|b64 AVX512VBMI2/VL )]307.2 code0
[2(VPSHRDVQ         zmmreg|mask|z,zmmreg*,zmmrm512|b64 AVX512VBMI2)]297.6 code2
[{/section-B.1.50 xa}(AVX512 VNNI)](B.1.50)277.2 subh3
[2(VPDPBUSD         xmmreg|mask|z,xmmreg*,xmmrm128|b32 AVX512VNNI/VL )]261.6 code1
[2(VPDPBUSD         ymmreg|mask|z,ymmreg*,ymmrm256|b32 AVX512VNNI/VL )]252 code0
[2(VPDPBUSD         zmmreg|mask|z,zmmreg*,zmmrm512|b32 AVX512VNNI )]242.4 code0
[2(VPDPBUSDS        xmmreg|mask|z,xmmreg*,xmmrm128|b32 AVX512VNNI/VL )]232.8 code0
[2(VPDPBUSDS        ymmreg|mask|z,ymmreg*,ymmrm256|b32 AVX512VNNI/VL )]223.2 code0
[2(VPDPBUSDS        zmmreg|mask|z,zmmreg*,zmmrm512|b32 AVX512VNNI )]213.6 code0
[2(VPDPWSSD         xmmreg|mask|z,xmmreg*,xmmrm128|b32 AVX512VNNI/VL )]204 code0
[2(VPDPWSSD         ymmreg|mask|z,ymmreg*,ymmrm256|b32 AVX512VNNI/VL )]194.4 code0
[2(VPDPWSSD         zmmreg|mask|z,zmmreg*,zmmrm512|b32 AVX512VNNI )]184.799999999999 code0
[2(VPDPWSSDS        xmmreg|mask|z,xmmreg*,xmmrm128|b32 AVX512VNNI/VL )]175.199999999999 code0
[2(VPDPWSSDS        ymmreg|mask|z,ymmreg*,ymmrm256|b32 AVX512VNNI/VL )]165.599999999999 code0
[2(VPDPWSSDS        zmmreg|mask|z,zmmreg*,zmmrm512|b32 AVX512VNNI)]155.999999999999 code2
[{/section-B.1.51 xa}(AVX512 Bit Algorithms)](B.1.51)135.599999999999 subh3
[2(VPOPCNTB         xmmreg|mask|z,xmmrm128   AVX512BITALG/VL )]119.999999999999 code1
[2(VPOPCNTB         ymmreg|mask|z,ymmrm256   AVX512BITALG/VL )]110.399999999999 code0
[2(VPOPCNTB         zmmreg|mask|z,zmmrm512   AVX512BITALG )]100.799999999999 code0
[2(VPOPCNTW         xmmreg|mask|z,xmmrm128   AVX512BITALG/VL )]91.1999999999994 code0
[2(VPOPCNTW         ymmreg|mask|z,ymmrm256   AVX512BITALG/VL )]81.5999999999993 code0
(229)pageodd
restore showpage
%%Page: 230 230
%%BeginPageSetup
save
%%EndPageSetup
/230 pa
[2(VPOPCNTW         zmmreg|mask|z,zmmrm512   AVX512BITALG )]710.4 code0
[2(VPOPCNTD         xmmreg|mask|z,xmmrm128   AVX512VPOPCNTDQ/VL )]700.8 code0
[2(VPOPCNTD         ymmreg|mask|z,ymmrm256   AVX512VPOPCNTDQ/VL )]691.2 code0
[2(VPOPCNTD         zmmreg|mask|z,zmmrm512   AVX512VPOPCNTDQ )]681.6 code0
[2(VPOPCNTQ         xmmreg|mask|z,xmmrm128   AVX512VPOPCNTDQ/VL )]672 code0
[2(VPOPCNTQ         ymmreg|mask|z,ymmrm256   AVX512VPOPCNTDQ/VL )]662.4 code0
[2(VPOPCNTQ         zmmreg|mask|z,zmmrm512   AVX512VPOPCNTDQ )]652.8 code0
[2(VPSHUFBITQMB     kreg|mask,xmmreg,xmmrm128 AVX512BITALG/VL )]643.2 code0
[2(VPSHUFBITQMB     kreg|mask,ymmreg,ymmrm256 AVX512BITALG/VL )]633.6 code0
[2(VPSHUFBITQMB     kreg|mask,zmmreg,zmmrm512 AVX512BITALG)]624 code2
[{/section-B.1.52 xa}(AVX512 4-iteration Multiply-Add)](B.1.52)603.6 subh3
[2(V4FMADDPS        zmmreg|mask|z,zmmreg|rs4,mem AVX5124FMAPS,SO )]588 code1
[2(V4FNMADDPS       zmmreg|mask|z,zmmreg|rs4,mem AVX5124FMAPS,SO )]578.4 code0
[2(V4FMADDSS        zmmreg|mask|z,zmmreg|rs4,mem AVX5124FMAPS,SO )]568.8 code0
[2(V4FNMADDSS       zmmreg|mask|z,zmmreg|rs4,mem AVX5124FMAPS,SO)]559.2 code2
[{/section-B.1.53 xa}(AVX512 4-iteration Dot Product)](B.1.53)538.8 subh3
[2(V4DPWSSDS        zmmreg|mask|z,zmmreg|rs4,mem AVX5124VNNIW,SO )]523.2 code1
[2(V4DPWSSD         zmmreg|mask|z,zmmreg|rs4,mem AVX5124VNNIW,SO)]513.6 code2
[{/section-B.1.54 xa}(Intel Software Guard Extensions \(SGX\))](B.1.54)493.2 subh3
[2(ENCLS                                     SGX )]477.6 code1
[2(ENCLU                                     SGX )]468 code0
[2(ENCLV                                     SGX)]458.4 code2
[{/section-B.1.55 xa}(Intel Control-Flow Enforcement Technology \(CET\))](B.1.55)438 subh3
[2(CLRSSBSY         mem64                    CET )]422.4 code1
[2(ENDBR32                                   CET )]412.8 code0
[2(ENDBR64                                   CET )]403.2 code0
[2(INCSSPD          reg32                    CET )]393.6 code0
[2(INCSSPQ          reg64                    CET,LONG )]384 code0
[2(RDSSPD           reg32                    CET )]374.4 code0
[2(RDSSPQ           reg64                    CET,LONG )]364.8 code0
[2(RSTORSSP         mem64                    CET )]355.2 code0
[2(SAVEPREVSSP                               CET )]345.6 code0
[2(SETSSBSY                                  CET )]336 code0
[2(WRUSSD           mem32,reg32              CET )]326.4 code0
[2(WRUSSQ           mem64,reg64              CET,LONG )]316.8 code0
[2(WRSSD            mem32,reg32              CET )]307.2 code0
[2(WRSSQ            mem64,reg64              CET,LONG)]297.6 code2
[{/section-B.1.56 xa}(Instructions from ISE doc 319433-040, June 2020)](B.1.56)277.2 subh3
[2(ENQCMD           reg16,mem512             ENQCMD )]261.6 code1
[2(ENQCMD           reg32,mem512             ENQCMD,ND )]252 code0
[2(ENQCMD           reg32,mem512             ENQCMD )]242.4 code0
[2(ENQCMD           reg64,mem512             ENQCMD,LONG )]232.8 code0
[2(ENQCMDS          reg16,mem512             ENQCMD,PRIV )]223.2 code0
[2(ENQCMDS          reg32,mem512             ENQCMD,PRIV,ND )]213.6 code0
[2(ENQCMDS          reg32,mem512             ENQCMD,PRIV )]204 code0
[2(ENQCMDS          reg64,mem512             ENQCMD,PRIV,LONG )]194.4 code0
[2(PCONFIG                                   PCONFIG,PRIV )]184.8 code0
[2(SERIALIZE                                 SERIALIZE )]175.2 code0
[2(WBNOINVD                                  WBNOINVD,PRIV )]165.6 code0
[2(XRESLDTRK                                 TSXLDTRK )]156 code0
[2(XSUSLDTRK                                 TSXLDTRK)]146.4 code2
[{/section-B.1.57 xa}(AVX512 Bfloat16 instructions)](B.1.57)126 subh3
[2(VCVTNE2PS2BF16   xmmreg|mask|z,xmmreg*,xmmrm128|b32 AVX512BF16 )]110.4 code1
[2(VCVTNE2PS2BF16   ymmreg|mask|z,ymmreg*,ymmrm256|b32 AVX512BF16 )]100.799999999999 code0
[2(VCVTNE2PS2BF16   zmmreg|mask|z,zmmreg*,zmmrm512|b32 AVX512BF16 )]91.1999999999995 code0
[2(VCVTNE2PS2BF16   xmmreg|mask|z,xmmreg*,xmmrm128|b32 AVX512BF16 )]81.5999999999995 code0
(230)pageeven
restore showpage
%%Page: 231 231
%%BeginPageSetup
save
%%EndPageSetup
/231 pa
[2(VCVTNE2PS2BF16   ymmreg|mask|z,ymmreg*,ymmrm256|b32 AVX512BF16 )]710.4 code0
[2(VCVTNE2PS2BF16   zmmreg|mask|z,zmmreg*,zmmrm512|b32 AVX512BF16 )]700.8 code0
[2(VDPBF16PS        xmmreg|mask|z,xmmreg*,xmmrm128|b32 AVX512BF16 )]691.2 code0
[2(VDPBF16PS        ymmreg|mask|z,ymmreg*,ymmrm128|b32 AVX512BF16 )]681.6 code0
[2(VDPBF16PS        zmmreg|mask|z,zmmreg*,zmmrm128|b32 AVX512BF16)]672 code2
[{/section-B.1.58 xa}(AVX512 mask intersect instructions)](B.1.58)651.6 subh3
[2(VP2INTERSECTD    kreg|rs2,xmmreg,xmmrm128|b32 AVX512BF16 )]636 code1
[2(VP2INTERSECTD    kreg|rs2,ymmreg,ymmrm128|b32 AVX512BF16 )]626.4 code0
[2(VP2INTERSECTD    kreg|rs2,zmmreg,zmmrm128|b32 AVX512BF16)]616.8 code2
[{/section-B.1.59 xa}(Intel Advanced Matrix Extensions \(AMX\))](B.1.59)596.4 subh3
[2(LDTILECFG        mem512                   AMXTILE,SZ,LONG )]580.8 code1
[2(STTILECFG        mem512                   AMXTILE,SZ,LONG )]571.2 code0
[2(TDPBF16PS        tmmreg,tmmreg,tmmreg     AMXBF16,LONG )]561.6 code0
[2(TDPBSSD          tmmreg,tmmreg,tmmreg     AMXINT8,LONG )]552 code0
[2(TDPBSUD          tmmreg,tmmreg,tmmreg     AMXINT8,LONG )]542.4 code0
[2(TDPBUSD          tmmreg,tmmreg,tmmreg     AMXINT8,LONG )]532.8 code0
[2(TDPBUUD          tmmreg,tmmreg,tmmreg     AMXINT8,LONG )]523.2 code0
[2(TILELOADD        tmmreg,mem               AMXTILE,MIB,SIB,SX,LONG )]513.6 code0
[2(TILELOADDT1      tmmreg,mem               AMXTILE,MIB,SIB,SX,LONG )]504 code0
[2(TILERELEASE                               AMXTILE,LONG )]494.4 code0
[2(TILESTORED       mem,tmmreg               AMXTILE,MIB,SIB,SX,LONG )]484.8 code0
[2(TILEZERO         tmmreg                   AMXTILE,LONG)]475.2 code2
[{/section-B.1.60 xa}(Systematic names for the hinting nop instructions)](B.1.60)454.8 subh3
[2(HINT_NOP0        rm16                     P6,UNDOC )]439.2 code1
[2(HINT_NOP0        rm32                     P6,UNDOC )]429.6 code0
[2(HINT_NOP0        rm64                     X86_64,LONG,UNDOC )]420 code0
[2(HINT_NOP1        rm16                     P6,UNDOC )]410.4 code0
[2(HINT_NOP1        rm32                     P6,UNDOC )]400.8 code0
[2(HINT_NOP1        rm64                     X86_64,LONG,UNDOC )]391.2 code0
[2(HINT_NOP2        rm16                     P6,UNDOC )]381.6 code0
[2(HINT_NOP2        rm32                     P6,UNDOC )]372 code0
[2(HINT_NOP2        rm64                     X86_64,LONG,UNDOC )]362.4 code0
[2(HINT_NOP3        rm16                     P6,UNDOC )]352.8 code0
[2(HINT_NOP3        rm32                     P6,UNDOC )]343.2 code0
[2(HINT_NOP3        rm64                     X86_64,LONG,UNDOC )]333.6 code0
[2(HINT_NOP4        rm16                     P6,UNDOC )]324 code0
[2(HINT_NOP4        rm32                     P6,UNDOC )]314.4 code0
[2(HINT_NOP4        rm64                     X86_64,LONG,UNDOC )]304.8 code0
[2(HINT_NOP5        rm16                     P6,UNDOC )]295.2 code0
[2(HINT_NOP5        rm32                     P6,UNDOC )]285.6 code0
[2(HINT_NOP5        rm64                     X86_64,LONG,UNDOC )]276 code0
[2(HINT_NOP6        rm16                     P6,UNDOC )]266.4 code0
[2(HINT_NOP6        rm32                     P6,UNDOC )]256.8 code0
[2(HINT_NOP6        rm64                     X86_64,LONG,UNDOC )]247.2 code0
[2(HINT_NOP7        rm16                     P6,UNDOC )]237.6 code0
[2(HINT_NOP7        rm32                     P6,UNDOC )]228 code0
[2(HINT_NOP7        rm64                     X86_64,LONG,UNDOC )]218.4 code0
[2(HINT_NOP8        rm16                     P6,UNDOC )]208.799999999999 code0
[2(HINT_NOP8        rm32                     P6,UNDOC )]199.199999999999 code0
[2(HINT_NOP8        rm64                     X86_64,LONG,UNDOC )]189.599999999999 code0
[2(HINT_NOP9        rm16                     P6,UNDOC )]179.999999999999 code0
[2(HINT_NOP9        rm32                     P6,UNDOC )]170.399999999999 code0
[2(HINT_NOP9        rm64                     X86_64,LONG,UNDOC )]160.799999999999 code0
[2(HINT_NOP10       rm16                     P6,UNDOC )]151.199999999999 code0
[2(HINT_NOP10       rm32                     P6,UNDOC )]141.599999999999 code0
[2(HINT_NOP10       rm64                     X86_64,LONG,UNDOC )]131.999999999999 code0
[2(HINT_NOP11       rm16                     P6,UNDOC )]122.399999999999 code0
[2(HINT_NOP11       rm32                     P6,UNDOC )]112.799999999999 code0
[2(HINT_NOP11       rm64                     X86_64,LONG,UNDOC )]103.199999999999 code0
[2(HINT_NOP12       rm16                     P6,UNDOC )]93.5999999999992 code0
[2(HINT_NOP12       rm32                     P6,UNDOC )]83.9999999999992 code0
[2(HINT_NOP12       rm64                     X86_64,LONG,UNDOC )]74.3999999999992 code0
(231)pageodd
restore showpage
%%Page: 232 232
%%BeginPageSetup
save
%%EndPageSetup
/232 pa
[2(HINT_NOP13       rm16                     P6,UNDOC )]710.4 code0
[2(HINT_NOP13       rm32                     P6,UNDOC )]700.8 code0
[2(HINT_NOP13       rm64                     X86_64,LONG,UNDOC )]691.2 code0
[2(HINT_NOP14       rm16                     P6,UNDOC )]681.6 code0
[2(HINT_NOP14       rm32                     P6,UNDOC )]672 code0
[2(HINT_NOP14       rm64                     X86_64,LONG,UNDOC )]662.4 code0
[2(HINT_NOP15       rm16                     P6,UNDOC )]652.8 code0
[2(HINT_NOP15       rm32                     P6,UNDOC )]643.2 code0
[2(HINT_NOP15       rm64                     X86_64,LONG,UNDOC )]633.6 code0
[2(HINT_NOP16       rm16                     P6,UNDOC )]624 code0
[2(HINT_NOP16       rm32                     P6,UNDOC )]614.4 code0
[2(HINT_NOP16       rm64                     X86_64,LONG,UNDOC )]604.8 code0
[2(HINT_NOP17       rm16                     P6,UNDOC )]595.2 code0
[2(HINT_NOP17       rm32                     P6,UNDOC )]585.6 code0
[2(HINT_NOP17       rm64                     X86_64,LONG,UNDOC )]576 code0
[2(HINT_NOP18       rm16                     P6,UNDOC )]566.4 code0
[2(HINT_NOP18       rm32                     P6,UNDOC )]556.8 code0
[2(HINT_NOP18       rm64                     X86_64,LONG,UNDOC )]547.2 code0
[2(HINT_NOP19       rm16                     P6,UNDOC )]537.6 code0
[2(HINT_NOP19       rm32                     P6,UNDOC )]528 code0
[2(HINT_NOP19       rm64                     X86_64,LONG,UNDOC )]518.4 code0
[2(HINT_NOP20       rm16                     P6,UNDOC )]508.8 code0
[2(HINT_NOP20       rm32                     P6,UNDOC )]499.2 code0
[2(HINT_NOP20       rm64                     X86_64,LONG,UNDOC )]489.6 code0
[2(HINT_NOP21       rm16                     P6,UNDOC )]480 code0
[2(HINT_NOP21       rm32                     P6,UNDOC )]470.4 code0
[2(HINT_NOP21       rm64                     X86_64,LONG,UNDOC )]460.8 code0
[2(HINT_NOP22       rm16                     P6,UNDOC )]451.2 code0
[2(HINT_NOP22       rm32                     P6,UNDOC )]441.6 code0
[2(HINT_NOP22       rm64                     X86_64,LONG,UNDOC )]432 code0
[2(HINT_NOP23       rm16                     P6,UNDOC )]422.4 code0
[2(HINT_NOP23       rm32                     P6,UNDOC )]412.8 code0
[2(HINT_NOP23       rm64                     X86_64,LONG,UNDOC )]403.2 code0
[2(HINT_NOP24       rm16                     P6,UNDOC )]393.6 code0
[2(HINT_NOP24       rm32                     P6,UNDOC )]384 code0
[2(HINT_NOP24       rm64                     X86_64,LONG,UNDOC )]374.4 code0
[2(HINT_NOP25       rm16                     P6,UNDOC )]364.8 code0
[2(HINT_NOP25       rm32                     P6,UNDOC )]355.2 code0
[2(HINT_NOP25       rm64                     X86_64,LONG,UNDOC )]345.6 code0
[2(HINT_NOP26       rm16                     P6,UNDOC )]336 code0
[2(HINT_NOP26       rm32                     P6,UNDOC )]326.4 code0
[2(HINT_NOP26       rm64                     X86_64,LONG,UNDOC )]316.8 code0
[2(HINT_NOP27       rm16                     P6,UNDOC )]307.2 code0
[2(HINT_NOP27       rm32                     P6,UNDOC )]297.6 code0
[2(HINT_NOP27       rm64                     X86_64,LONG,UNDOC )]288 code0
[2(HINT_NOP28       rm16                     P6,UNDOC )]278.4 code0
[2(HINT_NOP28       rm32                     P6,UNDOC )]268.8 code0
[2(HINT_NOP28       rm64                     X86_64,LONG,UNDOC )]259.2 code0
[2(HINT_NOP29       rm16                     P6,UNDOC )]249.6 code0
[2(HINT_NOP29       rm32                     P6,UNDOC )]240 code0
[2(HINT_NOP29       rm64                     X86_64,LONG,UNDOC )]230.4 code0
[2(HINT_NOP30       rm16                     P6,UNDOC )]220.799999999999 code0
[2(HINT_NOP30       rm32                     P6,UNDOC )]211.199999999999 code0
[2(HINT_NOP30       rm64                     X86_64,LONG,UNDOC )]201.599999999999 code0
[2(HINT_NOP31       rm16                     P6,UNDOC )]191.999999999999 code0
[2(HINT_NOP31       rm32                     P6,UNDOC )]182.399999999999 code0
[2(HINT_NOP31       rm64                     X86_64,LONG,UNDOC )]172.799999999999 code0
[2(HINT_NOP32       rm16                     P6,UNDOC )]163.199999999999 code0
[2(HINT_NOP32       rm32                     P6,UNDOC )]153.599999999999 code0
[2(HINT_NOP32       rm64                     X86_64,LONG,UNDOC )]143.999999999999 code0
[2(HINT_NOP33       rm16                     P6,UNDOC )]134.399999999999 code0
[2(HINT_NOP33       rm32                     P6,UNDOC )]124.799999999999 code0
[2(HINT_NOP33       rm64                     X86_64,LONG,UNDOC )]115.199999999999 code0
[2(HINT_NOP34       rm16                     P6,UNDOC )]105.599999999999 code0
[2(HINT_NOP34       rm32                     P6,UNDOC )]95.9999999999992 code0
[2(HINT_NOP34       rm64                     X86_64,LONG,UNDOC )]86.3999999999992 code0
[2(HINT_NOP35       rm16                     P6,UNDOC )]76.7999999999992 code0
(232)pageeven
restore showpage
%%Page: 233 233
%%BeginPageSetup
save
%%EndPageSetup
/233 pa
[2(HINT_NOP35       rm32                     P6,UNDOC )]710.4 code0
[2(HINT_NOP35       rm64                     X86_64,LONG,UNDOC )]700.8 code0
[2(HINT_NOP36       rm16                     P6,UNDOC )]691.2 code0
[2(HINT_NOP36       rm32                     P6,UNDOC )]681.6 code0
[2(HINT_NOP36       rm64                     X86_64,LONG,UNDOC )]672 code0
[2(HINT_NOP37       rm16                     P6,UNDOC )]662.4 code0
[2(HINT_NOP37       rm32                     P6,UNDOC )]652.8 code0
[2(HINT_NOP37       rm64                     X86_64,LONG,UNDOC )]643.2 code0
[2(HINT_NOP38       rm16                     P6,UNDOC )]633.6 code0
[2(HINT_NOP38       rm32                     P6,UNDOC )]624 code0
[2(HINT_NOP38       rm64                     X86_64,LONG,UNDOC )]614.4 code0
[2(HINT_NOP39       rm16                     P6,UNDOC )]604.8 code0
[2(HINT_NOP39       rm32                     P6,UNDOC )]595.2 code0
[2(HINT_NOP39       rm64                     X86_64,LONG,UNDOC )]585.6 code0
[2(HINT_NOP40       rm16                     P6,UNDOC )]576 code0
[2(HINT_NOP40       rm32                     P6,UNDOC )]566.4 code0
[2(HINT_NOP40       rm64                     X86_64,LONG,UNDOC )]556.8 code0
[2(HINT_NOP41       rm16                     P6,UNDOC )]547.2 code0
[2(HINT_NOP41       rm32                     P6,UNDOC )]537.6 code0
[2(HINT_NOP41       rm64                     X86_64,LONG,UNDOC )]528 code0
[2(HINT_NOP42       rm16                     P6,UNDOC )]518.4 code0
[2(HINT_NOP42       rm32                     P6,UNDOC )]508.8 code0
[2(HINT_NOP42       rm64                     X86_64,LONG,UNDOC )]499.2 code0
[2(HINT_NOP43       rm16                     P6,UNDOC )]489.6 code0
[2(HINT_NOP43       rm32                     P6,UNDOC )]480 code0
[2(HINT_NOP43       rm64                     X86_64,LONG,UNDOC )]470.4 code0
[2(HINT_NOP44       rm16                     P6,UNDOC )]460.8 code0
[2(HINT_NOP44       rm32                     P6,UNDOC )]451.2 code0
[2(HINT_NOP44       rm64                     X86_64,LONG,UNDOC )]441.6 code0
[2(HINT_NOP45       rm16                     P6,UNDOC )]432 code0
[2(HINT_NOP45       rm32                     P6,UNDOC )]422.4 code0
[2(HINT_NOP45       rm64                     X86_64,LONG,UNDOC )]412.8 code0
[2(HINT_NOP46       rm16                     P6,UNDOC )]403.2 code0
[2(HINT_NOP46       rm32                     P6,UNDOC )]393.6 code0
[2(HINT_NOP46       rm64                     X86_64,LONG,UNDOC )]384 code0
[2(HINT_NOP47       rm16                     P6,UNDOC )]374.4 code0
[2(HINT_NOP47       rm32                     P6,UNDOC )]364.8 code0
[2(HINT_NOP47       rm64                     X86_64,LONG,UNDOC )]355.2 code0
[2(HINT_NOP48       rm16                     P6,UNDOC )]345.6 code0
[2(HINT_NOP48       rm32                     P6,UNDOC )]336 code0
[2(HINT_NOP48       rm64                     X86_64,LONG,UNDOC )]326.4 code0
[2(HINT_NOP49       rm16                     P6,UNDOC )]316.8 code0
[2(HINT_NOP49       rm32                     P6,UNDOC )]307.2 code0
[2(HINT_NOP49       rm64                     X86_64,LONG,UNDOC )]297.6 code0
[2(HINT_NOP50       rm16                     P6,UNDOC )]288 code0
[2(HINT_NOP50       rm32                     P6,UNDOC )]278.4 code0
[2(HINT_NOP50       rm64                     X86_64,LONG,UNDOC )]268.8 code0
[2(HINT_NOP51       rm16                     P6,UNDOC )]259.2 code0
[2(HINT_NOP51       rm32                     P6,UNDOC )]249.6 code0
[2(HINT_NOP51       rm64                     X86_64,LONG,UNDOC )]240 code0
[2(HINT_NOP52       rm16                     P6,UNDOC )]230.4 code0
[2(HINT_NOP52       rm32                     P6,UNDOC )]220.799999999999 code0
[2(HINT_NOP52       rm64                     X86_64,LONG,UNDOC )]211.199999999999 code0
[2(HINT_NOP53       rm16                     P6,UNDOC )]201.599999999999 code0
[2(HINT_NOP53       rm32                     P6,UNDOC )]191.999999999999 code0
[2(HINT_NOP53       rm64                     X86_64,LONG,UNDOC )]182.399999999999 code0
[2(HINT_NOP54       rm16                     P6,UNDOC )]172.799999999999 code0
[2(HINT_NOP54       rm32                     P6,UNDOC )]163.199999999999 code0
[2(HINT_NOP54       rm64                     X86_64,LONG,UNDOC )]153.599999999999 code0
[2(HINT_NOP55       rm16                     P6,UNDOC )]143.999999999999 code0
[2(HINT_NOP55       rm32                     P6,UNDOC )]134.399999999999 code0
[2(HINT_NOP55       rm64                     X86_64,LONG,UNDOC )]124.799999999999 code0
[2(HINT_NOP56       rm16                     P6,UNDOC )]115.199999999999 code0
[2(HINT_NOP56       rm32                     P6,UNDOC )]105.599999999999 code0
[2(HINT_NOP56       rm64                     X86_64,LONG,UNDOC )]95.9999999999992 code0
[2(HINT_NOP57       rm16                     P6,UNDOC )]86.3999999999992 code0
[2(HINT_NOP57       rm32                     P6,UNDOC )]76.7999999999992 code0
(233)pageodd
restore showpage
%%Page: 234 234
%%BeginPageSetup
save
%%EndPageSetup
/234 pa
[2(HINT_NOP57       rm64                     X86_64,LONG,UNDOC )]710.4 code0
[2(HINT_NOP58       rm16                     P6,UNDOC )]700.8 code0
[2(HINT_NOP58       rm32                     P6,UNDOC )]691.2 code0
[2(HINT_NOP58       rm64                     X86_64,LONG,UNDOC )]681.6 code0
[2(HINT_NOP59       rm16                     P6,UNDOC )]672 code0
[2(HINT_NOP59       rm32                     P6,UNDOC )]662.4 code0
[2(HINT_NOP59       rm64                     X86_64,LONG,UNDOC )]652.8 code0
[2(HINT_NOP60       rm16                     P6,UNDOC )]643.2 code0
[2(HINT_NOP60       rm32                     P6,UNDOC )]633.6 code0
[2(HINT_NOP60       rm64                     X86_64,LONG,UNDOC )]624 code0
[2(HINT_NOP61       rm16                     P6,UNDOC )]614.4 code0
[2(HINT_NOP61       rm32                     P6,UNDOC )]604.8 code0
[2(HINT_NOP61       rm64                     X86_64,LONG,UNDOC )]595.2 code0
[2(HINT_NOP62       rm16                     P6,UNDOC )]585.6 code0
[2(HINT_NOP62       rm32                     P6,UNDOC )]576 code0
[2(HINT_NOP62       rm64                     X86_64,LONG,UNDOC )]566.4 code0
[2(HINT_NOP63       rm16                     P6,UNDOC )]556.8 code0
[2(HINT_NOP63       rm32                     P6,UNDOC )]547.2 code0
[2(HINT_NOP63       rm64                     X86_64,LONG,UNDOC)]537.6 code2
(234)pageeven
restore showpage
%%Page: 235 235
%%BeginPageSetup
save
%%EndPageSetup
/235 pa
[{/appendix-C xa}(Appendix C: )(NASM Version History)]698.4 appn3
[{/section-C.1 xa}(NASM 2 Series)](C.1)651.6 head3
[(The NASM 2 series supports x86-64, and is the production version of NASM since 2007.)]633.6 norm3
[{/section-C.1.1 xa}(Version 2.15.05)](C.1.1)613.2 subh3
[(Correct )2(%ifid $)0( and )2(%ifid $$)0( being treated as true. See ){/section-4.4.6 xl}(section 4.4.6){el}(.)]595.2 bull3
[(Add )2(--reproducible)0( option to suppress NASM version numbers and timestamps in output files. See)]577.2 bull1
[{/section-2.1.34 xl}(section 2.1.34){el}(.)]565.2 bull2
[{/section-C.1.2 xa}(Version 2.15.04)](C.1.2)544.8 subh3
[(More sensible handling of the case where one single-line macro definition will shadow another. A)]526.8 bull1
[(warning will be issued, but the additional definition will be allowed. For the existing error case)]514.8 bull0
[(where both a parameterless and parametered macro are created, that warning is promoted to an)]502.8 bull0
[(error by default.)]490.8 bull2
[(Add special preprocessor tokens )2(%*?)0( and )2(%*??)0( that expand like )2(%?)0( and )2(%??)0( in single-line macros only.)]472.8 bull1
[(See ){/section-4.1.6 xl}(section 4.1.6){el}(.)]460.8 bull2
[(Correct the encoding of the )2(ENQCMDS)0( and )2(TILELOADT1)0( instructions.)]442.8 bull3
[(Fix case where the COFF backend \(the )2(coff)0(, )2(win32)0( and )2(win64)0( output formats\) would add padding)]424.8 bull1
[(bytes in the middle of a section if a )2(SECTION)0(/)2(SEGMENT)0( directive was provided which repeated an)]412.8 bull0
[2(ALIGN=)0( attribute. This neither matched legacy behavior, other backends, or user expectations.)]400.8 bull2
[(Fix SSE instructions not being recognized with an explicit memory operation size \(e.g.)]382.8 bull1
[2(movsd qword [eax],xmm0)0(\).)]370.8 bull2
[(The )2(-L+)0( option no longer enables )2(-Lw)0(, which is mainly useful to debug NASM crashes. See ){/section-2.1.4 xl}(section){el}]352.8 bull1
[{/section-2.1.4 xl}(2.1.4){el}(.)]340.8 bull2
[(Document long-standing hazards in the use of )2($)0( in )2(Dx)0( statements, see ){/section-3.2.1 xl}(section 3.2.1){el}(.)]322.8 bull3
[(The NASM-only RDOFF output format backend, which has been broken since at least NASM 2.14, has)]304.8 bull1
[(been disabled. The RDOFF tools are scheduled to be removed from the NASM distribution in NASM)]292.8 bull0
[(2.16. If you have a concrete use case for RDOFF, please file a NASM bug report at)]280.8 bull0
[{(https://bugs.nasm.us/)wl}2(https://bugs.nasm.us/){el}0( as soon as possible. See ){/section-8.13 xl}(section 8.13){el}(.)]268.8 bull2
[{/section-C.1.3 xa}(Version 2.15.03)](C.1.3)248.4 subh3
[(Add instructions from the Intel Instruction Set Extensions and Future Features Programming)]230.4 bull1
[(Reference, June 2020. This includes AVX5512 )2(bfloat16)0(, AVX512 mask intersect, and Intel Advanced)]218.4 bull0
[(Matrix Extensions \(AMX\).)]206.4 bull2
[(Support for )2(bfloat16)0( floating-point constants. See ){/section-3.4.6 xl}(section 3.4.6){el}( and ){/section-6.3 xl}(section 6.3){el}(.)]188.4 bull3
[(Properly display warnings in preprocess-only mode.)]170.4 bull3
[(Fix copy-and-paste of examples from the PDF documentation.)]152.4 bull3
[(Debug information now properly reflect the line numbers of macro invocations \(unless declared)]134.4 bull1
[2(.nolist)0(\).)]122.4 bull2
[(Fix excessive alignment of sections in the )2(coff)0(/)2(win32)0(/)2(win64)0( output formats when the user-specified)]104.4 bull1
[(alignment is less than the default alignment for the section or section type.)]92.4000000000001 bull2
(235)pageodd
restore showpage
%%Page: 236 236
%%BeginPageSetup
save
%%EndPageSetup
/236 pa
[(Fix explicit token pasting \()2(%+)0(, ){/section-4.1.4 xl}(section 4.1.4){el}(\) for the cases where one or more parts result from empty)]708 bull1
[(token expansion, resulting in )2(%+)0( tokens at the beginning or end, or multiple ones in a row.)]696 bull2
[(Fix macro label capture \()2(%00)0(, ){/section-4.3.7 xl}(section 4.3.7){el}(\).)]678 bull3
[(Much better documentation for the MASM compatiblity package, )2(%use masm)0( \(see ){/section-6.5 xl}(section 6.5){el}(\).)]660 bull3
[(Fix )2(LEA)0( without square brackets, for MASM compatibility.)]642 bull3
[(Portability fixes.)]624 bull3
[{/section-C.1.4 xa}(Version 2.15.02)](C.1.4)603.6 subh3
[(Fix miscompilation when building with )2(clang)0(.)]585.6 bull3
[(Add )2(db-empty)0( warning class, see ){/section-2.1.26 xl}(section 2.1.26){el}(.)]567.6 bull3
[(Fix the dependencies in the MSVC NMAKE makefile \()2(Mkfiles/msvc.mak)0(\).)]549.6 bull3
[(Some documentation improvements and cleanups.)]531.6 bull3
[(Fix the handling of macro parameter ranges \()2(%{:})0(\), including with brace-enclosed original)]513.6 bull1
[(arguments.)]501.6 bull2
[{/section-C.1.5 xa}(Version 2.15.01)](C.1.5)481.2 subh3
[(Fix building the documentation from the release archive. For 2.15, the user has to do )2(make warnings)]463.2 bull1
[(manually in the main directory in order to be able to build the documentation, which means Perl)]451.2 bull0
[(needs to be installed on the system.)]439.2 bull2
[(Add instructions for Intel Control Flow Enforcement Technology \(CET\).)]421.2 bull3
[{/section-C.1.6 xa}(Version 2.15)](C.1.6)400.8 subh3
[(The comparison and booleanizing operators can now be used in any expression context, not just)]382.8 bull1
[2(%if)0(. See ){/section-3.5 xl}(section 3.5){el}(.)]370.8 bull2
[(New operator )2(?)0( ... )2(:)0(. See ){/section-3.5.1 xl}(section 3.5.1){el}(.)]352.8 bull3
[(Signed shift operators )2(<<<)0( and )2(>>>)0(. See ){/section-3.5.9 xl}(section 3.5.9){el}(.)]334.8 bull3
[(The MASM )2(DUP)0( syntax for data definitions is now supported, in a somewhat enhanced form. See)]316.8 bull1
[{/section-3.2.1 xl}(section 3.2.1){el}(.)]304.8 bull2
[(Warn for strange legacy behavior regarding empty arguments in multi-line macro expansion, but try)]286.8 bull1
[(to match legacy behavior in most cases. Legacy behavior can be disabled with the directive)]274.8 bull0
[2(%pragma preproc sane_empty_expansion)0(, see ){/section-4.3 xl}(section 4.3){el}( and ){/section-4.10.1 xl}(section 4.10.1){el}(.)]262.8 bull2
[(A much more sensible limit to expression evaluation depth. The previously defined limit would)]244.8 bull1
[(rarely trigger before NASM died with a stack overrun error on most systems. See ){/section-2.1.31 xl}(section 2.1.31){el}(.)]232.8 bull2
[(The state of warnings can now be saved and restored via the )2([WARNING PUSH])0( and )2([WARNING POP])]214.8 bull1
[(directives. See ){/section-7.13 xl}(section 7.13){el}(.)]202.8 bull2
[(The )2(sectalign on|off)0( switch does not affect an explicit directive. See ){/section-5.10.2 xl}(section 5.10.2){el}(.)]184.8 bull3
[(Added )2(configure)0( option to enable building with profiling \()2(--enable-profiling)0(\).)]166.8 bull3
[(Attempt to support of long path names, up to 32767 of UTF-16 characters, on Windows.)]148.8 bull3
[(Fixed 'mismatch in operand sizes' error in the )2(MOVDDUP)0(, )2(CMPXCHG8B)0( and )2(CMPXCHG16B)0( instructions.)]130.8 bull3
[(Improved error messages in the string transformation routine.)]112.8 bull3
[(Removed obsolete )2(gnu-elf-extensions)0( warning about 8- and 16-bit relocation generation. See)]94.8 bull1
[{/section-8.9.8 xl}(section 8.9.8){el}]82.8 bull2
(236)pageeven
restore showpage
%%Page: 237 237
%%BeginPageSetup
save
%%EndPageSetup
/237 pa
[(Added group aliases for all prefixed warnings. See ){/section-2.1.26 xl}(section 2.1.26){el}(.)]708 bull3
[(Allowed building with MSVC versions older than 1700.)]690 bull3
[(Added implicitly sized versions of the )2(K...)0( instructions, which allows the )2(K...)0( instructions to be)]672 bull1
[(specified without a size suffix as long as the operands are sized.)]660 bull2
[(Added )2(-L)0( option for additional listing information. See ){/section-2.1.4 xl}(section 2.1.4){el}(.)]642 bull3
[(Added some warnings for obsolete instructions for a specified CPU.)]624 bull3
[(Deprecated )2(-hf)0( and )2(-y)0( options. Use )2(-h)0( instead.)]606 bull3
[(Made DWARF as the default debug format for ELF.)]588 bull3
[(Added )2(%pragma list)0( )1(options...)0( to set or clear listing options \(see )2(opt-L)0(\).)]570 bull3
[(Allowed immediate syntax for )2(LEA)0( instruction \(ignore operand size completely\).)]552 bull3
[(Added limited functionality MASM compatibility package. See ){/section-6.5 xl}(section 6.5){el}(.)]534 bull3
[(Add single-line macros aliases using )2(%defalias)0( or )2(%idefalias)0(. These behave like a kind of "symbolic)]516 bull1
[(links" for single-line macros. See ){/section-4.1.11 xl}(section 4.1.11){el}( and )2(clear)0(.)]504 bull2
[(Added support for stringify, nostrip, evaluating, and greedy single-line macro arguments. See)]486 bull1
[{/section-4.1.1 xl}(section 4.1.1){el}(.)]474 bull2
[(Unused single-line macro arguments no longer need to have a specified name. See ){/section-4.1.1 xl}(section 4.1.1){el}(.)]456 bull3
[(Added conditional comma operator )2(%,)0(. See ){/section-4.1.12 xl}(section 4.1.12){el}(.)]438 bull3
[(Changed private namespace from )2(__foo__)0( to )2(__?foo?__)0(, so a user namespace starting from)]420 bull1
[(underscore is now clean from symbols. For backwards compatibility, the previous names are)]408 bull0
[(defined as aliases; see ){/section-4.1.11 xl}(section 4.1.11){el}(, ){/section-4.11.3 xl}(section 4.11.3){el}( and ){/chapter-5 xl}(chapter 5){el}(.)]396 bull2
[(Added support of ELF weak symbols and external references. See ){/section-8.9.5 xl}(section 8.9.5){el}(.)]378 bull3
[(Changed the behavior of the EXTERN keyword and introduced REQUIRED keyword. See ){/section-7.6 xl}(section 7.6){el}(.)]360 bull3
[(Added )2(%ifusable)0( and )2(%ifusing)0( directives. See ){/chapter-6 xl}(chapter 6){el}(.)]342 bull3
[(Made various performance improvements and stability fixes in macro preprocessor engine.)]324 bull3
[(Improved NASM error handling and cleaned up error messages.)]306 bull3
[(Many, many bug fixes.)]288 bull3
[{/section-C.1.7 xa}(Version 2.14.03)](C.1.7)267.6 subh3
[(Suppress nuisance ")2(label changed during code generation)0(" messages after a real error.)]249.6 bull3
[(Add support for the )2(merge)0( and )2(strings)0( attributes on ELF sections. See ){/section-8.9.2 xl}(section 8.9.2){el}(.)]231.6 bull3
[(Add support for the )2(note)0(, )2(preinit_array)0(, )2(init_array)0(, and )2(fini_array)0( sections type in ELF. See)]213.6 bull1
[{/section-8.9.2 xl}(section 8.9.2){el}(.)]201.6 bull2
[(Handle more than 32,633 sections in ELF.)]183.6 bull3
[{/section-C.1.8 xa}(Version 2.14.02)](C.1.8)163.2 subh3
[(Fix crash due to multiple errors or warnings during the code generation pass if a list file is specified.)]145.2 bull3
[{/section-C.1.9 xa}(Version 2.14.01)](C.1.9)124.8 subh3
[(Create all system-defined macros defore processing command-line given preprocessing directives)]106.8 bull1
[(\()2(-p)0(, )2(-d)0(, )2(-u)0(, )2(--pragma)0(, )2(--before)0(\).)]94.8000000000001 bull2
[(If debugging is enabled, define a )2(__DEBUG_FORMAT__)0( predefined macro. See ){/section-5.5 xl}(section 5.5){el}(.)]76.8000000000001 bull3
(237)pageodd
restore showpage
%%Page: 238 238
%%BeginPageSetup
save
%%EndPageSetup
/238 pa
[(Fix an assert for the case in the )2(obj)0( format when a )2(SEG)0( operator refers to an )2(EXTERN)0( symbol declared)]708 bull1
[(further down in the code.)]696 bull2
[(Fix a corner case in the floating-point code where a binary, octal or hexadecimal floating-point)]678 bull1
[(having at least 32, 11, or 8 mantissa digits could produce slightly incorrect results under very specific)]666 bull0
[(conditions.)]654 bull2
[(Support )2(-MD)0( without a filename, for )2(gcc)0( compatibility. )2(-MF)0( can be used to set the dependencies)]636 bull1
[(output filename. See ){/section-2.1.8 xl}(section 2.1.8){el}(.)]624 bull2
[(Fix )2(-E)0( in combination with )2(-MD)0(. See ){/section-2.1.22 xl}(section 2.1.22){el}(.)]606 bull3
[(Fix missing errors on redefined labels; would cause convergence failure instead which is very slow)]588 bull1
[(and not easy to debug.)]576 bull2
[(Duplicate definitions of the same label )1(with the same value)0( is now explicitly permitted \(2.14 would)]558 bull1
[(allow it in some circumstances.\))]546 bull2
[(Add the option )2(--no-line)0( to ignore )2(%line)0( directives in the source. See ){/section-2.1.33 xl}(section 2.1.33){el}( and ){/section-4.11.1 xl}(section){el}]528 bull1
[{/section-4.11.1 xl}(4.11.1){el}(.)]516 bull2
[{/section-C.1.10 xa}(Version 2.14)](C.1.10)495.6 subh3
[(Changed )2(-I)0( option semantics by adding a trailing path separator unconditionally.)]477.6 bull3
[(Fixed null dereference in corrupted invalid single line macros.)]459.6 bull3
[(Fixed division by zero which may happen if source code is malformed.)]441.6 bull3
[(Fixed out of bound access in processing of malformed segment override.)]423.6 bull3
[(Fixed out of bound access in certain )2(EQU)0( parsing.)]405.6 bull3
[(Fixed buffer underflow in float parsing.)]387.6 bull3
[(Added )2(SGX)0( \(Intel Software Guard Extensions\) instructions.)]369.6 bull3
[(Added )2(+n)0( syntax for multiple contiguous registers.)]351.6 bull3
[(Fixed )2(subsections_via_symbols)0( for )2(macho)0( object format.)]333.6 bull3
[(Added the )2(--gprefix)0(, )2(--gpostfix)0(, )2(--lprefix)0(, and )2(--lpostfix)0( command line options, to allow)]315.6 bull1
[(command line base symbol renaming. See ){/section-2.1.28 xl}(section 2.1.28){el}(.)]303.6 bull2
[(Allow label renaming to be specified by )2(%pragma)0( in addition to from the command line. See ){/section-7.10 xl}(section){el}]285.6 bull1
[{/section-7.10 xl}(7.10){el}(.)]273.6 bull2
[(Supported generic )2(%pragma)0( namespaces, )2(output)0( and )2(debug)0(. See ){/section-4.10 xl}(section 4.10){el}(.)]255.6 bull3
[(Added the )2(--pragma)0( command line option to inject a )2(%pragma)0( directive. See ){/section-2.1.29 xl}(section 2.1.29){el}(.)]237.6 bull3
[(Added the )2(--before)0( command line option to accept preprocess statement before input. See ){/section-2.1.30 xl}(section){el}]219.6 bull1
[{/section-2.1.30 xl}(2.1.30){el}(.)]207.6 bull2
[(Added )2(AVX512)0( )2(VBMI2)0( \(Additional Bit Manipulation\), )2(VNNI)0( \(Vector Neural Network\), )2(BITALG)0( \(Bit)]189.6 bull1
[(Algorithm\), and )2(GFNI)0( \(Galois Field New Instruction\) instructions.)]177.6 bull2
[(Added the )2(STATIC)0( directive for local symbols that should be renamed using global-symbol rules. See)]159.6 bull1
[{/section-7.9 xl}(section 7.9){el}(.)]147.6 bull2
[(Allow a symbol to be defined as )2(EXTERN)0( and then later overridden as )2(GLOBAL)0( or )2(COMMON)0(. Furthermore,)]129.6 bull1
[(a symbol declared )2(EXTERN)0( and then defined will be treated as )2(GLOBAL)0(. See ){/section-7.5 xl}(section 7.5){el}(.)]117.6 bull2
[(The )2(GLOBAL)0( directive no longer is required to precede the definition of the symbol.)]99.6 bull3
[(Support )2(private_extern)0( as )2(macho)0( specific extension to the )2(GLOBAL)0( directive. See ){/section-8.8.5 xl}(section 8.8.5){el}(.)]81.6 bull3
(238)pageeven
restore showpage
%%Page: 239 239
%%BeginPageSetup
save
%%EndPageSetup
/239 pa
[(Updated )2(UD0)0( encoding to match with the specification)]708 bull3
[(Added the )2(--limit-X)0( command line option to set execution limits. See ){/section-2.1.31 xl}(section 2.1.31){el}(.)]690 bull3
[(Updated the )2(Codeview)0( version number to be aligned with )2(MASM)0(.)]672 bull3
[(Added the )2(--keep-all)0( command line option to preserve output files. See ){/section-2.1.32 xl}(section 2.1.32){el}(.)]654 bull3
[(Added the )2(--include)0( command line option, an alias to )2(-P)0( \(){/section-2.1.19 xl}(section 2.1.19){el}(\).)]636 bull3
[(Added the )2(--help)0( command line option as an alias to )2(-h)0( \(){/section-3.1 xl}(section 3.1){el}(\).)]618 bull3
[(Added )2(-W)0(, )2(-D)0(, and )2(-Q)0( suffix aliases for )2(RET)0( instructions so the operand sizes of these instructions can)]600 bull1
[(be encoded without using )2(o16)0(, )2(o32)0( or )2(o64)0(.)]588 bull2
[{/section-C.1.11 xa}(Version 2.13.03)](C.1.11)567.6 subh3
[(Added AVX and AVX512 )2(VAES*)0( and )2(VPCLMULQDQ)0( instructions.)]549.6 bull3
[(Fixed missing dwarf record in x32 ELF output format.)]531.6 bull3
[{/section-C.1.12 xa}(Version 2.13.02)](C.1.12)511.2 subh3
[(Fix false positive in testing of numeric overflows.)]493.2 bull3
[(Fix generation of )2(PEXTRW)0( instruction.)]475.2 bull3
[(Fix )2(smartalign)0( package which could trigger an error during optimization if the alignment code)]457.2 bull1
[(expanded too much due to optimization of the previous code.)]445.2 bull2
[(Fix a case where negative value in )2(TIMES)0( directive causes panic instead of an error.)]427.2 bull3
[(Always finalize )2(.debug_abbrev)0( section with a null in )2(dwarf)0( output format.)]409.2 bull3
[(Support )2(debug)0( flag in section attributes for )2(macho)0( output format. See ){/section-8.8.1 xl}(section 8.8.1){el}(.)]391.2 bull3
[(Support up to 16 characters in section names for )2(macho)0( output format.)]373.2 bull3
[(Fix missing update of global )2(BITS)0( setting if )2(SECTION)0( directive specified a bit size using output)]355.2 bull1
[(format-specific extensions \(e.g. )2(USE32)0( for the )2(obj)0( output format.\))]343.2 bull2
[(Fix the incorrect generation of VEX-encoded instruction when static mode decorators are specified)]325.2 bull1
[(on scalar instructions, losing the decorators as they require EVEX encoding.)]313.2 bull2
[(Option )2(-MW)0( to quote dependency outputs according to Watcom Make conventions instead of POSIX)]295.2 bull1
[(Make conventions. See ){/section-2.1.12 xl}(section 2.1.12){el}(.)]283.2 bull2
[(The )2(obj)0( output format now contains embedded dependency file information, unless disabled with)]265.2 bull1
[2(%pragma obj nodepend)0(. See ){/section-8.4.9 xl}(section 8.4.9){el}(.)]253.2 bull2
[(Fix generation of dependency lists.)]235.2 bull3
[(Fix a number of null pointer reference and memory allocation errors.)]217.2 bull3
[(Always generate symbol-relative relocations for the )2(macho64)0( output format; at least some versions of)]199.2 bull1
[(the XCode/LLVM linker fails for section-relative relocations.)]187.2 bull2
[{/section-C.1.13 xa}(Version 2.13.01)](C.1.13)166.8 subh3
[(Fix incorrect output for some types of )2(FAR)0( or )2(SEG)0( references in the )2(obj)0( output format, and possibly)]148.8 bull1
[(other 16-bit output formats.)]136.8 bull2
[(Fix the address in the list file for an instruction containing a )2(TIMES)0( directive.)]118.8 bull3
[(Fix error with )2(TIMES)0( used together with an instruction which can vary in size, e.g. )2(JMP)0(.)]100.8 bull3
[(Fix breakage on some uses of the )2(DZ)0( pseudo-op.)]82.8000000000001 bull3
(239)pageodd
restore showpage
%%Page: 240 240
%%BeginPageSetup
save
%%EndPageSetup
/240 pa
[{/section-C.1.14 xa}(Version 2.13)](C.1.14)705.6 subh3
[(Support the official forms of the )2(UD0)0( and )2(UD1)0( instructions.)]687.6 bull3
[(Allow self-segment-relative expressions in immediates and displacements, even when combined)]669.6 bull1
[(with an external or otherwise out-of-segment special symbol, e.g.:)]657.6 bull2
[2(     extern foo )]642 code1
[2(     mov eax,[foo - $ + ebx]               ; Now legal)]632.4 code2
[(Handle a 64-bit origin in NDISASM.)]614.4 bull3
[(NASM can now generate sparse output files for relevant output formats, if the underlying operating)]596.4 bull1
[(system supports them.)]584.4 bull2
[(The )2(macho)0( object format now supports the )2(subsections_via_symbols)0( and )2(no_dead_strip)0( directives,)]566.4 bull1
[(see ){/section-8.8.4 xl}(section 8.8.4){el}(.)]554.4 bull2
[(The )2(macho)0( object format now supports the )2(no_dead_strip)0(, )2(live_support)0( and )2(strip_static_syms)]536.4 bull1
[(section flags, see ){/section-8.8.1 xl}(section 8.8.1){el}(.)]524.4 bull2
[(The )2(macho)0( object format now supports the )2(dwarf)0( debugging format, as required by newer toolchains.)]506.4 bull3
[(All warnings can now be suppressed if desired; warnings not otherwise part of any warning class are)]488.4 bull1
[(now considered its own warning class called )2(other)0( \(e.g. )2(-w-other)0(\). Furthermore, warning-as-error)]476.4 bull0
[(can now be controlled on a per warning class basis, using the syntax )2(-w+error=)1(warning-class)0( and its)]464.4 bull0
[(equivalent for all other warning control options. See ){/section-2.1.26 xl}(section 2.1.26){el}( for the command-line options)]452.4 bull0
[(and warning classes and ){/section-7.13 xl}(section 7.13){el}( for the )2([WARNING])0( directive.)]440.4 bull2
[(Fix a number of bugs related to AVX-512 decorators.)]422.4 bull3
[(Significant improvements to building NASM with Microsoft Visual Studio via )2(Mkfiles/msvc.mak)0(. It is)]404.4 bull1
[(now possible to build the full Windows installer binary as long as the necessary prerequisites are)]392.4 bull0
[(installed; see )2(Mkfiles/README)]380.4 bull2
[(To build NASM with custom modifications \(table changes\) or from the git tree now requires Perl 5.8)]362.4 bull1
[(at the very minimum, quite possibly a higher version \(Perl 5.24.1 tested.\) There is no requirement to)]350.4 bull0
[(have Perl on your system at all if all you want to do is build unmodified NASM from source archives.)]338.4 bull2
[(Fix the )2({z})0( decorator on AVX-512 )2(VMOVDQ*)0( instructions.)]320.4 bull3
[(Add new warnings for certain dangerous constructs which never ought to have been allowed. In)]302.4 bull1
[(particular, the )2(RESB)0( family of instructions should have been taking a critical expression all along.)]290.4 bull2
[(Fix the EVEX \(AVX-512\) versions of the )2(VPBROADCAST)0(, )2(VPEXTR)0(, and )2(VPINSR)0( instructions.)]272.4 bull3
[(Support contracted forms of additional instructions. As a general rule, if an instruction has a)]254.4 bull1
[(non-destructive source immediately after a destination register that isn't used as an input, NASM)]242.4 bull0
[(supports omitting that source register, using the destination register as that value. This among other)]230.4 bull0
[(things makes it easier to convert SSE code to the equivalent AVX code:)]218.4 bull2
[2(     addps xmm1,xmm0                       ; SSE instruction )]202.8 code1
[2(     vaddps ymm1,ymm1,ymm0                 ; AVX official long form )]193.2 code0
[2(     vaddps ymm1,ymm0                      ; AVX contracted form)]183.6 code2
[(Fix Codeview malformed compiler version record.)]165.6 bull3
[(Add the )2(CLWB)0( and )2(PCOMMIT)0( instructions. Note that the )2(PCOMMIT)0( instruction has been deprecated and)]147.6 bull1
[(will never be included in a shipping product; it is included for completeness only.)]135.6 bull2
[(Add the )2(%pragma)0( preprocessor directive for soft-error directives.)]117.6 bull3
[(Add the )2(RDPID)0( instruction.)]99.5999999999999 bull3
(240)pageeven
restore showpage
%%Page: 241 241
%%BeginPageSetup
save
%%EndPageSetup
/241 pa
[{/section-C.1.15 xa}(Version 2.12.02)](C.1.15)705.6 subh3
[(Fix preprocessor errors, especially )2(%error)0( and )2(%warning)0(, inside )2(%if)0( statements.)]687.6 bull3
[(Fix relative relocations in 32-bit Mach-O.)]669.6 bull3
[(More Codeview debug format fixes.)]651.6 bull3
[(If the MASM )2(PTR)0( keyword is encountered, issue a warning. This is much more likely to indicate a)]633.6 bull1
[(MASM-ism encountered in NASM than it is a valid label. This warning can be suppressed with )2(-w-ptr)0(,)]621.6 bull0
[(the )2([warning])0( directive \(see ){/section-2.1.26 xl}(section 2.1.26){el}(\) or by the macro definition )2(%idefine ptr $%?)0( \(see)]609.6 bull0
[{/section-4.1.5 xl}(section 4.1.5){el}(\).)]597.6 bull2
[(When an error or a warning comes from the expansion of a multi-line macro, display the file and line)]579.6 bull1
[(numbers for the expanded macros. Macros defined with )2(.nolist)0( do not get displayed.)]567.6 bull2
[(Add macros )2(ilog2fw\(\))0( and )2(ilog2cw\(\))0( to the )2(ifunc)0( macro package. See ){/section-6.4.1 xl}(section 6.4.1){el}(.)]549.6 bull3
[{/section-C.1.16 xa}(Version 2.12.01)](C.1.16)529.2 subh3
[(Portability fixes for some platforms.)]511.2 bull3
[(Fix error when not specifying a list file.)]493.2 bull3
[(Correct the handling of macro-local labels in the Codeview debugging format.)]475.2 bull3
[(Add )2(CLZERO)0(, )2(MONITORX)0( and )2(MWAITX)0( instructions.)]457.2 bull3
[{/section-C.1.17 xa}(Version 2.12)](C.1.17)436.8 subh3
[(Major fixes to the )2(macho)0( backend \(){/section-8.8 xl}(section 8.8){el}(\); earlier versions would produce invalid symbols and)]418.8 bull1
[(relocations on a regular basis.)]406.8 bull2
[(Support for thread-local storage in Mach-O.)]388.8 bull3
[(Support for arbitrary sections in Mach-O.)]370.8 bull3
[(Fix wrong negative size treated as a big positive value passed into backend causing NASM to crash.)]352.8 bull3
[(Fix handling of zero-extending unsigned relocations, we have been printing wrong message and)]334.8 bull1
[(forgot to assign segment with predefined value before passing it into output format.)]322.8 bull2
[(Fix potential write of oversized \(with size greater than allowed in output format\) relative relocations.)]304.8 bull3
[(Portability fixes for building NASM with the LLVM compiler.)]286.8 bull3
[(Add support of Codeview version 8 \()2(cv8)0(\) debug format for )2(win32)0( and )2(win64)0( formats in the )2(COFF)]268.8 bull1
[(backend, see ){/section-8.5.3 xl}(section 8.5.3){el}(.)]256.8 bull2
[(Allow 64-bit outputs in 16/32-bit only backends. Unsigned 64-bit relocations are zero-extended from)]238.8 bull1
[(32-bits with a warning \(suppressible via )2(-w-zext-reloc)0(\); signed 64-bit relocations are an error.)]226.8 bull2
[(Line numbers in list files now correspond to the lines in the source files, instead of simply being)]208.8 bull1
[(sequential.)]196.8 bull2
[(There is now an official 64-bit \(x64 a.k.a. x86-64\) build for Windows.)]178.8 bull3
[{/section-C.1.18 xa}(Version 2.11.09)](C.1.18)158.4 subh3
[(Fix potential stack overwrite in )2(macho32)0( backend.)]140.4 bull3
[(Fix relocation records in )2(macho64)0( backend.)]122.4 bull3
[(Fix symbol lookup computation in )2(macho64)0( backend.)]104.4 bull3
[(Adjust )2(.symtab)0( and )2(.rela.text)0( sections alignments to 8 bytes in )2(elf64)0( backed.)]86.4 bull3
(241)pageodd
restore showpage
%%Page: 242 242
%%BeginPageSetup
save
%%EndPageSetup
/242 pa
[(Fix section length computation in )2(bin)0( backend which leaded in incorrect relocation records.)]708 bull3
[{/section-C.1.19 xa}(Version 2.11.08)](C.1.19)687.6 subh3
[(Fix section length computation in )2(bin)0( backend which leaded in incorrect relocation records.)]669.6 bull3
[(Add a warning for numeric preprocessor definitions passed via command line which might have)]651.6 bull1
[(unexpected results otherwise.)]639.6 bull2
[(Add ability to specify a module name record in )2(rdoff)0( linker with )2(-mn)0( option.)]621.6 bull3
[(Increase label length capacity up to 256 bytes in )2(rdoff)0( backend for FreePascal sake, which tends to)]603.6 bull1
[(generate very long labels for procedures.)]591.6 bull2
[(Fix segmentation failure when rip addressing is used in )2(macho64)0( backend.)]573.6 bull3
[(Fix access on out of memory when handling strings with a single grave. We have sixed similar)]555.6 bull1
[(problem in previous release but not all cases were covered.)]543.6 bull2
[(Fix NULL dereference in disassembled on )2(BND)0( instruction.)]525.6 bull3
[{/section-C.1.20 xa}(Version 2.11.07)](C.1.20)505.2 subh3
[(Fix 256 bit )2(VMOVNTPS)0( instruction.)]487.2 bull3
[(Fix )2(-MD)0( option handling, which was rather broken in previous release changing command line api.)]469.2 bull3
[(Fix access to unitialized space when handling strings with a single grave.)]451.2 bull3
[(Fix nil dereference in handling memory reference parsing.)]433.2 bull3
[{/section-C.1.21 xa}(Version 2.11.06)](C.1.21)412.8 subh3
[(Update AVX512 instructions based on the Extension Reference \(319433-021 Sept 2014\).)]394.8 bull3
[(Fix the behavior of )2(-MF)0( and )2(-MD)0( options \(Bugzilla 3392280\))]376.8 bull3
[(Updated Win32 Makefile to fix issue with build)]358.8 bull3
[{/section-C.1.22 xa}(Version 2.11.05)](C.1.22)338.4 subh3
[(Add )2(--v)0( as an alias for )2(-v)0( \(see ){/section-2.1.27 xl}(section 2.1.27){el}(\), for command-line compatibility with Yasm.)]320.4 bull3
[(Fix a bug introduced in 2.11.03 whereby certain instructions would contain multiple REX prefixes,)]302.4 bull1
[(and thus be corrupt.)]290.4 bull2
[{/section-C.1.23 xa}(Version 2.11.04)](C.1.23)270 subh3
[(Removed an invalid error checking code. Sometimes a memref only with a displacement can also set)]252 bull1
[(an evex flag. For example:)]240 bull2
[2(      vmovdqu32 [0xabcd]{k1}, zmm0)]224.4 code3
[(Fixed a bug in disassembler that EVEX.L'L vector length was not matched when EVEX.b was set)]206.4 bull1
[(because it was simply considered as EVEC.RC. Separated EVEX.L'L case from EVEX.RC which is)]194.4 bull0
[(ignored in matching.)]182.4 bull2
[{/section-C.1.24 xa}(Version 2.11.03)](C.1.24)162 subh3
[(Fix a bug there REX prefixes were missing on instructions inside a )2(TIMES)0( statement.)]144 bull3
[{/section-C.1.25 xa}(Version 2.11.02)](C.1.25)123.6 subh3
[(Add the )2(XSAVEC)0(, )2(XSAVES)0( and )2(XRSTORS)0( family instructions.)]105.6 bull3
[(Add the )2(CLFLUSHOPT)0( instruction.)]87.6000000000001 bull3
(242)pageeven
restore showpage
%%Page: 243 243
%%BeginPageSetup
save
%%EndPageSetup
/243 pa
[{/section-C.1.26 xa}(Version 2.11.01)](C.1.26)705.6 subh3
[(Allow instructions which implicitly uses )2(XMM0)0( \()2(VBLENDVPD)0(, )2(VBLENDVPS)0(, )2(PBLENDVB)0( and )2(SHA256RNDS2)0(\) to)]687.6 bull1
[(be specified without an explicit )2(xmm0)0( on the assembly line. In other words, the following two lines)]675.6 bull0
[(produce the same output:)]663.6 bull2
[2(     vblendvpd xmm2,xmm1,xmm0      ; Last operand is fixed xmm0 )]648 code1
[2(     vblendvpd xmm2,xmm1           ; Implicit xmm0 omitted)]638.4 code2
[(In the ELF backends, don't crash the assembler if )2(section align)0( is specified without a value.)]620.4 bull3
[{/section-C.1.27 xa}(Version 2.11)](C.1.27)600 subh3
[(Add support for the Intel AVX-512 instruction set:)]582 bull3
[(16 new, 512-bit SIMD registers. Total 32 )2(\(ZMM0 ~ ZMM31\))]564 bull3
[(8 new opmask registers )2(\(K0 ~ K7\))0(. One of 7 registers )2(\(K1 ~ K7\))0( can be used as an opmask for)]546 bull1
[(conditional execution.)]534 bull2
[(A new EVEX encoding prefix. EVEX is based on VEX and provides more capabilities: opmasks,)]516 bull1
[(broadcasting, embedded rounding and compressed displacements.)]504 bull2
[2( - opmask )]488.4 code1
[2(     VDIVPD zmm0{k1}{z}, zmm1, zmm3  ; conditional vector operation )]478.8 code0
[2(                                     ; using opmask k1. )]469.2 code0
[2(                                     ; {z} is for zero-masking )]459.6 code0
[2( - broadcasting )]450 code0
[2(     VDIVPS zmm4, zmm5, [rbx]{1to16} ; load single-precision float and )]440.4 code0
[2(                                     ; replicate it 16 times. 32 * 16 = 512 )]430.8 code0
[2( - embedded rounding )]421.2 code0
[2(     VCVTSI2SD xmm6, xmm7, {rz-sae}, rax ; round toward zero. note that it )]411.6 code0
[2(                                      ; is used as if a separate operand. )]402 code0
[2(                                      ; it comes after the last SIMD operand)]392.4 code2
[(Add support for )2(ZWORD)0( \(512 bits\), )2(DZ)0( and )2(RESZ)0(.)]374.4 bull3
[(Add support for the MPX and SHA instruction sets.)]356.4 bull3
[(Better handling of section redefinition.)]338.4 bull3
[(Generate manpages when running )2('make dist')0(.)]320.4 bull3
[(Handle all token chains in mmacro params range.)]302.4 bull3
[(Support split [base,index] effective address:)]284.4 bull3
[2(     mov eax,[eax+8,ecx*4]   ; eax=base, ecx=index, 4=scale, 8=disp)]268.8 code3
[(This is expected to be most useful for the MPX instructions.)]250.8 norm3
[(Support )2(BND)0( prefix for branch instructions \(for MPX\).)]232.8 bull3
[(The )2(DEFAULT)0( directive can now take )2(BND)0( and )2(NOBND)0( options to indicate whether all relevant branches)]214.8 bull1
[(should be getting )2(BND)0( prefixes. This is expected to be the normal for use in MPX code.)]202.8 bull2
[(Add )2({evex)0(}, )2({vex3)0(} and )2({vex2)0(} instruction prefixes to have NASM encode the corresponding)]184.8 bull1
[(instruction, if possible, with an EVEX, 3-byte VEX, or 2-byte VEX prefix, respectively.)]172.8 bull2
[(Support for section names longer than 8 bytes in Win32/Win64 COFF.)]154.8 bull3
[(The )2(NOSPLIT)0( directive by itself no longer forces a single register to become an index register, unless it)]136.8 bull1
[(has an explicit multiplier.)]124.8 bull2
[2(     mov eax,[nosplit eax]       ; eax as base register )]109.2 code1
[2(     mov eax,[nosplit eax*1]     ; eax as index register)]99.5999999999998 code2
(243)pageodd
restore showpage
%%Page: 244 244
%%BeginPageSetup
save
%%EndPageSetup
/244 pa
[{/section-C.1.28 xa}(Version 2.10.09)](C.1.28)705.6 subh3
[(Pregenerate man pages.)]687.6 bull3
[{/section-C.1.29 xa}(Version 2.10.08)](C.1.29)667.2 subh3
[(Fix )2(VMOVNTDQA)0(, )2(MOVNTDQA)0( and )2(MOVLPD)0( instructions.)]649.2 bull3
[(Fix collision for )2(VGATHERQPS)0(, )2(VPGATHERQD)0( instructions.)]631.2 bull3
[(Fix )2(VPMOVSXBQ)0(, )2(VGATHERQPD)0(, )2(VSPLLW)0( instructions.)]613.2 bull3
[(Add a bunch of AMD TBM instructions.)]595.2 bull3
[(Fix potential stack overwrite in numbers conversion.)]577.2 bull3
[(Allow byte size in )2(PREFETCHTx)0( instructions.)]559.2 bull3
[(Make manual pages up to date.)]541.2 bull3
[(Make )2(F3)0( and )2(F2)0( SSE prefixes to override )2(66)0(.)]523.2 bull3
[(Support of AMD SVM instructions in 32 bit mode.)]505.2 bull3
[(Fix near offsets code generation for )2(JMP)0(, )2(CALL)0( instrictions in long mode.)]487.2 bull3
[(Fix preprocessor parse regression when id is expanding to a whitespace.)]469.2 bull3
[{/section-C.1.30 xa}(Version 2.10.07)](C.1.30)448.8 subh3
[(Fix line continuation parsing being broken in previous version.)]430.8 bull3
[{/section-C.1.31 xa}(Version 2.10.06)](C.1.31)410.4 subh3
[(Always quote the dependency source names when using the automatic dependency generation)]392.4 bull1
[(options.)]380.4 bull2
[(If no dependency target name is specified via the )2(-MT)0( or )2(-MQ)0( options, quote the default output name.)]362.4 bull3
[(Fix assembly of shift operations in )2(CPU 8086)0( mode.)]344.4 bull3
[(Fix incorrect generation of explicit immediate byte for shift by 1 under certain circumstances.)]326.4 bull3
[(Fix assembly of the )2(VPCMPGTQ)0( instruction.)]308.4 bull3
[(Fix RIP-relative relocations in the )2(macho64)0( backend.)]290.4 bull3
[{/section-C.1.32 xa}(Version 2.10.05)](C.1.32)270 subh3
[(Add the )2(CLAC)0( and )2(STAC)0( instructions.)]252 bull3
[{/section-C.1.33 xa}(Version 2.10.04)](C.1.33)231.6 subh3
[(Add back the inadvertently deleted 256-bit version of the )2(VORPD)0( instruction.)]213.6 bull3
[(Correct disassembly of instructions starting with byte )2(82)0( hex.)]195.6 bull3
[(Fix corner cases in token pasting, for example:)]177.6 bull3
[2(   %define N 1e%++%+ 5 )]162 code1
[2(           dd N, 1e+5)]152.4 code2
[{/section-C.1.34 xa}(Version 2.10.03)](C.1.34)132 subh3
[(Correct the assembly of the instruction:)]114 bull3
[2(XRELEASE MOV [absolute],AL)]98.4000000000001 code3
(244)pageeven
restore showpage
%%Page: 245 245
%%BeginPageSetup
save
%%EndPageSetup
/245 pa
[(Previous versions would incorrectly generate )2(F3 A2)0( for this instruction and issue a warning; correct)]708 indt1
[(behavior is to emit )2(F3 88 05)0(.)]696 indt2
[{/section-C.1.35 xa}(Version 2.10.02)](C.1.35)675.6 subh3
[(Add the )2(ifunc)0( macro package with integer functions, currently only integer logarithms. See ){/section-6.4 xl}(section){el}]657.6 bull1
[{/section-6.4 xl}(6.4){el}(.)]645.6 bull2
[(Add the )2(RDSEED)0(, )2(ADCX)0( and )2(ADOX)0( instructions.)]627.6 bull3
[{/section-C.1.36 xa}(Version 2.10.01)](C.1.36)607.2 subh3
[(Add missing VPMOVMSKB instruction with reg32, ymmreg operands.)]589.2 bull3
[{/section-C.1.37 xa}(Version 2.10)](C.1.37)568.8 subh3
[(When optimization is enabled, )2(mov r64,imm)0( now optimizes to the shortest form possible between:)]550.8 bull3
[2(     mov r32,imm32                   ;  5 bytes )]535.2 code1
[2(     mov r64,imm32                   ;  7 bytes )]525.6 code0
[2(     mov r64,imm64                   ; 10 bytes)]516 code2
[(To force a specific form, use the )2(STRICT)0( keyword, see ){/section-3.7 xl}(section 3.7){el}(.)]498 indt3
[(Add support for the Intel AVX2 instruction set.)]480 bull3
[(Add support for Bit Manipulation Instructions 1 and 2.)]462 bull3
[(Add support for Intel Transactional Synchronization Extensions \(TSX\).)]444 bull3
[(Add support for x32 ELF \(32-bit ELF with the CPU in 64-bit mode.\) See ){/section-8.9 xl}(section 8.9){el}(.)]426 bull3
[(Add support for bigendian UTF-16 and UTF-32. See ){/section-3.4.5 xl}(section 3.4.5){el}(.)]408 bull3
[{/section-C.1.38 xa}(Version 2.09.10)](C.1.38)387.6 subh3
[(Fix up NSIS script to protect uninstaller against registry keys absence or corruption. It brings in a few)]369.6 bull1
[(additional questions to a user during deinstallation procedure but still it is better than)]357.6 bull0
[(unpredictable file removal.)]345.6 bull2
[{/section-C.1.39 xa}(Version 2.09.09)](C.1.39)325.2 subh3
[(Fix initialization of section attributes of )2(bin)0( output format.)]307.2 bull3
[(Fix )2(mach64)0( output format bug that crashes NASM due to NULL symbols.)]289.2 bull3
[{/section-C.1.40 xa}(Version 2.09.08)](C.1.40)268.8 subh3
[(Fix )2(__OUTPUT_FORMAT__)0( assignment when output driver alias is used. For example when )2(-f elf)0( is)]250.8 bull1
[(used )2(__OUTPUT_FORMAT__)0( must be set to )2(elf)0(, if )2(-f elf32)0( is used )2(__OUTPUT_FORMAT__)0( must be)]238.8 bull0
[(assigned accordingly, i.e. to )2(elf32)0(. The rule applies to all output driver aliases. See ){/section-5.4 xl}(section 5.4){el}(.)]226.8 bull2
[{/section-C.1.41 xa}(Version 2.09.07)](C.1.41)206.4 subh3
[(Fix attempts to close same file several times when )2(-a)0( option is used.)]188.4 bull3
[(Fixes for VEXTRACTF128, VMASKMOVPS encoding.)]170.4 bull3
[{/section-C.1.42 xa}(Version 2.09.06)](C.1.42)150 subh3
[(Fix missed section attribute initialization in )2(bin)0( output target.)]132 bull3
[{/section-C.1.43 xa}(Version 2.09.05)](C.1.43)111.6 subh3
[(Fix arguments encoding for VPEXTRW instruction.)]93.6000000000001 bull3
[(Remove invalid form of VPEXTRW instruction.)]75.6000000000001 bull3
(245)pageodd
restore showpage
%%Page: 246 246
%%BeginPageSetup
save
%%EndPageSetup
/246 pa
[(Add )2(VLDDQU)0( as alias for )2(VLDQQU)0( to match specification.)]708 bull3
[{/section-C.1.44 xa}(Version 2.09.04)](C.1.44)687.6 subh3
[(Fix incorrect labels offset for VEX intructions.)]669.6 bull3
[(Eliminate bogus warning on implicit operand size override.)]651.6 bull3
[2(%if)0( term could not handle 64 bit numbers.)]633.6 bull3
[(The COFF backend was limiting relocations number to 16 bits even if in real there were a way more)]615.6 bull1
[(relocations.)]603.6 bull2
[{/section-C.1.45 xa}(Version 2.09.03)](C.1.45)583.2 subh3
[(Print )2(%macro)0( name inside )2(%rep)0( blocks on error.)]565.2 bull3
[(Fix preprocessor expansion behaviour. It happened sometime too early and sometime simply)]547.2 bull1
[(wrong. Move behaviour back to the origins \(down to NASM 2.05.01\).)]535.2 bull2
[(Fix unitialized data dereference on OMF output format.)]517.2 bull3
[(Issue warning on unterminated )2(%{)0( construct.)]499.2 bull3
[(Fix for documentation typo.)]481.2 bull3
[{/section-C.1.46 xa}(Version 2.09.02)](C.1.46)460.8 subh3
[(Fix reversed tokens when )2(%deftok)0( produces more than one output token.)]442.8 bull3
[(Fix segmentation fault on disassembling some VEX instructions.)]424.8 bull3
[(Missing )2(%endif)0( did not always cause error.)]406.8 bull3
[(Fix typo in documentation.)]388.8 bull3
[(Compound context local preprocessor single line macro identifiers were not expanded early enough)]370.8 bull1
[(and as result lead to unresolved symbols.)]358.8 bull2
[{/section-C.1.47 xa}(Version 2.09.01)](C.1.47)338.4 subh3
[(Fix NULL dereference on missed %deftok second parameter.)]320.4 bull3
[(Fix NULL dereference on invalid %substr parameters.)]302.4 bull3
[{/section-C.1.48 xa}(Version 2.09)](C.1.48)282 subh3
[(Fixed assignment the magnitude of )2(%rep)0( counter. It is limited to 62 bits now.)]264 bull3
[(Fixed NULL dereference if argument of )2(%strlen)0( resolves to whitespace. For example if nonexistent)]246 bull1
[(macro parameter is used.)]234 bull2
[2(%ifenv)0(, )2(%elifenv)0(, )2(%ifnenv)0(, and )2(%elifnenv)0( directives introduced. See ){/section-4.4.9 xl}(section 4.4.9){el}(.)]216 bull3
[(Fixed NULL dereference if environment variable is missed.)]198 bull3
[(Updates of new AVX v7 Intel instructions.)]180 bull3
[2(PUSH imm32)0( is now officially documented.)]162 bull3
[(Fix for encoding the LFS, LGS and LSS in 64-bit mode.)]144 bull3
[(Fixes for compatibility with OpenWatcom compiler and DOS 8.3 file format limitation.)]126 bull3
[(Macros parameters range expansion introduced. See ){/section-4.3.4 xl}(section 4.3.4){el}(.)]108 bull3
[(Backward compatibility on expanging of local sigle macros restored.)]90 bull3
[(8 bit relocations for )2(elf)0( and )2(bin)0( output formats are introduced.)]72 bull3
(246)pageeven
restore showpage
%%Page: 247 247
%%BeginPageSetup
save
%%EndPageSetup
/247 pa
[(Short intersegment jumps are permitted now.)]708 bull3
[(An alignment more than 64 bytes are allowed for )2(win32)0(, )2(win64)0( output formats.)]690 bull3
[2(SECTALIGN)0( directive introduced. See ){/section-5.10.2 xl}(section 5.10.2){el}(.)]672 bull3
[2(nojmp)0( option introduced in )2(smartalign)0( package. See ){/section-6.2 xl}(section 6.2){el}(.)]654 bull3
[(Short aliases )2(win)0(, )2(elf)0( and )2(macho)0( for output formats are introduced. Each stands for )2(win32)0(, )2(elf32)0( and)]636 bull1
[2(macho32)0( accordingly.)]624 bull2
[(Faster handling of missing directives implemented.)]606 bull3
[(Various small improvements in documentation.)]588 bull3
[(No hang anymore if unable to open malloc.log file.)]570 bull3
[(The environments without vsnprintf function are able to build nasm again.)]552 bull3
[(AMD LWP instructions updated.)]534 bull3
[(Tighten EA checks. We warn a user if there overflow in EA addressing.)]516 bull3
[(Make )2(-Ox)0( the default optimization level. For the legacy behavior, specify )2(-O0)0( explicitly. See ){/section-2.1.24 xl}(section){el}]498 bull1
[{/section-2.1.24 xl}(2.1.24){el}(.)]486 bull2
[(Environment variables read with )2(%!)0( or tested with )2(%ifenv)0( can now contain non-identifier characters)]468 bull1
[(if surrounded by quotes. See ){/section-4.11.2 xl}(section 4.11.2){el}(.)]456 bull2
[(Add a new standard macro package )2(%use fp)0( for floating-point convenience macros. See ){/section-6.3 xl}(section 6.3){el}(.)]438 bull3
[{/section-C.1.49 xa}(Version 2.08.02)](C.1.49)417.6 subh3
[(Fix crash under certain circumstances when using the )2(%+)0( operator.)]399.6 bull3
[{/section-C.1.50 xa}(Version 2.08.01)](C.1.50)379.2 subh3
[(Fix the )2(%use)0( statement, which was broken in 2.08.)]361.2 bull3
[{/section-C.1.51 xa}(Version 2.08)](C.1.51)340.8 subh3
[(A number of enhancements/fixes in macros area.)]322.8 bull3
[(Support for converting strings to tokens. See ){/section-4.1.10 xl}(section 4.1.10){el}(.)]304.8 bull3
[(Fuzzy operand size logic introduced.)]286.8 bull3
[(Fix COFF stack overrun on too long export identifiers.)]268.8 bull3
[(Fix Macho-O alignment bug.)]250.8 bull3
[(Fix crashes with \226fwin32 on file with many exports.)]232.8 bull3
[(Fix stack overrun for too long [DEBUG id].)]214.8 bull3
[(Fix incorrect sbyte usage in IMUL \(hit only if optimization flag passed\).)]196.8 bull3
[(Append ending token for )2(.stabs)0( records in the ELF output format.)]178.8 bull3
[(New NSIS script which uses ModernUI and MultiUser approach.)]160.8 bull3
[(Visual Studio 2008 NASM integration \(rules file\).)]142.8 bull3
[(Warn a user if a constant is too long \(and as result will be stripped\).)]124.8 bull3
[(The obsoleted pre-XOP AMD SSE5 instruction set which was never actualized was removed.)]106.8 bull3
[(Fix stack overrun on too long error file name passed from the command line.)]88.8000000000001 bull3
(247)pageodd
restore showpage
%%Page: 248 248
%%BeginPageSetup
save
%%EndPageSetup
/248 pa
[(Bind symbols to the .text section by default \(ie in case if SECTION directive was omitted\) in the ELF)]708 bull1
[(output format.)]696 bull2
[(Fix sync points array index wrapping.)]678 bull3
[(A few fixes for FMA4 and XOP instruction templates.)]660 bull3
[(Add AMD Lightweight Profiling \(LWP\) instructions.)]642 bull3
[(Fix the offset for )2(%arg)0( in 64-bit mode.)]624 bull3
[(An undefined local macro \()2(%$)0(\) no longer matches a global macro with the same name.)]606 bull3
[(Fix NULL dereference on too long local labels.)]588 bull3
[{/section-C.1.52 xa}(Version 2.07)](C.1.52)567.6 subh3
[(NASM is now under the 2-clause BSD license. See ){/section-1.1.1 xl}(section 1.1.1){el}(.)]549.6 bull3
[(Fix the section type for the )2(.strtab)0( section in the )2(elf64)0( output format.)]531.6 bull3
[(Fix the handling of )2(COMMON)0( directives in the )2(obj)0( output format.)]513.6 bull3
[(New )2(ith)0( and )2(srec)0( output formats; these are variants of the )2(bin)0( output format which output Intel hex)]495.6 bull1
[(and Motorola S-records, respectively. See ){/section-8.2 xl}(section 8.2){el}( and ){/section-8.3 xl}(section 8.3){el}(.)]483.6 bull2
[2(rdf2ihx)0( replaced with an enhanced )2(rdf2bin)0(, which can output binary, COM, Intel hex or Motorola)]465.6 bull1
[(S-records.)]453.6 bull2
[(The Windows installer now puts the NASM directory first in the )2(PATH)0( of the "NASM Shell".)]435.6 bull3
[(Revert the early expansion behavior of )2(%+)0( to pre-2.06 behavior: )2(%+)0( is only expanded late.)]417.6 bull3
[(Yet another Mach-O alignment fix.)]399.6 bull3
[(Don't delete the list file on errors. Also, include error and warning information in the list file.)]381.6 bull3
[(Support for 64-bit Mach-O output, see ){/section-8.8 xl}(section 8.8){el}(.)]363.6 bull3
[(Fix assert failure on certain operations that involve strings with high-bit bytes.)]345.6 bull3
[{/section-C.1.53 xa}(Version 2.06)](C.1.53)325.2 subh3
[(This release is dedicated to the memory of Charles A. Crayne, long time NASM developer as well as)]307.2 bull1
[(moderator of )2(comp.lang.asm.x86)0( and author of the book )1(Serious Assembler)0(. We miss you, Chuck.)]295.2 bull2
[(Support for indirect macro expansion \()2(%[...])0(\). See ){/section-4.1.3 xl}(section 4.1.3){el}(.)]277.2 bull3
[2(%pop)0( can now take an argument, see ){/section-4.7.1 xl}(section 4.7.1){el}(.)]259.2 bull3
[(The argument to )2(%use)0( is no longer macro-expanded. Use )2(%[...])0( if macro expansion is desired.)]241.2 bull3
[(Support for thread-local storage in ELF32 and ELF64. See ){/section-8.9.4 xl}(section 8.9.4){el}(.)]223.2 bull3
[(Fix crash on )2(%ifmacro)0( without an argument.)]205.2 bull3
[(Correct the arguments to the )2(POPCNT)0( instruction.)]187.2 bull3
[(Fix section alignment in the Mach-O format.)]169.2 bull3
[(Update AVX support to version 5 of the Intel specification.)]151.2 bull3
[(Fix the handling of accesses to context-local macros from higher levels in the context stack.)]133.2 bull3
[(Treat )2(WAIT)0( as a prefix rather than as an instruction, thereby allowing constructs like )2(O16 FSAVE)0( to)]115.2 bull1
[(work correctly.)]103.2 bull2
[(Support for structures with a non-zero base offset. See ){/section-5.9.1 xl}(section 5.9.1){el}(.)]85.2 bull3
(248)pageeven
restore showpage
%%Page: 249 249
%%BeginPageSetup
save
%%EndPageSetup
/249 pa
[(Correctly handle preprocessor token concatenation \(see ){/section-4.3.9 xl}(section 4.3.9){el}(\) involving floating-point)]708 bull1
[(numbers.)]696 bull2
[(The )2(PINSR)0( series of instructions have been corrected and rationalized.)]678 bull3
[(Removed AMD SSE5, replaced with the new XOP/FMA4/CVT16 \(rev 3.03\) spec.)]660 bull3
[(The ELF backends no longer automatically generate a )2(.comment)0( section.)]642 bull3
[(Add additional "well-known" ELF sections with default attributes. See ){/section-8.9.2 xl}(section 8.9.2){el}(.)]624 bull3
[{/section-C.1.54 xa}(Version 2.05.01)](C.1.54)603.6 subh3
[(Fix the )2(-w)0(/)2(-W)0( option parsing, which was broken in NASM 2.05.)]585.6 bull3
[{/section-C.1.55 xa}(Version 2.05)](C.1.55)565.2 subh3
[(Fix redundant REX.W prefix on )2(JMP reg64)0(.)]547.2 bull3
[(Make the behaviour of )2(-O0)0( match NASM 0.98 legacy behavior. See ){/section-2.1.24 xl}(section 2.1.24){el}(.)]529.2 bull3
[2(-w-user)0( can be used to suppress the output of )2(%warning)0( directives. See ){/section-2.1.26 xl}(section 2.1.26){el}(.)]511.2 bull3
[(Fix bug where )2(ALIGN)0( would issue a full alignment datum instead of zero bytes.)]493.2 bull3
[(Fix offsets in list files.)]475.2 bull3
[(Fix )2(%include)0( inside multi-line macros or loops.)]457.2 bull3
[(Fix error where NASM would generate a spurious warning on valid optimizations of immediate)]439.2 bull1
[(values.)]427.2 bull2
[(Fix arguments to a number of the )2(CVT)0( SSE instructions.)]409.2 bull3
[(Fix RIP-relative offsets when the instruction carries an immediate.)]391.2 bull3
[(Massive overhaul of the ELF64 backend for spec compliance.)]373.2 bull3
[(Fix the Geode )2(PFRCPV)0( and )2(PFRSQRTV)0( instruction.)]355.2 bull3
[(Fix the SSE 4.2 )2(CRC32)0( instruction.)]337.2 bull3
[{/section-C.1.56 xa}(Version 2.04)](C.1.56)316.8 subh3
[(Sanitize macro handing in the )2(%error)0( directive.)]298.8 bull3
[(New )2(%warning)0( directive to issue user-controlled warnings.)]280.8 bull3
[2(%error)0( directives are now deferred to the final assembly phase.)]262.8 bull3
[(New )2(%fatal)0( directive to immediately terminate assembly.)]244.8 bull3
[(New )2(%strcat)0( directive to join quoted strings together.)]226.8 bull3
[(New )2(%use)0( macro directive to support standard macro directives. See ){/section-4.6.4 xl}(section 4.6.4){el}(.)]208.8 bull3
[(Excess default parameters to )2(%macro)0( now issues a warning by default. See ){/section-4.3 xl}(section 4.3){el}(.)]190.8 bull3
[(Fix )2(%ifn)0( and )2(%elifn)0(.)]172.8 bull3
[(Fix nested )2(%else)0( clauses.)]154.8 bull3
[(Correct the handling of nested )2(%rep)0(s.)]136.8 bull3
[(New )2(%unmacro)0( directive to undeclare a multi-line macro. See ){/section-4.3.12 xl}(section 4.3.12){el}(.)]118.8 bull3
[(Builtin macro )2(__PASS__)0( which expands to the current assembly pass. See ){/section-5.8 xl}(section 5.8){el}(.)]100.8 bull3
[2(__utf16__)0( and )2(__utf32__)0( operators to generate UTF-16 and UTF-32 strings. See ){/section-3.4.5 xl}(section 3.4.5){el}(.)]82.8 bull3
(249)pageodd
restore showpage
%%Page: 250 250
%%BeginPageSetup
save
%%EndPageSetup
/250 pa
[(Fix bug in case-insensitive matching when compiled on platforms that don't use the )2(configure)]708 bull1
[(script. Of the official release binaries, that only affected the OS/2 binary.)]696 bull2
[(Support for x87 packed BCD constants. See ){/section-3.4.7 xl}(section 3.4.7){el}(.)]678 bull3
[(Correct the )2(LTR)0( and )2(SLDT)0( instructions in 64-bit mode.)]660 bull3
[(Fix unnecessary REX.W prefix on indirect jumps in 64-bit mode.)]642 bull3
[(Add AVX versions of the AES instructions \()2(VAES)0(...\).)]624 bull3
[(Fix the 256-bit FMA instructions.)]606 bull3
[(Add 256-bit AVX stores per the latest AVX spec.)]588 bull3
[(VIA XCRYPT instructions can now be written either with or without )2(REP)0(, apparently different versions)]570 bull1
[(of the VIA spec wrote them differently.)]558 bull2
[(Add missing 64-bit )2(MOVNTI)0( instruction.)]540 bull3
[(Fix the operand size of )2(VMREAD)0( and )2(VMWRITE)0(.)]522 bull3
[(Numerous bug fixes, especially to the AES, AVX and VTX instructions.)]504 bull3
[(The optimizer now always runs until it converges. It also runs even when disabled, but doesn't)]486 bull1
[(optimize. This allows most forward references to be resolved properly.)]474 bull2
[2(%push)0( no longer needs a context identifier; omitting the context identifier results in an anonymous)]456 bull1
[(context.)]444 bull2
[{/section-C.1.57 xa}(Version 2.03.01)](C.1.57)423.6 subh3
[(Fix buffer overflow in the listing module.)]405.6 bull3
[(Fix the handling of hexadecimal escape codes in `...` strings.)]387.6 bull3
[(The Postscript/PDF documentation has been reformatted.)]369.6 bull3
[(The )2(-F)0( option now implies )2(-g)0(.)]351.6 bull3
[{/section-C.1.58 xa}(Version 2.03)](C.1.58)331.2 subh3
[(Add support for Intel AVX, CLMUL and FMA instructions, including YMM registers.)]313.2 bull3
[2(dy)0(, )2(resy)0( and )2(yword)0( for 32-byte operands.)]295.2 bull3
[(Fix some SSE5 instructions.)]277.2 bull3
[(Intel )2(INVEPT)0(, )2(INVVPID)0( and )2(MOVBE)0( instructions.)]259.2 bull3
[(Fix checking for critical expressions when the optimizer is enabled.)]241.2 bull3
[(Support the DWARF debugging format for ELF targets.)]223.2 bull3
[(Fix optimizations of signed bytes.)]205.2 bull3
[(Fix operation on bigendian machines.)]187.2 bull3
[(Fix buffer overflow in the preprocessor.)]169.2 bull3
[2(SAFESEH)0( support for Win32, )2(IMAGEREL)0( for Win64 \(SEH\).)]151.2 bull3
[2(%?)0( and )2(%??)0( to refer to the name of a macro itself. In particular, )2(%idefine keyword $%?)0( can be used to)]133.2 bull1
[(make a keyword "disappear".)]121.2 bull2
[(New options for dependency generation: )2(-MD)0(, )2(-MF)0(, )2(-MP)0(, )2(-MT)0(, )2(-MQ)0(.)]103.2 bull3
[(New preprocessor directives )2(%pathsearch)0( and )2(%depend)0(; INCBIN reimplemented as a macro.)]85.2 bull3
(250)pageeven
restore showpage
%%Page: 251 251
%%BeginPageSetup
save
%%EndPageSetup
/251 pa
[2(%include)0( now resolves macros in a sane manner.)]708 bull3
[2(%substr)0( can now be used to get other than one-character substrings.)]690 bull3
[(New type of character/string constants, using backquotes \()2(`...`)0(\), which support C-style escape)]672 bull1
[(sequences.)]660 bull2
[2(%defstr)0( and )2(%idefstr)0( to stringize macro definitions before creation.)]642 bull3
[(Fix forward references used in )2(EQU)0( statements.)]624 bull3
[{/section-C.1.59 xa}(Version 2.02)](C.1.59)603.6 subh3
[(Additional fixes for MMX operands with explicit )2(qword)0(, as well as \(hopefully\) SSE operands with )2(oword)0(.)]585.6 bull3
[(Fix handling of truncated strings with )2(DO)0(.)]567.6 bull3
[(Fix segfaults due to memory overwrites when floating-point constants were used.)]549.6 bull3
[(Fix segfaults due to missing include files.)]531.6 bull3
[(Fix OpenWatcom Makefiles for DOS and OS/2.)]513.6 bull3
[(Add autogenerated instruction list back into the documentation.)]495.6 bull3
[(ELF: Fix segfault when generating stabs, and no symbols have been defined.)]477.6 bull3
[(ELF: Experimental support for DWARF debugging information.)]459.6 bull3
[(New compile date and time standard macros.)]441.6 bull3
[2(%ifnum)0( now returns true for negative numbers.)]423.6 bull3
[(New )2(%iftoken)0( test for a single token.)]405.6 bull3
[(New )2(%ifempty)0( test for empty expansion.)]387.6 bull3
[(Add support for the )2(XSAVE)0( instruction group.)]369.6 bull3
[(Makefile for Netware/gcc.)]351.6 bull3
[(Fix issue with some warnings getting emitted way too many times.)]333.6 bull3
[(Autogenerated instruction list added to the documentation.)]315.6 bull3
[{/section-C.1.60 xa}(Version 2.01)](C.1.60)295.2 subh3
[(Fix the handling of MMX registers with explicit )2(qword)0( tags on memory \(broken in 2.00 due to 64-bit)]277.2 bull1
[(changes.\))]265.2 bull2
[(Fix the PREFETCH instructions.)]247.2 bull3
[(Fix the documentation.)]229.2 bull3
[(Fix debugging info when using )2(-f elf)0( \(backwards compatibility alias for )2(-f elf32)0(\).)]211.2 bull3
[(Man pages for rdoff tools \(from the Debian project.\))]193.2 bull3
[(ELF: handle large numbers of sections.)]175.2 bull3
[(Fix corrupt output when the optimizer runs out of passes.)]157.2 bull3
[{/section-C.1.61 xa}(Version 2.00)](C.1.61)136.8 subh3
[(Added c99 data-type compliance.)]118.8 bull3
[(Added general x86-64 support.)]100.8 bull3
[(Added win64 \(x86-64 COFF\) output format.)]82.8000000000001 bull3
(251)pageodd
restore showpage
%%Page: 252 252
%%BeginPageSetup
save
%%EndPageSetup
/252 pa
[(Added )2(__BITS__)0( standard macro.)]708 bull3
[(Renamed the )2(elf)0( output format to )2(elf32)0( for clarity.)]690 bull3
[(Added )2(elf64)0( and )2(macho)0( \(MacOS X\) output formats.)]672 bull3
[(Added Numeric constants in )2(dq)0( directive.)]654 bull3
[(Added )2(oword)0(, )2(do)0( and )2(reso)0( pseudo operands.)]636 bull3
[(Allow underscores in numbers.)]618 bull3
[(Added 8-, 16- and 128-bit floating-point formats.)]600 bull3
[(Added binary, octal and hexadecimal floating-point.)]582 bull3
[(Correct the generation of floating-point constants.)]564 bull3
[(Added floating-point option control.)]546 bull3
[(Added Infinity and NaN floating point support.)]528 bull3
[(Added ELF Symbol Visibility support.)]510 bull3
[(Added setting OSABI value in ELF header directive.)]492 bull3
[(Added Generate Makefile Dependencies option.)]474 bull3
[(Added Unlimited Optimization Passes option.)]456 bull3
[(Added )2(%IFN)0( and )2(%ELIFN)0( support.)]438 bull3
[(Added Logical Negation Operator.)]420 bull3
[(Enhanced Stack Relative Preprocessor Directives.)]402 bull3
[(Enhanced ELF Debug Formats.)]384 bull3
[(Enhanced Send Errors to a File option.)]366 bull3
[(Added SSSE3, SSE4.1, SSE4.2, SSE5 support.)]348 bull3
[(Added a large number of additional instructions.)]330 bull3
[(Significant performance improvements.)]312 bull3
[2(-w+warning)0( and )2(-w-warning)0( can now be written as \226Wwarning and \226Wno-warning, respectively. See)]294 bull1
[{/section-2.1.26 xl}(section 2.1.26){el}(.)]282 bull2
[(Add )2(-w+error)0( to treat warnings as errors. See ){/section-2.1.26 xl}(section 2.1.26){el}(.)]264 bull3
[(Add )2(-w+all)0( and )2(-w-all)0( to enable or disable all suppressible warnings. See ){/section-2.1.26 xl}(section 2.1.26){el}(.)]246 bull3
[{/section-C.2 xa}(NASM 0.98 Series)](C.2)223.2 head3
[(The 0.98 series was the production versions of NASM from 1999 to 2007.)]205.2 norm3
[{/section-C.2.1 xa}(Version 0.98.39)](C.2.1)184.8 subh3
[(fix buffer overflow)]166.8 bull3
[(fix outas86's )2(.bss)0( handling)]148.8 bull3
[("make spotless" no longer deletes config.h.in.)]130.8 bull3
[2(%\(el\)if\(n\)idn)0( insensitivity to string quotes difference \(#809300\).)]112.8 bull3
[(\(nasm.c\))2(__OUTPUT_FORMAT__)0( changed to string value instead of symbol.)]94.8000000000001 bull3
(252)pageeven
restore showpage
%%Page: 253 253
%%BeginPageSetup
save
%%EndPageSetup
/253 pa
[{/section-C.2.2 xa}(Version 0.98.38)](C.2.2)705.6 subh3
[(Add Makefile for 16-bit DOS binaries under OpenWatcom, and modify )2(mkdep.pl)0( to be able to)]687.6 bull1
[(generate completely pathless dependencies, as required by OpenWatcom wmake \(it supports path)]675.6 bull0
[(searches, but not explicit paths.\))]663.6 bull2
[(Fix the )2(STR)0( instruction.)]645.6 bull3
[(Fix the ELF output format, which was broken under certain circumstances due to the addition of)]627.6 bull1
[(stabs support.)]615.6 bull2
[(Quick-fix Borland format debug-info for )2(-f obj)]597.6 bull3
[(Fix for )2(%rep)0( with no arguments \(#560568\))]579.6 bull3
[(Fix concatenation of preprocessor function call \(#794686\))]561.6 bull3
[(Fix long label causes coredump \(#677841\))]543.6 bull3
[(Use autoheader as well as autoconf to keep configure from generating ridiculously long command)]525.6 bull1
[(lines.)]513.6 bull2
[(Make sure that all of the formats which support debugging output actually will suppress debugging)]495.6 bull1
[(output when )2(-g)0( not specified.)]483.6 bull2
[{/section-C.2.3 xa}(Version 0.98.37)](C.2.3)463.2 subh3
[(Paths given in )2(-I)0( switch searched for )2(incbin)0(\226ed as well as )2(%include)0(\226ed files.)]445.2 bull3
[(Added stabs debugging for the ELF output format, patch from Martin Wawro.)]427.2 bull3
[(Fix )2(output/outbin.c)0( to allow origin > 80000000h.)]409.2 bull3
[(Make )2(-U)0( switch work.)]391.2 bull3
[(Fix the use of relative offsets with explicit prefixes, e.g. )2(a32 loop foo)0(.)]373.2 bull3
[(Remove )2(backslash\(\))0(.)]355.2 bull3
[(Fix the )2(SMSW)0( and )2(SLDT)0( instructions.)]337.2 bull3
[2(-O2)0( and )2(-O3)0( are no longer aliases for )2(-O10)0( and )2(-O15)0(. If you mean the latter, please say so! :\))]319.2 bull3
[{/section-C.2.4 xa}(Version 0.98.36)](C.2.4)298.8 subh3
[(Update rdoff \226 librarian/archiver \226 common rec \226 docs!)]280.8 bull3
[(Fix signed/unsigned problems.)]262.8 bull3
[(Fix )2(JMP FAR label)0( and )2(CALL FAR label)0(.)]244.8 bull3
[(Add new multisection support \226 map files \226 fix align bug)]226.8 bull3
[(Fix sysexit, movhps/movlps reg,reg bugs in insns.dat)]208.8 bull3
[2(Q)0( or )2(O)0( suffixes indicate octal)]190.8 bull3
[(Support Prescott new instructions \(PNI\).)]172.8 bull3
[(Cyrix )2(XSTORE)0( instruction.)]154.8 bull3
[{/section-C.2.5 xa}(Version 0.98.35)](C.2.5)134.4 subh3
[(Fix build failure on 16-bit DOS \(Makefile.bc3 workaround for compiler bug.\))]116.4 bull3
[(Fix dependencies and compiler warnings.)]98.4 bull3
[(Add "const" in a number of places.)]80.4 bull3
(253)pageodd
restore showpage
%%Page: 254 254
%%BeginPageSetup
save
%%EndPageSetup
/254 pa
[(Add \226X option to specify error reporting format \(use \226Xvc to integrate with Microsoft Visual Studio.\))]708 bull3
[(Minor changes for code legibility.)]690 bull3
[(Drop use of tmpnam\(\) in rdoff \(security fix.\))]672 bull3
[{/section-C.2.6 xa}(Version 0.98.34)](C.2.6)651.6 subh3
[(Correct additional address-size vs. operand-size confusions.)]633.6 bull3
[(Generate dependencies for all Makefiles automatically.)]615.6 bull3
[(Add support for unimplemented \(but theoretically available\) registers such as tr0 and cr5. Segment)]597.6 bull1
[(registers 6 and 7 are called segr6 and segr7 for the operations which they can be represented.)]585.6 bull2
[(Correct some disassembler bugs related to redundant address-size prefixes. Some work still remains)]567.6 bull1
[(in this area.)]555.6 bull2
[(Correctly generate an error for things like "SEG eax".)]537.6 bull3
[(Add the JMPE instruction, enabled by "CPU IA64".)]519.6 bull3
[(Correct compilation on newer gcc/glibc platforms.)]501.6 bull3
[(Issue an error on things like "jmp far eax".)]483.6 bull3
[{/section-C.2.7 xa}(Version 0.98.33)](C.2.7)463.2 subh3
[(New __NASM_PATCHLEVEL__ and __NASM_VERSION_ID__ standard macros to round out the)]445.2 bull1
[(version-query macros. version.pl now understands X.YYplWW or X.YY.ZZplWW as a version number,)]433.2 bull0
[(equivalent to X.YY.ZZ.WW \(or X.YY.0.WW, as appropriate\).)]421.2 bull2
[(New keyword "strict" to disable the optimization of specific operands.)]403.2 bull3
[(Fix the handing of size overrides with JMP instructions \(instructions such as "jmp dword foo".\))]385.2 bull3
[(Fix the handling of "ABSOLUTE label", where "label" points into a relocatable segment.)]367.2 bull3
[(Fix OBJ output format with lots of externs.)]349.2 bull3
[(More documentation updates.)]331.2 bull3
[(Add \226Ov option to get verbose information about optimizations.)]313.2 bull3
[(Undo a braindead change which broke )2(%elif)0( directives.)]295.2 bull3
[(Makefile updates.)]277.2 bull3
[{/section-C.2.8 xa}(Version 0.98.32)](C.2.8)256.8 subh3
[(Fix NASM crashing when )2(%macro)0( directives were left unterminated.)]238.8 bull3
[(Lots of documentation updates.)]220.8 bull3
[(Complete rewrite of the PostScript/PDF documentation generator.)]202.8 bull3
[(The MS Visual C++ Makefile was updated and corrected.)]184.8 bull3
[(Recognize .rodata as a standard section name in ELF.)]166.8 bull3
[(Fix some obsolete Perl4-isms in Perl scripts.)]148.8 bull3
[(Fix configure.in to work with autoconf 2.5x.)]130.8 bull3
[(Fix a couple of "make cleaner" misses.)]112.8 bull3
[(Make the normal "./configure && make" work with Cygwin.)]94.8 bull3
(254)pageeven
restore showpage
%%Page: 255 255
%%BeginPageSetup
save
%%EndPageSetup
/255 pa
[{/section-C.2.9 xa}(Version 0.98.31)](C.2.9)705.6 subh3
[(Correctly build in a separate object directory again.)]687.6 bull3
[(Derive all references to the version number from the version file.)]669.6 bull3
[(New standard macros __NASM_SUBMINOR__ and __NASM_VER__ macros.)]651.6 bull3
[(Lots of Makefile updates and bug fixes.)]633.6 bull3
[(New )2(%ifmacro)0( directive to test for multiline macros.)]615.6 bull3
[(Documentation updates.)]597.6 bull3
[(Fixes for 16-bit OBJ format output.)]579.6 bull3
[(Changed the NASM environment variable to NASMENV.)]561.6 bull3
[{/section-C.2.10 xa}(Version 0.98.30)](C.2.10)541.2 subh3
[(Changed doc files a lot: completely removed old READMExx and Wishlist files, incorporating all)]523.2 bull1
[(information in CHANGES and TODO.)]511.2 bull2
[(I waited a long time to rename zoutieee.c to \(original\) outieee.c)]493.2 bull3
[(moved all output modules to output/ subdirectory.)]475.2 bull3
[(Added 'make strip' target to strip debug info from nasm & ndisasm.)]457.2 bull3
[(Added INSTALL file with installation instructions.)]439.2 bull3
[(Added \226v option description to nasm man.)]421.2 bull3
[(Added dist makefile target to produce source distributions.)]403.2 bull3
[(16-bit support for ELF output format \(GNU extension, but useful.\))]385.2 bull3
[{/section-C.2.11 xa}(Version 0.98.28)](C.2.11)364.8 subh3
[(Fastcooked this for Debian's Woody release: Frank applied the INCBIN bug patch to 0.98.25alt and)]346.8 bull1
[(called it 0.98.28 to not confuse poor little apt-get.)]334.8 bull2
[{/section-C.2.12 xa}(Version 0.98.26)](C.2.12)314.4 subh3
[(Reorganised files even better from 0.98.25alt)]296.4 bull3
[{/section-C.2.13 xa}(Version 0.98.25alt)](C.2.13)276 subh3
[(Prettified the source tree. Moved files to more reasonable places.)]258 bull3
[(Added findleak.pl script to misc/ directory.)]240 bull3
[(Attempted to fix doc.)]222 bull3
[{/section-C.2.14 xa}(Version 0.98.25)](C.2.14)201.6 subh3
[(Line continuation character )2(\\)0(.)]183.6 bull3
[(Docs inadvertantly reverted \226 "dos packaging".)]165.6 bull3
[{/section-C.2.15 xa}(Version 0.98.24p1)](C.2.15)145.2 subh3
[(FIXME: Someone, document this please.)]127.2 bull3
[{/section-C.2.16 xa}(Version 0.98.24)](C.2.16)106.8 subh3
[(Documentation \226 Ndisasm doc added to Nasm.doc.)]88.8000000000001 bull3
(255)pageodd
restore showpage
%%Page: 256 256
%%BeginPageSetup
save
%%EndPageSetup
/256 pa
[{/section-C.2.17 xa}(Version 0.98.23)](C.2.17)705.6 subh3
[(Attempted to remove rdoff version1)]687.6 bull3
[(Lino Mastrodomenico's patches to preproc.c \(%$$ bug?\).)]669.6 bull3
[{/section-C.2.18 xa}(Version 0.98.22)](C.2.18)649.2 subh3
[(Update rdoff2 \226 attempt to remove v1.)]631.2 bull3
[{/section-C.2.19 xa}(Version 0.98.21)](C.2.19)610.8 subh3
[(Optimization fixes.)]592.8 bull3
[{/section-C.2.20 xa}(Version 0.98.20)](C.2.20)572.4 subh3
[(Optimization fixes.)]554.4 bull3
[{/section-C.2.21 xa}(Version 0.98.19)](C.2.21)534 subh3
[(H. J. Lu's patch back out.)]516 bull3
[{/section-C.2.22 xa}(Version 0.98.18)](C.2.22)495.6 subh3
[(Added ".rdata" to "-f win32".)]477.6 bull3
[{/section-C.2.23 xa}(Version 0.98.17)](C.2.23)457.2 subh3
[(H. J. Lu's "bogus elf" patch. \(Red Hat problem?\))]439.2 bull3
[{/section-C.2.24 xa}(Version 0.98.16)](C.2.24)418.8 subh3
[(Fix whitespace before "[section ..." bug.)]400.8 bull3
[{/section-C.2.25 xa}(Version 0.98.15)](C.2.25)380.4 subh3
[(Rdoff changes \(?\).)]362.4 bull3
[(Fix fixes to memory leaks.)]344.4 bull3
[{/section-C.2.26 xa}(Version 0.98.14)](C.2.26)324 subh3
[(Fix memory leaks.)]306 bull3
[{/section-C.2.27 xa}(Version 0.98.13)](C.2.27)285.6 subh3
[(There was no 0.98.13)]267.6 bull3
[{/section-C.2.28 xa}(Version 0.98.12)](C.2.28)247.2 subh3
[(Update optimization \(new function of "-O1"\))]229.2 bull3
[(Changes to test/bintest.asm \(?\).)]211.2 bull3
[{/section-C.2.29 xa}(Version 0.98.11)](C.2.29)190.8 subh3
[(Optimization changes.)]172.8 bull3
[(Ndisasm fixed.)]154.8 bull3
[{/section-C.2.30 xa}(Version 0.98.10)](C.2.30)134.4 subh3
[(There was no 0.98.10)]116.4 bull3
[{/section-C.2.31 xa}(Version 0.98.09)](C.2.31)96.0000000000001 subh3
[(Add multiple sections support to "-f bin".)]78.0000000000001 bull3
(256)pageeven
restore showpage
%%Page: 257 257
%%BeginPageSetup
save
%%EndPageSetup
/257 pa
[(Changed GLOBAL_TEMP_BASE in outelf.c from 6 to 15.)]708 bull3
[(Add "-v" as an alias to the "-r" switch.)]690 bull3
[(Remove "#ifdef" from Tasm compatibility options.)]672 bull3
[(Remove redundant size-overrides on "mov ds, ex", etc.)]654 bull3
[(Fixes to SSE2, other insns.dat \(?\).)]636 bull3
[(Enable uppercase "I" and "P" switches.)]618 bull3
[(Case insinsitive "seg" and "wrt".)]600 bull3
[(Update install.sh \(?\).)]582 bull3
[(Allocate tokens in blocks.)]564 bull3
[(Improve "invalid effective address" messages.)]546 bull3
[{/section-C.2.32 xa}(Version 0.98.08)](C.2.32)525.6 subh3
[(Add ")2(%strlen)0(" and ")2(%substr)0(" macro operators)]507.6 bull3
[(Fixed broken c16.mac.)]489.6 bull3
[(Unterminated string error reported.)]471.6 bull3
[(Fixed bugs as per 0.98bf)]453.6 bull3
[{/section-C.2.33 xa}(Version 0.98.09b with John Coffman patches released 28-Oct-2001)](C.2.33)433.2 subh3
[(Changes from 0.98.07 release to 98.09b as of 28-Oct-2001)]415.2 norm3
[(More closely compatible with 0.98 when \226O0 is implied or specified. Not strictly identical, since)]397.2 bull1
[(backward branches in range of short offsets are recognized, and signed byte values with no explicit)]385.2 bull0
[(size specification will be assembled as a single byte.)]373.2 bull2
[(More forgiving with the PUSH instruction. 0.98 requires a size to be specified always. 0.98.09b will)]355.2 bull1
[(imply the size from the current BITS setting \(16 or 32\).)]343.2 bull2
[(Changed definition of the optimization flag:)]325.2 bull3
[2(   -O0     strict two-pass assembly, JMP and Jcc are )]309.6 code1
[2(           handled more like 0.98, except that back- )]300 code0
[2(           ward JMPs are short, if possible. )]290.4 code0
[2()]280.8 code0
[2(   -O1     strict two-pass assembly, but forward )]271.2 code0
[2(           branches are assembled with code guaranteed )]261.6 code0
[2(           to reach; may produce larger code than )]252 code0
[2(           -O0, but will produce successful assembly )]242.4 code0
[2(           more often if branch offset sizes are not )]232.8 code0
[2(           specified. )]223.2 code0
[2()]213.6 code0
[2(   -O2     multi-pass optimization, minimize branch )]204 code0
[2(           offsets; also will minimize signed immed- )]194.4 code0
[2(           iate bytes, overriding size specification. )]184.8 code0
[2()]175.2 code0
[2(   -O3     like -O2, but more passes taken, if needed)]165.6 code2
[{/section-C.2.34 xa}(Version 0.98.07 released 01/28/01)](C.2.34)145.2 subh3
[(Added Stepane Denis' SSE2 instructions to a *working* version of the code \226 some earlier versions)]127.2 bull1
[(were based on broken code \226 sorry 'bout that. version "0.98.07")]115.2 bull2
[(Cosmetic modifications to nasm.c, nasm.h, AUTHORS, MODIFIED)]97.1999999999997 bull3
(257)pageodd
restore showpage
%%Page: 258 258
%%BeginPageSetup
save
%%EndPageSetup
/258 pa
[{/section-C.2.35 xa}(Version 0.98.06f released 01/18/01)](C.2.35)705.6 subh3
[(Add "metalbrain"s jecxz bug fix in insns.dat)]687.6 bull3
[(Alter nasmdoc.src to match \226 version "0.98.06f")]669.6 bull3
[{/section-C.2.36 xa}(Version 0.98.06e released 01/09/01)](C.2.36)649.2 subh3
[(Removed the "outforms.h" file \226 it appears to be someone's old backup of "outform.h". version)]631.2 bull1
[("0.98.06e")]619.2 bull2
[(fbk \226 finally added the fix for the "multiple %includes bug", known since 7/27/99 \226 reported)]601.2 bull1
[(originally \(?\) and sent to us by Austin Lunnen \226 he reports that John Fine had a fix within the day.)]589.2 bull0
[(Here it is...)]577.2 bull2
[(Nelson Rush resigns from the group. Big thanks to Nelson for his leadership and enthusiasm in)]559.2 bull1
[(getting these changes incorporated into Nasm!)]547.2 bull2
[(fbk \226 [list +], [list \226] directives \226 ineptly implemented, should be re-written or removed, perhaps.)]529.2 bull3
[(Brian Raiter / fbk \226 "elfso bug" fix \226 applied to aoutb format as well \226 testing might be desirable...)]511.2 bull3
[(James Seter \226 \226postfix, \226prefix command line switches.)]493.2 bull3
[(Yuri Zaporozhets \226 rdoff utility changes.)]475.2 bull3
[{/section-C.2.37 xa}(Version 0.98p1)](C.2.37)454.8 subh3
[(GAS-like palign \(Panos Minos\))]436.8 bull3
[(FIXME: Someone, fill this in with details)]418.8 bull3
[{/section-C.2.38 xa}(Version 0.98bf \(bug-fixed\))](C.2.38)398.4 subh3
[(Fixed \226 elf and aoutb bug \226 shared libraries \226 multiple "%include" bug in "-f obj" \226 jcxz, jecxz bug \226)]380.4 bull1
[(unrecognized option bug in ndisasm)]368.4 bull2
[{/section-C.2.39 xa}(Version 0.98.03 with John Coffman's changes released 27-Jul-2000)](C.2.39)348 subh3
[(Added signed byte optimizations for the 0x81/0x83 class of instructions: ADC, ADD, AND, CMP, OR,)]330 bull1
[(SBB, SUB, XOR: when used as 'ADD reg16,imm' or 'ADD reg32,imm.' Also optimization of signed byte)]318 bull0
[(form of 'PUSH imm' and 'IMUL reg,imm'/'IMUL reg,reg,imm.' No size specification is needed.)]306 bull2
[(Added multi-pass JMP and Jcc offset optimization. Offsets on forward references will preferentially)]288 bull1
[(use the short form, without the need to code a specific size \(short or near\) for the branch. Added)]276 bull0
[(instructions for 'Jcc label' to use the form 'Jnotcc $+3/JMP label', in cases where a short offset is out)]264 bull0
[(of bounds. If compiling for a 386 or higher CPU, then the 386 form of Jcc will be used instead.)]252 bull2
[(This feature is controlled by a new command-line switch: "O", \(upper case letter O\). "-O0" reverts)]234 indt1
[(the assembler to no extra optimization passes, "-O1" allows up to 5 extra passes, and "-O2"\(default\),)]222 indt0
[(allows up to 10 extra optimization passes.)]210 indt2
[(Added a new directive: 'cpu XXX', where XXX is any of: 8086, 186, 286, 386, 486, 586, pentium, 686,)]192 bull1
[(PPro, P2, P3 or Katmai. All are case insensitive. All instructions will be selected only if they apply to)]180 bull0
[(the selected cpu or lower. Corrected a couple of bugs in cpu-dependence in 'insns.dat'.)]168 bull2
[(Added to 'standard.mac', the "use16" and "use32" forms of the "bits 16/32" directive. This is nothing)]150 bull1
[(new, just conforms to a lot of other assemblers. \(minor\))]138 bull2
[(Changed label allocation from 320/32 \(10000 labels @ 200K+\) to 32/37 \(1000 labels\); makes running)]120 bull1
[(under DOS much easier. Since additional label space is allocated dynamically, this should have no)]108 bull0
[(effect on large programs with lots of labels. The 37 is a prime, believed to be better for hashing.)]96 bull0
[(\(minor\))]84 bull2
(258)pageeven
restore showpage
%%Page: 259 259
%%BeginPageSetup
save
%%EndPageSetup
/259 pa
[{/section-C.2.40 xa}(Version 0.98.03)](C.2.40)705.6 subh3
[("Integrated patchfile 0.98-0.98.01. I call this version 0.98.03 for historical reasons: 0.98.02 was trashed.")]687.6 norm1
[(\226\226John Coffman <johninsd@san.rr.com>, 27-Jul-2000)]675.6 norm2
[(Kendall Bennett's SciTech MGL changes)]657.6 bull3
[(Note that you must define "TASM_COMPAT" at compile-time to get the Tasm Ideal Mode)]639.6 bull1
[(compatibility.)]627.6 bull2
[(All changes can be compiled in and out using the TASM_COMPAT macros, and when compiled)]609.6 bull1
[(without TASM_COMPAT defined we get the exact same binary as the unmodified 0.98 sources.)]597.6 bull2
[(standard.mac, macros.c: Added macros to ignore TASM directives before first include)]579.6 bull3
[(nasm.h: Added extern declaration for tasm_compatible_mode)]561.6 bull3
[(nasm.c: Added global variable tasm_compatible_mode)]543.6 bull3
[(Added command line switch for TASM compatible mode \(-t\))]525.6 bull3
[(Changed version command line to reflect when compiled with TASM additions)]507.6 bull3
[(Added response file processing to allow all arguments on a single line \(response file is @resp rather)]489.6 bull1
[(than \226@resp for NASM format\).)]477.6 bull2
[(labels.c: Changes islocal\(\) macro to support TASM style @@local labels.)]459.6 bull3
[(Added islocalchar\(\) macro to support TASM style @@local labels.)]441.6 bull3
[(parser.c: Added support for TASM style memory references \(ie: mov [DWORD eax],10 rather than the)]423.6 bull1
[(NASM style mov DWORD [eax],10\).)]411.6 bull2
[(preproc.c: Added new directives, )2(%arg)0(, )2(%local)0(, )2(%stacksize)0( to directives table)]393.6 bull3
[(Added support for TASM style directives without a leading % symbol.)]375.6 bull3
[(Integrated a block of changes from Andrew Zabolotny <bit@eltech.ru>:)]357.6 bull3
[(A new keyword )2(%xdefine)0( and its case-insensitive counterpart )2(%ixdefine)0(. They work almost the)]339.6 bull1
[(same way as )2(%define)0( and )2(%idefine)0( but expand the definition immediately, not on the invocation.)]327.6 bull0
[(Something like a cross between )2(%define)0( and )2(%assign)0(. The "x" suffix stands for "eXpand", so)]315.6 bull0
[("xdefine" can be deciphered as "expand-and-define". Thus you can do things like this:)]303.6 bull2
[2(     %assign ofs     0 )]288 code1
[2()]278.4 code0
[2(     %macro  arg     1 )]268.8 code0
[2(             %xdefine %1 dword [esp+ofs] )]259.2 code0
[2(             %assign ofs ofs+4 )]249.6 code0
[2(     %endmacro)]240 code2
[(Changed the place where the expansion of %$name macros are expanded. Now they are converted)]222 bull1
[(into ..@ctxnum.name form when detokenizing, so there are no quirks as before when using %$name)]210 bull0
[(arguments to macros, in macros etc. For example:)]198 bull2
[2(     %macro  abc     1 )]182.4 code1
[2(             %define %1 hello )]172.8 code0
[2(     %endm )]163.2 code0
[2()]153.6 code0
[2(     abc     %$here )]144 code0
[2(     %$here)]134.4 code2
[(Now last line will be expanded into "hello" as expected. This also allows for lots of goodies, a good)]116.4 indt1
[(example are extended "proc" macros included in this archive.)]104.4 indt2
[(Added a check for "cstk" in smacro_defined\(\) before calling get_ctx\(\) \226 this allows for things like:)]86.3999999999997 bull3
(259)pageodd
restore showpage
%%Page: 260 260
%%BeginPageSetup
save
%%EndPageSetup
/260 pa
[2(     %ifdef %$abc )]710.4 code1
[2(     %endif)]700.8 code2
[(to work without warnings even in no context.)]682.8 indt3
[(Added a check for "cstk" in %if*ctx and %elif*ctx directives \226 this allows to use )2(%ifctx)0( without)]664.8 bull1
[(excessive warnings. If there is no active context, )2(%ifctx)0( goes through "false" branch.)]652.8 bull2
[(Removed "user error: " prefix with )2(%error)0( directive: it just clobbers the output and has absolutely no)]634.8 bull1
[(functionality. Besides, this allows to write macros that does not differ from built-in functions in any)]622.8 bull0
[(way.)]610.8 bull2
[(Added expansion of string that is output by )2(%error)0( directive. Now you can do things like:)]592.8 bull3
[2(     %define hello\(x\) Hello, x! )]577.2 code1
[2()]567.6 code0
[2(     %define %$name andy )]558 code0
[2(     %error "hello\(%$name\)")]548.4 code2
[(Same happened with )2(%include)0( directive.)]530.4 indt3
[(Now all directives that expect an identifier will try to expand and concatenate everything without)]512.4 bull1
[(whitespaces in between before usage. For example, with "unfixed" nasm the commands)]500.4 bull2
[2(     %define %$abc hello )]484.8 code1
[2(     %define __%$abc goodbye )]475.2 code0
[2(     __%$abc)]465.6 code2
[(would produce "incorrect" output: last line will expand to)]447.6 indt3
[2(     hello goodbyehello)]432 code3
[(Not quite what you expected, eh? :-\) The answer is that preprocessor treats the )2(%define)0( construct as)]414 indt1
[(if it would be)]402 indt2
[2(     %define __ %$abc goodbye)]386.4 code3
[(\(note the white space between __ and %$abc\). After my "fix" it will "correctly" expand into)]368.4 indt3
[2(     goodbye)]352.8 code3
[(as expected. Note that I use quotes around words "correct", "incorrect" etc because this is rather a)]334.8 indt1
[(feature not a bug; however current behaviour is more logical \(and allows more advanced macro)]322.8 indt0
[(usage :-\).)]310.8 indt2
[(Same change was applied to: )2(%push)0(,)2(%macro)0(,)2(%imacro)0(,)2(%define)0(,)2(%idefine)0(,)2(%xdefine)0(,)2(%ixdefine)0(,)]292.8 norm1
[2(%assign)0(,)2(%iassign)0(,)2(%undef)]280.8 norm2
[(A new directive [WARNING {+|-}warning-id] have been added. It works only if the assembly phase is)]262.8 bull1
[(enabled \(i.e. it doesn't work with nasm \226e\).)]250.8 bull2
[(A new warning type: macro-selfref. By default this warning is disabled; when enabled NASM warns)]232.8 bull1
[(when a macro self-references itself; for example the following source:)]220.8 bull2
[2(       [WARNING macro-selfref] )]205.2 code1
[2()]195.6 code0
[2(       %macro          push    1-* )]186 code0
[2(               %rep    %0 )]176.4 code0
[2(                       push    %1 )]166.8 code0
[2(                       %rotate 1 )]157.2 code0
[2(               %endrep )]147.6 code0
[2(       %endmacro )]138 code0
[2()]128.4 code0
[2(                       push    eax,ebx,ecx)]118.8 code2
[(will produce a warning, but if we remove the first line we won't see it anymore \(which is The Right)]100.8 indt1
[(Thing To Do {tm} IMHO since C preprocessor eats such constructs without warnings at all\).)]88.7999999999997 indt2
(260)pageeven
restore showpage
%%Page: 261 261
%%BeginPageSetup
save
%%EndPageSetup
/261 pa
[(Added a "error" routine to preprocessor which always will set ERR_PASS1 bit in severity_code. This)]708 bull1
[(removes annoying repeated errors on first and second passes from preprocessor.)]696 bull2
[(Added the %+ operator in single-line macros for concatenating two identifiers. Usage example:)]678 bull3
[2(       %define _myfunc _otherfunc )]662.4 code1
[2(       %define cextern\(x\) _ %+ x )]652.8 code0
[2(       cextern \(myfunc\))]643.2 code2
[(After first expansion, third line will become "_myfunc". After this expansion is performed again so it)]625.2 indt1
[(becomes "_otherunc".)]613.2 indt2
[(Now if preprocessor is in a non-emitting state, no warning or error will be emitted. Example:)]595.2 bull3
[2(       %if 1 )]579.6 code1
[2(               mov     eax,ebx )]570 code0
[2(       %else )]560.4 code0
[2(               put anything you want between these two brackets, )]550.8 code0
[2(               even macro-parameter references %1 or local )]541.2 code0
[2(               labels %$zz or macro-local labels %%zz - no )]531.6 code0
[2(               warning will be emitted. )]522 code0
[2(       %endif)]512.4 code2
[(Context-local variables on expansion as a last resort are looked up in outer contexts. For example,)]494.4 bull1
[(the following piece:)]482.4 bull2
[2(       %push   outer )]466.8 code1
[2(       %define %$a [esp] )]457.2 code0
[2()]447.6 code0
[2(               %push   inner )]438 code0
[2(               %$a )]428.4 code0
[2(               %pop )]418.8 code0
[2(       %pop)]409.2 code2
[(will expand correctly the fourth line to [esp]; if we'll define another %$a inside the "inner" context, it)]391.2 indt1
[(will take precedence over outer definition. However, this modification has been applied only to)]379.2 indt0
[(expand_smacro and not to smacro_define: as a consequence expansion looks in outer contexts, but)]367.2 indt0
[2(%ifdef)0( won't look in outer contexts.)]355.2 indt2
[(This behaviour is needed because we don't want nested contexts to act on already defined local)]337.2 indt1
[(macros. Example:)]325.2 indt2
[2(       %define %$arg1  [esp+4] )]309.6 code1
[2(       test    eax,eax )]300 code0
[2(       if      nz )]290.4 code0
[2(               mov     eax,%$arg1 )]280.8 code0
[2(       endif)]271.2 code2
[(In this example the "if" mmacro enters into the "if" context, so %$arg1 is not valid anymore inside)]253.2 indt1
[("if". Of course it could be worked around by using explicitely %$$arg1 but this is ugly IMHO.)]241.2 indt2
[(Fixed memory leak in )2(%undef)0(. The origline wasn't freed before exiting on success.)]223.2 bull3
[(Fixed trap in preprocessor when line expanded to empty set of tokens. This happens, for example, in)]205.2 bull1
[(the following case:)]193.2 bull2
[2(       #define SOMETHING )]177.6 code1
[2(       SOMETHING)]168 code2
[{/section-C.2.41 xa}(Version 0.98)](C.2.41)147.6 subh3
[(All changes since NASM 0.98p3 have been produced by H. Peter Anvin <hpa@zytor.com>.)]129.6 norm3
[(The documentation comment delimiter is)]111.6 bull3
[(Allow EQU definitions to refer to external labels; reported by Pedro Gimeno.)]93.5999999999998 bull3
[(Re-enable support for RDOFF v1; reported by Pedro Gimeno.)]75.5999999999998 bull3
(261)pageodd
restore showpage
%%Page: 262 262
%%BeginPageSetup
save
%%EndPageSetup
/262 pa
[(Updated License file per OK from Simon and Julian.)]708 bull3
[{/section-C.2.42 xa}(Version 0.98p9)](C.2.42)687.6 subh3
[(Update documentation \(although the instruction set reference will have to wait; I don't want to hold)]669.6 bull1
[(up the 0.98 release for it.\))]657.6 bull2
[(Verified that the NASM implementation of the PEXTRW and PMOVMSKB instructions is correct. The)]639.6 bull1
[(encoding differs from what the Intel manuals document, but the Pentium III behaviour matches)]627.6 bull0
[(NASM, not the Intel manuals.)]615.6 bull2
[(Fix handling of implicit sizes in PSHUFW and PINSRW, reported by Stefan Hoffmeister.)]597.6 bull3
[(Resurrect the \226s option, which was removed when changing the diagnostic output to stdout.)]579.6 bull3
[{/section-C.2.43 xa}(Version 0.98p8)](C.2.43)559.2 subh3
[(Fix for "DB" when NASM is running on a bigendian machine.)]541.2 bull3
[(Invoke insns.pl once for each output script, making Makefile.in legal for "make \226j".)]523.2 bull3
[(Improve the Unix configure-based makefiles to make package creation easier.)]505.2 bull3
[(Included an RPM .spec file for building RPM \(RedHat Package Manager\) packages on Linux or Unix)]487.2 bull1
[(systems.)]475.2 bull2
[(Fix Makefile dependency problems.)]457.2 bull3
[(Change src/rdsrc.pl to include sectioning information in info output; required for install-info to work.)]439.2 bull3
[(Updated the RDOFF distribution to version 2 from Jules; minor massaging to make it compile in my)]421.2 bull1
[(environment.)]409.2 bull2
[(Split doc files that can be built by anyone with a Perl interpreter off into a separate archive.)]391.2 bull3
[("Dress rehearsal" release!)]373.2 bull3
[{/section-C.2.44 xa}(Version 0.98p7)](C.2.44)352.8 subh3
[(Fixed opcodes with a third byte-sized immediate argument to not complain if given "byte" on the)]334.8 bull1
[(immediate.)]322.8 bull2
[(Allow )2(%undef)0( to remove single-line macros with arguments. This matches the behaviour of #undef in)]304.8 bull1
[(the C preprocessor.)]292.8 bull2
[(Allow \226d, \226u, \226i and \226p to be specified as \226D, \226U, \226I and \226P for compatibility with most C compilers)]274.8 bull1
[(and preprocessors. This allows Makefile options to be shared between cc and nasm, for example.)]262.8 bull2
[(Minor cleanups.)]244.8 bull3
[(Went through the list of Katmai instructions and hopefully fixed the \(rather few\) mistakes in it.)]226.8 bull3
[(\(Hopefully\) fixed a number of disassembler bugs related to ambiguous instructions \(disambiguated)]208.8 bull1
[(by \226p\) and SSE instructions with REP.)]196.8 bull2
[(Fix for bug reported by Mark Junger: "call dword 0x12345678" should work and may add an OSP)]178.8 bull1
[(\(affected CALL, JMP, Jcc\).)]166.8 bull2
[(Fix for environments when "stderr" isn't a compile-time constant.)]148.8 bull3
[{/section-C.2.45 xa}(Version 0.98p6)](C.2.45)128.4 subh3
[(Took officially over coordination of the 0.98 release; so drop the p3.x notation. Skipped p4 and p5 to)]110.4 bull1
[(avoid confusion with John Fine's J4 and J5 releases.)]98.4 bull2
(262)pageeven
restore showpage
%%Page: 263 263
%%BeginPageSetup
save
%%EndPageSetup
/263 pa
[(Update the documentation; however, it still doesn't include documentation for the various new)]708 bull1
[(instructions. I somehow wonder if it makes sense to have an instruction set reference in the)]696 bull0
[(assembler manual when Intel et al have PDF versions of their manuals online.)]684 bull2
[(Recognize "idt" or "centaur" for the \226p option to ndisasm.)]666 bull3
[(Changed error messages back to stderr where they belong, but add an \226E option to redirect them)]648 bull1
[(elsewhere \(the DOS shell cannot redirect stderr.\))]636 bull2
[(\226M option to generate Makefile dependencies \(based on code from Alex Verstak.\))]618 bull3
[2(%undef)0( preprocessor directive, and \226u option, that undefines a single-line macro.)]600 bull3
[(OS/2 Makefile \(Mkfiles/Makefile.os2\) for Borland under OS/2; from Chuck Crayne.)]582 bull3
[(Various minor bugfixes \(reported by\): \226 Dangling )2(%s)0( in preproc.c \(Martin Junker\))]564 bull3
[(THERE ARE KNOWN BUGS IN SSE AND THE OTHER KATMAI INSTRUCTIONS. I am on a trip and didn't)]546 bull1
[(bring the Katmai instruction reference, so I can't work on them right now.)]534 bull2
[(Updated the License file per agreement with Simon and Jules to include a GPL distribution clause.)]516 bull3
[{/section-C.2.46 xa}(Version 0.98p3.7)](C.2.46)495.6 subh3
[(\(Hopefully\) fixed the canned Makefiles to include the outrdf2 and zoutieee modules.)]477.6 bull3
[(Renamed changes.asm to changed.asm.)]459.6 bull3
[{/section-C.2.47 xa}(Version 0.98p3.6)](C.2.47)439.2 subh3
[(Fixed a bunch of instructions that were added in 0.98p3.5 which had memory operands, and the)]421.2 bull1
[(address-size prefix was missing from the instruction pattern.)]409.2 bull2
[{/section-C.2.48 xa}(Version 0.98p3.5)](C.2.48)388.8 subh3
[(Merged in changes from John S. Fine's 0.98-J5 release. John's based 0.98-J5 on my 0.98p3.3 release;)]370.8 bull1
[(this merges the changes.)]358.8 bull2
[(Expanded the instructions flag field to a long so we can fit more flags; mark SSE \(KNI\) and AMD or)]340.8 bull1
[(Katmai-specific instructions as such.)]328.8 bull2
[(Fix the "PRIV" flag on a bunch of instructions, and create new "PROT" flag for protected-mode-only)]310.8 bull1
[(instructions \(orthogonal to if the instruction is privileged!\) and new "SMM" flag for SMM-only)]298.8 bull0
[(instructions.)]286.8 bull2
[(Added AMD-only SYSCALL and SYSRET instructions.)]268.8 bull3
[(Make SSE actually work, and add new Katmai MMX instructions.)]250.8 bull3
[(Added a \226p \(preferred vendor\) option to ndisasm so that it can distinguish e.g. Cyrix opcodes also)]232.8 bull1
[(used in SSE. For example:)]220.8 bull2
[2(     ndisasm -p cyrix aliased.bin )]205.2 code1
[2(     00000000  670F514310        paddsiw mm0,[ebx+0x10] )]195.6 code0
[2(     00000005  670F514320        paddsiw mm0,[ebx+0x20] )]186 code0
[2(     ndisasm -p intel aliased.bin )]176.4 code0
[2(     00000000  670F514310        sqrtps xmm0,[ebx+0x10] )]166.8 code0
[2(     00000005  670F514320        sqrtps xmm0,[ebx+0x20])]157.2 code2
[(Added a bunch of Cyrix-specific instructions.)]139.2 bull3
[{/section-C.2.49 xa}(Version 0.98p3.4)](C.2.49)118.8 subh3
[(Made at least an attempt to modify all the additional Makefiles \(in the Mkfiles directory\). I can't test)]100.8 bull1
[(it, but this was the best I could do.)]88.8 bull2
(263)pageodd
restore showpage
%%Page: 264 264
%%BeginPageSetup
save
%%EndPageSetup
/264 pa
[(DOS DJGPP+"Opus Make" Makefile from John S. Fine.)]708 bull3
[(changes.asm changes from John S. Fine.)]690 bull3
[{/section-C.2.50 xa}(Version 0.98p3.3)](C.2.50)669.6 subh3
[(Patch from Conan Brink to allow nesting of )2(%rep)0( directives.)]651.6 bull3
[(If we're going to allow INT01 as an alias for INT1/ICEBP \(one of Jules 0.98p3 changes\), then we)]633.6 bull1
[(should allow INT03 as an alias for INT3 as well.)]621.6 bull2
[(Updated changes.asm to include the latest changes.)]603.6 bull3
[(Tried to clean up the <CR>s that had snuck in from a DOS/Windows environment into my Unix)]585.6 bull1
[(environment, and try to make sure than DOS/Windows users get them back.)]573.6 bull2
[(We would silently generate broken tools if insns.dat wasn't sorted properly. Change insns.pl so that)]555.6 bull1
[(the order doesn't matter.)]543.6 bull2
[(Fix bug in insns.pl \(introduced by me\) which would cause conditional instructions to have an extra)]525.6 bull1
[("cc" in disassembly, e.g. "jnz" disassembled as "jccnz".)]513.6 bull2
[{/section-C.2.51 xa}(Version 0.98p3.2)](C.2.51)493.2 subh3
[(Merged in John S. Fine's changes from his 0.98-J4 prerelease; see http://www.csoft.net/cz/johnfine/)]475.2 bull3
[(Changed previous "spotless" Makefile target \(appropriate for distribution\) to "distclean", and added)]457.2 bull1
[("cleaner" target which is same as "clean" except deletes files generated by Perl scripts; "spotless" is)]445.2 bull0
[(union.)]433.2 bull2
[(Removed BASIC programs from distribution. Get a Perl interpreter instead \(see below.\))]415.2 bull3
[(Calling this "pre-release 3.2" rather than "p3-hpa2" because of John's contributions.)]397.2 bull3
[(Actually link in the IEEE output format \(zoutieee.c\); fix a bunch of compiler warnings in that file. Note)]379.2 bull1
[(I don't know what IEEE output is supposed to look like, so these changes were made "blind".)]367.2 bull2
[{/section-C.2.52 xa}(Version 0.98p3-hpa)](C.2.52)346.8 subh3
[(Merged nasm098p3.zip with nasm-0.97.tar.gz to create a fully buildable version for Unix systems)]328.8 bull1
[(\(Makefile.in updates, etc.\))]316.8 bull2
[(Changed insns.pl to create the instruction tables in nasm.h and names.c, so that a new instruction)]298.8 bull1
[(can be added by adding it *only* to insns.dat.)]286.8 bull2
[(Added the following new instructions: SYSENTER, SYSEXIT, FXSAVE, FXRSTOR, UD1, UD2 \(the latter)]268.8 bull1
[(two are two opcodes that Intel guarantee will never be used; one of them is documented as UD2 in)]256.8 bull0
[(Intel documentation, the other one just as "Undefined Opcode" \226\226 calling it UD1 seemed to make)]244.8 bull0
[(sense.\))]232.8 bull2
[(MAX_SYMBOL was defined to be 9, but LOADALL286 and LOADALL386 are 10 characters long. Now)]214.8 bull1
[(MAX_SYMBOL is derived from insns.dat.)]202.8 bull2
[(A note on the BASIC programs included: forget them. insns.bas is already out of date. Get yourself a)]184.8 bull1
[(Perl interpreter for your platform of choice at ){(http://www.cpan.org/ports/index.html)wl}(http://www.cpan.org/ports/index.html){el}(.)]172.8 bull2
[{/section-C.2.53 xa}(Version 0.98 pre-release 3)](C.2.53)152.4 subh3
[(added response file support, improved command line handling, new layout help screen)]134.4 bull3
[(fixed limit checking bug, 'OUT byte nn, reg' bug, and a couple of rdoff related bugs, updated Wishlist;)]116.4 bull1
[(0.98 Prerelease 3.)]104.4 bull2
(264)pageeven
restore showpage
%%Page: 265 265
%%BeginPageSetup
save
%%EndPageSetup
/265 pa
[{/section-C.2.54 xa}(Version 0.98 pre-release 2)](C.2.54)705.6 subh3
[(fixed bug in outcoff.c to do with truncating section names longer than 8 characters, referencing)]687.6 bull1
[(beyond end of string; 0.98 pre-release 2)]675.6 bull2
[{/section-C.2.55 xa}(Version 0.98 pre-release 1)](C.2.55)655.2 subh3
[(Fixed a bug whereby STRUC didn't work at all in RDF.)]637.2 bull3
[(Fixed a problem with group specification in PUBDEFs in OBJ.)]619.2 bull3
[(Improved ease of adding new output formats. Contribution due to Fox Cutter.)]601.2 bull3
[(Fixed a bug in relocations in the `bin' format: was showing up when a relocatable reference crossed)]583.2 bull1
[(an 8192-byte boundary in any output section.)]571.2 bull2
[(Fixed a bug in local labels: local-label lookups were inconsistent between passes one and two if an)]553.2 bull1
[(EQU occurred between the definition of a global label and the subsequent use of a local label local)]541.2 bull0
[(to that global.)]529.2 bull2
[(Fixed a seg-fault in the preprocessor \(again\) which happened when you use a blank line as the first)]511.2 bull1
[(line of a multi-line macro definition and then defined a label on the same line as a call to that macro.)]499.2 bull2
[(Fixed a stale-pointer bug in the handling of the NASM environment variable. Thanks to Thomas)]481.2 bull1
[(McWilliams.)]469.2 bull2
[(ELF had a hard limit on the number of sections which caused segfaults when transgressed. Fixed.)]451.2 bull3
[(Added ability for ndisasm to read from stdin by using `-' as the filename.)]433.2 bull3
[(ndisasm wasn't outputting the TO keyword. Fixed.)]415.2 bull3
[(Fixed error cascade on bogus expression in )2(%if)0( \226 an error in evaluation was causing the entire )2(%if)0( to)]397.2 bull1
[(be discarded, thus creating trouble later when the )2(%else)0( or )2(%endif)0( was encountered.)]385.2 bull2
[(Forward reference tracking was instruction-granular not operand- granular, which was causing)]367.2 bull1
[(286-specific code to be generated needlessly on code of the form `shr word [forwardref],1'. Thanks)]355.2 bull0
[(to Jim Hague for sending a patch.)]343.2 bull2
[(All messages now appear on stdout, as sending them to stderr serves no useful purpose other than)]325.2 bull1
[(to make redirection difficult.)]313.2 bull2
[(Fixed the problem with EQUs pointing to an external symbol \226 this now generates an error message.)]295.2 bull3
[(Allowed multiple size prefixes to an operand, of which only the first is taken into account.)]277.2 bull3
[(Incorporated John Fine's changes, including fixes of a large number of preprocessor bugs, some)]259.2 bull1
[(small problems in OBJ, and a reworking of label handling to define labels before their line is)]247.2 bull0
[(assembled, rather than after.)]235.2 bull2
[(Reformatted a lot of the source code to be more readable. Included 'coding.txt' as a guideline for)]217.2 bull1
[(how to format code for contributors.)]205.2 bull2
[(Stopped nested )2(%reps)0( causing a panic \226 they now cause a slightly more friendly error message)]187.2 bull1
[(instead.)]175.2 bull2
[(Fixed floating point constant problems \(patch by Pedro Gimeno\))]157.2 bull3
[(Fixed the return value of insn_size\(\) not being checked for \2261, indicating an error.)]139.2 bull3
[(Incorporated 3Dnow! instructions.)]121.2 bull3
[(Fixed the 'mov eax, eax + ebx' bug.)]103.2 bull3
[(Fixed the GLOBAL EQU bug in ELF. Released developers release 3.)]85.2 bull3
(265)pageodd
restore showpage
%%Page: 266 266
%%BeginPageSetup
save
%%EndPageSetup
/266 pa
[(Incorporated John Fine's command line parsing changes)]708 bull3
[(Incorporated David Lindauer's OMF debug support)]690 bull3
[(Made changes for LCC 4.0 support \()2(__NASM_CDecl__)0(, removed register size specification warning)]672 bull1
[(when sizes agree\).)]660 bull2
[{/section-C.3 xa}(NASM 0.9 Series)](C.3)637.2 head3
[(Revisions before 0.98.)]619.2 norm3
[{/section-C.3.1 xa}(Version 0.97 released December 1997)](C.3.1)598.8 subh3
[(This was entirely a bug-fix release to 0.96, which seems to have got cursed. Silly me.)]580.8 bull3
[(Fixed stupid mistake in OBJ which caused `MOV EAX,<constant>' to fail. Caused by an error in the)]562.8 bull1
[(`MOV EAX,<segment>' support.)]550.8 bull2
[(ndisasm hung at EOF when compiled with lcc on Linux because lcc on Linux somehow breaks feof\(\).)]532.8 bull1
[(ndisasm now does not rely on feof\(\).)]520.8 bull2
[(A heading in the documentation was missing due to a markup error in the indexing. Fixed.)]502.8 bull3
[(Fixed failure to update all pointers on realloc\(\) within extended- operand code in parser.c. Was)]484.8 bull1
[(causing wrong behaviour and seg faults on lines such as `dd 0.0,0.0,0.0,0.0,...')]472.8 bull2
[(Fixed a subtle preprocessor bug whereby invoking one multi-line macro on the first line of the)]454.8 bull1
[(expansion of another, when the second had been invoked with a label defined before it, didn't)]442.8 bull0
[(expand the inner macro.)]430.8 bull2
[(Added internal.doc back in to the distribution archives \226 it was missing in 0.96 *blush*)]412.8 bull3
[(Fixed bug causing 0.96 to be unable to assemble its own test files, specifically objtest.asm. *blush)]394.8 bull1
[(again*)]382.8 bull2
[(Fixed seg-faults and bogus error messages caused by mismatching )2(%rep)0( and )2(%endrep)0( within)]364.8 bull1
[(multi-line macro definitions.)]352.8 bull2
[(Fixed a problem with buffer overrun in OBJ, which was causing corruption at ends of long PUBDEF)]334.8 bull1
[(records.)]322.8 bull2
[(Separated DOS archives into main-program and documentation to reduce download size.)]304.8 bull3
[{/section-C.3.2 xa}(Version 0.96 released November 1997)](C.3.2)284.4 subh3
[(Fixed a bug whereby, if `nasm sourcefile' would cause a filename collision warning and put output)]266.4 bull1
[(into `nasm.out', then `nasm sourcefile \226o outputfile' still gave the warning even though the `-o' was)]254.4 bull0
[(honoured. Fixed name pollution under Digital UNIX: one of its header files defined R_SP, which)]242.4 bull0
[(broke the enum in nasm.h.)]230.4 bull2
[(Fixed minor instruction table problems: FUCOM and FUCOMP didn't have two-operand forms;)]212.4 bull1
[(NDISASM didn't recognise the longer register forms of PUSH and POP \(eg FF F3 for PUSH BX\); TEST)]200.4 bull0
[(mem,imm32 was flagged as undocumented; the 32-bit forms of CMOV had 16-bit operand size)]188.4 bull0
[(prefixes; `AAD imm' and `AAM imm' are no longer flagged as undocumented because the Intel)]176.4 bull0
[(Architecture reference documents them.)]164.4 bull2
[(Fixed a problem with the local-label mechanism, whereby strange types of symbol \(EQUs,)]146.4 bull1
[(auto-defined OBJ segment base symbols\) interfered with the `previous global label' value and)]134.4 bull0
[(screwed up local labels.)]122.4 bull2
[(Fixed a bug whereby the stub preprocessor didn't communicate with the listing file generator, so)]104.4 bull1
[(that the \226a and \226l options in conjunction would produce a useless listing file.)]92.4000000000001 bull2
(266)pageeven
restore showpage
%%Page: 267 267
%%BeginPageSetup
save
%%EndPageSetup
/267 pa
[(Merged `os2' object file format back into `obj', after discovering that `obj' _also_ shouldn't have a)]708 bull1
[(link pass separator in a module containing a non-trivial MODEND. Flat segments are now declared)]696 bull0
[(using the FLAT attribute. `os2' is no longer a valid object format name: use `obj'.)]684 bull2
[(Removed the fixed-size temporary storage in the evaluator. Very very long expressions \(like `mov)]666 bull1
[(ax,1+1+1+1+...' for two hundred 1s or so\) should now no longer crash NASM.)]654 bull2
[(Fixed a bug involving segfaults on disassembly of MMX instructions, by changing the meaning of one)]636 bull1
[(of the operand-type flags in nasm.h. This may cause other apparently unrelated MMX problems; it)]624 bull0
[(needs to be tested thoroughly.)]612 bull2
[(Fixed some buffer overrun problems with large OBJ output files. Thanks to DJ Delorie for the bug)]594 bull1
[(report and fix.)]582 bull2
[(Made preprocess-only mode actually listen to the )2(%line)0( markers as it prints them, so that it can)]564 bull1
[(report errors more sanely.)]552 bull2
[(Re-designed the evaluator to keep more sensible track of expressions involving forward references:)]534 bull1
[(can now cope with previously-nightmare situations such as:)]522 bull2
[2(  mov ax,foo | bar )]506.4 code1
[2(  foo equ 1 )]496.8 code0
[2(  bar equ 2)]487.2 code2
[(Added the ALIGN and ALIGNB standard macros.)]469.2 bull3
[(Added PIC support in ELF: use of WRT to obtain the four extra relocation types needed.)]451.2 bull3
[(Added the ability for output file formats to define their own extensions to the GLOBAL, COMMON and)]433.2 bull1
[(EXTERN directives.)]421.2 bull2
[(Implemented common-variable alignment, and global-symbol type and size declarations, in ELF.)]403.2 bull3
[(Implemented NEAR and FAR keywords for common variables, plus far-common element size)]385.2 bull1
[(specification, in OBJ.)]373.2 bull2
[(Added a feature whereby EXTERNs and COMMONs in OBJ can be given a default WRT specification)]355.2 bull1
[(\(either a segment or a group\).)]343.2 bull2
[(Transformed the Unix NASM archive into an auto-configuring package.)]325.2 bull3
[(Added a sanity-check for people applying SEG to things which are already segment bases: this)]307.2 bull1
[(previously went unnoticed by the SEG processing and caused OBJ-driver panics later.)]295.2 bull2
[(Added the ability, in OBJ format, to deal with `MOV EAX,<segment>' type references: OBJ doesn't)]277.2 bull1
[(directly support dword-size segment base fixups, but as long as the low two bytes of the constant)]265.2 bull0
[(term are zero, a word-size fixup can be generated instead and it will work.)]253.2 bull2
[(Added the ability to specify sections' alignment requirements in Win32 object files and pure binary)]235.2 bull1
[(files.)]223.2 bull2
[(Added preprocess-time expression evaluation: the )2(%assign)0( \(and )2(%iassign)0(\) directive and the bare)]205.2 bull1
[2(%if)0( \(and )2(%elif)0(\) conditional. Added relational operators to the evaluator, for use only in )2(%if)]193.2 bull0
[(constructs: the standard relationals = < > <= >= <> \(and C-like synonyms == and !=\) plus)]181.2 bull0
[(low-precedence logical operators &&, ^^ and ||.)]169.2 bull2
[(Added a preprocessor repeat construct: )2(%rep)0( / )2(%exitrep)0( / )2(%endrep)0(.)]151.2 bull3
[(Added the __FILE__ and __LINE__ standard macros.)]133.2 bull3
[(Added a sanity check for number constants being greater than 0xFFFFFFFF. The warning can be)]115.2 bull1
[(disabled.)]103.2 bull2
[(Added the %0 token whereby a variadic multi-line macro can tell how many parameters it's been)]85.2 bull1
[(given in a specific invocation.)]73.2 bull2
(267)pageodd
restore showpage
%%Page: 268 268
%%BeginPageSetup
save
%%EndPageSetup
/268 pa
[(Added )2(%rotate)0(, allowing multi-line macro parameters to be cycled.)]708 bull3
[(Added the `*' option for the maximum parameter count on multi-line macros, allowing them to take)]690 bull1
[(arbitrarily many parameters.)]678 bull2
[(Added the ability for the user-level forms of EXTERN, GLOBAL and COMMON to take more than one)]660 bull1
[(argument.)]648 bull2
[(Added the IMPORT and EXPORT directives in OBJ format, to deal with Windows DLLs.)]630 bull3
[(Added some more preprocessor )2(%if)0( constructs: )2(%ifidn)0( / )2(%ifidni)0( \(exact textual identity\), and )2(%ifid)0( /)]612 bull1
[2(%ifnum)0( / )2(%ifstr)0( \(token type testing\).)]600 bull2
[(Added the ability to distinguish SHL AX,1 \(the 8086 version\) from SHL AX,BYTE 1 \(the)]582 bull1
[(286-and-upwards version whose constant happens to be 1\).)]570 bull2
[(Added NetBSD/FreeBSD/OpenBSD's variant of a.out format, complete with PIC shared library)]552 bull1
[(features.)]540 bull2
[(Changed NASM's idiosyncratic handling of FCLEX, FDISI, FENI, FINIT, FSAVE, FSTCW, FSTENV, and)]522 bull1
[(FSTSW to bring it into line with the otherwise accepted standard. The previous behaviour, though it)]510 bull0
[(was a deliberate feature, was a deliberate feature based on a misunderstanding. Apologies for the)]498 bull0
[(inconvenience.)]486 bull2
[(Improved the flexibility of ABSOLUTE: you can now give it an expression rather than being restricted)]468 bull1
[(to a constant, and it can take relocatable arguments as well.)]456 bull2
[(Added the ability for a variable to be declared as EXTERN multiple times, and the subsequent)]438 bull1
[(definitions are just ignored.)]426 bull2
[(We now allow instruction prefixes \(CS, DS, LOCK, REPZ etc\) to be alone on a line \(without a following)]408 bull1
[(instruction\).)]396 bull2
[(Improved sanity checks on whether the arguments to EXTERN, GLOBAL and COMMON are valid)]378 bull1
[(identifiers.)]366 bull2
[(Added misc/exebin.mac to allow direct generation of .EXE files by hacking up an EXE header using)]348 bull1
[(DB and DW; also added test/binexe.asm to demonstrate the use of this. Thanks to Yann Guidon for)]336 bull0
[(contributing the EXE header code.)]324 bull2
[(ndisasm forgot to check whether the input file had been successfully opened. Now it does. Doh!)]306 bull3
[(Added the Cyrix extensions to the MMX instruction set.)]288 bull3
[(Added a hinting mechanism to allow [EAX+EBX] and [EBX+EAX] to be assembled differently. This is)]270 bull1
[(important since [ESI+EBP] and [EBP+ESI] have different default base segment registers.)]258 bull2
[(Added support for the PharLap OMF extension for 4096-byte segment alignment.)]240 bull3
[{/section-C.3.3 xa}(Version 0.95 released July 1997)](C.3.3)219.6 subh3
[(Fixed yet another ELF bug. This one manifested if the user relied on the default segment, and)]201.6 bull1
[(attempted to define global symbols without first explicitly declaring the target segment.)]189.6 bull2
[(Added makefiles \(for NASM and the RDF tools\) to build Win32 console apps under Symantec C++.)]171.6 bull1
[(Donated by Mark Junker.)]159.6 bull2
[(Added `macros.bas' and `insns.bas', QBasic versions of the Perl scripts that convert `standard.mac')]141.6 bull1
[(to `macros.c' and convert `insns.dat' to `insnsa.c' and `insnsd.c'. Also thanks to Mark Junker.)]129.6 bull2
[(Changed the diassembled forms of the conditional instructions so that JB is now emitted as JC, and)]111.6 bull1
[(other similar changes. Suggested list by Ulrich Doewich.)]99.6 bull2
[(Added `@' to the list of valid characters to begin an identifier with.)]81.6 bull3
(268)pageeven
restore showpage
%%Page: 269 269
%%BeginPageSetup
save
%%EndPageSetup
/269 pa
[(Documentary changes, notably the addition of the `Common Problems' section in nasm.doc.)]708 bull3
[(Fixed a bug relating to 32-bit PC-relative fixups in OBJ.)]690 bull3
[(Fixed a bug in perm_copy\(\) in labels.c which was causing exceptions in cleanup_labels\(\) on some)]672 bull1
[(systems.)]660 bull2
[(Positivity sanity check in TIMES argument changed from a warning to an error following a further)]642 bull1
[(complaint.)]630 bull2
[(Changed the acceptable limits on byte and word operands to allow things like `~10111001b' to work.)]612 bull3
[(Fixed a major problem in the preprocessor which caused seg-faults if macro definitions contained)]594 bull1
[(blank lines or comment-only lines.)]582 bull2
[(Fixed inadequate error checking on the commas separating the arguments to `db', `dw' etc.)]564 bull3
[(Fixed a crippling bug in the handling of macros with operand counts defined with a `+' modifier.)]546 bull3
[(Fixed a bug whereby object file formats which stored the input file name in the output file \(such as)]528 bull1
[(OBJ and COFF\) weren't doing so correctly when the output file name was specified on the command)]516 bull0
[(line.)]504 bull2
[(Removed [INC] and [INCLUDE] support for good, since they were obsolete anyway.)]486 bull3
[(Fixed a bug in OBJ which caused all fixups to be output in 16-bit \(old-format\) FIXUPP records, rather)]468 bull1
[(than putting the 32-bit ones in FIXUPP32 \(new-format\) records.)]456 bull2
[(Added, tentatively, OS/2 object file support \(as a minor variant on OBJ\).)]438 bull3
[(Updates to Fox Cutter's Borland C makefile, Makefile.bc2.)]420 bull3
[(Removed a spurious second fclose\(\) on the output file.)]402 bull3
[(Added the `-s' command line option to redirect all messages which would go to stderr \(errors, help)]384 bull1
[(text\) to stdout instead.)]372 bull2
[(Added the `-w' command line option to selectively suppress some classes of assembly warning)]354 bull1
[(messages.)]342 bull2
[(Added the `-p' pre-include and `-d' pre-define command-line options.)]324 bull3
[(Added an include file search path: the `-i' command line option.)]306 bull3
[(Fixed a silly little preprocessor bug whereby starting a line with a `%!' environment-variable)]288 bull1
[(reference caused an `unknown directive' error.)]276 bull2
[(Added the long-awaited listing file support: the `-l' command line option.)]258 bull3
[(Fixed a problem with OBJ format whereby, in the absence of any explicit segment definition,)]240 bull1
[(non-global symbols declared in the implicit default segment generated spurious EXTDEF records in)]228 bull0
[(the output.)]216 bull2
[(Added the NASM environment variable.)]198 bull3
[(From this version forward, Win32 console-mode binaries will be included in the DOS distribution in)]180 bull1
[(addition to the 16-bit binaries. Added Makefile.vc for this purpose.)]168 bull2
[(Added `return 0;' to test/objlink.c to prevent compiler warnings.)]150 bull3
[(Added the __NASM_MAJOR__ and __NASM_MINOR__ standard defines.)]132 bull3
[(Added an alternative memory-reference syntax in which prefixing an operand with `&' is equivalent)]114 bull1
[(to enclosing it in square brackets, at the request of Fox Cutter.)]102 bull2
[(Errors in pass two now cause the program to return a non-zero error code, which they didn't before.)]84 bull3
(269)pageodd
restore showpage
%%Page: 270 270
%%BeginPageSetup
save
%%EndPageSetup
/270 pa
[(Fixed the single-line macro cycle detection, which didn't work at all on macros with no parameters)]708 bull1
[(\(caused an infinite loop\). Also changed the behaviour of single-line macro cycle detection to work)]696 bull0
[(like cpp, so that macros like `extrn' as given in the documentation can be implemented.)]684 bull2
[(Fixed the implementation of WRT, which was too restrictive in that you couldn't do `mov ax,[di+abc)]666 bull1
[(wrt dgroup]' because \(di+abc\) wasn't a relocatable reference.)]654 bull2
[{/section-C.3.4 xa}(Version 0.94 released April 1997)](C.3.4)633.6 subh3
[(Major item: added the macro processor.)]615.6 bull3
[(Added undocumented instructions SMI, IBTS, XBTS and LOADALL286. Also reorganised CMPXCHG)]597.6 bull1
[(instruction into early-486 and Pentium forms. Thanks to Thobias Jones for the information.)]585.6 bull2
[(Fixed two more stupid bugs in ELF, which were causing `ld' to continue to seg-fault in a lot of)]567.6 bull1
[(non-trivial cases.)]555.6 bull2
[(Fixed a seg-fault in the label manager.)]537.6 bull3
[(Stopped FBLD and FBSTP from _requiring_ the TWORD keyword, which is the only option for BCD)]519.6 bull1
[(loads/stores in any case.)]507.6 bull2
[(Ensured FLDCW, FSTCW and FSTSW can cope with the WORD keyword, if anyone bothers to provide)]489.6 bull1
[(it. Previously they complained unless no keyword at all was present.)]477.6 bull2
[(Some forms of FDIV/FDIVR and FSUB/FSUBR were still inverted: a vestige of a bug that I thought had)]459.6 bull1
[(been fixed in 0.92. This was fixed, hopefully for good this time...)]447.6 bull2
[(Another minor phase error \(insofar as a phase error can _ever_ be minor\) fixed, this one occurring in)]429.6 bull1
[(code of the form)]417.6 bull2
[2(  rol ax,forward_reference )]402 code1
[2(  forward_reference equ 1)]392.4 code2
[(The number supplied to TIMES is now sanity-checked for positivity, and also may be greater than)]374.4 bull1
[(64K \(which previously didn't work on 16-bit systems\).)]362.4 bull2
[(Added Watcom C makefiles, and misc/pmw.bat, donated by Dominik Behr.)]344.4 bull3
[(Added the INCBIN pseudo-opcode.)]326.4 bull3
[(Due to the advent of the preprocessor, the [INCLUDE] and [INC] directives have become obsolete.)]308.4 bull1
[(They are still supported in this version, with a warning, but won't be in the next.)]296.4 bull2
[(Fixed a bug in OBJ format, which caused incorrect object records to be output when absolute labels)]278.4 bull1
[(were made global.)]266.4 bull2
[(Updates to RDOFF subdirectory, and changes to outrdf.c.)]248.4 bull3
[{/section-C.3.5 xa}(Version 0.93 released January 1997)](C.3.5)228 subh3
[(This release went out in a great hurry after semi-crippling bugs were found in 0.92.)]210 norm3
[(Really )1(did)0( fix the stack overflows this time. *blush*)]192 bull3
[(Had problems with EA instruction sizes changing between passes, when an offset contained a)]174 bull1
[(forward reference and so 4 bytes were allocated for the offset in pass one; by pass two the symbol)]162 bull0
[(had been defined and happened to be a small absolute value, so only 1 byte got allocated, causing)]150 bull0
[(instruction size mismatch between passes and hence incorrect address calculations. Fixed.)]138 bull2
[(Stupid bug in the revised ELF section generation fixed \(associated string-table section for .symtab)]120 bull1
[(was hard-coded as 7, even when this didn't fit with the real section table\). Was causing `ld' to)]108 bull0
[(seg-fault under Linux.)]96 bull2
[(Included a new Borland C makefile, Makefile.bc2, donated by Fox Cutter <lmb@comtch.iea.com>.)]78 bull3
(270)pageeven
restore showpage
%%Page: 271 271
%%BeginPageSetup
save
%%EndPageSetup
/271 pa
[{/section-C.3.6 xa}(Version 0.92 released January 1997)](C.3.6)705.6 subh3
[(The FDIVP/FDIVRP and FSUBP/FSUBRP pairs had been inverted: this was fixed. This also affected the)]687.6 bull1
[(LCC driver.)]675.6 bull2
[(Fixed a bug regarding 32-bit effective addresses of the form )2([other_register+ESP])0(.)]657.6 bull3
[(Documentary changes, notably documentation of the fact that Borland Win32 compilers use `obj')]639.6 bull1
[(rather than `win32' object format.)]627.6 bull2
[(Fixed the COMENT record in OBJ files, which was formatted incorrectly.)]609.6 bull3
[(Fixed a bug causing segfaults in large RDF files.)]591.6 bull3
[(OBJ format now strips initial periods from segment and group definitions, in order to avoid)]573.6 bull1
[(complications with the local label syntax.)]561.6 bull2
[(Fixed a bug in disassembling far calls and jumps in NDISASM.)]543.6 bull3
[(Added support for user-defined sections in COFF and ELF files.)]525.6 bull3
[(Compiled the DOS binaries with a sensible amount of stack, to prevent stack overflows on any)]507.6 bull1
[(arithmetic expression containing parentheses.)]495.6 bull2
[(Fixed a bug in handling of files that do not terminate in a newline.)]477.6 bull3
[{/section-C.3.7 xa}(Version 0.91 released November 1996)](C.3.7)457.2 subh3
[(Loads of bug fixes.)]439.2 bull3
[(Support for RDF added.)]421.2 bull3
[(Support for DBG debugging format added.)]403.2 bull3
[(Support for 32-bit extensions to Microsoft OBJ format added.)]385.2 bull3
[(Revised for Borland C: some variable names changed, makefile added.)]367.2 bull3
[(LCC support revised to actually work.)]349.2 bull3
[(JMP/CALL NEAR/FAR notation added.)]331.2 bull3
[(`a16', `o16', `a32' and `o32' prefixes added.)]313.2 bull3
[(Range checking on short jumps implemented.)]295.2 bull3
[(MMX instruction support added.)]277.2 bull3
[(Negative floating point constant support added.)]259.2 bull3
[(Memory handling improved to bypass 64K barrier under DOS.)]241.2 bull3
[2($)0( prefix to force treatment of reserved words as identifiers added.)]223.2 bull3
[(Default-size mechanism for object formats added.)]205.2 bull3
[(Compile-time configurability added.)]187.2 bull3
[2(#)0(, )2(@)0(, )2(~)0( and c{?} are now valid characters in labels.)]169.2 bull3
[2(-e)0( and )2(-k)0( options in NDISASM added.)]151.2 bull3
[{/section-C.3.8 xa}(Version 0.90 released October 1996)](C.3.8)130.8 subh3
[(First release version. First support for object file output. Other changes from previous version \(0.3x\) too)]112.8 norm1
[(numerous to document.)]100.8 norm2
(271)pageodd
restore showpage
%%Page: 272 272
%%BeginPageSetup
save
%%EndPageSetup
/272 pa
(272)pageeven
restore showpage
%%Page: 273 273
%%BeginPageSetup
save
%%EndPageSetup
/273 pa
[{/appendix-D xa}(Appendix D: Building NASM from Source)]698.4 appn3
[(The source code for NASM is available from our website, ){(http://www.nasm.us/)wl}(http://wwww.nasm.us/){el}(, see ){/section-E.1 xl}(section E.1){el}(.)]656.4 norm3
[{/section-D.1 xa}(Building from a Source Archive)](D.1)633.6 head3
[(The source archives available on the web site should be capable of building on a number of platforms.)]615.6 norm1
[(This is the recommended method for building NASM to support platforms for which executables are not)]603.6 norm0
[(available.)]591.6 norm2
[(On a system which has Unix shell \()2(sh)0(\), run:)]573.6 norm3
[2(     sh configure )]558 code1
[2(     make everything)]548.4 code2
[(A number of options can be passed to )2(configure)0(; see )2(sh configure --help)0(.)]530.4 norm3
[(A set of Makefiles for some other environments are also available; please see the file )2(Mkfiles/README)0(.)]512.4 norm3
[(To build the installer for the Windows platform, you will need the )1(Nullsoft Scriptable Installer)0(, )(NSIS,)]494.4 norm1
[(installed.)]482.4 norm2
[(To build the documentation, you will need a set of additional tools. The documentation is not likely to)]464.4 norm1
[(be able to build on non-Unix systems.)]452.4 norm2
[{/section-D.2 xa}(Building from the )2(git)0( Repository)](D.2)429.6 head3
[(The NASM development tree is kept in a source code repository using the )2(git)0( distributed source control)]411.6 norm1
[(system. The link is available on the website. This is recommended only to participate in the)]399.6 norm0
[(development of NASM or to assist with testing the development code.)]387.6 norm2
[(To build NASM from the )2(git)0( repository you will need a Perl interpreter and, if building on a Unix system,)]369.6 norm1
[(GNU autoconf installed on your system.)]357.6 norm2
[(To build on a Unix system, run:)]339.6 norm3
[2(     sh autogen.sh)]324 code3
[(to create the )2(configure)0( script and then build as listed above.)]306 norm3
[{/section-D.3 xa}(Building the documentation)](D.3)283.2 head3
[(To build the documentation, you will need a Perl interpreter, a Postscript to PDF converter such as)]265.2 norm1
[(Ghostscript, and suitable fonts installed on your system. The recommended \(and default\) fonts are)]253.2 norm0
[(Adobe's Source Sans and Source Code fonts, which are freely available under the SIL Open Font)]241.2 norm0
[(License.)]229.2 norm2
(273)pageodd
restore showpage
%%Page: 274 274
%%BeginPageSetup
save
%%EndPageSetup
/274 pa
(274)pageeven
restore showpage
%%Page: 275 275
%%BeginPageSetup
save
%%EndPageSetup
/275 pa
[{/appendix-E xa}(Appendix E: Contact Information)]698.4 appn3
[{/section-E.1 xa}(Website)](E.1)651.6 head3
[(NASM has a )(website at ){(http://www.nasm.us/)wl}2(http://www.nasm.us/){el}0(.)]633.6 norm3
[(New releases, )(release candidates, and )(daily development snapshots of NASM are available from the)]615.6 norm1
[(official web site in source form as well as binaries for a number of common platforms.)]603.6 norm2
[{/section-E.1.1 xa}(User Forums)](E.1.1)583.2 subh3
[(Users of NASM may find the Forums on the website useful. These are, however, not frequented much by)]565.2 norm1
[(the developers of NASM, so they are not suitable for reporting bugs.)]553.2 norm2
[{/section-E.1.2 xa}(Development Community)](E.1.2)532.8 subh3
[(The development of NASM is coordinated primarily though the )2(nasm-devel)0( mailing list. If you wish to)]514.8 norm1
[(participate in development of NASM, please join this mailing list. Subscription links and archives of past)]502.8 norm0
[(posts are available on the website.)]490.8 norm2
[{/section-E.2 xa}(Reporting Bugs)](E.2)468 head3
[(To report bugs in NASM, please use the )(bug tracker at ){(http://www.nasm.us/)wl}2(http://www.nasm.us/){el}0( \(click on "Bug Tracker"\), or)]450 norm1
[(if that fails then through one of the contacts in ){/section-E.1 xl}(section E.1){el}(.)]438 norm2
[(Please read ){/section-2.2 xl}(section 2.2){el}( first, and don't report the bug if it's listed in there as a deliberate feature. \(If you)]420 norm1
[(think the feature is badly thought out, feel free to send us reasons why you think it should be changed,)]408 norm0
[(but don't just send us mail saying `This is a bug' if the documentation says we did it on purpose.\) Then)]396 norm0
[(read ){/section-13.1 xl}(section 13.1){el}(, and don't bother reporting the bug if it's listed there.)]384 norm2
[(If you do report a bug, )1(please)0( make sure your bug report includes the following information:)]366 norm3
[(What operating system you're running NASM under. Linux, FreeBSD, NetBSD, MacOS X, Win16,)]348 bull1
[(Win32, Win64, MS-DOS, OS/2, VMS, whatever.)]336 bull2
[(If you compiled your own executable from a source archive, compiled your own executable from)]318 bull1
[2(git)0(, used the standard distribution binaries from the website, or got an executable from somewhere)]306 bull0
[(else \(e.g. a Linux distribution.\) If you were using a locally built executable, try to reproduce the)]294 bull0
[(problem using one of the standard binaries, as this will make it easier for us to reproduce your)]282 bull0
[(problem prior to fixing it.)]270 bull2
[(Which version of NASM you're using, and exactly how you invoked it. Give us the precise command)]252 bull1
[(line, and the contents of the )2(NASMENV)0( environment variable if any.)]240 bull2
[(Which versions of any supplementary programs you're using, and how you invoked them. If the)]222 bull1
[(problem only becomes visible at link time, tell us what linker you're using, what version of it you've)]210 bull0
[(got, and the exact linker command line. If the problem involves linking against object files generated)]198 bull0
[(by a compiler, tell us what compiler, what version, and what command line or options you used. \(If)]186 bull0
[(you're compiling in an IDE, please try to reproduce the problem with the command-line version of)]174 bull0
[(the compiler.\))]162 bull2
[(If at all possible, send us a NASM source file which exhibits the problem. If this causes copyright)]144 bull1
[(problems \(e.g. you can only reproduce the bug in restricted-distribution code\) then bear in mind the)]132 bull0
[(following two points: firstly, we guarantee that any source code sent to us for the purposes of)]120 bull0
[(debugging NASM will be used )1(only)0( for the purposes of debugging NASM, and that we will delete all)]108 bull0
[(our copies of it as soon as we have found and fixed the bug or bugs in question; and secondly, we)]96 bull0
[(would prefer )1(not)0( to be mailed large chunks of code anyway. The smaller the file, the better. A)]84 bull0
[(three-line sample file that does nothing useful )1(except)0( demonstrate the problem is much easier to)]72 bull0
(275)pageodd
restore showpage
%%Page: 276 276
%%BeginPageSetup
save
%%EndPageSetup
/276 pa
[(work with than a fully fledged ten-thousand-line program. \(Of course, some errors )1(do)0( only crop up in)]708 bull0
[(large files, so this may not be possible.\))]696 bull2
[(A description of what the problem actually )1(is)0(. `It doesn't work' is )1(not)0( a helpful description! Please)]678 bull1
[(describe exactly what is happening that shouldn't be, or what isn't happening that should. Examples)]666 bull0
[(might be: `NASM generates an error message saying Line 3 for an error that's actually on Line 5';)]654 bull0
[(`NASM generates an error message that I believe it shouldn't be generating at all'; `NASM fails to)]642 bull0
[(generate an error message that I believe it )1(should)0( be generating'; `the object file produced from this)]630 bull0
[(source code crashes my linker'; `the ninth byte of the output file is 66 and I think it should be 77)]618 bull0
[(instead'.)]606 bull2
[(If you believe the output file from NASM to be faulty, send it to us. That allows us to determine)]588 bull1
[(whether our own copy of NASM generates the same file, or whether the problem is related to)]576 bull0
[(portability issues between our development platforms and yours. We can handle binary files mailed)]564 bull0
[(to us as MIME attachments, uuencoded, and even BinHex. Alternatively, we may be able to provide)]552 bull0
[(an FTP site you can upload the suspect files to; but mailing them is easier for us.)]540 bull2
[(Any other information or data files that might be helpful. If, for example, the problem involves NASM)]522 bull1
[(failing to generate an object file while TASM can generate an equivalent file without trouble, then)]510 bull0
[(send us )1(both)0( object files, so we can see what TASM is doing differently from us.)]498 bull2
(276)pageeven
restore showpage
%%Page: 277 277
%%BeginPageSetup
save
%%EndPageSetup
/277 pa
[{/index xa}(Index)]698.4 chap3
[2(!)0( operator)][{/42 pl}(42){el}]662.4 0 idx03
[2(!=)0( operator)][{/41 pl}(41){el}]650.4 0 idx03
[2($$)0( token)][{/41 pl}(41,){el}( ){/105 pl}(105){el}]638.4 0 idx03
[2($)][]626.4 0 idx03
[(Here token)][{/41 pl}(41){el}]614.4 0 idx13
[(prefix)][{/33 pl}(33,){el}( ){/37 pl}(37,){el}( ){/108 pl}(108){el}]602.4 0 idx13
[2(%)0( operator)][{/42 pl}(42){el}]590.4 0 idx03
[2(%!)][{/72 pl}(72){el}]578.4 0 idx03
[2(%$)0( and )2(%$$)0( prefixes)][{/65 pl}(65,){el}( ){/66 pl}(66){el}]566.4 0 idx03
[2(%%)0( operator)][{/42 pl}(42,){el}( ){/55 pl}(55){el}]554.4 0 idx03
[2(%*?)][{/50 pl}(50){el}]542.4 0 idx03
[2(%*??)][{/50 pl}(50){el}]530.4 0 idx03
[2(%+)][{/49 pl}(49){el}]518.4 0 idx03
[2(%,)][{/52 pl}(52){el}]506.4 0 idx03
[2(%?)][{/50 pl}(50){el}]494.4 0 idx03
[2(%??)][{/50 pl}(50){el}]482.4 0 idx03
[2(%[)][{/49 pl}(49){el}]470.4 0 idx03
[2(%)0( prefix to )2(DB)0( lists)][{/34 pl}(34){el}]458.4 0 idx03
[2(&)0( operator)][{/42 pl}(42){el}]446.4 0 idx03
[2(&&)0( operator)][{/41 pl}(41){el}]434.4 0 idx03
[2(*)0( operator)][{/42 pl}(42){el}]422.4 0 idx03
[2(+)0( modifier)][{/55 pl}(55){el}]410.4 0 idx03
[2(+)0( operator)][]398.4 0 idx03
[(binary)][{/42 pl}(42){el}]386.4 0 idx13
[(unary)][{/42 pl}(42){el}]374.4 0 idx13
[2(-)0( operator)][]362.4 0 idx03
[(binary)][{/42 pl}(42){el}]350.4 0 idx13
[(unary)][{/42 pl}(42){el}]338.4 0 idx13
[2(..@)0( symbol prefix)][{/45 pl}(45,){el}( ){/55 pl}(55){el}]326.4 0 idx03
[2(/)0( operator)][{/42 pl}(42){el}]314.4 0 idx03
[2(//)0( operator)][{/42 pl}(42){el}]302.4 0 idx03
[2(<)0( operator)][{/41 pl}(41){el}]290.4 0 idx03
[2(<<)0( operator)][{/42 pl}(42){el}]278.4 0 idx03
[2(<<<)0( operator)][{/42 pl}(42){el}]266.4 0 idx03
[2(<=)0( operator)][{/41 pl}(41){el}]254.4 0 idx03
[2(<=>)0( operator)][{/42 pl}(42){el}]242.4 0 idx03
[2(<>)0( operator)][{/41 pl}(41){el}]230.4 0 idx03
[2(=)0( operator)][{/41 pl}(41){el}]218.4 0 idx03
[2(==)0( operator)][{/41 pl}(41){el}]206.4 0 idx03
[2(>)0( operator)][{/42 pl}(42){el}]194.4 0 idx03
[2(>=)0( operator)][{/42 pl}(42){el}]182.4 0 idx03
[2(>>)0( operator)][{/42 pl}(42){el}]170.4 0 idx03
[2(>>>)0( operator)][{/42 pl}(42){el}]158.4 0 idx03
[2(?)][]146.4 0 idx03
[(data syntax)][{/34 pl}(34,){el}( ){/35 pl}(35){el}]134.4 0 idx13
[(operator)][{/41 pl}(41){el}]122.4 0 idx13
[2(^)0( operator)][{/42 pl}(42){el}]110.4 0 idx03
[2(^^)0( operator)][{/41 pl}(41){el}]98.4 0 idx03
[2(|)0( operator)][{/42 pl}(42){el}]86.4 0 idx03
[2(||)0( operator)][{/41 pl}(41){el}]74.4 0 idx03
[2(~)0( operator)][]662.4 1 idx03
[(~ opunary)][{/42 pl}(42){el}]650.4 1 idx03
[2(%0)0( parameter count)][{/57 pl}(57){el}]638.4 1 idx03
[2(%00)][{/57 pl}(57){el}]626.4 1 idx03
[2(%+1)0( and )2(%-1)0( syntax)][{/59 pl}(59){el}]614.4 1 idx03
[(16-bit mode, versus 32-bit mode)][{/83 pl}(83){el}]602.4 1 idx03
[(1's complement)][{/42 pl}(42){el}]590.4 1 idx03
[(2's complement)][{/42 pl}(42){el}]578.4 1 idx03
[(64-bit displacement)][{/134 pl}(134){el}]566.4 1 idx03
[(64-bit immediate)][{/133 pl}(133){el}]554.4 1 idx03
[2(-a)0( option)][{/24 pl}(24,){el}( ){/140 pl}(140){el}]542.4 1 idx03
[2(A16)][{/33 pl}(33,){el}( ){/132 pl}(132){el}]530.4 1 idx03
[2(A32)][{/33 pl}(33,){el}( ){/132 pl}(132){el}]518.4 1 idx03
[2(A64)][{/33 pl}(33,){el}( ){/132 pl}(132){el}]506.4 1 idx03
[2(a86)][{/30 pl}(30,){el}( ){/31 pl}(31){el}]494.4 1 idx03
[2(ABS)][{/37 pl}(37,){el}( ){/84 pl}(84){el}]482.4 1 idx03
[2(ABSOLUTE)][{/85 pl}(85,){el}( ){/94 pl}(94){el}]470.4 1 idx03
[(addition)][{/42 pl}(42){el}]458.4 1 idx03
[(addressing, mixed-size)][{/131 pl}(131){el}]446.4 1 idx03
[(address-size prefixes)][{/33 pl}(33){el}]434.4 1 idx03
[(algebra)][{/36 pl}(36){el}]422.4 1 idx03
[2(ALIGN)][{/77 pl}(77,){el}( ){/79 pl}(79,){el}( ){/91 pl}(91,){el}( ){/93 pl}(93){el}]410.4 1 idx03
[(smart)][{/79 pl}(79){el}]398.4 1 idx13
[(align, elf attribute)][{/104 pl}(104){el}]386.4 1 idx03
[2(ALIGNB)][{/77 pl}(77){el}]374.4 1 idx03
[(alignment)][{/77 pl}(77){el}]362.4 1 idx03
[(in )2(bin)0( sections)][{/91 pl}(91){el}]350.4 1 idx13
[(in ELF sections)][{/104 pl}(104){el}]338.4 1 idx13
[(in )2(obj)0( sections)][{/94 pl}(94){el}]326.4 1 idx13
[(in )2(win32)0( sections)][{/97 pl}(97){el}]314.4 1 idx13
[(of ELF common variables)][{/107 pl}(107){el}]302.4 1 idx13
[2(ALIGNMODE)][{/79 pl}(79){el}]290.4 1 idx03
[2(__?ALIGNMODE?__)][{/79 pl}(79){el}]278.4 1 idx03
[2(ALINK)][{/111 pl}(111){el}]266.4 1 idx03
[2(alink.sourceforge.net)][{/111 pl}(111){el}]254.4 1 idx03
[2(all)][{/25 pl}(25){el}]242.4 1 idx03
[2(alloc)][{/104 pl}(104){el}]230.4 1 idx03
[(alternate register names)][{/79 pl}(79){el}]218.4 1 idx03
[2(altreg)][{/79 pl}(79){el}]206.4 1 idx03
[(ambiguity)][{/31 pl}(31){el}]194.4 1 idx03
[2(a.out)][]182.4 1 idx03
[(BSD version)][{/107 pl}(107){el}]170.4 1 idx13
[(Linux version)][{/107 pl}(107){el}]158.4 1 idx13
[2(aout)][{/107 pl}(107){el}]146.4 1 idx03
[2(aoutb)][{/107 pl}(107,){el}( ){/126 pl}(126){el}]134.4 1 idx03
[2(%arg)][{/68 pl}(68){el}]122.4 1 idx03
[2(arg)][{/118 pl}(118,){el}( ){/125 pl}(125){el}]110.4 1 idx03
[2(as86)][{/108 pl}(108){el}]98.4 1 idx03
[(assembler directives)][{/83 pl}(83){el}]86.4 1 idx03
[(assembly-time options)][{/23 pl}(23){el}]74.4 1 idx03
(277)pageodd
restore showpage
%%Page: 278 278
%%BeginPageSetup
save
%%EndPageSetup
/278 pa
[2(%assign)][{/51 pl}(51){el}]708 0 idx03
[2(ASSUME)][{/31 pl}(31){el}]696 0 idx03
[2(AT)][{/76 pl}(76){el}]684 0 idx03
[2(auto-sync)][{/140 pl}(140){el}]672 0 idx03
[2(-b)][{/139 pl}(139){el}]660 0 idx03
[(baddb)][{/35 pl}(35){el}]648 0 idx03
[2(bad-pragma)][{/25 pl}(25){el}]636 0 idx03
[2(--before)][{/29 pl}(29){el}]624 0 idx03
[2(bf16)][{/80 pl}(80){el}]612 0 idx03
[2(__?bfloat16?__)][{/39 pl}(39){el}]600 0 idx03
[2(bfloat16)][{/40 pl}(40){el}]588 0 idx03
[2(bin)0( output format)][{/20 pl}(20,){el}( ){/91 pl}(91){el}]576 0 idx03
[(bin, multisection)][{/92 pl}(92){el}]564 0 idx03
[(binary)][{/37 pl}(37){el}]552 0 idx03
[(binary files)][{/35 pl}(35){el}]540 0 idx03
[(bit shift)][{/42 pl}(42){el}]528 0 idx03
[2(BITS)][{/83 pl}(83,){el}( ){/91 pl}(91){el}]516 0 idx03
[2(__?BITS?__)][{/74 pl}(74){el}]504 0 idx03
[(bitwise AND)][{/42 pl}(42){el}]492 0 idx03
[(bitwise OR)][{/42 pl}(42){el}]480 0 idx03
[(bitwise XOR)][{/42 pl}(42){el}]468 0 idx03
[(block IFs)][{/67 pl}(67){el}]456 0 idx03
[2(BND)][{/84 pl}(84){el}]444 0 idx03
[2(bnd)][{/25 pl}(25){el}]432 0 idx03
[(boolean)][]420 0 idx03
[(AND)][{/41 pl}(41){el}]408 0 idx13
[(OR)][{/41 pl}(41){el}]396 0 idx13
[(XOR)][{/41 pl}(41){el}]384 0 idx13
[(boot loader)][{/91 pl}(91){el}]372 0 idx03
[(boot sector)][{/137 pl}(137){el}]360 0 idx03
[(Borland)][]348 0 idx03
[(Pascal)][{/119 pl}(119){el}]336 0 idx13
[(Win32 compilers)][{/93 pl}(93){el}]324 0 idx13
[(braces)][]312 0 idx03
[(after )2(%)0( sign)][{/59 pl}(59){el}]300 0 idx13
[(around macro parameters)][{/54 pl}(54){el}]288 0 idx13
[(BSD)][{/126 pl}(126){el}]276 0 idx03
[2(.bss)][{/105 pl}(105,){el}( ){/107 pl}(107,){el}( ){/108 pl}(108){el}]264 0 idx03
[(bug tracker)][{/275 pl}(275){el}]252 0 idx03
[(bugs)][{/275 pl}(275){el}]240 0 idx03
[2(BYTE)][{/137 pl}(137){el}]228 0 idx03
[(C calling convention)][{/115 pl}(115,){el}( ){/123 pl}(123){el}]216 0 idx03
[(C symbol names)][{/114 pl}(114){el}]204 0 idx03
[2(c16.mac)][{/118 pl}(118,){el}( ){/120 pl}(120){el}]192 0 idx03
[2(c32.mac)][{/125 pl}(125){el}]180 0 idx03
[2(CALL FAR)][{/43 pl}(43){el}]168 0 idx03
[(case sensitivity)][{/30 pl}(30,){el}( ){/47 pl}(47,){el}( ){/48 pl}(48,){el}( ){/51 pl}(51,){el}( ){/54 pl}(54,){el}( ){/61 pl}(61,){el}( ){/94 pl}(94){el}]156 0 idx03
[(changing sections)][{/84 pl}(84){el}]144 0 idx03
[(character constant)][{/34 pl}(34,){el}( ){/39 pl}(39){el}]132 0 idx03
[(character strings)][{/38 pl}(38){el}]120 0 idx03
[(circular references)][{/47 pl}(47){el}]108 0 idx03
[2(CLASS)][{/94 pl}(94){el}]96 0 idx03
[2(%clear)][{/72 pl}(72,){el}( ){/73 pl}(73){el}]84 0 idx03
[(CodeView debugging format)][{/99 pl}(99){el}]72 0 idx03
[2(coff)][{/102 pl}(102){el}]708 1 idx03
[(colon)][{/33 pl}(33){el}]696 1 idx03
[2(.COM)][{/91 pl}(91,){el}( ){/113 pl}(113){el}]684 1 idx03
[(comma)][{/56 pl}(56){el}]672 1 idx03
[(command-line)][{/19 pl}(19,){el}( ){/91 pl}(91){el}]660 1 idx03
[(commas in macro parameters)][{/56 pl}(56){el}]648 1 idx03
[2(.comment)][{/105 pl}(105){el}]636 1 idx03
[2(COMMON)][{/87 pl}(87,){el}( ){/93 pl}(93){el}]624 1 idx03
[(ELF extensions to)][{/107 pl}(107){el}]612 1 idx13
[2(obj)0( extensions to)][{/96 pl}(96){el}]600 1 idx13
[(Common Object File Format)][{/102 pl}(102){el}]588 1 idx03
[(common variables)][{/87 pl}(87){el}]576 1 idx03
[(alignment in ELF)][{/107 pl}(107){el}]564 1 idx13
[(element size)][{/96 pl}(96){el}]552 1 idx13
[(comparison operators)][{/41 pl}(41){el}]540 1 idx03
[2(comp.os.msdos.programmer)][{/114 pl}(114){el}]528 1 idx03
[(concatenating macro parameters)][{/58 pl}(58){el}]516 1 idx03
[(concatenating strings)][{/53 pl}(53){el}]504 1 idx03
[(condition codes as macro parameters)][{/59 pl}(59){el}]492 1 idx03
[(conditional assembly)][{/60 pl}(60){el}]480 1 idx03
[(conditional comma operator)][{/52 pl}(52){el}]468 1 idx03
[(conditional jumps)][{/137 pl}(137){el}]456 1 idx03
[(conditional-return macro)][{/59 pl}(59){el}]444 1 idx03
[(constants)][{/37 pl}(37){el}]432 1 idx03
[(context fall-through lookup)][{/66 pl}(66){el}]420 1 idx03
[(context stack)][{/65 pl}(65,){el}( ){/67 pl}(67){el}]408 1 idx03
[(context-local labels)][{/65 pl}(65){el}]396 1 idx03
[(context-local single-line macros)][{/66 pl}(66){el}]384 1 idx03
[(counting macro parameters)][{/57 pl}(57){el}]372 1 idx03
[2(CPU)][{/88 pl}(88){el}]360 1 idx03
[2(CPUID)][{/39 pl}(39){el}]348 1 idx03
[(creating contexts)][{/65 pl}(65){el}]336 1 idx03
[(critical expression)][{/35 pl}(35,){el}( ){/44 pl}(44,){el}( ){/51 pl}(51,){el}( ){/85 pl}(85){el}]324 1 idx03
[(\\c{section)][{/91 pl}(91){el}]312 1 idx03
[2(cv8)][{/99 pl}(99){el}]300 1 idx03
[2(-D)0( option)][{/23 pl}(23){el}]288 1 idx03
[2(-d)0( option)][{/23 pl}(23){el}]276 1 idx03
[(daily development snapshots)][{/275 pl}(275){el}]264 1 idx03
[2(.data)][{/105 pl}(105,){el}( ){/107 pl}(107,){el}( ){/108 pl}(108){el}]252 1 idx03
[2(_DATA)][{/115 pl}(115){el}]240 1 idx03
[2(data)][{/106 pl}(106,){el}( ){/109 pl}(109){el}]228 1 idx03
[(data structure)][{/117 pl}(117,){el}( ){/125 pl}(125){el}]216 1 idx03
[2(__?DATE?__)][{/74 pl}(74){el}]204 1 idx03
[2(__?DATE_NUM?__)][{/74 pl}(74){el}]192 1 idx03
[2(DB)][{/34 pl}(34,){el}( ){/39 pl}(39){el}]180 1 idx03
[2(db-empty)][{/25 pl}(25){el}]168 1 idx03
[2(dbg)][{/109 pl}(109){el}]156 1 idx03
[2(DD)][{/34 pl}(34,){el}( ){/39 pl}(39){el}]144 1 idx03
[(debug information)][{/22 pl}(22){el}]132 1 idx03
[(debug information format)][{/22 pl}(22){el}]120 1 idx03
[2(__?DEBUG_FORMAT?__)][{/74 pl}(74){el}]108 1 idx03
[(decimal)][{/37 pl}(37){el}]96 1 idx03
[(declaring structures)][{/75 pl}(75){el}]84 1 idx03
[2(%defalias)][{/52 pl}(52){el}]72 1 idx03
(278)pageeven
restore showpage
%%Page: 279 279
%%BeginPageSetup
save
%%EndPageSetup
/279 pa
[2(DEFAULT)][{/84 pl}(84){el}]708 0 idx03
[2(default)][{/106 pl}(106){el}]696 0 idx03
[(default macro parameters)][{/56 pl}(56){el}]684 0 idx03
[(default name)][{/91 pl}(91){el}]672 0 idx03
[(default-)2(WRT)0( mechanism)][{/96 pl}(96){el}]660 0 idx03
[2(%define)][{/23 pl}(23,){el}( ){/47 pl}(47){el}]648 0 idx03
[(defining sections)][{/84 pl}(84){el}]636 0 idx03
[2(%defstr)][{/51 pl}(51){el}]624 0 idx03
[2(%deftok)][{/52 pl}(52){el}]612 0 idx03
[2(%depend)][{/64 pl}(64){el}]600 0 idx03
[(design goals)][{/30 pl}(30){el}]588 0 idx03
[(DevPac)][{/44 pl}(44){el}]576 0 idx03
[(disabling listing expansion)][{/59 pl}(59){el}]564 0 idx03
[(division)][{/42 pl}(42){el}]552 0 idx03
[(signed)][{/42 pl}(42){el}]540 0 idx13
[(unsigned)][{/42 pl}(42){el}]528 0 idx13
[(DJGPP)][{/102 pl}(102,){el}( ){/123 pl}(123){el}]516 0 idx03
[2(djlink)][{/111 pl}(111){el}]504 0 idx03
[(DLL symbols)][]492 0 idx03
[(exporting)][{/95 pl}(95){el}]480 0 idx13
[(importing)][{/95 pl}(95){el}]468 0 idx13
[2(DO)][{/34 pl}(34,){el}( ){/39 pl}(39){el}]456 0 idx03
[(DOS)][{/22 pl}(22){el}]444 0 idx03
[2(DQ)][{/34 pl}(34,){el}( ){/39 pl}(39){el}]432 0 idx03
[2(.drectve)][{/97 pl}(97){el}]420 0 idx03
[2(DT)][{/34 pl}(34,){el}( ){/39 pl}(39){el}]408 0 idx03
[2(DUP)][{/34 pl}(34,){el}( ){/35 pl}(35,){el}( ){/36 pl}(36){el}]396 0 idx03
[2(DW)][{/34 pl}(34,){el}( ){/39 pl}(39){el}]384 0 idx03
[2(DWORD)][{/34 pl}(34){el}]372 0 idx03
[2(DY)][{/34 pl}(34,){el}( ){/39 pl}(39){el}]360 0 idx03
[2(DZ)][{/34 pl}(34){el}]348 0 idx03
[2(-E)0( option)][{/24 pl}(24){el}]336 0 idx03
[2(-e)0( option)][{/24 pl}(24,){el}( ){/140 pl}(140){el}]324 0 idx03
[(effective addresses)][{/33 pl}(33,){el}( ){/36 pl}(36){el}]312 0 idx03
[(element size, in common variables)][{/96 pl}(96){el}]300 0 idx03
[(ELF)][{/104 pl}(104){el}]288 0 idx03
[(shared libraries)][{/106 pl}(106){el}]276 0 idx13
[(16-bit code)][{/107 pl}(107){el}]264 0 idx13
[(debug formats)][{/107 pl}(107){el}]252 0 idx13
[2(elf32)][{/104 pl}(104){el}]240 0 idx03
[2(elf64)][{/104 pl}(104){el}]228 0 idx03
[2(elfx32)][{/104 pl}(104){el}]216 0 idx03
[2(%elif)][{/60 pl}(60,){el}( ){/61 pl}(61){el}]204 0 idx03
[2(%elifctx)][{/61 pl}(61){el}]192 0 idx03
[2(%elifdef)][{/60 pl}(60){el}]180 0 idx03
[2(%elifempty)][{/63 pl}(63){el}]168 0 idx03
[2(%elifenv)][{/63 pl}(63){el}]156 0 idx03
[2(%elifid)][{/62 pl}(62){el}]144 0 idx03
[2(%elifidn)][{/62 pl}(62){el}]132 0 idx03
[2(%elifidni)][{/62 pl}(62){el}]120 0 idx03
[2(%elifmacro)][{/61 pl}(61){el}]108 0 idx03
[2(%elifn)][{/60 pl}(60,){el}( ){/61 pl}(61){el}]96 0 idx03
[2(%elifnctx)][{/61 pl}(61){el}]84 0 idx03
[2(%elifndef)][{/60 pl}(60){el}]72 0 idx03
[2(%elifnempty)][{/63 pl}(63){el}]708 1 idx03
[2(%elifnenv)][{/63 pl}(63){el}]696 1 idx03
[2(%elifnid)][{/62 pl}(62){el}]684 1 idx03
[2(%elifnidn)][{/62 pl}(62){el}]672 1 idx03
[2(%elifnidni)][{/62 pl}(62){el}]660 1 idx03
[2(%elifnmacro)][{/61 pl}(61){el}]648 1 idx03
[2(%elifnnum)][{/62 pl}(62){el}]636 1 idx03
[2(%elifnstr)][{/62 pl}(62){el}]624 1 idx03
[2(%elifntoken)][{/63 pl}(63){el}]612 1 idx03
[2(%elifnum)][{/62 pl}(62){el}]600 1 idx03
[2(%elifstr)][{/62 pl}(62){el}]588 1 idx03
[2(%eliftoken)][{/63 pl}(63){el}]576 1 idx03
[2(%else)][{/60 pl}(60){el}]564 1 idx03
[2(endproc)][{/118 pl}(118,){el}( ){/125 pl}(125){el}]552 1 idx03
[2(%endrep)][{/63 pl}(63){el}]540 1 idx03
[2(ENDSTRUC)][{/75 pl}(75,){el}( ){/85 pl}(85){el}]528 1 idx03
[2(environment)][{/25 pl}(25,){el}( ){/30 pl}(30){el}]516 1 idx03
[2(EQU)][{/34 pl}(34,){el}( ){/35 pl}(35){el}]504 1 idx03
[2(%error)][{/70 pl}(70){el}]492 1 idx03
[(error messages)][{/22 pl}(22){el}]480 1 idx03
[(error reporting format)][{/22 pl}(22){el}]468 1 idx03
[(escape sequences)][{/38 pl}(38){el}]456 1 idx03
[2(EVEN)][{/77 pl}(77){el}]444 1 idx03
[(exact matches)][{/60 pl}(60){el}]432 1 idx03
[2(.EXE)][{/93 pl}(93,){el}( ){/111 pl}(111){el}]420 1 idx03
[2(EXE2BIN)][{/113 pl}(113){el}]408 1 idx03
[2(EXE_begin)][{/112 pl}(112){el}]396 1 idx03
[2(exebin.mac)][{/112 pl}(112){el}]384 1 idx03
[2(exec)][{/104 pl}(104){el}]372 1 idx03
[(Executable and Linkable Format)][{/104 pl}(104){el}]360 1 idx03
[2(EXE_end)][{/112 pl}(112){el}]348 1 idx03
[2(EXE_stack)][{/112 pl}(112){el}]336 1 idx03
[2(%exitrep)][{/63 pl}(63){el}]324 1 idx03
[2(EXPORT)][{/95 pl}(95){el}]312 1 idx03
[2(export)][{/108 pl}(108){el}]300 1 idx03
[(exporting symbols)][{/86 pl}(86){el}]288 1 idx03
[(expressions)][{/24 pl}(24,){el}( ){/41 pl}(41){el}]276 1 idx03
[(extension)][{/19 pl}(19,){el}( ){/91 pl}(91){el}]264 1 idx03
[2(EXTERN)][{/86 pl}(86){el}]252 1 idx03
[2(elf)0( extensions to)][{/107 pl}(107){el}]240 1 idx13
[2(obj)0( extensions to)][{/96 pl}(96){el}]228 1 idx13
[2(rdf)0( extensions to)][{/109 pl}(109){el}]216 1 idx13
[(extracting substrings)][{/53 pl}(53){el}]204 1 idx03
[2(-F)0( option)][{/22 pl}(22){el}]192 1 idx03
[2(-f)0( option)][{/20 pl}(20,){el}( ){/91 pl}(91){el}]180 1 idx03
[(far call)][{/31 pl}(31){el}]168 1 idx03
[(far common variables)][{/96 pl}(96){el}]156 1 idx03
[(far pointer)][{/43 pl}(43){el}]144 1 idx03
[2(FARCODE)][{/118 pl}(118,){el}( ){/120 pl}(120){el}]132 1 idx03
[2(%fatal)][{/70 pl}(70){el}]120 1 idx03
[2(__?FILE?__)][{/73 pl}(73){el}]108 1 idx03
[2(fini_array)][{/104 pl}(104){el}]96 1 idx03
[2(FLAT)][{/94 pl}(94){el}]84 1 idx03
[(flat memory model)][{/123 pl}(123){el}]72 1 idx03
(279)pageodd
restore showpage
%%Page: 280 280
%%BeginPageSetup
save
%%EndPageSetup
/280 pa
[(flat-form binary)][{/91 pl}(91){el}]708 0 idx03
[2(FLOAT)][{/88 pl}(88){el}]696 0 idx03
[2(__?FLOAT?__)][{/89 pl}(89){el}]684 0 idx03
[2(float)][{/25 pl}(25){el}]672 0 idx03
[2(__?float128h?__)][{/39 pl}(39){el}]660 0 idx03
[2(__?float128l?__)][{/39 pl}(39){el}]648 0 idx03
[2(__?float16?__)][{/39 pl}(39){el}]636 0 idx03
[2(__?float32?__)][{/39 pl}(39){el}]624 0 idx03
[2(__?float64?__)][{/39 pl}(39){el}]612 0 idx03
[2(__?float8?__)][{/39 pl}(39){el}]600 0 idx03
[2(__?float80e?__)][{/39 pl}(39){el}]588 0 idx03
[2(__?float80m?__)][{/39 pl}(39){el}]576 0 idx03
[2(__?FLOAT_DAZ?__)][{/89 pl}(89){el}]564 0 idx03
[2(float-denorm)][{/25 pl}(25){el}]552 0 idx03
[(floating-point)][]540 0 idx03
[(constants)][{/39 pl}(39,){el}( ){/88 pl}(88){el}]528 0 idx13
[(packed BCD constants)][{/41 pl}(41){el}]516 0 idx13
[(floating-point)][{/31 pl}(31,){el}( ){/33 pl}(33,){el}( ){/34 pl}(34,){el}( ){/39 pl}(39){el}]504 0 idx03
[2(float-overflow)][{/25 pl}(25){el}]492 0 idx03
[2(__?FLOAT_ROUND?__)][{/89 pl}(89){el}]480 0 idx03
[2(float-toolong)][{/25 pl}(25){el}]468 0 idx03
[2(float-underflow)][{/25 pl}(25){el}]456 0 idx03
[2(follows=)][{/92 pl}(92){el}]444 0 idx03
[(format-specific directives)][{/83 pl}(83){el}]432 0 idx03
[2(fp)][{/80 pl}(80){el}]420 0 idx03
[(frame pointer)][{/116 pl}(116,){el}( ){/119 pl}(119,){el}( ){/123 pl}(123){el}]408 0 idx03
[(FreeBSD)][{/107 pl}(107,){el}( ){/126 pl}(126){el}]396 0 idx03
[(FreeLink)][{/111 pl}(111){el}]384 0 idx03
[2(ftp.simtel.net)][{/111 pl}(111){el}]372 0 idx03
[2(function)][{/106 pl}(106,){el}( ){/109 pl}(109){el}]360 0 idx03
[(functions)][]348 0 idx03
[(C calling convention)][{/115 pl}(115,){el}( ){/123 pl}(123){el}]336 0 idx13
[2(PASCAL)0( calling convention)][{/119 pl}(119){el}]324 0 idx13
[2(-g)0( option)][{/22 pl}(22){el}]312 0 idx03
[2(git)][{/273 pl}(273){el}]300 0 idx03
[2(GLOBAL)][{/86 pl}(86){el}]288 0 idx03
[2(aoutb)0( extensions to)][{/106 pl}(106){el}]276 0 idx13
[(ELF extensions to)][{/106 pl}(106){el}]264 0 idx13
[2(rdf)0( extensions to)][{/108 pl}(108){el}]252 0 idx13
[(global offset table)][{/126 pl}(126){el}]240 0 idx03
[2(_GLOBAL_OFFSET_TABLE_)][{/105 pl}(105){el}]228 0 idx03
[2(\(G|L\)POSTFIX)][{/87 pl}(87){el}]216 0 idx03
[2(--\(g|l\)postfix)][{/29 pl}(29){el}]204 0 idx03
[2(\(G|L\)PREFIX)][{/87 pl}(87){el}]192 0 idx03
[2(--\(g|l\)prefix)][{/29 pl}(29){el}]180 0 idx03
[2(..got)][{/105 pl}(105){el}]168 0 idx03
[2(GOT)0( relocations)][{/127 pl}(127){el}]156 0 idx03
[(GOT)][{/105 pl}(105,){el}( ){/126 pl}(126){el}]144 0 idx03
[2(..gotoff)][{/105 pl}(105){el}]132 0 idx03
[2(GOTOFF)0( relocations)][{/127 pl}(127){el}]120 0 idx03
[2(..gotpc)][{/105 pl}(105){el}]108 0 idx03
[2(GOTPC)0( relocations)][{/126 pl}(126){el}]96 0 idx03
[2(..gottpoff)][{/106 pl}(106){el}]84 0 idx03
[(graphics)][{/35 pl}(35){el}]72 0 idx03
[(greedy macro parameters)][{/55 pl}(55){el}]708 1 idx03
[2(GROUP)][{/94 pl}(94){el}]696 1 idx03
[(groups)][{/43 pl}(43){el}]684 1 idx03
[2(-h)][{/139 pl}(139){el}]672 1 idx03
[(hexadecimal)][{/37 pl}(37){el}]660 1 idx03
[2(hidden)][{/106 pl}(106){el}]648 1 idx03
[2(hle)][{/25 pl}(25){el}]636 1 idx03
[(hybrid syntaxes)][{/31 pl}(31){el}]624 1 idx03
[2(-I)0( option)][{/23 pl}(23){el}]612 1 idx03
[2(-i)0( option)][{/23 pl}(23,){el}( ){/140 pl}(140){el}]600 1 idx03
[2(%iassign)][{/51 pl}(51){el}]588 1 idx03
[2(%idefalias)][{/52 pl}(52){el}]576 1 idx03
[2(%idefine)][{/47 pl}(47){el}]564 1 idx03
[2(%idefstr)][{/51 pl}(51){el}]552 1 idx03
[2(%ideftok)][{/52 pl}(52){el}]540 1 idx03
[2(IEND)][{/76 pl}(76){el}]528 1 idx03
[2(%if)][{/60 pl}(60,){el}( ){/61 pl}(61){el}]516 1 idx03
[2(%ifctx)][{/61 pl}(61,){el}( ){/67 pl}(67){el}]504 1 idx03
[2(%ifdef)][{/60 pl}(60){el}]492 1 idx03
[2(%ifempty)][{/63 pl}(63){el}]480 1 idx03
[2(%ifenv)][{/63 pl}(63){el}]468 1 idx03
[2(%ifid)][{/62 pl}(62){el}]456 1 idx03
[2(%ifidn)][{/61 pl}(61){el}]444 1 idx03
[2(%ifidni)][{/61 pl}(61){el}]432 1 idx03
[2(%ifmacro)][{/61 pl}(61){el}]420 1 idx03
[2(%ifn)][{/60 pl}(60,){el}( ){/61 pl}(61){el}]408 1 idx03
[2(%ifnctx)][{/61 pl}(61){el}]396 1 idx03
[2(%ifndef)][{/60 pl}(60){el}]384 1 idx03
[2(%ifnempty)][{/63 pl}(63){el}]372 1 idx03
[2(%ifnenv)][{/63 pl}(63){el}]360 1 idx03
[2(%ifnid)][{/62 pl}(62){el}]348 1 idx03
[2(%ifnidn)][{/62 pl}(62){el}]336 1 idx03
[2(%ifnidni)][{/62 pl}(62){el}]324 1 idx03
[2(%ifnmacro)][{/61 pl}(61){el}]312 1 idx03
[2(%ifnnum)][{/62 pl}(62){el}]300 1 idx03
[2(%ifnstr)][{/62 pl}(62){el}]288 1 idx03
[2(%ifntoken)][{/63 pl}(63){el}]276 1 idx03
[2(%ifnum)][{/62 pl}(62){el}]264 1 idx03
[2(%ifstr)][{/62 pl}(62){el}]252 1 idx03
[2(%iftoken)][{/62 pl}(62){el}]240 1 idx03
[2(ifunc)][{/80 pl}(80){el}]228 1 idx03
[2(ilog2\(\))][{/80 pl}(80){el}]216 1 idx03
[2(ilog2c\(\))][{/80 pl}(80){el}]204 1 idx03
[2(ilog2cw\(\))][{/80 pl}(80){el}]192 1 idx03
[2(ilog2e\(\))][{/80 pl}(80){el}]180 1 idx03
[2(ilog2f\(\))][{/80 pl}(80){el}]168 1 idx03
[2(ilog2fw\(\))][{/80 pl}(80){el}]156 1 idx03
[2(ilog2w\(\))][{/80 pl}(80){el}]144 1 idx03
[2(%imacro)][{/53 pl}(53){el}]132 1 idx03
[2(IMPORT)][{/95 pl}(95){el}]120 1 idx03
[(import library)][{/95 pl}(95){el}]108 1 idx03
[(importing symbols)][{/86 pl}(86){el}]96 1 idx03
[(unconditionally)][{/86 pl}(86){el}]84 1 idx13
[2(INCBIN)][{/34 pl}(34,){el}( ){/35 pl}(35,){el}( ){/39 pl}(39){el}]72 1 idx03
(280)pageeven
restore showpage
%%Page: 281 281
%%BeginPageSetup
save
%%EndPageSetup
/281 pa
[2(%include)][{/23 pl}(23,){el}( ){/64 pl}(64){el}]708 0 idx03
[(include search path)][{/23 pl}(23){el}]696 0 idx03
[(including other files)][{/64 pl}(64){el}]684 0 idx03
[(inefficient code)][{/137 pl}(137){el}]672 0 idx03
[(infinite loop)][{/41 pl}(41){el}]660 0 idx03
[2(__?Infinity?__)][{/40 pl}(40){el}]648 0 idx03
[(infinity)][{/40 pl}(40){el}]636 0 idx03
[(informational section)][{/97 pl}(97){el}]624 0 idx03
[2(init_array)][{/104 pl}(104){el}]612 0 idx03
[(instances of structures)][{/76 pl}(76){el}]600 0 idx03
[(instruction list)][{/143 pl}(143){el}]588 0 idx03
[(integer functions)][{/80 pl}(80){el}]576 0 idx03
[(integer logarithms)][{/80 pl}(80){el}]564 0 idx03
[(intel hex)][{/92 pl}(92){el}]552 0 idx03
[(Intel number formats)][{/40 pl}(40){el}]540 0 idx03
[2(internal)][{/106 pl}(106){el}]528 0 idx03
[2(ISTRUC)][{/76 pl}(76){el}]516 0 idx03
[(iterating over macro parameters)][{/57 pl}(57){el}]504 0 idx03
[2(ith)][{/92 pl}(92){el}]492 0 idx03
[2(%ixdefine)][{/48 pl}(48){el}]480 0 idx03
[2(Jcc NEAR)][{/137 pl}(137){el}]468 0 idx03
[2(JMP DWORD)][{/131 pl}(131){el}]456 0 idx03
[(jumps, mixed-size)][{/131 pl}(131){el}]444 0 idx03
[2(-k)][{/140 pl}(140){el}]432 0 idx03
[2(--keep-all)][{/30 pl}(30){el}]420 0 idx03
[2(-L)0( option)][{/20 pl}(20){el}]408 0 idx03
[2(-l)0( option)][{/20 pl}(20){el}]396 0 idx03
[2(label)][{/25 pl}(25){el}]384 0 idx03
[(label preceeding macro)][{/57 pl}(57){el}]372 0 idx03
[(label prefix)][{/45 pl}(45){el}]360 0 idx03
[2(label-orphan)][{/26 pl}(26,){el}( ){/33 pl}(33){el}]348 0 idx03
[2(label-redef)][{/26 pl}(26){el}]336 0 idx03
[2(label-redef-late)][{/26 pl}(26){el}]324 0 idx03
[(last)][{/56 pl}(56){el}]312 0 idx03
[2(.lbss)][{/105 pl}(105){el}]300 0 idx03
[2(ld86)][{/108 pl}(108){el}]288 0 idx03
[2(.ldata)][{/105 pl}(105){el}]276 0 idx03
[2(LIBRARY)][{/108 pl}(108){el}]264 0 idx03
[(license)][{/17 pl}(17){el}]252 0 idx03
[2(--limit-X)][{/29 pl}(29){el}]240 0 idx03
[2(%line)][{/30 pl}(30,){el}( ){/71 pl}(71){el}]228 0 idx03
[2(__?LINE?__)][{/73 pl}(73){el}]216 0 idx03
[(linker, free)][{/111 pl}(111){el}]204 0 idx03
[(Linux)][]192 0 idx03
[2(a.out)][{/107 pl}(107){el}]180 0 idx13
[2(as86)][{/108 pl}(108){el}]168 0 idx13
[(ELF)][{/104 pl}(104){el}]156 0 idx13
[(listing file)][{/20 pl}(20){el}]144 0 idx03
[(little-endian)][{/39 pl}(39){el}]132 0 idx03
[2(%local)][{/69 pl}(69){el}]120 0 idx03
[(local labels)][{/44 pl}(44){el}]108 0 idx03
[2(lock)][{/26 pl}(26){el}]96 0 idx03
[2(.lrodata)][{/105 pl}(105){el}]84 0 idx03
[2(-M)0( option)][{/21 pl}(21){el}]72 0 idx03
[(Mach, object file format)][{/102 pl}(102){el}]708 1 idx03
[(Mach-O, object file format)][{/102 pl}(102){el}]696 1 idx03
[2(macho32)][{/102 pl}(102){el}]684 1 idx03
[2(macho64)][{/102 pl}(102){el}]672 1 idx03
[(MacOS X)][{/102 pl}(102){el}]660 1 idx03
[2(%macro)][{/53 pl}(53){el}]648 1 idx03
[2(macro)][{/26 pl}(26){el}]636 1 idx03
[(macro indirection)][{/49 pl}(49){el}]624 1 idx03
[(macro library)][{/23 pl}(23){el}]612 1 idx03
[(macro parameters range)][{/56 pl}(56){el}]600 1 idx03
[(macro processor)][{/47 pl}(47){el}]588 1 idx03
[2(macro-def)][{/26 pl}(26){el}]576 1 idx03
[2(macro-defaults)][{/26 pl}(26){el}]564 1 idx03
[2(macro-def-case-single)][{/26 pl}(26){el}]552 1 idx03
[2(macro-def-greedy-single)][{/26 pl}(26){el}]540 1 idx03
[2(macro-def-param-single)][{/26 pl}(26){el}]528 1 idx03
[(macro-local labels)][{/55 pl}(55){el}]516 1 idx03
[2(macro-params)][{/26 pl}(26){el}]504 1 idx03
[2(macro-params-legacy)][{/26 pl}(26){el}]492 1 idx03
[2(macro-params-multi)][{/27 pl}(27){el}]480 1 idx03
[2(macro-params-single)][{/27 pl}(27){el}]468 1 idx03
[(macros)][{/36 pl}(36){el}]456 1 idx03
[(makefile dependencies)][{/21 pl}(21){el}]444 1 idx03
[(map files)][{/92 pl}(92){el}]432 1 idx03
[(MASM)][{/30 pl}(30,){el}( ){/34 pl}(34,){el}( ){/36 pl}(36,){el}( ){/80 pl}(80,){el}( ){/93 pl}(93){el}]420 1 idx03
[(masm compatibility)][{/80 pl}(80){el}]408 1 idx03
[2(DB)0( syntax)][{/34 pl}(34,){el}( ){/35 pl}(35){el}]396 1 idx13
[2(-MD)0( option)][{/21 pl}(21){el}]384 1 idx03
[(memory models)][{/31 pl}(31,){el}( ){/115 pl}(115){el}]372 1 idx03
[(memory operand)][{/34 pl}(34){el}]360 1 idx03
[(memory references)][{/30 pl}(30,){el}( ){/36 pl}(36){el}]348 1 idx03
[2(merge)][{/105 pl}(105){el}]336 1 idx03
[2(-MF)0( option)][{/21 pl}(21){el}]324 1 idx03
[2(-MG)0( option)][{/21 pl}(21){el}]312 1 idx03
[(Microsoft OMF)][{/93 pl}(93){el}]300 1 idx03
[(minifloat)][{/40 pl}(40){el}]288 1 idx03
[(Minix)][{/108 pl}(108){el}]276 1 idx03
[2(misc)0( subdirectory)][{/112 pl}(112,){el}( ){/118 pl}(118,){el}( ){/125 pl}(125){el}]264 1 idx03
[(mixed-language program)][{/114 pl}(114){el}]252 1 idx03
[(mixed-size addressing)][{/131 pl}(131){el}]240 1 idx03
[(mixed-size instruction)][{/131 pl}(131){el}]228 1 idx03
[2(MODULE)][{/108 pl}(108){el}]216 1 idx03
[(modulo)][{/42 pl}(42){el}]204 1 idx03
[(signed)][{/42 pl}(42){el}]192 1 idx13
[(unsigned)][{/42 pl}(42){el}]180 1 idx13
[(motorola s-records)][{/92 pl}(92){el}]168 1 idx03
[2(-MP)0( option)][{/21 pl}(21){el}]156 1 idx03
[2(-MQ)0( option)][{/21 pl}(21){el}]144 1 idx03
[(MS-DOS)][{/91 pl}(91){el}]132 1 idx03
[(MS-DOS device drivers)][{/114 pl}(114){el}]120 1 idx03
[2(-MT)0( option)][{/21 pl}(21){el}]108 1 idx03
[(multi-line macros)][{/26 pl}(26,){el}( ){/27 pl}(27,){el}( ){/53 pl}(53){el}]96 1 idx03
[(multipass optimization)][{/24 pl}(24){el}]84 1 idx03
[(multiple section names)][{/91 pl}(91){el}]72 1 idx03
(281)pageodd
restore showpage
%%Page: 282 282
%%BeginPageSetup
save
%%EndPageSetup
/282 pa
[(multiplication)][{/42 pl}(42){el}]708 0 idx03
[(multiplier)][{/105 pl}(105){el}]696 0 idx03
[2(multipush)0( macro)][{/58 pl}(58){el}]684 0 idx03
[(multisection)][{/92 pl}(92){el}]672 0 idx03
[2(-MW)0( option)][{/21 pl}(21){el}]660 0 idx03
[2(__?NaN?__)][{/40 pl}(40){el}]648 0 idx03
[(NaN)][{/40 pl}(40){el}]636 0 idx03
[(NASM version)][]624 0 idx03
[(history)][{/235 pl}(235){el}]612 0 idx13
[(ID macro)][{/73 pl}(73){el}]600 0 idx13
[(macros)][{/73 pl}(73){el}]588 0 idx13
[(string macro)][{/73 pl}(73){el}]576 0 idx13
[2(__NASMDEFSEG)][{/93 pl}(93){el}]564 0 idx03
[2(nasm-devel)][{/275 pl}(275){el}]552 0 idx03
[2(NASMENV)][{/30 pl}(30){el}]540 0 idx03
[2(nasm -h)][{/20 pl}(20){el}]528 0 idx03
[2(__?NASM_MAJOR?__)][{/73 pl}(73){el}]516 0 idx03
[2(__?NASM_MINOR?__)][{/73 pl}(73){el}]504 0 idx03
[2(nasm.out)][{/19 pl}(19){el}]492 0 idx03
[2(__?NASM_PATCHLEVEL?__)][{/73 pl}(73){el}]480 0 idx03
[2(__?NASM_SNAPSHOT?__)][{/73 pl}(73){el}]468 0 idx03
[2(__?NASM_SUBMINOR?__)][{/73 pl}(73){el}]456 0 idx03
[2(__?NASM_VER?__)][{/73 pl}(73){el}]444 0 idx03
[2(__?NASM_VERSION_ID?__)][{/73 pl}(73){el}]432 0 idx03
[(ndisasm)][{/139 pl}(139){el}]420 0 idx03
[(near call)][{/31 pl}(31){el}]408 0 idx03
[(near common variables)][{/96 pl}(96){el}]396 0 idx03
[(negation)][]384 0 idx03
[(arithmetic)][{/42 pl}(42){el}]372 0 idx13
[(bitwise)][{/42 pl}(42){el}]360 0 idx13
[(boolean)][{/42 pl}(42){el}]348 0 idx13
[(bitwise)][{/42 pl}(42){el}]336 0 idx13
[(boolean)][{/42 pl}(42){el}]324 0 idx13
[2(negative-rep)][{/27 pl}(27){el}]312 0 idx03
[(NetBSD)][{/107 pl}(107,){el}( ){/126 pl}(126){el}]300 0 idx03
[(new releases)][{/275 pl}(275){el}]288 0 idx03
[2(noalloc)][{/104 pl}(104){el}]276 0 idx03
[2(nobits)][{/92 pl}(92,){el}( ){/104 pl}(104){el}]264 0 idx03
[2(NOBND)][{/84 pl}(84){el}]252 0 idx03
[2(no_dead_strip)][{/103 pl}(103){el}]240 0 idx03
[2(noexec)][{/104 pl}(104){el}]228 0 idx03
[2(--no-line)][{/30 pl}(30,){el}( ){/71 pl}(71){el}]216 0 idx03
[2(.nolist)][{/59 pl}(59){el}]204 0 idx03
[2(note)][{/104 pl}(104){el}]192 0 idx03
[2(not-my-pragma)][{/27 pl}(27){el}]180 0 idx03
[(`nowait')][{/32 pl}(32){el}]168 0 idx03
[2(nowrite)][{/104 pl}(104){el}]156 0 idx03
[(NSIS)][{/273 pl}(273){el}]144 0 idx03
[(Nullsoft Scriptable Installer)][{/273 pl}(273){el}]132 0 idx03
[2(number-overflow)][{/27 pl}(27){el}]120 0 idx03
[(numeric constants)][{/34 pl}(34,){el}( ){/37 pl}(37){el}]108 0 idx03
[2(-O)0( option)][{/24 pl}(24){el}]96 0 idx03
[2(-o)0( option)][{/19 pl}(19,){el}( ){/139 pl}(139){el}]84 0 idx03
[2(O16)][{/33 pl}(33,){el}( ){/132 pl}(132){el}]72 0 idx03
[2(O32)][{/33 pl}(33,){el}( ){/132 pl}(132){el}]708 1 idx03
[2(O64)][{/33 pl}(33){el}]696 1 idx03
[2(.obj)][{/111 pl}(111){el}]684 1 idx03
[2(obj)][{/93 pl}(93){el}]672 1 idx03
[2(object)][{/106 pl}(106,){el}( ){/109 pl}(109){el}]660 1 idx03
[2(obsolete)][{/27 pl}(27){el}]648 1 idx03
[2(obsolete-nop)][{/27 pl}(27){el}]636 1 idx03
[2(obsolete-removed)][{/27 pl}(27){el}]624 1 idx03
[2(obsolete-valid)][{/27 pl}(27){el}]612 1 idx03
[(octal)][{/37 pl}(37){el}]600 1 idx03
[2(OF_DEFAULT)][{/20 pl}(20){el}]588 1 idx03
[2(OFFSET)][{/31 pl}(31){el}]576 1 idx03
[(OMF)][{/93 pl}(93){el}]564 1 idx03
[(omitted parameters)][{/56 pl}(56){el}]552 1 idx03
[(OpenBSD)][{/107 pl}(107,){el}( ){/126 pl}(126){el}]540 1 idx03
[(operands)][{/33 pl}(33){el}]528 1 idx03
[(operand-size prefixes)][{/33 pl}(33){el}]516 1 idx03
[(operating system)][{/91 pl}(91){el}]504 1 idx03
[(writing)][{/131 pl}(131){el}]492 1 idx13
[(operators)][{/41 pl}(41){el}]480 1 idx03
[(unary)][{/42 pl}(42){el}]468 1 idx13
[2(ORG)][{/91 pl}(91,){el}( ){/113 pl}(113,){el}( ){/137 pl}(137){el}]456 1 idx03
[2(orphan-labels)][{/27 pl}(27){el}]444 1 idx03
[(OS/2)][{/93 pl}(93,){el}( ){/94 pl}(94){el}]432 1 idx03
[2(osabi)][{/104 pl}(104){el}]420 1 idx03
[2(other)][{/27 pl}(27){el}]408 1 idx03
[(other preprocessor directives)][{/71 pl}(71){el}]396 1 idx03
[(out of range, jumps)][{/137 pl}(137){el}]384 1 idx03
[(output file format)][{/20 pl}(20){el}]372 1 idx03
[(output formats)][{/91 pl}(91){el}]360 1 idx03
[2(__?OUTPUT_FORMAT?__)][{/74 pl}(74){el}]348 1 idx03
[(overlapping segments)][{/43 pl}(43){el}]336 1 idx03
[2(OVERLAY)][{/94 pl}(94){el}]324 1 idx03
[(overloading)][]312 1 idx03
[(multi-line macros)][{/54 pl}(54){el}]300 1 idx13
[(single-line macros)][{/47 pl}(47){el}]288 1 idx13
[2(-P)0( option)][{/23 pl}(23){el}]276 1 idx03
[2(-p)0( option)][{/23 pl}(23,){el}( ){/64 pl}(64){el}]264 1 idx03
[(paradox)][{/44 pl}(44){el}]252 1 idx03
[2(PASCAL)][{/120 pl}(120){el}]240 1 idx03
[(Pascal calling convention)][{/119 pl}(119){el}]228 1 idx03
[2(__?PASS?__)][{/75 pl}(75){el}]216 1 idx03
[2(%pathsearch)][{/23 pl}(23,){el}( ){/64 pl}(64){el}]204 1 idx03
[(period)][{/44 pl}(44){el}]192 1 idx03
[(PharLap)][{/94 pl}(94){el}]180 1 idx03
[2(phase)][{/27 pl}(27){el}]168 1 idx03
[(PIC)][{/105 pl}(105,){el}( ){/107 pl}(107,){el}( ){/126 pl}(126){el}]156 1 idx03
[2(..plt)][{/105 pl}(105){el}]144 1 idx03
[2(PLT)0( relocations)][{/106 pl}(106,){el}( ){/127 pl}(127,){el}( ){/128 pl}(128){el}]132 1 idx03
[(plt relocations)][{/128 pl}(128){el}]120 1 idx03
[(pointer, elf attribute)][{/105 pl}(105){el}]108 1 idx03
[2(%pop)][{/65 pl}(65){el}]96 1 idx03
[(position-independent code)][{/105 pl}(105,){el}( ){/107 pl}(107,){el}( ){/126 pl}(126){el}]84 1 idx03
[2(%pragma)][{/70 pl}(70){el}]72 1 idx03
(282)pageeven
restore showpage
%%Page: 283 283
%%BeginPageSetup
save
%%EndPageSetup
/283 pa
[2(--pragma)][{/29 pl}(29){el}]708 0 idx03
[2(pragma)][{/27 pl}(27){el}]696 0 idx03
[2(pragma-bad)][{/27 pl}(27){el}]684 0 idx03
[2(pragma-empty)][{/27 pl}(27){el}]672 0 idx03
[2(pragma-na)][{/28 pl}(28){el}]660 0 idx03
[2(pragma-unknown)][{/28 pl}(28){el}]648 0 idx03
[(precedence)][{/41 pl}(41){el}]636 0 idx03
[(pre-defining macros)][{/23 pl}(23,){el}( ){/48 pl}(48){el}]624 0 idx03
[(preferred)][{/43 pl}(43){el}]612 0 idx03
[(pre-including files)][{/23 pl}(23){el}]600 0 idx03
[2(preinit_array)][{/104 pl}(104){el}]588 0 idx03
[(preprocess-only mode)][{/24 pl}(24){el}]576 0 idx03
[(preprocessor)][{/24 pl}(24,){el}( ){/36 pl}(36,){el}( ){/42 pl}(42,){el}( ){/47 pl}(47){el}]564 0 idx03
[(preprocessor expressions)][{/24 pl}(24){el}]552 0 idx03
[(preprocessor loops)][{/63 pl}(63){el}]540 0 idx03
[(preprocessor variables)][{/51 pl}(51){el}]528 0 idx03
[(primitive directives)][{/83 pl}(83){el}]516 0 idx03
[2(PRIVATE)][{/93 pl}(93){el}]504 0 idx03
[2(private_extern)][{/104 pl}(104){el}]492 0 idx03
[2(proc)][{/109 pl}(109,){el}( ){/118 pl}(118,){el}( ){/125 pl}(125){el}]480 0 idx03
[(procedure linkage table)][{/106 pl}(106,){el}( ){/127 pl}(127,){el}( ){/128 pl}(128){el}]468 0 idx03
[(processor mode)][{/83 pl}(83){el}]456 0 idx03
[2(progbits)][{/92 pl}(92,){el}( ){/104 pl}(104){el}]444 0 idx03
[(program entry point)][{/95 pl}(95,){el}( ){/111 pl}(111){el}]432 0 idx03
[(program origin)][{/91 pl}(91){el}]420 0 idx03
[2(protected)][{/106 pl}(106){el}]408 0 idx03
[(pseudo-instructions)][{/34 pl}(34){el}]396 0 idx03
[2(ptr)][{/28 pl}(28){el}]384 0 idx03
[2(PUBLIC)][{/86 pl}(86,){el}( ){/93 pl}(93){el}]372 0 idx03
[(pure binary)][{/91 pl}(91){el}]360 0 idx03
[2(%push)][{/65 pl}(65){el}]348 0 idx03
[2(__?QNaN?__)][{/40 pl}(40){el}]336 0 idx03
[(quick start)][{/30 pl}(30){el}]324 0 idx03
[2(QWORD)][{/34 pl}(34){el}]312 0 idx03
[2(-r)][{/139 pl}(139){el}]300 0 idx03
[2(rdf)][{/108 pl}(108){el}]288 0 idx03
[2(rdoff)0( subdirectory)][{/108 pl}(108){el}]276 0 idx03
[(redirecting errors)][{/22 pl}(22){el}]264 0 idx03
[2(regsize)][{/28 pl}(28){el}]252 0 idx03
[2(REL)][{/37 pl}(37,){el}( ){/84 pl}(84){el}]240 0 idx03
[(release candidates)][{/275 pl}(275){el}]228 0 idx03
[(Relocatable Dynamic Object File)][]216 0 idx01
[(Format)][{/108 pl}(108){el}]204 0 idx02
[(relocations, PIC-specific)][{/105 pl}(105){el}]192 0 idx03
[(removing contexts)][{/65 pl}(65){el}]180 0 idx03
[(renaming contexts)][{/67 pl}(67){el}]168 0 idx03
[2(%rep)][{/36 pl}(36,){el}( ){/63 pl}(63){el}]156 0 idx03
[(repeating)][{/36 pl}(36,){el}( ){/63 pl}(63){el}]144 0 idx03
[2(%repl)][{/67 pl}(67){el}]132 0 idx03
[(reporting bugs)][{/275 pl}(275){el}]120 0 idx03
[2(--reproducible)][{/30 pl}(30){el}]108 0 idx03
[2(REQUIRED)][{/86 pl}(86){el}]96 0 idx03
[2(RESB)][{/34 pl}(34,){el}( ){/35 pl}(35){el}]84 0 idx03
[2(RESD)][{/34 pl}(34,){el}( ){/35 pl}(35){el}]72 0 idx03
[2(RESO)][{/34 pl}(34,){el}( ){/35 pl}(35){el}]708 1 idx03
[2(RESQ)][{/34 pl}(34,){el}( ){/35 pl}(35){el}]696 1 idx03
[2(REST)][{/34 pl}(34,){el}( ){/35 pl}(35){el}]684 1 idx03
[2(RESW)][{/34 pl}(34,){el}( ){/35 pl}(35){el}]672 1 idx03
[2(RESY)][{/34 pl}(34,){el}( ){/35 pl}(35){el}]660 1 idx03
[2(RESZ)][{/34 pl}(34,){el}( ){/35 pl}(35){el}]648 1 idx03
[2(.rodata)][{/105 pl}(105){el}]636 1 idx03
[2(%rotate)][{/57 pl}(57){el}]624 1 idx03
[(rotating macro parameters)][{/57 pl}(57){el}]612 1 idx03
[2(-s)0( option)][{/22 pl}(22,){el}( ){/140 pl}(140){el}]600 1 idx03
[(searching for include files)][{/64 pl}(64){el}]588 1 idx03
[2(__?SECT?__)][{/84 pl}(84,){el}( ){/85 pl}(85){el}]576 1 idx03
[2(SECTALIGN)][{/78 pl}(78){el}]564 1 idx03
[2(SECTION)][{/84 pl}(84){el}]552 1 idx03
[(ELF extensions to)][{/104 pl}(104){el}]540 1 idx13
[2(macho)0( extensions to)][{/103 pl}(103){el}]528 1 idx13
[(Windows extensions to)][{/97 pl}(97){el}]516 1 idx13
[(section alignment)][]504 1 idx03
[(in )2(bin)][{/91 pl}(91){el}]492 1 idx13
[(in ELF)][{/104 pl}(104){el}]480 1 idx13
[(in )2(obj)][{/94 pl}(94){el}]468 1 idx13
[(in )2(win32)][{/97 pl}(97){el}]456 1 idx13
[2(SEG)][{/43 pl}(43,){el}( ){/93 pl}(93){el}]444 1 idx03
[2(SEGMENT)][{/84 pl}(84){el}]432 1 idx03
[2(obj)0( extensions to)][{/93 pl}(93){el}]420 1 idx13
[(segment address)][{/42 pl}(42,){el}( ){/43 pl}(43){el}]408 1 idx03
[(segment alignment)][]396 1 idx03
[(in )2(bin)][{/91 pl}(91){el}]384 1 idx13
[(in )2(obj)][{/94 pl}(94){el}]372 1 idx13
[(segment names, Borland Pascal)][{/120 pl}(120){el}]360 1 idx03
[(segment override)][{/31 pl}(31,){el}( ){/33 pl}(33){el}]348 1 idx03
[(segments)][{/43 pl}(43){el}]336 1 idx03
[(groups of)][{/94 pl}(94){el}]324 1 idx13
[(separator character)][{/30 pl}(30){el}]312 1 idx03
[(shared libraries)][{/107 pl}(107,){el}( ){/126 pl}(126){el}]300 1 idx03
[2(shift)0( command)][{/57 pl}(57){el}]288 1 idx03
[(signed)][]276 1 idx03
[(bit shift)][{/42 pl}(42){el}]264 1 idx13
[(division)][{/42 pl}(42){el}]252 1 idx13
[(modulo)][{/42 pl}(42){el}]240 1 idx13
[(single-line macros)][{/27 pl}(27,){el}( ){/47 pl}(47){el}]228 1 idx03
[(size, of symbols)][{/106 pl}(106){el}]216 1 idx03
[2(smartalign)][{/79 pl}(79){el}]204 1 idx03
[2(__?SNaN?__)][{/40 pl}(40){el}]192 1 idx03
[(snapshots, daily development)][{/275 pl}(275){el}]180 1 idx03
[(Solaris x86)][{/104 pl}(104){el}]168 1 idx03
[2(-soname)][{/129 pl}(129){el}]156 1 idx03
[(sound)][{/35 pl}(35){el}]144 1 idx03
[(source-listing file)][{/20 pl}(20){el}]132 1 idx03
[(square brackets)][{/30 pl}(30,){el}( ){/36 pl}(36){el}]120 1 idx03
[2(srec)][{/92 pl}(92){el}]108 1 idx03
[2(STACK)][{/93 pl}(93){el}]96 1 idx03
[(stack relative preprocessor directives)][{/68 pl}(68){el}]84 1 idx03
[2(%stacksize)][{/69 pl}(69){el}]72 1 idx03
(283)pageodd
restore showpage
%%Page: 284 284
%%BeginPageSetup
save
%%EndPageSetup
/284 pa
[(standard macro packages)][{/79 pl}(79){el}]708 0 idx03
[(standard macros)][{/73 pl}(73){el}]696 0 idx03
[(standardized section names)][{/84 pl}(84,){el}( ){/97 pl}(97,){el}( ){/104 pl}(104,){el}]684 0 idx01
[][{/107 pl}(107,){el}( ){/108 pl}(108){el}]672 0 idx02
[2(..start)][{/95 pl}(95,){el}( ){/111 pl}(111){el}]660 0 idx03
[2(start=)][{/92 pl}(92){el}]648 0 idx03
[2(STATIC)][{/87 pl}(87){el}]636 0 idx03
[2(stderr)][{/22 pl}(22){el}]624 0 idx03
[2(stdout)][{/22 pl}(22){el}]612 0 idx03
[2(%strcat)][{/53 pl}(53){el}]600 0 idx03
[2(STRICT)][{/43 pl}(43){el}]588 0 idx03
[(string)][{/38 pl}(38){el}]576 0 idx03
[(constants)][{/34 pl}(34,){el}( ){/38 pl}(38,){el}( ){/39 pl}(39){el}]564 0 idx13
[(length)][{/53 pl}(53){el}]552 0 idx13
[(manipulation in macros)][{/52 pl}(52){el}]540 0 idx13
[(strings, elf attribute)][{/105 pl}(105){el}]528 0 idx03
[2(%strlen)][{/53 pl}(53){el}]516 0 idx03
[2(strong)][{/106 pl}(106){el}]504 0 idx03
[2(STRUC)][{/75 pl}(75,){el}( ){/85 pl}(85,){el}( ){/117 pl}(117,){el}( ){/125 pl}(125){el}]492 0 idx03
[(structure data types)][{/75 pl}(75){el}]480 0 idx03
[(stub preprocessor)][{/24 pl}(24){el}]468 0 idx03
[2(subsections_via_symbols)][{/103 pl}(103){el}]456 0 idx03
[2(%substr)][{/53 pl}(53){el}]444 0 idx03
[(subtraction)][{/42 pl}(42){el}]432 0 idx03
[(suppressing preprocessing)][{/24 pl}(24){el}]420 0 idx03
[(switching between sections)][{/84 pl}(84){el}]408 0 idx03
[2(..sym)][{/105 pl}(105){el}]396 0 idx03
[(symbols)][]384 0 idx03
[(exporting from DLLs)][{/95 pl}(95){el}]372 0 idx13
[(importing from DLLs)][{/95 pl}(95){el}]360 0 idx13
[(specifying sizes)][{/106 pl}(106){el}]348 0 idx13
[(specifying types)][{/106 pl}(106){el}]336 0 idx13
[(synchronization)][{/140 pl}(140){el}]324 0 idx03
[2(.SYS)][{/91 pl}(91,){el}( ){/114 pl}(114){el}]312 0 idx03
[2(-t)][{/24 pl}(24){el}]300 0 idx03
[2(TASM)][{/24 pl}(24){el}]288 0 idx03
[(tasm)][{/30 pl}(30,){el}( ){/93 pl}(93){el}]276 0 idx03
[2(.tbss)][{/105 pl}(105){el}]264 0 idx03
[2(TBYTE)][{/32 pl}(32){el}]252 0 idx03
[2(.tdata)][{/105 pl}(105){el}]240 0 idx03
[2(test)0( subdirectory)][{/111 pl}(111){el}]228 0 idx03
[(testing)][]216 0 idx03
[(arbitrary numeric expressions)][{/61 pl}(61){el}]204 0 idx13
[(context stack)][{/61 pl}(61){el}]192 0 idx13
[(exact text identity)][{/61 pl}(61){el}]180 0 idx13
[(multi-line macro existence)][{/61 pl}(61){el}]168 0 idx13
[(single-line macro existence)][{/60 pl}(60){el}]156 0 idx13
[(token types)][{/62 pl}(62){el}]144 0 idx13
[2(.text)][{/105 pl}(105,){el}( ){/107 pl}(107,){el}( ){/108 pl}(108){el}]132 0 idx03
[2(_TEXT)][{/115 pl}(115){el}]120 0 idx03
[(thread local storage)][]108 0 idx03
[(in ELF)][{/106 pl}(106){el}]96 0 idx13
[(in )2(macho)][{/103 pl}(103){el}]84 0 idx13
[2(__?TIME?__)][{/74 pl}(74){el}]72 0 idx03
[2(__?TIME_NUM?__)][{/74 pl}(74){el}]708 1 idx03
[2(TIMES)][{/34 pl}(34,){el}( ){/36 pl}(36,){el}( ){/44 pl}(44,){el}( ){/137 pl}(137,){el}( ){/138 pl}(138){el}]696 1 idx03
[2(TLINK)][{/113 pl}(113){el}]684 1 idx03
[(tls)][{/103 pl}(103,){el}( ){/105 pl}(105,){el}( ){/106 pl}(106){el}]672 1 idx03
[2(..tlsie)][{/106 pl}(106){el}]660 1 idx03
[(trailing colon)][{/33 pl}(33){el}]648 1 idx03
[2(TWORD)][{/32 pl}(32,){el}( ){/34 pl}(34){el}]636 1 idx03
[(type, of symbols)][{/106 pl}(106){el}]624 1 idx03
[2(-U)0( option)][{/23 pl}(23){el}]612 1 idx03
[2(-u)0( option)][{/23 pl}(23,){el}( ){/139 pl}(139){el}]600 1 idx03
[(unary operators)][{/42 pl}(42){el}]588 1 idx03
[2(%undef)][{/23 pl}(23,){el}( ){/51 pl}(51){el}]576 1 idx03
[(undefining macros)][{/23 pl}(23){el}]564 1 idx03
[(underscore, in C symbols)][{/114 pl}(114){el}]552 1 idx03
[(Unicode)][{/38 pl}(38,){el}( ){/39 pl}(39){el}]540 1 idx03
[(uninitialized storage)][{/32 pl}(32,){el}( ){/34 pl}(34){el}]528 1 idx03
[(uninitialized)][{/34 pl}(34,){el}( ){/35 pl}(35){el}]516 1 idx03
[(Unix)][]504 1 idx03
[(SCO)][{/104 pl}(104){el}]492 1 idx13
[(System V)][{/104 pl}(104){el}]480 1 idx13
[(UnixWare)][{/104 pl}(104){el}]468 1 idx03
[2(unknown-pragma)][{/28 pl}(28){el}]456 1 idx03
[2(unknown-warning)][{/28 pl}(28){el}]444 1 idx03
[2(%unmacro)][{/60 pl}(60){el}]432 1 idx03
[(unrolled loops)][{/36 pl}(36){el}]420 1 idx03
[(unsigned)][]408 1 idx03
[(bit shift)][{/42 pl}(42){el}]396 1 idx13
[(division)][{/42 pl}(42){el}]384 1 idx13
[(modulo)][{/42 pl}(42){el}]372 1 idx13
[2(UPPERCASE)][{/30 pl}(30,){el}( ){/94 pl}(94){el}]360 1 idx03
[2(%use)][{/65 pl}(65,){el}( ){/79 pl}(79){el}]348 1 idx03
[2(__?USE_*?__)][{/75 pl}(75){el}]336 1 idx03
[2(USE16)][{/84 pl}(84,){el}( ){/94 pl}(94){el}]324 1 idx03
[2(USE32)][{/84 pl}(84,){el}( ){/94 pl}(94){el}]312 1 idx03
[2(user)][{/28 pl}(28){el}]300 1 idx03
[(user-defined errors)][{/70 pl}(70){el}]288 1 idx03
[(user-level directives)][{/73 pl}(73,){el}( ){/83 pl}(83){el}]276 1 idx03
[2(__?UTC_DATE?__)][{/74 pl}(74){el}]264 1 idx03
[2(__?UTC_DATE_NUM?__)][{/74 pl}(74){el}]252 1 idx03
[2(__?UTC_TIME?__)][{/74 pl}(74){el}]240 1 idx03
[2(__?UTC_TIME_NUM?__)][{/74 pl}(74){el}]228 1 idx03
[(UTF-16)][{/39 pl}(39){el}]216 1 idx03
[(UTF-32)][{/39 pl}(39){el}]204 1 idx03
[(UTF-8)][{/38 pl}(38){el}]192 1 idx03
[2(__?utf16?__)][{/39 pl}(39){el}]180 1 idx03
[2(__?utf16be?__)][{/39 pl}(39){el}]168 1 idx03
[2(__?utf16le?__)][{/39 pl}(39){el}]156 1 idx03
[2(__?utf32?__)][{/39 pl}(39){el}]144 1 idx03
[2(__?utf32be?__)][{/39 pl}(39){el}]132 1 idx03
[2(__?utf32le?__)][{/39 pl}(39){el}]120 1 idx03
[2(--v)][{/29 pl}(29){el}]108 1 idx03
[2(-v)0( option)][{/29 pl}(29){el}]96 1 idx03
[(VAL)][{/111 pl}(111){el}]84 1 idx03
[(valid characters)][{/33 pl}(33){el}]72 1 idx03
(284)pageeven
restore showpage
%%Page: 285 285
%%BeginPageSetup
save
%%EndPageSetup
/285 pa
[(variable types)][{/31 pl}(31){el}]708 0 idx03
[(version number of nasm)][{/73 pl}(73){el}]696 0 idx03
[(version)][{/29 pl}(29){el}]684 0 idx03
[2(vfollows=)][{/92 pl}(92){el}]672 0 idx03
[(Visual C++)][{/97 pl}(97){el}]660 0 idx03
[2(vstart=)][{/92 pl}(92){el}]648 0 idx03
[2(-W)0( option)][{/25 pl}(25){el}]636 0 idx03
[2(-w)0( option)][{/25 pl}(25){el}]624 0 idx03
[2(%warning)][{/70 pl}(70){el}]612 0 idx03
[2([WARNING])][{/29 pl}(29,){el}( ){/89 pl}(89){el}]600 0 idx03
[(warning classes)][{/25 pl}(25){el}]588 0 idx03
[(warnings)][{/25 pl}(25){el}]576 0 idx03
[2(warn-stack-empty)][{/28 pl}(28){el}]564 0 idx03
[2(weak)][{/106 pl}(106,){el}( ){/107 pl}(107){el}]552 0 idx03
[(website)][{/275 pl}(275){el}]540 0 idx03
[2(-Werror)0( option)][{/28 pl}(28){el}]528 0 idx03
[(Win32)][{/93 pl}(93,){el}( ){/97 pl}(97,){el}( ){/123 pl}(123){el}]516 0 idx03
[(Win64)][{/99 pl}(99,){el}( ){/133 pl}(133){el}]504 0 idx03
[(Windows)][{/111 pl}(111){el}]492 0 idx03
[(debugging formats)][{/99 pl}(99){el}]480 0 idx13
[2(-Wno-error)0( option)][{/28 pl}(28){el}]468 0 idx03
[2(write)][{/104 pl}(104){el}]456 0 idx03
[(writing operating systems)][{/131 pl}(131){el}]444 0 idx03
[2(WRT)][{/43 pl}(43,){el}( ){/93 pl}(93,){el}( ){/103 pl}(103,){el}( ){/105 pl}(105,){el}( ){/106 pl}(106,){el}( ){/107 pl}(107){el}]432 0 idx03
[2(WRT ..got)][{/127 pl}(127){el}]420 0 idx03
[2(WRT ..gotoff)][{/127 pl}(127){el}]408 0 idx03
[2(WRT ..gotpc)][{/126 pl}(126){el}]396 0 idx03
[2(WRT ..plt)][{/128 pl}(128){el}]384 0 idx03
[2(WRT ..sym)][{/128 pl}(128){el}]372 0 idx03
[2(www.delorie.com)][{/111 pl}(111){el}]360 0 idx03
[2(www.pcorner.com)][{/111 pl}(111){el}]348 0 idx03
[2(-X)0( option)][{/22 pl}(22){el}]336 0 idx03
[2(x2ftp.oulu.fi)][{/111 pl}(111){el}]324 0 idx03
[(x32)][{/104 pl}(104){el}]312 0 idx03
[2(%xdefine)][{/48 pl}(48){el}]300 0 idx03
[2(-Z)0( option)][{/22 pl}(22){el}]288 0 idx03
[2(zeroing)][{/28 pl}(28){el}]276 0 idx03
[2(zext-reloc)][{/28 pl}(28){el}]264 0 idx03
(285)pageodd
restore showpage
%%EOF
