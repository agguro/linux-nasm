     1                                  ; sse_string4.asm
     2                                  ; find a character
     3                                  extern print16b
     4                                  extern printf
     5                                  section .data
     6 00000000 7164616364656B6B66-     	string1   db	"qdacdekkfijlmdozabecdfgdklkmdddaffffffffdedeee",10,0 
     6 00000009 696A6C6D646F7A6162-
     6 00000012 6563646667646B6C6B-
     6 0000001B 6D6464646166666666-
     6 00000024 666666666465646565-
     6 0000002D 650A00             
     7 00000030 6500                    	string2	db	"e",0
     8 00000032 6100                    	string3	db	"a",0             
     9 00000034 46696E6420616C6C20-     	fmt 		db 	"Find all the characters '%s' and '%s' in:",10,0
     9 0000003D 746865206368617261-
     9 00000046 637465727320272573-
     9 0000004F 2720616E6420272573-
     9 00000058 2720696E3A0A00     
    10 0000005F 4920666F756E642025-     	fmt_oc 	db 	"I found %ld characters '%s'and '%s'",10,0
    10 00000068 6C6420636861726163-
    10 00000071 746572732027257327-
    10 0000007A 616E6420272573270A-
    10 00000083 00                 
    11 00000084 0A00                    	NL  		db 	10,0
    12                                  section .bss
    13                                  section .text							
    14                                  	global main					
    15                                  main:
    16 00000000 55                      push	rbp
    17 00000001 4889E5                  mov	rbp,rsp
    18                                  
    19                                  ;print the search characters
    20 00000004 48BF-                   	mov 	rdi, fmt
    20 00000006 [3400000000000000] 
    21 0000000E 48BE-                   	mov 	rsi, string2
    21 00000010 [3000000000000000] 
    22 00000018 48BA-                   	mov 	rdx, string3
    22 0000001A [3200000000000000] 
    23 00000022 4831C0                  	xor 	rax,rax
    24 00000025 E8(00000000)            	call printf
    25                                  ;print the target string
    26 0000002A 48BF-                       	mov 	rdi, string1
    26 0000002C [0000000000000000] 
    27 00000034 4831C0                      	xor 	rax,rax
    28 00000037 E8(00000000)                	call printf 
    29                                  ; search the string and print mask
    30 0000003C 48BF-                       	mov 	rdi, string1
    30 0000003E [0000000000000000] 
    31 00000046 48BE-                       	mov 	rsi, string2
    31 00000048 [3000000000000000] 
    32 00000050 48BA-                       	mov 	rdx, string3
    32 00000052 [3200000000000000] 
    33 0000005A E828000000                  	call pcharsrch
    34                                  ;print the number of occurences of string2    
    35 0000005F 48BF-                   	mov 	rdi, fmt_oc
    35 00000061 [5F00000000000000] 
    36 00000069 4889C6                  	mov 	rsi, rax
    37 0000006C 48BA-                   	mov 	rdx, string2
    37 0000006E [3000000000000000] 
    38 00000076 48B9-                   	mov 	rcx, string3
    38 00000078 [3200000000000000] 
    39 00000080 E8(00000000)            	call printf
    40                                  ; exit
    41 00000085 C9                          leave
    42 00000086 C3                          ret
    43                                  ;-------------------------------------------------------------
    44                                  ;function searching for and printing the mask
    45                                  pcharsrch:           ;packed character search
    46 00000087 55                      push	rbp		
    47 00000088 4889E5                  mov	rbp,rsp
    48 0000008B 4883EC10                    	sub	rsp,16      ;provide stack space for pushing xmm1
    49 0000008F 4D31E4                  	xor 	r12,r12     ;for the running total of occurrences
    50 00000092 4831C9                      	xor 	rcx,rcx     ;for signaling the end
    51 00000095 4831DB                      	xor 	rbx,rbx     ;for address calculation
    52 00000098 48C7C0F0FFFFFF              	mov 	rax,-16     ;for counting bytes, avoid flag setting
    53                                  ;build xmm1, load the search character
    54 0000009F 660FEFC9                    	pxor 	xmm1,xmm1  	; clear xmm1
    55 000000A3 660F3A200E00            	pinsrb 	xmm1,byte[rsi],0  	; first char at index 0
    56 000000A9 660F3A200A01            	pinsrb 	xmm1,byte[rdx],1	;second char at index 1
    57                                  .loop:
    58 000000AF 4883C010                    	add 		rax,16    	;avoid ZF flag setting
    59 000000B3 BE10000000                  	mov 		rsi,16       	;if no terminating 0, print 16 bytes
    60 000000B8 F30F6F141F                  	movdqu 	xmm2,[rdi+rbx]	;load 16 bytes of the string in xmm2
    61 000000BD 660F3A62CA40                	pcmpistrm xmm1,xmm2,40h 	;'equal each' and 'byte mask in xmm0'
    62 000000C3 0F94C1                      	setz  	cl            	;if terminating 0 detected
    63                                  ;if terminating 0 found, determine position
    64 000000C6 80F900                  	cmp 	cl,0
    65 000000C9 7410                    	je 	.gotoprint   	;no terminating 0 found
    66                                  	;terminating null found
    67                                  	;less than 16 bytes left
    68                                  	;rdi contains address of string
    69                                  	;rbx contains #bytes in blocks handled so far
    70 000000CB 4801DF                   	add 	rdi,rbx		;address of remaining part of string
    71 000000CE 51                      	push	rcx			;caller saved (cl in use)
    72 000000CF E832000000              	call pstrlen       	;rax returns the length
    73 000000D4 59                      	pop	rcx			;caller saved
    74 000000D5 48FFC8                  	dec 	rax			;length without 0
    75 000000D8 4889C6                  	mov 	rsi,rax		;length of remaining mask bytes
    76                                  
    77                                  ;print the mask
    78                                  .gotoprint:
    79 000000DB E855000000              	call print_mask
    80                                  ;keep running total of matches
    81 000000E0 F3450FB8ED                  	popcnt  	r13d,r13d     	;count the number of 1 bits 
    82 000000E5 4501EC                      	add 		r12d,r13d   	;keep the number of occurences in r12d
    83 000000E8 08C9                        	or  		cl,cl       	; terminating 0 detected?
    84 000000EA 7506                        	jnz 		.exit    
    85 000000EC 4883C310                    	add 		rbx,16      	;preprare for the next 16 bytes
    86 000000F0 EBBD                        	jmp 		.loop
    87                                  .exit:
    88 000000F2 48BF-                      	mov 	rdi, NL         ;add a newline
    88 000000F4 [8400000000000000] 
    89 000000FC E8(00000000)                	call printf
    90 00000101 4C89E0                      	mov 	rax,r12         ;number of occurences
    91 00000104 C9                      leave
    92 00000105 C3                      ret
    93                                  ;-------------------------------------------------------------
    94                                  ;function for finding the terminating 0
    95                                  pstrlen:
    96 00000106 55                      push	rbp		
    97 00000107 4889E5                  mov	rbp,rsp
    98 0000010A 4883EC10                	sub 		rsp,16 		;for saving xmm0
    99 0000010E F30F7F45F0                 	movdqu 	[rbp-16],xmm0	;push xmm0
   100 00000113 48C7C0F0FFFFFF          	mov		rax, -16		;avoid flag setting later
   101 0000011A 660FEFC0                	pxor      xmm0, xmm0	;search for 0 (end of string)	
   102 0000011E 4883C010                .loop:  add	rax, 16    	;avoid setting ZF when rax = 0 after pcmpistri
   103 00000122 660F3A63040708          	pcmpistri	xmm0, [rdi + rax], 0x08 ;'equal each'
   104 00000129 75F3                    	jnz     	.loop         	;0 found?
   105 0000012B 4801C8                  	add    	rax, rcx		;rax = bytes already handled
   106                                                               	;rcx = bytes handled in terminating loop
   107 0000012E F30F6F45F0                  movdqu 	xmm0,[rbp-16]	;pop xmm0
   108 00000133 C9                      leave
   109 00000134 C3                      ret
   110                                  ;-------------------------------------------------------------
   111                                  ;function for printing the mask
   112                                  ;xmm0 contains the mask
   113                                  ;rsi contains the number of bits to print (16 or less)
   114                                  print_mask:
   115 00000135 55                      push	rbp		
   116 00000136 4889E5                  mov	rbp,rsp
   117 00000139 4883EC10                	sub 		rsp,16 		;for saving xmm0
   118 0000013D E81F000000                  	call 	reverse_xmm0	;little endian
   119 00000142 66440FD7E8                  	pmovmskb 	r13d,xmm0  	;mov byte mask to edx
   120 00000147 F30F7F4DF0                  	movdqu 	[rbp-16],xmm1	;push xmm1 because of printf
   121 0000014C 57                          	push 	rdi        	;rdi contains string1
   122 0000014D 4489EF                      	mov 		edi,r13d		;contains mask to be printed
   123 00000150 52                          	push 	rdx			;contains the mask
   124 00000151 51                          	push 	rcx        	;contains end of string flag
   125 00000152 E8(00000000)                	call 	print16b
   126 00000157 59                          	pop 		rcx
   127 00000158 5A                          	pop 		rdx
   128 00000159 5F                          	pop 		rdi
   129 0000015A F30F6F4DF0                  	movdqu 	xmm1,[rbp-16]	;pop xmm1
   130 0000015F C9                      leave
   131 00000160 C3                      ret
   132                                  ;-------------------------------------------------------------
   133                                  ;function for reversing, shuffling xmm0
   134                                  reverse_xmm0:
   135                                  section .data
   136                                  ;mask for reversing
   137 00000086 0F0E0D0C0B0A090807-             .bytereverse db 15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0
   137 0000008F 06050403020100     
   138                                  section .text
   139 00000161 55                      push	rbp		
   140 00000162 4889E5                  mov	rbp,rsp
   141 00000165 4883EC10                    	sub     rsp,16
   142 00000169 F30F7F55F0                  	movdqu [rbp-16],xmm2		
   143 0000016E F30F6F1425-                 	movdqu xmm2,[.bytereverse]  	;load the mask in xmm2
   143 00000173 [86000000]         
   144 00000177 660F3800C2                  	pshufb xmm0,xmm2            	;do the shuffle
   145 0000017C F30F6F55F0                  	movdqu xmm2,[rbp-16]	    	;pop xmm2
   146 00000181 C9                      leave                           	;returns the shuffled xmm0
   147 00000182 C3                      ret
   148                                  
   149                                  
