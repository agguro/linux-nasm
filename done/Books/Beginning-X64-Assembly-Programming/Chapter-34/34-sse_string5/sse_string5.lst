     1                                  ; sse_string5.asm
     2                                  ; find a range of characters
     3                                  extern print16b
     4                                  extern printf
     5                                  section .data					  
     6 00000000 6565416563646B6B46-     	string1 		db	"eeAecdkkFijlmeoZabcefgeKlkmeDadfdsafadfaseeE",10,0 
     6 00000009 696A6C6D656F5A6162-
     6 00000012 63656667654B6C6B6D-
     6 0000001B 654461646664736166-
     6 00000024 61646661736565450A-
     6 0000002D 00                 
     7 0000002E 410A00                  	startrange	db 	"A",10,0      ;look for uppercase
     8 00000031 5A0A00                  	stoprange 	db 	"Z",10,0                
     9 00000034 0A00                    	NL  			db 	10,0
    10 00000036 46696E642074686520-     	fmt 			db 	"Find the uppercase letters in:",10,0
    10 0000003F 757070657263617365-
    10 00000048 206C65747465727320-
    10 00000051 696E3A0A00         
    11 00000056 4920666F756E642025-     	fmt_oc 		db 	"I found %ld uppercase letters",10,0
    11 0000005F 6C6420757070657263-
    11 00000068 617365206C65747465-
    11 00000071 72730A00           
    12                                  
    13                                  section .bss
    14                                  section .text							
    15                                  	global main					
    16                                  main:
    17 00000000 55                      push	rbp
    18 00000001 4889E5                  mov	rbp,rsp
    19                                  
    20                                  ;first print the  string
    21 00000004 48BF-                       	mov	rdi, fmt        ;title
    21 00000006 [3600000000000000] 
    22 0000000E 4831C0                      	xor 	rax,rax
    23 00000011 E8(00000000)                	call	printf
    24 00000016 48BF-                       	mov 	rdi, string1    ;string
    24 00000018 [0000000000000000] 
    25 00000020 4831C0                      	xor 	rax,rax
    26 00000023 E8(00000000)                	call	printf 
    27                                  ; search the string
    28 00000028 48BF-                       	mov 	rdi, string1
    28 0000002A [0000000000000000] 
    29 00000032 48BE-                       	mov 	rsi, startrange
    29 00000034 [2E00000000000000] 
    30 0000003C 48BA-                       	mov 	rdx, stoprange
    30 0000003E [3100000000000000] 
    31 00000046 E817000000                  	call prangesrch
    32                                  ; print the number of occurences
    33 0000004B 48BF-                   	mov 	rdi, fmt_oc
    33 0000004D [5600000000000000] 
    34 00000055 4889C6                  	mov 	rsi, rax
    35 00000058 4831C0                     	xor 	rax,	rax
    36 0000005B E8(00000000)            	call	printf
    37 00000060 C9                      leave
    38 00000061 C3                      ret	
    39                                  ;-------------------------------------------------------------
    40                                  ;function searching for and printing the mask
    41                                  prangesrch:             ;packed range search
    42 00000062 55                      push	rbp		
    43 00000063 4889E5                  mov	rbp,rsp
    44 00000066 4883EC10                    	sub	rsp,16      ;room for pushing xmm1
    45 0000006A 4D31E4                      	xor 	r12,r12     ;for the number of occurences
    46 0000006D 4831C9                      	xor 	rcx,rcx     ;for signaling the end
    47 00000070 4831DB                      	xor 	rbx,rbx     ;for address calculation
    48 00000073 48C7C0F0FFFFFF              	mov 	rax,-16     ;avoid ZF flag setting
    49                                  ;build xmm1
    50 0000007A 660FEFC9                    	pxor 	xmm1,xmm1  ; make sure everything is cleared
    51 0000007E 660F3A200E00                	pinsrb 	xmm1,byte[rsi],0 ;startrange at index 0
    52 00000084 660F3A200A01                	pinsrb 	xmm1,byte[rdx],1 ;stoprange at index 1
    53                                  .loop:
    54 0000008A 4883C010                    	add 		rax,16
    55 0000008E BE10000000                  	mov 		rsi,16 ;if no terminating 0, print 16 bytes
    56 00000093 F30F6F141F                  	movdqu 	xmm2,[rdi+rbx]
    57 00000098 660F3A62CA44                	pcmpistrm	xmm1,xmm2,01000100b ; equal each|byte mask in xmm0
    58 0000009E 0F94C1                      	setz  	cl        ;terminating 0 detected
    59                                  ;if terminating 0 found, determine position
    60 000000A1 80F900                  	cmp 	cl,0           
    61 000000A4 7410                    	je 	.gotoprint	;no terminating 0 found
    62                                  	;terminating null found
    63                                  	;less than 16 bytes left
    64                                  	;rdi contains address of string
    65                                  	;rbx contains #bytes in blocks handled so far
    66 000000A6 4801DF                     	add 	rdi,rbx		;take only the tail of the string
    67 000000A9 51                      	push	rcx			;caller saved (cl in use)
    68 000000AA E832000000              	call	pstrlen 		;determine the position of the 0
    69 000000AF 59                      	pop	rcx			;caller saved
    70 000000B0 48FFC8                  	dec 	rax      		;length without 0
    71 000000B3 4889C6                  	mov 	rsi,rax		;bytes in tail
    72                                  
    73                                  ;print the mask
    74                                  .gotoprint:
    75 000000B6 E855000000              	call print_mask
    76                                  ;keep running total of matches
    77 000000BB F3450FB8ED                  	popcnt	r13d,r13d	;count the number of 1 bits 
    78 000000C0 4501EC                      	add 		r12d,r13d	;keep the number of occurences in r12
    79 000000C3 08C9                        	or  		cl,cl  	;terminating 0 detected?
    80 000000C5 7506                        	jnz 		.exit    
    81 000000C7 4883C310                    	add 		rbx,16 	;prepare for next block
    82 000000CB EBBD                        	jmp 		.loop
    83                                  .exit:
    84 000000CD 48BF-                       	mov	rdi, NL
    84 000000CF [3400000000000000] 
    85 000000D7 E8(00000000)                	call printf
    86 000000DC 4C89E0                      	mov 	rax, r12 ;return the number of occurences
    87 000000DF C9                      leave
    88 000000E0 C3                      ret
    89                                  ;-------------------------------------------------------------
    90                                  pstrlen:
    91 000000E1 55                      push	rbp		
    92 000000E2 4889E5                  mov	rbp,rsp
    93 000000E5 4883EC10                    	sub     	rsp,16    	;for pushing xmm0
    94 000000E9 F30F7F45F0                 	movdqu 	[rbp-16],xmm0	;push xmm0
    95 000000EE 48C7C0F0FFFFFF              	mov       rax, -16		;avoid ZF flag setting later 
    96 000000F5 660FEFC0                    	pxor      xmm0, xmm0	;search for 0 (end of string)
    97                                  .loop:	
    98 000000F9 4883C010                    	add   	rax, 16     	; avoid setting ZF when rax = 0 after pcmpistri
    99 000000FD 660F3A63040708              	pcmpistri	xmm0, [rdi + rax], 0x08 ;'equal each'
   100 00000104 75F3                        	jnz    	.loop      	;0 found?
   101 00000106 4801C8                      	add       rax, rcx		;rax = bytes already handled
   102                                  						;rcx = bytes handled in terminating loop
   103 00000109 F30F6F45F0                  	movdqu 	xmm0,[rbp-16] 	;pop xmm0
   104 0000010E C9                      leave
   105 0000010F C3                      ret
   106                                  ;-------------------------------------------------------------
   107                                  ;function for printing the mask
   108                                  ;xmm0 contains the mask
   109                                  ;rsi contains the number of bits to print (16 or less)
   110                                  print_mask:
   111 00000110 55                      push	rbp		
   112 00000111 4889E5                  mov	rbp,rsp
   113 00000114 4883EC10                	sub 		rsp,16 		;for saving xmm0
   114 00000118 E81F000000                  	call 	reverse_xmm0	;little endian
   115 0000011D 66440FD7E8                  	pmovmskb 	r13d,xmm0  	;mov byte mask to edx
   116 00000122 F30F7F4DF0                  	movdqu 	[rbp-16],xmm1	;push xmm1 because of printf
   117 00000127 57                          	push 	rdi        	;rdi contains string1
   118 00000128 4489EF                      	mov 		edi,r13d		;contains mask to be printed
   119 0000012B 52                          	push 	rdx			;contains the mask
   120 0000012C 51                          	push 	rcx        	;contains end of string flag
   121 0000012D E8(00000000)                	call 	print16b
   122 00000132 59                          	pop 		rcx
   123 00000133 5A                          	pop 		rdx
   124 00000134 5F                          	pop 		rdi
   125 00000135 F30F6F4DF0                  	movdqu 	xmm1,[rbp-16]	;pop xmm1
   126 0000013A C9                      leave
   127 0000013B C3                      ret
   128                                  ;-------------------------------------------------------------
   129                                  ;function for reversing, shuffling xmm0
   130                                  reverse_xmm0:
   131                                  section .data
   132                                  ;mask for reversing
   133 00000075 0F0E0D0C0B0A090807-             .bytereverse db 15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0
   133 0000007E 06050403020100     
   134                                  section .text
   135 0000013C 55                      push	rbp		
   136 0000013D 4889E5                  mov 	rbp,rsp
   137 00000140 4883EC10                    	sub     rsp,16
   138 00000144 F30F7F55F0                  	movdqu [rbp-16],xmm2	 
   139 00000149 F30F6F1425-                 	movdqu xmm2,[.bytereverse] 	;load the mask in xmm2
   139 0000014E [75000000]         
   140 00000152 660F3800C2                  	pshufb xmm0,xmm2           	;do the shuffle
   141 00000157 F30F6F55F0                  	movdqu xmm2,[rbp-16]	   	;pop xmm2
   142 0000015C C9                      leave                              ;returns the shuffled xmm0
   143 0000015D C3                      ret
