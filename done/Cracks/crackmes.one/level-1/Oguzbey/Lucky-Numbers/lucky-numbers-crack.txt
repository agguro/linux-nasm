objdump -f ./lucky_numbers 

./lucky_numbers:     file format elf32-i386
architecture: i386, flags 0x00000102:
EXEC_P, D_PAGED
start address 0x0804903a

objdump -M intel -D ./lucky_numbers 

./lucky_numbers:     file format elf32-i386

Disassembly of section .text:

08049000 <.text>:
;write 'Sorry :((',0x0A
8049000:	b8 04 00 00 00       	mov    eax,0x4              ;syscall write
8049005:	bb 01 00 00 00       	mov    ebx,0x1              ;to stdout
804900a:	b9 1a a0 04 08       	mov    ecx,0x804a01a        ;000201a in hexdump (see below)
804900f:	ba 0a 00 00 00       	mov    edx,0xa              ;length of string is 10 bytes
8049014:	cd 80                	int    0x80                 ;syscall
;exit
8049016:	b8 01 00 00 00       	mov    eax,0x1
804901b:	cd 80                	int    0x80

;write 'Good job!',0x0A
804901d:	b8 04 00 00 00       	mov    eax,0x4              ;syscall write
8049022:	bb 01 00 00 00       	mov    ebx,0x1              ;to stdout
8049027:	b9 0f a0 04 08       	mov    ecx,0x804a00f        ;000200F in hexdump (see below)
804902c:	ba 0b 00 00 00       	mov    edx,0xb              ;length of string is 12 bytes
8049031:	cd 80                	int    0x80                 ;syscall
;exit
8049033:	b8 01 00 00 00       	mov    eax,0x1              ;syscall exit
8049038:	cd 80                	int    0x80

PROGRAM START
;write 'Lucky Numbers: ' length = 15 bytes
804903a:	b8 04 00 00 00       	mov    eax,0x4              ;syscall write
804903f:	bb 01 00 00 00       	mov    ebx,0x1              ;to stdout
8049044:	b9 00 a0 04 08       	mov    ecx,0x804a000        ;00020000 in hexdump 
8049049:	ba 0f 00 00 00       	mov    edx,0xf              ;length of string is 15 bytes
804904e:	cd 80                	int    0x80                 ;syscall
;read numbers from stdin
8049050:	b8 03 00 00 00       	mov    eax,0x3            ;syscall read
8049055:	bb 02 00 00 00       	mov    ebx,0x2            ;stdin
804905a:	b9 24 a0 04 08       	mov    ecx,0x804a024      ;buffer
804905f:	ba 02 00 00 00       	mov    edx,0x2            ;bytes to read
8049064:	cd 80                	int    0x80
;read input first byte
8049066:	a0 24 a0 04 08       	mov    al,byte[0x804a024]           ;first byte in buffer
804906b:	2c 30                	sub    al,0x30                      ;un-ascii
;read input second byte
804906d:	8a 1d 25 a0 04 08    	mov    bl,byte[0x804a025]           ;second byte in buffer
8049073:	80 eb 30             	sub    bl,0x30                      ;un-ascii
;here lies the trick, we add two numbers we still dont know....
8049076:	10 d8                	adc    al,bl                        ;add with carry

;this one keeps me busy until I decided to ignore the CF=1 at start and
;a possible value of 0x99 or higher after DAA

;from https://www.felixcloutier.com/x86/daa (site doesn't matter)
;DAA
;old_AL ← AL;
;old_CF ← CF;
;CF ← 0;
;IF (((AL AND 0FH) > 9) or AF = 1)
;        THEN
;            AL ← AL + 6;
;            CF ← old_CF or (Carry from AL ← AL + 6);
;            AF ← 1;
;        ELSE
;            AF ← 0;
;FI;
;IF ((old_AL > 99H) or (old_CF = 1))
;    THEN
;            AL ← AL + 60H;
;            CF ← 1;
;    ELSE
;            CF ← 0;
;FI;

8049078:	27                   	daa

8049079:	80 c3 30             	add    bl,0x30                      ;ascii BL back
;result of DAA must be 0x16
804907c:	3c 16                	cmp    al,0x16
804907e:	75 80                	jne    0x8049000                    ;if not Sorry :((

;previously we read the second byte of our input, un-ascii it and again make ascii of it,
;the second input byte must be '8' (ascii 0x38)
;the result of DAA is 0x16, so we know two numbers, we can calculate the second number
;
;second byte is 8, the sum with the carry is 16
;if carry was 0 then: x + 8 + 0 = 16 -> x = 8
;if carry was 1 then: x + 8 + 1 = 16 -> x = 7
;I tried 8 as first number

8049080:	80 fb 38             	cmp    bl,0x38                      ;second byte 0x38
8049083:	0f 85 77 ff ff ff    	jne    0x8049000                    ;if not Sory :((
8049089:	39 c0                	cmp    eax,eax                      ;same as nop opcode
804908b:	74 90                	je     0x804901d                    ;always true, so jump to 0x804901d

objdump -s -j .data ./lucky_numbers 

./lucky_numbers:     file format elf32-i386

Contents of section .data:
 804a000 4c75636b 79204e75 6d626572 733a2047  Lucky Numbers: G
 804a010 6f6f6420 4a6f6220 210a536f 72727920  ood Job !.Sorry 
 804a020 3a28280a                             :((.