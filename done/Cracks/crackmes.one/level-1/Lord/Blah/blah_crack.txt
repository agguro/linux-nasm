It's becoming a reflex of me now to use objdump to explore the file

objdump -f blah

blah:     file format elf32-i386
architecture: i386, flags 0x00000102:
EXEC_P, D_PAGED
start address 0x08048094

The data section, the same can be done for .rodata and other segments

objdump -s -j .data blah 

blah:     file format elf32-i386

Contents of section .data:
80490c4 4f6b656a 210a                        Okej!.

objdump -M intel -d blah

blah:     file format elf32-i386


Disassembly of section .text:

08048094 <.text>:
8048094:	31 c0                	xor    eax,eax              ;eax = 0
8048096:	b8 2f 00 00 00       	mov    eax,0x2f             ;eax = 0x2f
804809b:	cd 80                	int    0x80                 ;syscall getgid()
804809d:	3d ad de 00 00       	cmp    eax,0xdead           ;is group id=57005 (nice word by the way)
80480a2:	75 16                	jne    0x80480ba            ;if not jmp to 0x80480ba
80480a4:	b8 04 00 00 00       	mov    eax,0x4              ;eax = 4 write syscall
80480a9:	bb 01 00 00 00       	mov    ebx,0x1              ;ebx = 1, to stdout
80480ae:	b9 c4 90 04 08       	mov    ecx,0x80490c4        ;address of string to display
80480b3:	ba 06 00 00 00       	mov    edx,0x6              ;length of string to display
80480b8:	cd 80                	int    0x80                 ;display string
80480ba:	31 c0                	xor    eax,eax              ;eax = 0
80480bc:	40                   	inc    eax                  ;eax = 1
80480bd:	31 db                	xor    ebx,ebx              ;ebx = 0
80480bf:	cd 80                	int    0x80                 ;syscall exit with return code in ebx=0

I don't want to create a user and group with id 0xdead so I've to patch the program.
This can be done several ways:
- modify bytes 0x31 0xc0 to jmp to address 0x80480a4
- modify jne 0x80480ba to je 0x80480ba
- modify the elfheader file to point to 0x80480a4 as program start

The elfheader:

readelf -h blah
ELF Header:
Magic:   7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00 
Class:                             ELF32
Data:                              2's complement, little endian
Version:                           1 (current)
OS/ABI:                            UNIX - System V
ABI Version:                       0
Type:                              EXEC (Executable file)
Machine:                           Intel 80386
Version:                           0x1
Entry point address:               0x8048094                       <-- change to 0x80480a4
Start of program headers:          52 (bytes into file)
Start of section headers:          244 (bytes into file)
Flags:                             0x0
Size of this header:               52 (bytes)
Size of program headers:           32 (bytes)
Number of program headers:         3
Size of section headers:           40 (bytes)
Number of section headers:         6
Section header string table index: 5

hexdump -C blah
00000000  7f 45 4c 46 01 01 01 00  00 00 00 00 00 00 00 00  |.ELF............|

;following the elf32 header description at https://en.wikipedia.org/wiki/Executable_and_Linkable_Format
;we have to modify byte 0x18 to 0x1B (e_entry).

                                *********** below the asterisks in reverse order
00000010  02 00 03 00 01 00 00 00  94 80 04 08 34 00 00 00  |............4...|

    so we need to modify it to a4 80 04 08
to keep a copy of the program: cp blah blah_orig
to patch the file:
where seek is the decimal position (0x18) of the byte to overwrite.

printf '\xa4' | dd of=blah bs=1 seek=24 count=1 conv=notrunc 
1+0 records in
1+0 records out
1 byte copied, 0,000148527 s, 6,7 kB/s

running the patched file gives us:
Okej!

In case you like to modify jne (opcode 0x75) to je (opcode 0x74) at location 0x80480a2

80480a2:	75 16                	jne    0x80480ba            ;if not jmp to 0x80480ba

use: printf '\x74' | dd of=blah_patched bs=1 seek=162 count=1 conv=notrunc
