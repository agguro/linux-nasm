attempt 1: dry run of program
    guessing password : wrong password of course
    observe: keyboard reacts normal, no echo, no cursor advance on commandline
    some syscalls switch canonical and echo mode of terminal, I've experience with syscall ioctl (lucky me)

attempt 2: run program with strace to watch syscall calls
strace ./logic
    result: program disappears, so something deletes the program when running with strace, don't know what.
    re-unzip the problem and making a copy
    using a patch to be able running this baby with strace and a debugger without being deleted

    byte at offset 223 (0xdf) indicates JNS , we modify it with 0x78 opcode for JS
    with hexdump -C ./logic | grep 79 we can find all occurences of JNS
    result: 000000d0  00 00 31 db 31 c9 ba 01  00 00 00 cd 80 85 c0 79  |..1.1..........y|
            the byte is at offset 0xdf which in decimal is: 223
            JNS has opcode 0x78 so we can patch the program
            
            cp logic patched
            printf '\x78' | dd of=patched bs=1 seek=223 count=1 conv=notrunc

attempt 3: run the program in edb (Evan's Debugger)
edb --run ./logic
result: debugger starts, we can run the program but it doesn't stop to give input and ends with incorrect password.
        At least the program isn't deleted anymore.

attempt 4: I need the assembly listing (as always what you're looking for comes last, try to find your keys .....)
           get disassembly list of binary .text, .data, .bss and .rodata
result: no .rodata and .bss section, only a .text and .data section
        reading and interpreting the code with the help of the debugger lead me to the decission that
        the password is the pid of the program concatenated with the time in seconds.  I didn't find a way to enter
        this however. (until I saw the solution of Kaltwa55er (thx for sharing) and the expect linux application.)

conclusion: this was a very nice test to crack, I learned about the ptrace system call.  However nice, this is no easy level
            crackme, the easy category is more suited.

Here below the 'work' I've done to get to it

objdump -f logic
---------------- 
    logic:        file format elf32-i386
    architecture: i386, flags 0x00000102:
    EXEC_P, D_PAGED
    start address 0x08048080
--> 32 bit program, good to know for system calls, they are called different from 64 bit system calls.

objdump -s -j .data logic
-------------------------
    logic:     file format elf32-i386

    Contents of section .data:
    804928c 656e7465 72207061 7373776f 72643a20  enter password: 
    804929c 0a0a7061 7373776f 72642069 7320636f  ..password is co
    80492ac 72726563 74210a0a 0a706173 73776f72  rrect!...passwor
    80492bc 64206973 20696e63 6f727265 6374210a  d is incorrect!.
    80492cc 30313233 34353637 38390000 0000      0123456789....

objdump -s -j .rodata logic
---------------------------
    logic:     file format elf32-i386

    objdump: section '.rodata' mentioned in a -j option, but not found in any input file

objdump -s -j .bss logic
------------------------
    logic:     file format elf32-i386

    objdump: section '.bss' mentioned in a -j option, but not found in any input file

objdump -M intel -d logic
-------------------------
    logic:     file format elf32-i386

    Disassembly of section .text:

    08048080 <.text>:
    ;***
        8048080:	58                   	pop    eax                  ;pop argc from stack
        8048081:	58                   	pop    eax                  ;pop address to command from stack
        8048082:	a3 d6 92 04 08       	mov    ds:0x80492d6,eax     ;save address to command in 0x80492d6
        ;here I became suspicious because why should someone keep the commandline address ....
    ;***
        ;eax = write(stdout, 'enter password: ',0x10) , print "enter password: "
        8048087:	b8 04 00 00 00       	mov    eax,0x4
        804808c:	bb 01 00 00 00       	mov    ebx,0x1
        8048091:	b9 8c 92 04 08       	mov    ecx,0x804928c
        8048096:	ba 10 00 00 00       	mov    edx,0x10
        804809b:	cd 80                	int    0x80
    ;***
        ;eax = getpid()
        ;here I became more anoyed however no fork syscall in the program ....
        804809d:	b8 14 00 00 00       	mov    eax,0x14                                         
        80480a2:	cd 80                	int    0x80                                             ;syscall getpid    
    ;***
        ;convert pid in eax to decimal on stack 
        80480a4:	bb 0a 00 00 00       	mov    ebx,0xa                      ;divisor = 10
        80480a9:	31 c9                	xor    ecx,ecx                      ;ecx=0
        80480ab:	31 d2                	xor    edx,edx                      ;edx=0
        80480ad:	f7 f3                	div    ebx                          ;edx:eax = eax / ebx
        80480af:	66 52                	push   dx                           ;push remainder on stack
        80480b1:	66 41                	inc    cx                           ;increment number of digits counter
        80480b3:	85 c0                	test   eax,eax                      ;quotient = 0?
        80480b5:	75 f4                	jne    0x80480ab                    ;nope, repeat
    ;***
        ;get decimal digits from stack and make ASCII, also store the digits at address 0x80494fa
        80480b7:	8d 3d fa 94 04 08    	lea    edi,ds:0x80494fa
        80480bd:	66 89 0d dc 92 04 08 	mov    WORD PTR ds:0x80492dc,cx     ;save number of digits in decimal pid
        80480c4:	66 58                	pop    ax                           ;get digit from pid from stack
        80480c6:	04 30                	add    al,0x30                      ;ascii it
        80480c8:	88 07                	mov    BYTE PTR [edi],al            ;save in buffer
        80480ca:	47                   	inc    edi                          ;reposition pointer in buffer
        80480cb:	e2 f7                	loop   0x80480c4                    ;repeat until cx = 0
    ;***
        ;this piece of code checks if a proces/program is monitored by another program like strace or a debugger
        ;I have to study this
        eax = ptrace(0,0,1,0)
        80480cd:	b8 1a 00 00 00       	mov    eax,0x1a                     ;syscall ptrace
        80480d2:	31 db                	xor    ebx,ebx                      ;PTRACE_TRACEME
        80480d4:	31 c9                	xor    ecx,ecx                      ;0
        80480d6:	ba 01 00 00 00       	mov    edx,0x1                      ;1
        80480db:	cd 80                	int    0x80
        80480dd:	85 c0                	test   eax,eax                      ;test eax
        80480df:	79 05                	jns    0x80480e6                    ;if no sign then continue (in the patched version it is js 0x80480e6)
        80480e1:	e9 91 01 00 00       	jmp    0x8048277                    ;if 'error' jump 0x8048277
    ;***
        ;eax = time(0x8049504), get system time in seconds since epoch and store it in eax and 0x8049504
        80480e6:	b8 0d 00 00 00       	mov    eax,0xd
        80480eb:	8b 1d 04 95 04 08    	mov    ebx,DWORD PTR ds:0x8049504
        80480f1:	cd 80                	int    0x80                         ;syscall time
    ;***
        ;convert the seconds to decimal digits, pushing each digit on the stack    
        80480f3:	bb 0a 00 00 00       	mov    ebx,0xa                      ;divisor
        80480f8:	31 c9                	xor    ecx,ecx                      ;digits counter
        80480fa:	31 d2                	xor    edx,edx                      ;remainder
        80480fc:	f7 f3                	div    ebx                          ;divide eax by ebx, remainder in edx, quotient in eax
        80480fe:	66 52                	push   dx                           ;push remainder, dx is enough because remainder fits in dx
        8048100:	66 41                	inc    cx                           ;increment digit counter
        8048102:	85 c0                	test   eax,eax                      ;test eax
        8048104:	75 f4                	jne    0x80480fa                    ;if not zero repeat algorithm
    ;***
        ;pop all digits from stack, make it ascii and store them
        8048106:	8d 3d 04 95 04 08    	lea    edi,ds:0x8049504             ;load buffer to store the time
        804810c:	66 89 0d e6 92 04 08 	mov    WORD PTR ds:0x80492e6,cx     ;number of digits in 0x80492e6
        8048113:	66 58                	pop    ax                           ;pop digit from stack
        8048115:	04 30                	add    al,0x30                      ;make ascii
        8048117:	88 07                	mov    BYTE PTR [edi],al            ;store digit in buffer
        8048119:	47                   	inc    edi                          ;increment position in buffer by 1
        804811a:	e2 f7                	loop   0x8048113                    ;repeat until ecx equals zero, all digits are stored
    ;***
        ;get the terminal stdin state in termios structure (address visible in the subroutine itself)
        ;switch echo mode off
        804811c:	e8 1a 01 00 00       	call   0x804823b                    ;get terminal control flags
        8048121:	b8 08 00 00 00       	mov    eax,0x8                      ;ECHO
        8048126:	f7 d0                	not    eax                          ;~ECHO = 111...11110111
        8048128:	21 05 e2 94 04 08    	and    DWORD PTR ds:0x80494e2,eax   ;switch off echo mode
        804812e:	e8 1f 01 00 00       	call   0x8048252                    ;set terminal control flags
        ;switch canonical mode off
        8048133:	e8 03 01 00 00       	call   0x804823b                    ;get terminal control flags
        8048138:	b8 02 00 00 00       	mov    eax,0x2                      ;ICANON
        804813d:	f7 d0                	not    eax                          ;~ICANON = 111...11111101
        804813f:	21 05 e2 94 04 08    	and    DWORD PTR ds:0x80494e2,eax   ;switch of canonical mode
        8048145:	e8 08 01 00 00       	call   0x8048252                    ;set terminal control flags
    ;***
        ;read the users password guess    
        804814a:	31 f6                	xor    esi,esi                      ;esi is bytes read
        804814c:	81 fe e4 00 00 00    	cmp    esi,0xe4                     ;more than 228 bytes input?
        8048152:	74 28                	je     0x804817c                    ;yes, stop input
        8048154:	b8 03 00 00 00       	mov    eax,0x3                      ;syscall read
        8048159:	bb 01 00 00 00       	mov    ebx,0x1                      ;from stdin
        804815e:	b9 d4 94 04 08       	mov    ecx,0x80494d4                ;input buffer in ecx
        8048163:	ba 01 00 00 00       	mov    edx,0x1                      ;read only one byte
        8048168:	cd 80                	int    0x80                         ;syscall read 
        804816a:	a0 d4 94 04 08       	mov    al,ds:0x80494d4              ;get byte from buffer
        804816f:	3c 0a                	cmp    al,0xa                       ;is it 0xa (eol)
        8048171:	74 09                	je     0x804817c                    ;yes, user ended it's input
        8048173:	88 86 f0 92 04 08    	mov    BYTE PTR [esi+0x80492f0],al  ;store input byte in 0x80492f0+esi, final location
        8048179:	46                   	inc    esi                          ;inc location storage
        804817a:	eb d0                	jmp    0x804814c                    ;get next input byte
    ;*** switch echo mode on  
        804817c:	e8 ba 00 00 00       	call   0x804823b                    ;get terminal control flags
        8048181:	83 0d e2 94 04 08 08 	or     DWORD PTR ds:0x80494e2,0x8   ;set ECHO on
        8048188:	e8 c5 00 00 00       	call   0x8048252                    ;set terminal control flags
    ;*** switch canonical mode on   
        804818d:	e8 a9 00 00 00       	call   0x804823b                    ;get terminal control flags
        8048192:	83 0d e2 94 04 08 02 	or     DWORD PTR ds:0x80494e2,0x2   ;set ICANON on
        8048199:	e8 b4 00 00 00       	call   0x8048252                    ;set terminal control flags
    ;***
        ;we got the password, calculated and the users guess, check if the user has given any input or just pressed enter
        804819e:	be f0 92 04 08       	mov    esi,0x80492f0                ;users password guess buffer in esi
        80481a3:	e8 c1 00 00 00       	call   0x8048269                    ;get the length of the string in ecx
        80481a8:	83 f9 00             	cmp    ecx,0x0                      ;is length zero?
        80481ab:	74 71                	je     0x804821e                    ;yes, wrong password anyway
        80481ad:	51                   	push   ecx                          ;push length onto stack
        ;concatenate pid and time string
        80481ae:	be fa 94 04 08       	mov    esi,0x80494fa                ;address of pid string in esi
        80481b3:	bf d4 93 04 08       	mov    edi,0x80493d4                ;address of systems password
        80481b8:	66 8b 0d dc 92 04 08 	mov    cx,WORD PTR ds:0x80492dc     ;length of pid string
        80481bf:	fc                   	cld                                 ;increment addresses
        80481c0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]    ;copy pid string in 0x80493d4
        80481c2:	be 04 95 04 08       	mov    esi,0x8049504                ;address of time string in esi
        80481c7:	31 c9                	xor    ecx,ecx                      ;ecx = 0
        80481c9:	66 8b 0d e6 92 04 08 	mov    cx,WORD PTR ds:0x80492e6     ;length of time string in cx
        80481d0:	fc                   	cld                                 ;increment addresses    
        80481d1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]    ;copy time string right after pid string
        80481d3:	be d4 93 04 08       	mov    esi,0x80493d4                ;address of systems password in esi
        80481d8:	e8 8c 00 00 00       	call   0x8048269                    ;get length of systems password
        80481dd:	5a                   	pop    edx                          ;length of user password in edx
        80481de:	39 d1                	cmp    ecx,edx                      ;compare with systems password length
        80481e0:	75 3c                	jne    0x804821e                    ;if not equal, wrong password
        80481e2:	89 d1                	mov    ecx,edx                      ;ecx = length of user password
        80481e4:	31 d2                	xor    edx,edx                      ;counter = 0
        80481e6:	be f0 92 04 08       	mov    esi,0x80492f0                ;address of user password in esi
        80481eb:	bf d4 93 04 08       	mov    edi,0x80493d4                ;address of system password in edi
        80481f0:	39 d1                	cmp    ecx,edx                      ;all bytes compared?
        80481f2:	74 0d                	je     0x8048201                    ;if yes, correct password
        80481f4:	8a 06                	mov    al,BYTE PTR [esi]            ;read byte from user password
        80481f6:	8a 1f                	mov    bl,BYTE PTR [edi]            ;read byte from system password
        80481f8:	38 d8                	cmp    al,bl                        ;compare both bytes
        80481fa:	75 22                	jne    0x804821e                    ;if not equal wrong password
        80481fc:	46                   	inc    esi                          ;next byte in user password
        80481fd:	47                   	inc    edi                          ;next byte in system password
        80481fe:	42                   	inc    edx                          ;increment counter
        80481ff:	eb ef                	jmp    0x80481f0                    ;check next byte
    ;***
        ;password is correct    
        8048201:	b8 04 00 00 00       	mov    eax,0x4
        8048206:	bb 01 00 00 00       	mov    ebx,0x1
        804820b:	b9 9c 92 04 08       	mov    ecx,0x804929c
        8048210:	ba 17 00 00 00       	mov    edx,0x17
        8048215:	cd 80                	int    0x80                                     ;syscall write
    ;***
        ;exit    
        8048217:	b8 01 00 00 00       	mov    eax,0x1
        804821c:	cd 80                	int    0x80                                     ;syscall exit
    ;***
        ;password is incorrect
        804821e:	b8 04 00 00 00       	mov    eax,0x4
        8048223:	bb 01 00 00 00       	mov    ebx,0x1
        8048228:	b9 b3 92 04 08       	mov    ecx,0x80492b3
        804822d:	ba 19 00 00 00       	mov    edx,0x19
        8048232:	cd 80                	int    0x80                                     ;syscall write
    ;***
        ;exit    
        8048234:	b8 01 00 00 00       	mov    eax,0x1
        8048239:	cd 80                	int    0x80                                     ;syscall exit
    ;***
        ;this subroutine gets the terminal stdin state and stores it in the termios structure
        ;syscall ioctl(1,0x5401,0x8049d6) or syscall ioctl(STDIN,TCGETS,termios_struc_pointer)        
        804823b:	b8 36 00 00 00       	mov    eax,0x36
        8048240:	bb 01 00 00 00       	mov    ebx,0x1                          ;stdin
        8048245:	b9 01 54 00 00       	mov    ecx,0x5401                       ;TCGETS
        804824a:	ba d6 94 04 08       	mov    edx,0x80494d6                    ;termios structure address
        804824f:	cd 80                	int    0x80                             ;syscall ioctl
        8048251:	c3                   	ret    
    ;***
        ;this subroutine sets the terminal stdin in a state specified by the termios structure
        ;syscall ioctl(1,0x5402,0x80494d6) or syscall ioctl(STDIN,TCSETS,termios_structure_pointer)        
        8048252:	b8 36 00 00 00       	mov    eax,0x36
        8048257:	bb 01 00 00 00       	mov    ebx,0x1                          ;stdin
        804825c:	b9 02 54 00 00       	mov    ecx,0x5402                       ;TCSETS
        8048261:	ba d6 94 04 08       	mov    edx,0x80494d6                    ;termios structure address
        8048266:	cd 80                	int    0x80                             ;syscall ioctl
        8048268:	c3                   	ret    
    ;***
        ;calculates the length of a zero terminated string pointed by esi and returns the value in ecx    
        8048269:	b9 00 00 00 00       	mov    ecx,0x0
        804826e:	ac                   	lods   al,BYTE PTR ds:[esi]
        804826f:	08 c0                	or     al,al
        8048271:	74 03                	je     0x8048276
        8048273:	41                   	inc    ecx
        8048274:	eb f8                	jmp    0x804826e
        8048276:	c3                   	ret
    ;***
        ;this part unlinks (remove -> not in trash!!) this program.
        ;eax = unlink(pid)
        8048277:	b8 0a 00 00 00       	mov    eax,0xa
        804827c:	8b 1d d6 92 04 08    	mov    ebx,DWORD PTR ds:0x80492d6               ;read command (our program) from 0x80492d6
        8048282:	cd 80                	int    0x80                                     ;syscall unlink, remove it
    ;***
        ;exit program: 
        8048284:	b8 01 00 00 00       	mov    eax,0x1                                  ;syscall exit
        8048289:	cd 80                	int    0x80

